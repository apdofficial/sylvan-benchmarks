aag 40 5 4 1 31
2
4
6
8
10
12 1
14 51
16 73
18 81
40
20 15 12
22 14 12
24 21 12
26 17 12
28 16 12
30 27 12
32 19 12
34 18 12
36 33 12
38 36 30
40 38 22
42 25 11
44 42 22
46 45 42
48 47 43
50 49 45
52 6 2
54 4 2
56 52 5
58 57 55
60 59 9
62 58 8
64 63 61
66 64 7
68 67 31
70 66 28
72 71 69
74 67 28
76 74 37
78 75 34
80 79 77
i0 controllable_c<0>
i1 controllable_c<1>
i2 in<0>
i3 in<1>
i4 controllable_s
l0 bench|n13
l1 bench|bad_out
l2 bench|state<0>_out
l3 bench|state<1>_out
o0 err
c
bench
This file was written by ABC on Sat Aug 31 20:24:55 2013
For information about AIGER format, refer to http://fmv.jku.at/aiger
-------------------------------
This AIGER file has been created by the following sequence of commands:
> vl2mv stay2.v   ---gives--> stay2.mv
> abc -c "read_blif_mv stay2.mv; write_aiger -s stay2n.aig"   ---gives--> stay2n.aig
> aigtoaig stay2n.aig stay2n.aag   ---gives--> stay2n.aag (this file)
Content of stay2.v:
// realizable
module bench(clk, in, controllable_s, controllable_c, err);
  input clk;
  input [1:0] in;
  input controllable_s;
  input [1:0] controllable_c;
  output err;
  reg [1:0] state;
  reg bad;
  wire [1:0] mul;
  wire [1:0] choose;

  assign err = bad & (state == 2'b11);
  mult2 m(in, controllable_c, mul);
  assign choose = controllable_c[1] ? {controllable_c[0:0],1'b0} : {mul[0:0],1'b0};

  initial
  begin
    state = 0;
    bad = 0;
  end

  always @ (posedge clk)
  begin
    state = state + (in != choose);
    if(bad | controllable_s)
      begin
        bad = 1;
      end
  end
endmodule

module mult2(a,b,r);
  input [1:0] a;
  input [1:0] b;
  output [1:0] r;
  wire [1:0] s0;
  wire [1:0] s1;
  assign s0 = b[0] ? a : 0;
  assign s1 = b[1] ? {a[0:0],1'b0} : 0;
  assign r  = s0+s1;
endmodule
-------------------------------
#!SYNTCOMP
STATUS : realizable
SOLVED_BY : 8/8 [SYNTCOMP2014-RealSeq]
SOLVED_IN : 0.004 [SYNTCOMP2014-RealSeq]
#.
