aag 403 17 10 1 376
2
4
6
8
10
12
14
16
18
20
22
24
26
28
30
32
34
36 1
38 135
40 751
42 759
44 767
46 775
48 783
50 791
52 799
54 807
124
56 39 36
58 38 36
60 57 36
62 41 36
64 40 36
66 63 36
68 43 36
70 42 36
72 69 36
74 45 36
76 44 36
78 75 36
80 47 36
82 46 36
84 81 36
86 49 36
88 48 36
90 87 36
92 51 36
94 50 36
96 93 36
98 53 36
100 52 36
102 99 36
104 55 36
106 54 36
108 105 36
110 72 66
112 110 78
114 112 84
116 114 90
118 116 96
120 118 102
122 120 108
124 122 58
126 61 35
128 126 58
130 129 126
132 131 127
134 133 129
136 18 2
138 16 2
140 136 17
142 141 139
144 143 21
146 142 20
148 147 145
150 20 2
152 18 4
154 152 151
156 153 150
158 157 155
160 152 150
162 16 4
164 159 17
166 165 163
168 167 23
170 166 22
172 171 169
174 22 2
176 20 4
178 177 175
180 178 160
182 176 175
184 182 161
186 185 181
188 177 174
190 188 161
192 191 186
194 176 174
196 194 160
198 197 192
200 18 6
202 200 198
204 201 199
206 205 203
208 200 199
210 16 6
212 207 17
214 213 211
216 215 25
218 214 24
220 219 217
222 24 2
224 22 4
226 176 160
228 174 160
230 229 227
232 230 195
234 225 223
236 234 233
238 224 223
240 238 232
242 241 237
244 225 222
246 244 232
248 247 242
250 224 222
252 250 233
254 253 248
256 20 6
258 257 254
260 258 208
262 256 254
264 262 209
266 265 261
268 257 255
270 268 209
272 271 266
274 256 255
276 274 208
278 277 272
280 18 8
282 280 278
284 281 279
286 285 283
288 280 279
290 16 8
292 287 17
294 293 291
296 295 27
298 294 26
300 299 297
302 26 2
304 24 4
306 233 224
308 233 222
310 309 307
312 310 251
314 305 303
316 314 313
318 304 303
320 318 312
322 321 317
324 305 302
326 324 312
328 327 322
330 304 302
332 330 313
334 333 328
336 22 6
338 256 208
340 255 208
342 341 339
344 342 275
346 337 334
348 346 345
350 336 334
352 350 344
354 353 349
356 337 335
358 356 344
360 359 354
362 336 335
364 362 345
366 365 360
368 20 8
370 369 366
372 370 288
374 368 366
376 374 289
378 377 373
380 369 367
382 380 289
384 383 378
386 368 367
388 386 288
390 389 384
392 18 10
394 392 390
396 393 391
398 397 395
400 392 391
402 16 10
404 399 17
406 405 403
408 407 29
410 406 28
412 411 409
414 28 2
416 26 4
418 313 304
420 313 302
422 421 419
424 422 331
426 417 415
428 426 425
430 416 415
432 430 424
434 433 429
436 417 414
438 436 424
440 439 434
442 416 414
444 442 425
446 445 440
448 24 6
450 345 336
452 345 335
454 453 451
456 454 363
458 449 446
460 458 457
462 448 446
464 462 456
466 465 461
468 449 447
470 468 456
472 471 466
474 448 447
476 474 457
478 477 472
480 22 8
482 368 288
484 367 288
486 485 483
488 486 387
490 481 478
492 490 489
494 480 478
496 494 488
498 497 493
500 481 479
502 500 488
504 503 498
506 480 479
508 506 489
510 509 504
512 20 10
514 513 510
516 514 400
518 512 510
520 518 401
522 521 517
524 513 511
526 524 401
528 527 522
530 512 511
532 530 400
534 533 528
536 18 12
538 536 534
540 537 535
542 541 539
544 536 535
546 16 12
548 543 17
550 549 547
552 551 31
554 550 30
556 555 553
558 30 2
560 28 4
562 425 416
564 425 414
566 565 563
568 566 443
570 561 559
572 570 569
574 560 559
576 574 568
578 577 573
580 561 558
582 580 568
584 583 578
586 560 558
588 586 569
590 589 584
592 26 6
594 457 448
596 457 447
598 597 595
600 598 475
602 593 590
604 602 601
606 592 590
608 606 600
610 609 605
612 593 591
614 612 600
616 615 610
618 592 591
620 618 601
622 621 616
624 24 8
626 489 480
628 489 479
630 629 627
632 630 507
634 625 622
636 634 633
638 624 622
640 638 632
642 641 637
644 625 623
646 644 632
648 647 642
650 624 623
652 650 633
654 653 648
656 22 10
658 512 400
660 511 400
662 661 659
664 662 531
666 657 654
668 666 665
670 656 654
672 670 664
674 673 669
676 657 655
678 676 664
680 679 674
682 656 655
684 682 665
686 685 680
688 20 12
690 689 686
692 690 544
694 688 686
696 694 545
698 697 693
700 689 687
702 700 545
704 703 698
706 688 687
708 706 544
710 709 704
712 18 14
714 712 710
716 713 711
718 717 715
720 16 14
722 719 17
724 723 721
726 725 33
728 724 32
730 729 727
732 148 19
734 732 172
736 734 220
738 736 300
740 738 412
742 740 556
744 742 730
746 745 67
748 744 64
750 749 747
752 745 64
754 752 73
756 753 70
758 757 755
760 752 70
762 760 79
764 761 76
766 765 763
768 760 76
770 768 85
772 769 82
774 773 771
776 768 82
778 776 91
780 777 88
782 781 779
784 776 88
786 784 97
788 785 94
790 789 787
792 784 94
794 792 103
796 793 100
798 797 795
800 792 100
802 800 109
804 801 106
806 805 803
i0 controllable_c<0>
i1 controllable_c<1>
i2 controllable_c<2>
i3 controllable_c<3>
i4 controllable_c<4>
i5 controllable_c<5>
i6 controllable_c<6>
i7 controllable_c<7>
i8 in<0>
i9 in<1>
i10 in<2>
i11 in<3>
i12 in<4>
i13 in<5>
i14 in<6>
i15 in<7>
i16 controllable_s
l0 bench|n37
l1 bench|bad_out
l2 bench|state<0>_out
l3 bench|state<1>_out
l4 bench|state<2>_out
l5 bench|state<3>_out
l6 bench|state<4>_out
l7 bench|state<5>_out
l8 bench|state<6>_out
l9 bench|state<7>_out
o0 err
c
bench
This file was written by ABC on Sat Aug 31 20:24:46 2013
For information about AIGER format, refer to http://fmv.jku.at/aiger
-------------------------------
This AIGER file has been created by the following sequence of commands:
> vl2mv stay8.v   ---gives--> stay8.mv
> abc -c "read_blif_mv stay8.mv; write_aiger -s stay8n.aig"   ---gives--> stay8n.aig
> aigtoaig stay8n.aig stay8n.aag   ---gives--> stay8n.aag (this file)
Content of stay8.v:
// realizable
module bench(clk, in, controllable_s, controllable_c, err);
  input clk;
  input [7:0] in;
  input controllable_s;
  input [7:0] controllable_c;
  output err;
  reg [7:0] state;
  reg bad;
  wire [7:0] mul;
  wire [7:0] choose;

  assign err = bad & (state == 8'b11111111);
  mult8 m(in, controllable_c, mul);
  assign choose = controllable_c[7] ? {controllable_c[6:0],1'b0} : {mul[6:0],1'b0};

  initial
  begin
    state = 0;
    bad = 0;
  end

  always @ (posedge clk)
  begin
    state = state + (in != choose);
    if(bad | controllable_s)
      begin
        bad = 1;
      end
  end
endmodule

module mult8(a,b,r);
  input [7:0] a;
  input [7:0] b;
  output [7:0] r;
  wire [7:0] s0;
  wire [7:0] s1;
  wire [7:0] s2;
  wire [7:0] s3;
  wire [7:0] s4;
  wire [7:0] s5;
  wire [7:0] s6;
  wire [7:0] s7;
  assign s0 = b[0] ? a : 0;
  assign s1 = b[1] ? {a[6:0],1'b0} : 0;
  assign s2 = b[2] ? {a[5:0],2'b00} : 0;
  assign s3 = b[3] ? {a[4:0],3'b000} : 0;
  assign s4 = b[4] ? {a[3:0],4'b0000} : 0;
  assign s5 = b[5] ? {a[2:0],5'b00000} : 0;
  assign s6 = b[6] ? {a[1:0],6'b000000} : 0;
  assign s7 = b[7] ? {a[0:0],7'b0000000} : 0;
  assign r  = s0+s1+s2+s3+s4+s5+s6+s7;
endmodule
-------------------------------
#!SYNTCOMP
STATUS : realizable
SOLVED_BY : 8/8 [SYNTCOMP2014-RealSeq]
SOLVED_IN : 0.052003 [SYNTCOMP2014-RealSeq]
#.
