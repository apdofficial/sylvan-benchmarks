aag 765 40 55 1 670
2
4
6
8
10
12
14
16
18
20
22
24
26
28
30
32
34
36
38
40
42
44
46
48
50
52
54
56
58
60
62
64
66
68
70
72
74
76
78
80
82 1
84 287
86 299
88 311
90 327
92 339
94 357
96 369
98 381
100 393
102 405
104 417
106 429
108 441
110 539
112 558
114 576
116 593
118 605
120 617
122 629
124 641
126 653
128 677
130 695
132 713
134 723
136 737
138 891
140 919
142 925
144 931
146 937
148 1291
150 1340
152 1378
154 1416
156 1423
158 1429
160 1435
162 1441
164 1447
166 1453
168 1454
170 1462
172 1472
174 1483
176 1489
178 1495
180 1501
182 1507
184 1513
186 1519
188 1525
190 1531
261
192 173 82
194 172 82
196 193 82
198 171 82
200 170 82
202 199 82
204 169 82
206 168 82
208 205 82
210 209 203
212 210 197
214 213 196
216 214 211
218 208 200
220 219 211
222 211 197
224 210 194
226 225 223
228 220 208
230 228 226
232 231 217
234 77 75
236 234 79
238 237 78
240 238 235
242 76 74
244 243 235
246 235 79
248 234 78
250 249 247
252 74 73
254 252 244
256 254 250
258 257 241
260 258 232
262 75 73
264 262 77
266 264 79
268 266 36
270 4 3
272 270 7
274 272 268
276 85 82
278 84 82
280 277 82
282 274 8
284 278 275
286 285 283
288 87 82
290 86 82
292 289 82
294 274 10
296 290 275
298 297 295
300 89 82
302 88 82
304 301 82
306 274 12
308 302 275
310 309 307
312 262 76
314 312 79
316 91 82
318 90 82
320 317 82
322 314 14
324 318 315
326 325 323
328 93 82
330 92 82
332 329 82
334 314 16
336 330 315
338 337 335
340 5 2
342 340 7
344 342 268
346 95 82
348 94 82
350 347 82
352 344 8
354 348 345
356 355 353
358 97 82
360 96 82
362 359 82
364 344 10
366 360 345
368 367 365
370 99 82
372 98 82
374 371 82
376 314 50
378 372 315
380 379 377
382 101 82
384 100 82
386 383 82
388 314 52
390 384 315
392 391 389
394 103 82
396 102 82
398 395 82
400 314 54
402 396 315
404 403 401
406 105 82
408 104 82
410 407 82
412 314 28
414 408 315
416 415 413
418 107 82
420 106 82
422 419 82
424 314 30
426 420 315
428 427 425
430 109 82
432 108 82
434 431 82
436 314 32
438 432 315
440 439 437
442 75 72
444 442 77
446 444 78
448 111 82
450 110 82
452 449 82
454 113 82
456 112 82
458 455 82
460 115 82
462 114 82
464 461 82
466 457 451
468 466 463
470 468 446
472 361 350
474 472 470
476 362 349
478 476 470
480 362 350
482 480 470
484 292 280
486 484 304
488 486 482
490 457 452
492 490 463
494 492 446
496 494 70
498 458 451
500 498 463
502 500 446
504 502 80
506 458 452
508 506 463
510 508 446
512 510 38
514 466 464
516 514 446
518 516 38
520 519 450
522 520 513
524 522 505
526 524 497
528 526 483
530 528 489
532 531 489
534 533 479
536 534 475
538 537 475
540 519 456
542 540 513
544 542 505
546 544 497
548 546 483
550 548 489
552 551 489
554 553 479
556 555 479
558 557 475
560 519 462
562 560 513
564 562 505
566 564 497
568 566 483
570 569 483
572 571 489
574 572 479
576 574 475
578 252 77
580 578 79
582 117 82
584 116 82
586 583 82
588 580 56
590 584 581
592 591 589
594 119 82
596 118 82
598 595 82
600 580 58
602 596 581
604 603 601
606 121 82
608 120 82
610 607 82
612 580 60
614 608 581
616 615 613
618 123 82
620 122 82
622 619 82
624 580 62
626 620 581
628 627 625
630 125 82
632 124 82
634 631 82
636 580 64
638 632 581
640 639 637
642 127 82
644 126 82
646 643 82
648 580 66
650 644 581
652 651 649
654 4 2
656 654 7
658 656 268
660 187 82
662 186 82
664 661 82
666 129 82
668 128 82
670 667 82
672 662 658
674 668 659
676 675 673
678 189 82
680 188 82
682 679 82
684 131 82
686 130 82
688 685 82
690 680 658
692 686 659
694 693 691
696 191 82
698 190 82
700 697 82
702 133 82
704 132 82
706 703 82
708 698 658
710 704 659
712 711 709
714 270 6
716 714 268
718 716 12
720 717 12
722 721 719
724 266 37
726 5 3
728 726 7
730 728 724
732 730 8
734 731 8
736 735 733
738 136 82
740 739 8
742 139 82
744 138 82
746 743 82
748 744 741
750 141 82
752 140 82
754 751 82
756 754 745
758 167 82
760 166 82
762 759 82
764 175 82
766 174 82
768 765 82
770 177 82
772 176 82
774 771 82
776 178 82
778 773 768
780 778 777
782 781 762
784 774 767
786 784 777
788 787 761
790 789 783
792 584 281
794 587 278
796 795 793
798 596 293
800 599 290
802 801 799
804 608 305
806 611 302
808 807 805
810 802 796
812 810 808
814 812 790
816 143 82
818 142 82
820 817 82
822 821 620
824 818 623
826 825 823
828 145 82
830 144 82
832 829 82
834 833 632
836 830 635
838 837 835
840 147 82
842 146 82
844 841 82
846 845 644
848 842 647
850 849 847
852 838 826
854 852 850
856 854 814
858 135 82
860 859 82
862 860 856
864 744 35
866 865 35
868 863 744
870 867 862
872 871 869
874 754 746
876 874 68
878 877 744
880 873 756
882 878 757
884 883 881
886 748 730
888 885 731
890 889 887
892 752 741
894 893 741
896 752 35
898 897 35
900 863 752
902 899 862
904 903 901
906 877 752
908 905 756
910 906 757
912 911 909
914 895 730
916 913 731
918 917 915
920 278 274
922 818 275
924 923 921
926 290 274
928 830 275
930 929 927
932 302 274
934 842 275
936 935 933
938 149 82
940 148 82
942 939 82
944 151 82
946 150 82
948 945 82
950 153 82
952 152 82
954 951 82
956 155 82
958 154 82
960 957 82
962 947 941
964 962 953
966 964 959
968 74 72
970 968 77
972 970 79
974 972 966
976 947 942
978 976 953
980 978 959
982 500 80
984 982 980
986 984 446
988 948 941
990 988 953
992 990 959
994 514 38
996 994 992
998 996 446
1000 948 942
1002 1000 953
1004 1002 959
1006 1004 314
1008 1006 49
1010 1006 48
1012 962 954
1014 1012 959
1016 1014 876
1018 662 411
1020 665 408
1022 1021 1019
1024 680 423
1026 683 420
1028 1027 1025
1030 698 435
1032 701 432
1034 1033 1031
1036 1028 1022
1038 1036 1034
1040 181 82
1042 180 82
1044 1041 82
1046 1045 668
1048 1042 671
1050 1049 1047
1052 183 82
1054 182 82
1056 1053 82
1058 1057 686
1060 1054 689
1062 1061 1059
1064 185 82
1066 184 82
1068 1065 82
1070 1069 704
1072 1066 707
1074 1073 1071
1076 1062 1050
1078 1076 1074
1080 1078 1038
1082 375 278
1084 372 281
1086 1085 1083
1088 387 290
1090 384 293
1092 1091 1089
1094 399 302
1096 396 305
1098 1097 1095
1100 1092 1086
1102 1100 1098
1104 1102 1080
1106 161 82
1108 160 82
1110 1107 82
1112 1111 818
1114 1108 821
1116 1115 1113
1118 163 82
1120 162 82
1122 1119 82
1124 1123 830
1126 1120 833
1128 1127 1125
1130 165 82
1132 164 82
1134 1131 82
1136 1135 842
1138 1132 845
1140 1139 1137
1142 1128 1116
1144 1142 1140
1146 1144 1104
1148 157 82
1150 156 82
1152 1149 82
1154 1150 321
1156 1153 318
1158 1157 1155
1160 159 82
1162 158 82
1164 1161 82
1166 1162 333
1168 1165 330
1170 1169 1167
1172 1170 1158
1174 1172 1146
1176 1174 761
1178 1177 1016
1180 1178 446
1182 1016 40
1184 1182 446
1186 1016 41
1188 1186 446
1190 976 954
1192 1190 959
1194 1192 876
1196 1174 762
1198 1197 1194
1200 1198 446
1202 1194 40
1204 1202 446
1206 1194 41
1208 1206 446
1210 988 954
1212 1210 959
1214 442 76
1216 1214 79
1218 1216 1212
1220 1000 954
1222 1220 959
1224 252 76
1226 1224 79
1228 1226 1222
1230 964 960
1232 968 76
1234 1232 79
1236 1234 1230
1238 978 960
1240 264 78
1242 1240 1238
1244 1243 940
1246 1245 1243
1248 1247 1237
1250 1249 1237
1252 1251 1229
1254 1253 1229
1256 1255 1219
1258 1257 1219
1260 1259 1209
1262 1261 1209
1264 1263 1205
1266 1264 1201
1268 1266 1189
1270 1269 1189
1272 1271 1185
1274 1272 1181
1276 1274 1011
1278 1277 1011
1280 1279 1009
1282 1280 999
1284 1283 999
1286 1285 987
1288 1286 975
1290 1289 975
1292 1243 946
1294 1293 1243
1296 1295 1237
1298 1297 1237
1300 1299 1229
1302 1301 1229
1304 1303 1219
1306 1305 1219
1308 1307 1209
1310 1308 1205
1312 1310 1201
1314 1313 1201
1316 1315 1189
1318 1317 1189
1320 1319 1185
1322 1321 1185
1324 1323 1181
1326 1325 1181
1328 1327 1011
1330 1328 1009
1332 1330 999
1334 1333 999
1336 1335 987
1338 1337 987
1340 1339 975
1342 1243 952
1344 1342 1237
1346 1344 1229
1348 1346 1219
1350 1348 1209
1352 1350 1205
1354 1352 1201
1356 1354 1189
1358 1357 1189
1360 1359 1185
1362 1361 1185
1364 1363 1181
1366 1364 1011
1368 1367 1011
1370 1369 1009
1372 1371 1009
1374 1373 999
1376 1374 987
1378 1376 975
1380 1243 958
1382 1380 1237
1384 1382 1229
1386 1384 1219
1388 1386 1209
1390 1389 1209
1392 1391 1205
1394 1393 1205
1396 1395 1201
1398 1397 1201
1400 1399 1189
1402 1400 1185
1404 1402 1181
1406 1405 1181
1408 1407 1011
1410 1408 1009
1412 1410 999
1414 1412 987
1416 1414 975
1418 580 24
1420 1150 581
1422 1421 1419
1424 580 26
1426 1162 581
1428 1427 1425
1430 314 42
1432 1108 315
1434 1433 1431
1436 314 44
1438 1120 315
1440 1439 1437
1442 314 46
1444 1132 315
1446 1445 1443
1448 730 10
1450 731 10
1452 1451 1449
1454 1005 209
1456 206 203
1458 207 200
1460 1459 1457
1462 1461 1005
1464 206 200
1466 1464 197
1468 1465 194
1470 1469 1467
1472 1471 1005
1474 654 6
1476 1474 268
1478 1476 8
1480 1477 766
1482 1481 1479
1484 1476 10
1486 1477 772
1488 1487 1485
1490 1476 12
1492 1477 776
1494 1493 1491
1496 314 18
1498 1042 315
1500 1499 1497
1502 314 20
1504 1054 315
1506 1505 1503
1508 314 22
1510 1066 315
1512 1511 1509
1514 658 8
1516 662 659
1518 1517 1515
1520 658 10
1522 680 659
1524 1523 1521
1526 658 12
1528 698 659
1530 1529 1527
i0 controllable_addr_abs<0>
i1 controllable_addr_abs<1>
i2 controllable_addr_abs<2>
i3 controllable_write8_val_abs<0>
i4 controllable_write8_val_abs<1>
i5 controllable_write8_val_abs<2>
i6 i_reqBuf_abs<0>
i7 i_reqBuf_abs<1>
i8 i_reqLBA1_abs<0>
i9 i_reqLBA1_abs<1>
i10 i_reqLBA1_abs<2>
i11 controllable_fillPrdAddr_abs<0>
i12 controllable_fillPrdAddr_abs<1>
i13 i_reqLBA0_abs<0>
i14 i_reqLBA0_abs<1>
i15 i_reqLBA0_abs<2>
i16 controllable_dmaStartClass_conc
i17 controllable_bank_abs
i18 controllable_featXFRClass_conc
i19 i_transSuccess_conc
i20 i_reqSect1_abs<0>
i21 i_reqSect1_abs<1>
i22 i_reqSect1_abs<2>
i23 i_osReqType_conc
i24 i_reqSect0_abs<0>
i25 i_reqSect0_abs<1>
i26 i_reqSect0_abs<2>
i27 controllable_fillPrdNSect_abs<0>
i28 controllable_fillPrdNSect_abs<1>
i29 controllable_fillPrdNSect_abs<2>
i30 controllable_fillPrdNSect_abs<3>
i31 controllable_fillPrdNSect_abs<4>
i32 controllable_fillPrdNSect_abs<5>
i33 controllable_busMasterClass_conc
i34 controllable_featWCClass_conc
i35 controllable_tag_conc<0>
i36 controllable_tag_conc<1>
i37 controllable_tag_conc<2>
i38 controllable_tag_conc<3>
i39 controllable_featNWCClass_conc
l0 n83
l1 state_regSectors0_abs<0>_out
l2 state_regSectors0_abs<1>_out
l3 state_regSectors0_abs<2>_out
l4 state_os_buf_abs<0>_out
l5 state_os_buf_abs<1>_out
l6 state_regFeature0_abs<0>_out
l7 state_regFeature0_abs<1>_out
l8 state_os_sect0_abs<0>_out
l9 state_os_sect0_abs<1>_out
l10 state_os_sect0_abs<2>_out
l11 state_os_lba0_abs<0>_out
l12 state_os_lba0_abs<1>_out
l13 state_os_lba0_abs<2>_out
l14 state_setFeatState_conc<0>_out
l15 state_setFeatState_conc<1>_out
l16 state_setFeatState_conc<2>_out
l17 state_bufSectors_abs<0>_out
l18 state_bufSectors_abs<1>_out
l19 state_bufSectors_abs<2>_out
l20 state_bufSectors_abs<3>_out
l21 state_bufSectors_abs<4>_out
l22 state_bufSectors_abs<5>_out
l23 state_regLBALow1_abs<0>_out
l24 state_regLBALow1_abs<1>_out
l25 state_regLBALow1_abs<2>_out
l26 state_regDev_LBA_abs_out
l27 state_regBMCommand_Start_abs_out
l28 state_stDMACmd_conc<0>_out
l29 state_stDMACmd_conc<1>_out
l30 state_regSectors1_abs<0>_out
l31 state_regSectors1_abs<1>_out
l32 state_regSectors1_abs<2>_out
l33 state_osState_conc<0>_out
l34 state_osState_conc<1>_out
l35 state_osState_conc<2>_out
l36 state_osState_conc<3>_out
l37 state_bufAddr_abs<0>_out
l38 state_bufAddr_abs<1>_out
l39 state_os_sect1_abs<0>_out
l40 state_os_sect1_abs<1>_out
l41 state_os_sect1_abs<2>_out
l42 state_regBMCommand_RW_abs_out
l43 fair_cnt<0>_out
l44 fair_cnt<1>_out
l45 fair_cnt<2>_out
l46 state_regCommand_abs<0>_out
l47 state_regCommand_abs<1>_out
l48 state_regCommand_abs<2>_out
l49 state_os_lba1_abs<0>_out
l50 state_os_lba1_abs<1>_out
l51 state_os_lba1_abs<2>_out
l52 state_regLBALow0_abs<0>_out
l53 state_regLBALow0_abs<1>_out
l54 state_regLBALow0_abs<2>_out
o0 o_err
c
ide_hard_drive_controller_2
This file was written by ABC on Tue Mar 11 20:24:24 2014
For information about AIGER format, refer to http://fmv.jku.at/aiger
-------------------------------
This AIGER file has been created by the following sequence of commands:
> vl2mv driver_d5.v   ---gives--> driver_d5.mv
> abc -c "read_blif_mv driver_d5.mv; write_aiger -s driver_d5n.aig"   ---gives--> driver_d5n.aig
> aigtoaig driver_d5n.aig driver_d5n.aag   ---gives--> driver_d5n.aag (this file)
Content of driver_d5.v:
// IDE hard drive controller specification and operating system interface
// specification for device driver synthesis.
// This file describes a GR(1) game played by a device driver for an IDE hard
// disk against its environment consisting of the hard disk and operating
// system.

`define WIDTH1 2
`define WIDTH2 1

`define CMD_READ_DMA_EXT  1
`define CMD_WRITE_DMA_EXT 2
`define FEAT_WC           1
`define FEAT_NWC          2
`define FEAT_XFR_MODE     3
`define XM_ULTRA_DMA      7

`define RCMD              1
`define REG_FEATURE0      1
`define REG_SECTORS       2
`define REG_LBA_LOW       3
`define REG_LBA_MID       4
`define REG_LBA_HIGH      5
`define REG_DEV           6
`define REG_ERRCMD        7

`define RDMA              0
`define REG_BM_COMMAND    0

//typedef enum {read=0, write=1} i_osReqType_enum;
`define read              0
`define write             1

//typedef enum {write8, write32, fillPrd, reset, os_req, ack_read_succ, ack_read_fail, ack_write_succ, ack_write_fail, class_event} controllable_tag_enum;
`define write8            0
`define write32           1
`define fillPrd           2
`define reset             3
`define os_req            4
`define ack_read_succ     5
`define ack_read_fail     6
`define ack_write_succ    7
`define ack_write_fail    8
`define class_event       9

//typedef enum {wait_bm_ready=0, dma_read=1, bm_read_prd=2, bm_ready=3} state_stDMACmd_enum;
`define wait_bm_ready     0
`define dma_read          1
`define bm_read_prd       2
`define bm_ready          3


//typedef enum {setFeatIdle=0, setFeatWC=1, setFeatNWC=2, setFeatXFR0=3, setFeatXFR1=4} state_setFeatState_enum;
`define setFeatIdle       0
`define setFeatWC         1
`define setFeatNWC        2
`define setFeatXFR0       3
`define setFeatXFR1       4

//typedef enum {os_init=0, os_reset=1, os_write_cache=2, os_idle=3, os_read_pending=4, os_write_pending=5, os_read_ack_succ=6, os_read_ack_fail=7, os_write_ack_succ=8, os_write_ack_fail=9, os_error=10} state_osState_enum;
`define os_init           0
`define os_reset          1
`define os_write_cache    2
`define os_idle           3
`define os_read_pending   4
`define os_write_pending  5
`define os_read_ack_succ  6
`define os_read_ack_fail  7
`define os_write_ack_succ 8
`define os_write_ack_fail 9
`define os_error          10

module ide_hard_drive_controller_2(
        o_err,
        i_clk,
        i_osReqType_conc,
        i_reqLBA0_abs,
        i_reqLBA1_abs,
        i_reqSect0_abs,
        i_reqSect1_abs,
        i_reqBuf_abs,
        i_transSuccess_conc,
        controllable_tag_conc,
        controllable_bank_abs,
        controllable_addr_abs,
        controllable_write8_val_abs,
        controllable_fillPrdAddr_abs,
        controllable_fillPrdNSect_abs,
        controllable_featWCClass_conc,
        controllable_featNWCClass_conc,
        controllable_featXFRClass_conc,
        controllable_busMasterClass_conc,
        controllable_dmaStartClass_conc );

input i_clk;
input i_osReqType_conc ;
input [`WIDTH1:0] i_reqLBA0_abs ;
input [`WIDTH1:0] i_reqLBA1_abs ;
input [`WIDTH1:0] i_reqSect0_abs ;
input [`WIDTH1:0] i_reqSect1_abs ;
input [`WIDTH2:0] i_reqBuf_abs ;
input i_transSuccess_conc ;
input [3:0] controllable_tag_conc ;
input controllable_bank_abs ;
input [2:0] controllable_addr_abs ;
input [`WIDTH1:0] controllable_write8_val_abs ;
input [`WIDTH2:0] controllable_fillPrdAddr_abs ;
input [5:0] controllable_fillPrdNSect_abs ;
input controllable_featWCClass_conc ;
input controllable_featNWCClass_conc ;
input controllable_featXFRClass_conc ;
input controllable_busMasterClass_conc ;
input controllable_dmaStartClass_conc ;
output o_err;

reg [1:0] state_stDMACmd_conc ;
reg [2:0] state_setFeatState_conc ;
reg [1:0] state_regFeature0_abs ;
reg [`WIDTH1:0] state_regSectors0_abs ;
reg [`WIDTH1:0] state_regSectors1_abs ;
reg [`WIDTH1:0] state_regLBALow0_abs ;
reg [`WIDTH1:0] state_regLBALow1_abs ;
reg state_regDev_LBA_abs ;
reg [`WIDTH1:0] state_regCommand_abs ;
reg state_regBMCommand_Start_abs ;
reg state_regBMCommand_RW_abs ;
reg [`WIDTH2:0] state_bufAddr_abs ;
reg [5:0] state_bufSectors_abs ;

reg [3:0] state_osState_conc ;
reg [`WIDTH1:0] state_os_lba0_abs ;
reg [`WIDTH1:0] state_os_lba1_abs ;
reg [`WIDTH1:0] state_os_sect0_abs ;
reg [`WIDTH1:0] state_os_sect1_abs ;
reg [`WIDTH2:0] state_os_buf_abs ;

reg [2:0] fair_cnt;

wire transferMode3;
wire nwc;
wire bm_event;
wire transferCorrect;
wire transferCorrect_0;
wire transferCorrect_1;
wire buechi_satisfied;
wire [1:0] next_state_stDMACmd_conc ;
wire [2:0] next_state_setFeatState_conc ;
wire [1:0] next_state_regFeature0_abs ;
wire [`WIDTH1:0] next_state_regSectors0_abs ;
wire [`WIDTH1:0] next_state_regSectors1_abs ;
wire [`WIDTH1:0] next_state_regLBALow0_abs ;
wire [`WIDTH1:0] next_state_regLBALow1_abs ;
wire next_state_regDev_LBA_abs ;
wire [`WIDTH1:0] next_state_regCommand_abs ;
wire next_state_regBMCommand_Start_abs ;
wire next_state_regBMCommand_RW_abs ;
wire [`WIDTH2:0] next_state_bufAddr_abs ;
wire [5:0] next_state_bufSectors_abs ;

wire [3:0] next_state_osState_conc ;
wire [`WIDTH1:0] next_state_os_lba0_abs ;
wire [`WIDTH1:0] next_state_os_lba1_abs ;
wire [`WIDTH1:0] next_state_os_sect0_abs ;
wire [`WIDTH1:0] next_state_os_sect1_abs ;
wire [`WIDTH2:0] next_state_os_buf_abs ;

// some abbreviations:
assign transferMode3 = (state_setFeatState_conc==`setFeatXFR1 && controllable_featXFRClass_conc==1);
assign nwc =           (state_setFeatState_conc==`setFeatNWC  && controllable_featNWCClass_conc==1);
assign bm_event = (state_stDMACmd_conc==`bm_ready && controllable_busMasterClass_conc==1);
assign transferCorrect = (state_os_lba0_abs==state_regLBALow0_abs    &&
                          state_os_lba1_abs==state_regLBALow1_abs    &&
                          state_os_sect0_abs==state_regSectors0_abs  &&
                          state_os_sect1_abs==state_regSectors1_abs  &&
                          state_os_buf_abs==state_bufAddr_abs);
assign transferCorrect_0 = (transferCorrect      &&
                            state_regBMCommand_RW_abs==0);
assign transferCorrect_1 = (transferCorrect      &&
                            state_regBMCommand_RW_abs==1);


// state updates:
  //Device state updates:
assign next_state_regFeature0_abs  = (controllable_tag_conc==`write8 && controllable_bank_abs==`RCMD && controllable_addr_abs==`REG_FEATURE0) ? controllable_write8_val_abs  : state_regFeature0_abs;
assign next_state_regSectors0_abs  = (controllable_tag_conc==`write8 && controllable_bank_abs==`RCMD && controllable_addr_abs==`REG_SECTORS)  ? controllable_write8_val_abs  : state_regSectors0_abs;
assign next_state_regSectors1_abs  = (controllable_tag_conc==`write8 && controllable_bank_abs==`RCMD && controllable_addr_abs==`REG_SECTORS)  ? state_regSectors0_abs : state_regSectors1_abs;
assign next_state_regLBALow0_abs   = (controllable_tag_conc==`write8 && controllable_bank_abs==`RCMD && controllable_addr_abs==`REG_LBA_LOW)  ? controllable_write8_val_abs  : state_regLBALow0_abs;
assign next_state_regLBALow1_abs   = (controllable_tag_conc==`write8 && controllable_bank_abs==`RCMD && controllable_addr_abs==`REG_LBA_LOW)  ? state_regLBALow0_abs  : state_regLBALow1_abs;
assign next_state_regDev_LBA_abs   = (controllable_tag_conc==`write8 && controllable_bank_abs==`RCMD && controllable_addr_abs==`REG_DEV)      ? controllable_write8_val_abs[2:2] : state_regDev_LBA_abs;
assign next_state_regCommand_abs   = (controllable_tag_conc==`write8 && controllable_bank_abs==`RCMD && controllable_addr_abs==`REG_ERRCMD)   ? controllable_write8_val_abs  : state_regCommand_abs;
assign next_state_regBMCommand_Start_abs = (controllable_tag_conc==`write8 && controllable_bank_abs==`RDMA && controllable_addr_abs==`REG_BM_COMMAND) ? controllable_write8_val_abs[0:0] : state_regBMCommand_Start_abs;
assign next_state_regBMCommand_RW_abs = (controllable_tag_conc==`write8 && controllable_bank_abs==`RDMA && controllable_addr_abs==`REG_BM_COMMAND) ? controllable_write8_val_abs[1:1] : state_regBMCommand_RW_abs;
assign next_state_bufAddr_abs = (controllable_tag_conc==`fillPrd) ? controllable_fillPrdAddr_abs : state_bufAddr_abs;
assign next_state_bufSectors_abs = (controllable_tag_conc==`fillPrd) ? controllable_fillPrdNSect_abs : state_bufSectors_abs;

assign next_state_setFeatState_conc = (controllable_tag_conc==`class_event && state_setFeatState_conc==`setFeatIdle && state_regFeature0_abs==`FEAT_WC) ? `setFeatWC :
                 ((controllable_tag_conc==`class_event && state_setFeatState_conc==`setFeatIdle && state_regFeature0_abs==`FEAT_NWC) ? `setFeatNWC :
                 ((controllable_tag_conc==`class_event && state_setFeatState_conc==`setFeatIdle && state_regFeature0_abs==`FEAT_XFR_MODE && state_regSectors0_abs==`XM_ULTRA_DMA) ? `setFeatXFR0 :
                 ((controllable_tag_conc==`class_event && state_setFeatState_conc==`setFeatIdle && state_regFeature0_abs==`FEAT_XFR_MODE) ? `setFeatXFR1 :
                 ((controllable_tag_conc==`class_event && state_setFeatState_conc==`setFeatWC   && controllable_featWCClass_conc==1) ? `setFeatIdle :
                 ((controllable_tag_conc==`class_event && state_setFeatState_conc==`setFeatNWC  && controllable_featNWCClass_conc==1) ? `setFeatIdle :
                 ((controllable_tag_conc==`class_event && state_setFeatState_conc==`setFeatXFR0 && controllable_featXFRClass_conc==1) ? `setFeatIdle :
                 ((controllable_tag_conc==`class_event && state_setFeatState_conc==`setFeatXFR1 && controllable_featXFRClass_conc==1) ? `setFeatIdle : state_setFeatState_conc)))))));

assign next_state_stDMACmd_conc = (controllable_tag_conc==`write8 && controllable_bank_abs==`RDMA && controllable_addr_abs==`REG_BM_COMMAND) ?
               (
                 (state_regBMCommand_Start_abs==0 && controllable_write8_val_abs[0:0]==1) ? `bm_read_prd : state_stDMACmd_conc
               ) :
               (
                 (state_stDMACmd_conc==`bm_read_prd) ?
                 (((state_regBMCommand_RW_abs == 1 && state_regCommand_abs != `CMD_READ_DMA_EXT) || (state_regBMCommand_RW_abs == 0 && state_regCommand_abs != `CMD_WRITE_DMA_EXT) || (state_regSectors0_abs != state_bufSectors_abs[`WIDTH1:0]) || (state_regSectors1_abs != state_bufSectors_abs[5:3]) || state_regDev_LBA_abs != 1) ? state_stDMACmd_conc : ((controllable_dmaStartClass_conc==1) ? `bm_ready : state_stDMACmd_conc)) :
                 ((state_stDMACmd_conc==`bm_ready && controllable_busMasterClass_conc==1) ? `wait_bm_ready : state_stDMACmd_conc)
               );

//OS state updates
assign next_state_os_lba0_abs = (controllable_tag_conc==`os_req) ? i_reqLBA0_abs : state_os_lba0_abs;
assign next_state_os_lba1_abs = (controllable_tag_conc==`os_req) ? i_reqLBA1_abs : state_os_lba1_abs;
assign next_state_os_sect0_abs = (controllable_tag_conc==`os_req) ? i_reqSect0_abs : state_os_sect0_abs;
assign next_state_os_sect1_abs = (controllable_tag_conc==`os_req) ? i_reqSect1_abs : state_os_sect1_abs;
assign next_state_os_buf_abs = (controllable_tag_conc==`os_req) ? i_reqBuf_abs : state_os_buf_abs;

assign next_state_osState_conc = (state_osState_conc==`os_init && controllable_tag_conc==`reset) ? `os_reset :
      ((state_osState_conc==`os_reset && nwc && controllable_tag_conc==`class_event) ? `os_write_cache :
      ((state_osState_conc==`os_write_cache && transferMode3 && controllable_tag_conc==`class_event) ? `os_idle :
      ((state_osState_conc==`os_idle && controllable_tag_conc==`os_req && i_osReqType_conc==`read) ? `os_read_pending :
      ((state_osState_conc==`os_idle && controllable_tag_conc==`os_req && i_osReqType_conc==`write) ? `os_write_pending :
      ((state_osState_conc==`os_read_pending && bm_event && !transferCorrect_0 && controllable_tag_conc==`class_event) ? `os_error :
      ((state_osState_conc==`os_read_pending && bm_event && i_transSuccess_conc==1 && controllable_tag_conc==`class_event) ? `os_read_ack_succ :
      ((state_osState_conc==`os_read_pending && bm_event && i_transSuccess_conc==0 && controllable_tag_conc==`class_event) ? `os_read_ack_fail :
      ((state_osState_conc==`os_write_pending && bm_event && !transferCorrect_1 && controllable_tag_conc==`class_event) ? `os_error :
      ((state_osState_conc==`os_write_pending && bm_event && i_transSuccess_conc==1 && controllable_tag_conc==`class_event) ? `os_write_ack_succ :
      ((state_osState_conc==`os_write_pending && bm_event && i_transSuccess_conc==0 && controllable_tag_conc==`class_event) ? `os_write_ack_fail :
      ((state_osState_conc==`os_read_ack_succ && controllable_tag_conc==`ack_read_succ) ? `os_idle :
      ((state_osState_conc==`os_read_ack_fail && controllable_tag_conc==`ack_read_fail) ? `os_idle :
      ((state_osState_conc==`os_write_ack_succ && controllable_tag_conc==`ack_write_succ) ? `os_idle :
      ((state_osState_conc==`os_write_ack_fail && controllable_tag_conc==`ack_write_fail) ? `os_idle : state_osState_conc))))))))))))));


// buechi-to-safety construction:                            
assign buechi_satisfied = (state_osState_conc == `os_idle);                          
                            
assign o_err = (fair_cnt >= 5) || controllable_tag_conc >= 10;

initial
 begin
  state_stDMACmd_conc = `wait_bm_ready;
  state_setFeatState_conc = `setFeatIdle;
  state_regFeature0_abs = 0;
  state_regSectors0_abs = 0;
  state_regSectors1_abs = 0;
  state_regLBALow0_abs = 0;
  state_regLBALow1_abs = 0;
  state_regDev_LBA_abs = 0;
  state_regCommand_abs = 0;
  state_regBMCommand_Start_abs = 0;
  state_regBMCommand_RW_abs = 0;
  state_bufAddr_abs = 0;
  state_bufSectors_abs = 0;
  state_osState_conc = `os_init;
  state_os_lba0_abs = 0;
  state_os_lba1_abs = 0;
  state_os_sect0_abs = 0;
  state_os_sect1_abs = 0;
  state_os_buf_abs = 0;
  fair_cnt = 0;
 end

always @(posedge i_clk)
 begin

  if(buechi_satisfied)
   begin
    fair_cnt = 0;
   end
  else
   begin
    fair_cnt = fair_cnt + 1;
   end
 
  //Device state updates:
  state_regFeature0_abs          = next_state_regFeature0_abs ;
  state_regSectors0_abs          = next_state_regSectors0_abs ;
  state_regSectors1_abs          = next_state_regSectors1_abs ;
  state_regLBALow0_abs           = next_state_regLBALow0_abs ;
  state_regLBALow1_abs           = next_state_regLBALow1_abs ;
  state_regDev_LBA_abs           = next_state_regDev_LBA_abs ;
  state_regCommand_abs           = next_state_regCommand_abs ;
  state_regBMCommand_Start_abs   = next_state_regBMCommand_Start_abs ;
  state_regBMCommand_RW_abs      = next_state_regBMCommand_RW_abs ;
  state_bufAddr_abs              = next_state_bufAddr_abs ;
  state_bufSectors_abs           = next_state_bufSectors_abs ;
  state_setFeatState_conc        = next_state_setFeatState_conc ;
  state_stDMACmd_conc            = next_state_stDMACmd_conc ;
  state_os_lba0_abs              = next_state_os_lba0_abs ;
  state_os_lba1_abs              = next_state_os_lba1_abs ;
  state_os_sect0_abs             = next_state_os_sect0_abs ;
  state_os_sect1_abs             = next_state_os_sect1_abs ;
  state_os_buf_abs               = next_state_os_buf_abs ;
  state_osState_conc             = next_state_osState_conc ;
 end
 
 
endmodule
-------------------------------
