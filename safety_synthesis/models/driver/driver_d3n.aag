aag 752 40 54 1 658
2
4
6
8
10
12
14
16
18
20
22
24
26
28
30
32
34
36
38
40
42
44
46
48
50
52
54
56
58
60
62
64
66
68
70
72
74
76
78
80
82 1
84 271
86 283
88 295
90 311
92 323
94 341
96 353
98 365
100 377
102 389
104 401
106 413
108 425
110 523
112 542
114 560
116 577
118 589
120 601
122 613
124 625
126 637
128 661
130 679
132 697
134 707
136 721
138 875
140 903
142 909
144 915
146 921
148 1275
150 1324
152 1362
154 1400
156 1407
158 1413
160 1419
162 1425
164 1431
166 1437
168 1438
170 1446
172 1457
174 1463
176 1469
178 1475
180 1481
182 1487
184 1493
186 1499
188 1505
245
190 171 82
192 170 82
194 191 82
196 169 82
198 168 82
200 197 82
202 201 195
204 203 194
206 204 200
208 200 195
210 201 192
212 211 209
214 212 200
216 215 207
218 77 75
220 218 79
222 221 78
224 222 219
226 76 74
228 227 219
230 219 79
232 218 78
234 233 231
236 74 73
238 236 228
240 238 234
242 241 225
244 242 216
246 75 73
248 246 77
250 248 79
252 250 36
254 4 3
256 254 7
258 256 252
260 85 82
262 84 82
264 261 82
266 258 8
268 262 259
270 269 267
272 87 82
274 86 82
276 273 82
278 258 10
280 274 259
282 281 279
284 89 82
286 88 82
288 285 82
290 258 12
292 286 259
294 293 291
296 246 76
298 296 79
300 91 82
302 90 82
304 301 82
306 298 14
308 302 299
310 309 307
312 93 82
314 92 82
316 313 82
318 298 16
320 314 299
322 321 319
324 5 2
326 324 7
328 326 252
330 95 82
332 94 82
334 331 82
336 328 8
338 332 329
340 339 337
342 97 82
344 96 82
346 343 82
348 328 10
350 344 329
352 351 349
354 99 82
356 98 82
358 355 82
360 298 50
362 356 299
364 363 361
366 101 82
368 100 82
370 367 82
372 298 52
374 368 299
376 375 373
378 103 82
380 102 82
382 379 82
384 298 54
386 380 299
388 387 385
390 105 82
392 104 82
394 391 82
396 298 28
398 392 299
400 399 397
402 107 82
404 106 82
406 403 82
408 298 30
410 404 299
412 411 409
414 109 82
416 108 82
418 415 82
420 298 32
422 416 299
424 423 421
426 75 72
428 426 77
430 428 78
432 111 82
434 110 82
436 433 82
438 113 82
440 112 82
442 439 82
444 115 82
446 114 82
448 445 82
450 441 435
452 450 447
454 452 430
456 345 334
458 456 454
460 346 333
462 460 454
464 346 334
466 464 454
468 276 264
470 468 288
472 470 466
474 441 436
476 474 447
478 476 430
480 478 70
482 442 435
484 482 447
486 484 430
488 486 80
490 442 436
492 490 447
494 492 430
496 494 38
498 450 448
500 498 430
502 500 38
504 503 434
506 504 497
508 506 489
510 508 481
512 510 467
514 512 473
516 515 473
518 517 463
520 518 459
522 521 459
524 503 440
526 524 497
528 526 489
530 528 481
532 530 467
534 532 473
536 535 473
538 537 463
540 539 463
542 541 459
544 503 446
546 544 497
548 546 489
550 548 481
552 550 467
554 553 467
556 555 473
558 556 463
560 558 459
562 236 77
564 562 79
566 117 82
568 116 82
570 567 82
572 564 56
574 568 565
576 575 573
578 119 82
580 118 82
582 579 82
584 564 58
586 580 565
588 587 585
590 121 82
592 120 82
594 591 82
596 564 60
598 592 565
600 599 597
602 123 82
604 122 82
606 603 82
608 564 62
610 604 565
612 611 609
614 125 82
616 124 82
618 615 82
620 564 64
622 616 565
624 623 621
626 127 82
628 126 82
630 627 82
632 564 66
634 628 565
636 635 633
638 4 2
640 638 7
642 640 252
644 185 82
646 184 82
648 645 82
650 129 82
652 128 82
654 651 82
656 646 642
658 652 643
660 659 657
662 187 82
664 186 82
666 663 82
668 131 82
670 130 82
672 669 82
674 664 642
676 670 643
678 677 675
680 189 82
682 188 82
684 681 82
686 133 82
688 132 82
690 687 82
692 682 642
694 688 643
696 695 693
698 254 6
700 698 252
702 700 12
704 701 12
706 705 703
708 250 37
710 5 3
712 710 7
714 712 708
716 714 8
718 715 8
720 719 717
722 136 82
724 723 8
726 139 82
728 138 82
730 727 82
732 728 725
734 141 82
736 140 82
738 735 82
740 738 729
742 167 82
744 166 82
746 743 82
748 173 82
750 172 82
752 749 82
754 175 82
756 174 82
758 755 82
760 176 82
762 757 752
764 762 761
766 765 746
768 758 751
770 768 761
772 771 745
774 773 767
776 568 265
778 571 262
780 779 777
782 580 277
784 583 274
786 785 783
788 592 289
790 595 286
792 791 789
794 786 780
796 794 792
798 796 774
800 143 82
802 142 82
804 801 82
806 805 604
808 802 607
810 809 807
812 145 82
814 144 82
816 813 82
818 817 616
820 814 619
822 821 819
824 147 82
826 146 82
828 825 82
830 829 628
832 826 631
834 833 831
836 822 810
838 836 834
840 838 798
842 135 82
844 843 82
846 844 840
848 728 35
850 849 35
852 847 728
854 851 846
856 855 853
858 738 730
860 858 68
862 861 728
864 857 740
866 862 741
868 867 865
870 732 714
872 869 715
874 873 871
876 736 725
878 877 725
880 736 35
882 881 35
884 847 736
886 883 846
888 887 885
890 861 736
892 889 740
894 890 741
896 895 893
898 879 714
900 897 715
902 901 899
904 262 258
906 802 259
908 907 905
910 274 258
912 814 259
914 913 911
916 286 258
918 826 259
920 919 917
922 149 82
924 148 82
926 923 82
928 151 82
930 150 82
932 929 82
934 153 82
936 152 82
938 935 82
940 155 82
942 154 82
944 941 82
946 931 925
948 946 937
950 948 943
952 74 72
954 952 77
956 954 79
958 956 950
960 931 926
962 960 937
964 962 943
966 484 80
968 966 964
970 968 430
972 932 925
974 972 937
976 974 943
978 498 38
980 978 976
982 980 430
984 932 926
986 984 937
988 986 943
990 988 298
992 990 49
994 990 48
996 946 938
998 996 943
1000 998 860
1002 646 395
1004 649 392
1006 1005 1003
1008 664 407
1010 667 404
1012 1011 1009
1014 682 419
1016 685 416
1018 1017 1015
1020 1012 1006
1022 1020 1018
1024 179 82
1026 178 82
1028 1025 82
1030 1029 652
1032 1026 655
1034 1033 1031
1036 181 82
1038 180 82
1040 1037 82
1042 1041 670
1044 1038 673
1046 1045 1043
1048 183 82
1050 182 82
1052 1049 82
1054 1053 688
1056 1050 691
1058 1057 1055
1060 1046 1034
1062 1060 1058
1064 1062 1022
1066 359 262
1068 356 265
1070 1069 1067
1072 371 274
1074 368 277
1076 1075 1073
1078 383 286
1080 380 289
1082 1081 1079
1084 1076 1070
1086 1084 1082
1088 1086 1064
1090 161 82
1092 160 82
1094 1091 82
1096 1095 802
1098 1092 805
1100 1099 1097
1102 163 82
1104 162 82
1106 1103 82
1108 1107 814
1110 1104 817
1112 1111 1109
1114 165 82
1116 164 82
1118 1115 82
1120 1119 826
1122 1116 829
1124 1123 1121
1126 1112 1100
1128 1126 1124
1130 1128 1088
1132 157 82
1134 156 82
1136 1133 82
1138 1134 305
1140 1137 302
1142 1141 1139
1144 159 82
1146 158 82
1148 1145 82
1150 1146 317
1152 1149 314
1154 1153 1151
1156 1154 1142
1158 1156 1130
1160 1158 745
1162 1161 1000
1164 1162 430
1166 1000 40
1168 1166 430
1170 1000 41
1172 1170 430
1174 960 938
1176 1174 943
1178 1176 860
1180 1158 746
1182 1181 1178
1184 1182 430
1186 1178 40
1188 1186 430
1190 1178 41
1192 1190 430
1194 972 938
1196 1194 943
1198 426 76
1200 1198 79
1202 1200 1196
1204 984 938
1206 1204 943
1208 236 76
1210 1208 79
1212 1210 1206
1214 948 944
1216 952 76
1218 1216 79
1220 1218 1214
1222 962 944
1224 248 78
1226 1224 1222
1228 1227 924
1230 1229 1227
1232 1231 1221
1234 1233 1221
1236 1235 1213
1238 1237 1213
1240 1239 1203
1242 1241 1203
1244 1243 1193
1246 1245 1193
1248 1247 1189
1250 1248 1185
1252 1250 1173
1254 1253 1173
1256 1255 1169
1258 1256 1165
1260 1258 995
1262 1261 995
1264 1263 993
1266 1264 983
1268 1267 983
1270 1269 971
1272 1270 959
1274 1273 959
1276 1227 930
1278 1277 1227
1280 1279 1221
1282 1281 1221
1284 1283 1213
1286 1285 1213
1288 1287 1203
1290 1289 1203
1292 1291 1193
1294 1292 1189
1296 1294 1185
1298 1297 1185
1300 1299 1173
1302 1301 1173
1304 1303 1169
1306 1305 1169
1308 1307 1165
1310 1309 1165
1312 1311 995
1314 1312 993
1316 1314 983
1318 1317 983
1320 1319 971
1322 1321 971
1324 1323 959
1326 1227 936
1328 1326 1221
1330 1328 1213
1332 1330 1203
1334 1332 1193
1336 1334 1189
1338 1336 1185
1340 1338 1173
1342 1341 1173
1344 1343 1169
1346 1345 1169
1348 1347 1165
1350 1348 995
1352 1351 995
1354 1353 993
1356 1355 993
1358 1357 983
1360 1358 971
1362 1360 959
1364 1227 942
1366 1364 1221
1368 1366 1213
1370 1368 1203
1372 1370 1193
1374 1373 1193
1376 1375 1189
1378 1377 1189
1380 1379 1185
1382 1381 1185
1384 1383 1173
1386 1384 1169
1388 1386 1165
1390 1389 1165
1392 1391 995
1394 1392 993
1396 1394 983
1398 1396 971
1400 1398 959
1402 564 24
1404 1134 565
1406 1405 1403
1408 564 26
1410 1146 565
1412 1411 1409
1414 298 42
1416 1092 299
1418 1417 1415
1420 298 44
1422 1104 299
1424 1423 1421
1426 298 46
1428 1116 299
1430 1429 1427
1432 714 10
1434 715 10
1436 1435 1433
1438 989 201
1440 198 195
1442 199 192
1444 1443 1441
1446 1445 989
1448 638 6
1450 1448 252
1452 1450 8
1454 1451 750
1456 1455 1453
1458 1450 10
1460 1451 756
1462 1461 1459
1464 1450 12
1466 1451 760
1468 1467 1465
1470 298 18
1472 1026 299
1474 1473 1471
1476 298 20
1478 1038 299
1480 1479 1477
1482 298 22
1484 1050 299
1486 1485 1483
1488 642 8
1490 646 643
1492 1491 1489
1494 642 10
1496 664 643
1498 1497 1495
1500 642 12
1502 682 643
1504 1503 1501
i0 controllable_addr_abs<0>
i1 controllable_addr_abs<1>
i2 controllable_addr_abs<2>
i3 controllable_write8_val_abs<0>
i4 controllable_write8_val_abs<1>
i5 controllable_write8_val_abs<2>
i6 i_reqBuf_abs<0>
i7 i_reqBuf_abs<1>
i8 i_reqLBA1_abs<0>
i9 i_reqLBA1_abs<1>
i10 i_reqLBA1_abs<2>
i11 controllable_fillPrdAddr_abs<0>
i12 controllable_fillPrdAddr_abs<1>
i13 i_reqLBA0_abs<0>
i14 i_reqLBA0_abs<1>
i15 i_reqLBA0_abs<2>
i16 controllable_dmaStartClass_conc
i17 controllable_bank_abs
i18 controllable_featXFRClass_conc
i19 i_transSuccess_conc
i20 i_reqSect1_abs<0>
i21 i_reqSect1_abs<1>
i22 i_reqSect1_abs<2>
i23 i_osReqType_conc
i24 i_reqSect0_abs<0>
i25 i_reqSect0_abs<1>
i26 i_reqSect0_abs<2>
i27 controllable_fillPrdNSect_abs<0>
i28 controllable_fillPrdNSect_abs<1>
i29 controllable_fillPrdNSect_abs<2>
i30 controllable_fillPrdNSect_abs<3>
i31 controllable_fillPrdNSect_abs<4>
i32 controllable_fillPrdNSect_abs<5>
i33 controllable_busMasterClass_conc
i34 controllable_featWCClass_conc
i35 controllable_tag_conc<0>
i36 controllable_tag_conc<1>
i37 controllable_tag_conc<2>
i38 controllable_tag_conc<3>
i39 controllable_featNWCClass_conc
l0 n83
l1 state_regSectors0_abs<0>_out
l2 state_regSectors0_abs<1>_out
l3 state_regSectors0_abs<2>_out
l4 state_os_buf_abs<0>_out
l5 state_os_buf_abs<1>_out
l6 state_regFeature0_abs<0>_out
l7 state_regFeature0_abs<1>_out
l8 state_os_sect0_abs<0>_out
l9 state_os_sect0_abs<1>_out
l10 state_os_sect0_abs<2>_out
l11 state_os_lba0_abs<0>_out
l12 state_os_lba0_abs<1>_out
l13 state_os_lba0_abs<2>_out
l14 state_setFeatState_conc<0>_out
l15 state_setFeatState_conc<1>_out
l16 state_setFeatState_conc<2>_out
l17 state_bufSectors_abs<0>_out
l18 state_bufSectors_abs<1>_out
l19 state_bufSectors_abs<2>_out
l20 state_bufSectors_abs<3>_out
l21 state_bufSectors_abs<4>_out
l22 state_bufSectors_abs<5>_out
l23 state_regLBALow1_abs<0>_out
l24 state_regLBALow1_abs<1>_out
l25 state_regLBALow1_abs<2>_out
l26 state_regDev_LBA_abs_out
l27 state_regBMCommand_Start_abs_out
l28 state_stDMACmd_conc<0>_out
l29 state_stDMACmd_conc<1>_out
l30 state_regSectors1_abs<0>_out
l31 state_regSectors1_abs<1>_out
l32 state_regSectors1_abs<2>_out
l33 state_osState_conc<0>_out
l34 state_osState_conc<1>_out
l35 state_osState_conc<2>_out
l36 state_osState_conc<3>_out
l37 state_bufAddr_abs<0>_out
l38 state_bufAddr_abs<1>_out
l39 state_os_sect1_abs<0>_out
l40 state_os_sect1_abs<1>_out
l41 state_os_sect1_abs<2>_out
l42 state_regBMCommand_RW_abs_out
l43 fair_cnt<0>_out
l44 fair_cnt<1>_out
l45 state_regCommand_abs<0>_out
l46 state_regCommand_abs<1>_out
l47 state_regCommand_abs<2>_out
l48 state_os_lba1_abs<0>_out
l49 state_os_lba1_abs<1>_out
l50 state_os_lba1_abs<2>_out
l51 state_regLBALow0_abs<0>_out
l52 state_regLBALow0_abs<1>_out
l53 state_regLBALow0_abs<2>_out
o0 o_err
c
ide_hard_drive_controller_2
This file was written by ABC on Tue Mar 11 20:24:23 2014
For information about AIGER format, refer to http://fmv.jku.at/aiger
-------------------------------
This AIGER file has been created by the following sequence of commands:
> vl2mv driver_d3.v   ---gives--> driver_d3.mv
> abc -c "read_blif_mv driver_d3.mv; write_aiger -s driver_d3n.aig"   ---gives--> driver_d3n.aig
> aigtoaig driver_d3n.aig driver_d3n.aag   ---gives--> driver_d3n.aag (this file)
Content of driver_d3.v:
// IDE hard drive controller specification and operating system interface
// specification for device driver synthesis.
// This file describes a GR(1) game played by a device driver for an IDE hard
// disk against its environment consisting of the hard disk and operating
// system.

`define WIDTH1 2
`define WIDTH2 1

`define CMD_READ_DMA_EXT  1
`define CMD_WRITE_DMA_EXT 2
`define FEAT_WC           1
`define FEAT_NWC          2
`define FEAT_XFR_MODE     3
`define XM_ULTRA_DMA      7

`define RCMD              1
`define REG_FEATURE0      1
`define REG_SECTORS       2
`define REG_LBA_LOW       3
`define REG_LBA_MID       4
`define REG_LBA_HIGH      5
`define REG_DEV           6
`define REG_ERRCMD        7

`define RDMA              0
`define REG_BM_COMMAND    0

//typedef enum {read=0, write=1} i_osReqType_enum;
`define read              0
`define write             1

//typedef enum {write8, write32, fillPrd, reset, os_req, ack_read_succ, ack_read_fail, ack_write_succ, ack_write_fail, class_event} controllable_tag_enum;
`define write8            0
`define write32           1
`define fillPrd           2
`define reset             3
`define os_req            4
`define ack_read_succ     5
`define ack_read_fail     6
`define ack_write_succ    7
`define ack_write_fail    8
`define class_event       9

//typedef enum {wait_bm_ready=0, dma_read=1, bm_read_prd=2, bm_ready=3} state_stDMACmd_enum;
`define wait_bm_ready     0
`define dma_read          1
`define bm_read_prd       2
`define bm_ready          3


//typedef enum {setFeatIdle=0, setFeatWC=1, setFeatNWC=2, setFeatXFR0=3, setFeatXFR1=4} state_setFeatState_enum;
`define setFeatIdle       0
`define setFeatWC         1
`define setFeatNWC        2
`define setFeatXFR0       3
`define setFeatXFR1       4

//typedef enum {os_init=0, os_reset=1, os_write_cache=2, os_idle=3, os_read_pending=4, os_write_pending=5, os_read_ack_succ=6, os_read_ack_fail=7, os_write_ack_succ=8, os_write_ack_fail=9, os_error=10} state_osState_enum;
`define os_init           0
`define os_reset          1
`define os_write_cache    2
`define os_idle           3
`define os_read_pending   4
`define os_write_pending  5
`define os_read_ack_succ  6
`define os_read_ack_fail  7
`define os_write_ack_succ 8
`define os_write_ack_fail 9
`define os_error          10

module ide_hard_drive_controller_2(
        o_err,
        i_clk,
        i_osReqType_conc,
        i_reqLBA0_abs,
        i_reqLBA1_abs,
        i_reqSect0_abs,
        i_reqSect1_abs,
        i_reqBuf_abs,
        i_transSuccess_conc,
        controllable_tag_conc,
        controllable_bank_abs,
        controllable_addr_abs,
        controllable_write8_val_abs,
        controllable_fillPrdAddr_abs,
        controllable_fillPrdNSect_abs,
        controllable_featWCClass_conc,
        controllable_featNWCClass_conc,
        controllable_featXFRClass_conc,
        controllable_busMasterClass_conc,
        controllable_dmaStartClass_conc );

input i_clk;
input i_osReqType_conc ;
input [`WIDTH1:0] i_reqLBA0_abs ;
input [`WIDTH1:0] i_reqLBA1_abs ;
input [`WIDTH1:0] i_reqSect0_abs ;
input [`WIDTH1:0] i_reqSect1_abs ;
input [`WIDTH2:0] i_reqBuf_abs ;
input i_transSuccess_conc ;
input [3:0] controllable_tag_conc ;
input controllable_bank_abs ;
input [2:0] controllable_addr_abs ;
input [`WIDTH1:0] controllable_write8_val_abs ;
input [`WIDTH2:0] controllable_fillPrdAddr_abs ;
input [5:0] controllable_fillPrdNSect_abs ;
input controllable_featWCClass_conc ;
input controllable_featNWCClass_conc ;
input controllable_featXFRClass_conc ;
input controllable_busMasterClass_conc ;
input controllable_dmaStartClass_conc ;
output o_err;

reg [1:0] state_stDMACmd_conc ;
reg [2:0] state_setFeatState_conc ;
reg [1:0] state_regFeature0_abs ;
reg [`WIDTH1:0] state_regSectors0_abs ;
reg [`WIDTH1:0] state_regSectors1_abs ;
reg [`WIDTH1:0] state_regLBALow0_abs ;
reg [`WIDTH1:0] state_regLBALow1_abs ;
reg state_regDev_LBA_abs ;
reg [`WIDTH1:0] state_regCommand_abs ;
reg state_regBMCommand_Start_abs ;
reg state_regBMCommand_RW_abs ;
reg [`WIDTH2:0] state_bufAddr_abs ;
reg [5:0] state_bufSectors_abs ;

reg [3:0] state_osState_conc ;
reg [`WIDTH1:0] state_os_lba0_abs ;
reg [`WIDTH1:0] state_os_lba1_abs ;
reg [`WIDTH1:0] state_os_sect0_abs ;
reg [`WIDTH1:0] state_os_sect1_abs ;
reg [`WIDTH2:0] state_os_buf_abs ;

reg [1:0] fair_cnt;

wire transferMode3;
wire nwc;
wire bm_event;
wire transferCorrect;
wire transferCorrect_0;
wire transferCorrect_1;
wire buechi_satisfied;
wire [1:0] next_state_stDMACmd_conc ;
wire [2:0] next_state_setFeatState_conc ;
wire [1:0] next_state_regFeature0_abs ;
wire [`WIDTH1:0] next_state_regSectors0_abs ;
wire [`WIDTH1:0] next_state_regSectors1_abs ;
wire [`WIDTH1:0] next_state_regLBALow0_abs ;
wire [`WIDTH1:0] next_state_regLBALow1_abs ;
wire next_state_regDev_LBA_abs ;
wire [`WIDTH1:0] next_state_regCommand_abs ;
wire next_state_regBMCommand_Start_abs ;
wire next_state_regBMCommand_RW_abs ;
wire [`WIDTH2:0] next_state_bufAddr_abs ;
wire [5:0] next_state_bufSectors_abs ;

wire [3:0] next_state_osState_conc ;
wire [`WIDTH1:0] next_state_os_lba0_abs ;
wire [`WIDTH1:0] next_state_os_lba1_abs ;
wire [`WIDTH1:0] next_state_os_sect0_abs ;
wire [`WIDTH1:0] next_state_os_sect1_abs ;
wire [`WIDTH2:0] next_state_os_buf_abs ;

// some abbreviations:
assign transferMode3 = (state_setFeatState_conc==`setFeatXFR1 && controllable_featXFRClass_conc==1);
assign nwc =           (state_setFeatState_conc==`setFeatNWC  && controllable_featNWCClass_conc==1);
assign bm_event = (state_stDMACmd_conc==`bm_ready && controllable_busMasterClass_conc==1);
assign transferCorrect = (state_os_lba0_abs==state_regLBALow0_abs    &&
                          state_os_lba1_abs==state_regLBALow1_abs    &&
                          state_os_sect0_abs==state_regSectors0_abs  &&
                          state_os_sect1_abs==state_regSectors1_abs  &&
                          state_os_buf_abs==state_bufAddr_abs);
assign transferCorrect_0 = (transferCorrect      &&
                            state_regBMCommand_RW_abs==0);
assign transferCorrect_1 = (transferCorrect      &&
                            state_regBMCommand_RW_abs==1);


// state updates:
  //Device state updates:
assign next_state_regFeature0_abs  = (controllable_tag_conc==`write8 && controllable_bank_abs==`RCMD && controllable_addr_abs==`REG_FEATURE0) ? controllable_write8_val_abs  : state_regFeature0_abs;
assign next_state_regSectors0_abs  = (controllable_tag_conc==`write8 && controllable_bank_abs==`RCMD && controllable_addr_abs==`REG_SECTORS)  ? controllable_write8_val_abs  : state_regSectors0_abs;
assign next_state_regSectors1_abs  = (controllable_tag_conc==`write8 && controllable_bank_abs==`RCMD && controllable_addr_abs==`REG_SECTORS)  ? state_regSectors0_abs : state_regSectors1_abs;
assign next_state_regLBALow0_abs   = (controllable_tag_conc==`write8 && controllable_bank_abs==`RCMD && controllable_addr_abs==`REG_LBA_LOW)  ? controllable_write8_val_abs  : state_regLBALow0_abs;
assign next_state_regLBALow1_abs   = (controllable_tag_conc==`write8 && controllable_bank_abs==`RCMD && controllable_addr_abs==`REG_LBA_LOW)  ? state_regLBALow0_abs  : state_regLBALow1_abs;
assign next_state_regDev_LBA_abs   = (controllable_tag_conc==`write8 && controllable_bank_abs==`RCMD && controllable_addr_abs==`REG_DEV)      ? controllable_write8_val_abs[2:2] : state_regDev_LBA_abs;
assign next_state_regCommand_abs   = (controllable_tag_conc==`write8 && controllable_bank_abs==`RCMD && controllable_addr_abs==`REG_ERRCMD)   ? controllable_write8_val_abs  : state_regCommand_abs;
assign next_state_regBMCommand_Start_abs = (controllable_tag_conc==`write8 && controllable_bank_abs==`RDMA && controllable_addr_abs==`REG_BM_COMMAND) ? controllable_write8_val_abs[0:0] : state_regBMCommand_Start_abs;
assign next_state_regBMCommand_RW_abs = (controllable_tag_conc==`write8 && controllable_bank_abs==`RDMA && controllable_addr_abs==`REG_BM_COMMAND) ? controllable_write8_val_abs[1:1] : state_regBMCommand_RW_abs;
assign next_state_bufAddr_abs = (controllable_tag_conc==`fillPrd) ? controllable_fillPrdAddr_abs : state_bufAddr_abs;
assign next_state_bufSectors_abs = (controllable_tag_conc==`fillPrd) ? controllable_fillPrdNSect_abs : state_bufSectors_abs;

assign next_state_setFeatState_conc = (controllable_tag_conc==`class_event && state_setFeatState_conc==`setFeatIdle && state_regFeature0_abs==`FEAT_WC) ? `setFeatWC :
                 ((controllable_tag_conc==`class_event && state_setFeatState_conc==`setFeatIdle && state_regFeature0_abs==`FEAT_NWC) ? `setFeatNWC :
                 ((controllable_tag_conc==`class_event && state_setFeatState_conc==`setFeatIdle && state_regFeature0_abs==`FEAT_XFR_MODE && state_regSectors0_abs==`XM_ULTRA_DMA) ? `setFeatXFR0 :
                 ((controllable_tag_conc==`class_event && state_setFeatState_conc==`setFeatIdle && state_regFeature0_abs==`FEAT_XFR_MODE) ? `setFeatXFR1 :
                 ((controllable_tag_conc==`class_event && state_setFeatState_conc==`setFeatWC   && controllable_featWCClass_conc==1) ? `setFeatIdle :
                 ((controllable_tag_conc==`class_event && state_setFeatState_conc==`setFeatNWC  && controllable_featNWCClass_conc==1) ? `setFeatIdle :
                 ((controllable_tag_conc==`class_event && state_setFeatState_conc==`setFeatXFR0 && controllable_featXFRClass_conc==1) ? `setFeatIdle :
                 ((controllable_tag_conc==`class_event && state_setFeatState_conc==`setFeatXFR1 && controllable_featXFRClass_conc==1) ? `setFeatIdle : state_setFeatState_conc)))))));

assign next_state_stDMACmd_conc = (controllable_tag_conc==`write8 && controllable_bank_abs==`RDMA && controllable_addr_abs==`REG_BM_COMMAND) ?
               (
                 (state_regBMCommand_Start_abs==0 && controllable_write8_val_abs[0:0]==1) ? `bm_read_prd : state_stDMACmd_conc
               ) :
               (
                 (state_stDMACmd_conc==`bm_read_prd) ?
                 (((state_regBMCommand_RW_abs == 1 && state_regCommand_abs != `CMD_READ_DMA_EXT) || (state_regBMCommand_RW_abs == 0 && state_regCommand_abs != `CMD_WRITE_DMA_EXT) || (state_regSectors0_abs != state_bufSectors_abs[`WIDTH1:0]) || (state_regSectors1_abs != state_bufSectors_abs[5:3]) || state_regDev_LBA_abs != 1) ? state_stDMACmd_conc : ((controllable_dmaStartClass_conc==1) ? `bm_ready : state_stDMACmd_conc)) :
                 ((state_stDMACmd_conc==`bm_ready && controllable_busMasterClass_conc==1) ? `wait_bm_ready : state_stDMACmd_conc)
               );

//OS state updates
assign next_state_os_lba0_abs = (controllable_tag_conc==`os_req) ? i_reqLBA0_abs : state_os_lba0_abs;
assign next_state_os_lba1_abs = (controllable_tag_conc==`os_req) ? i_reqLBA1_abs : state_os_lba1_abs;
assign next_state_os_sect0_abs = (controllable_tag_conc==`os_req) ? i_reqSect0_abs : state_os_sect0_abs;
assign next_state_os_sect1_abs = (controllable_tag_conc==`os_req) ? i_reqSect1_abs : state_os_sect1_abs;
assign next_state_os_buf_abs = (controllable_tag_conc==`os_req) ? i_reqBuf_abs : state_os_buf_abs;

assign next_state_osState_conc = (state_osState_conc==`os_init && controllable_tag_conc==`reset) ? `os_reset :
      ((state_osState_conc==`os_reset && nwc && controllable_tag_conc==`class_event) ? `os_write_cache :
      ((state_osState_conc==`os_write_cache && transferMode3 && controllable_tag_conc==`class_event) ? `os_idle :
      ((state_osState_conc==`os_idle && controllable_tag_conc==`os_req && i_osReqType_conc==`read) ? `os_read_pending :
      ((state_osState_conc==`os_idle && controllable_tag_conc==`os_req && i_osReqType_conc==`write) ? `os_write_pending :
      ((state_osState_conc==`os_read_pending && bm_event && !transferCorrect_0 && controllable_tag_conc==`class_event) ? `os_error :
      ((state_osState_conc==`os_read_pending && bm_event && i_transSuccess_conc==1 && controllable_tag_conc==`class_event) ? `os_read_ack_succ :
      ((state_osState_conc==`os_read_pending && bm_event && i_transSuccess_conc==0 && controllable_tag_conc==`class_event) ? `os_read_ack_fail :
      ((state_osState_conc==`os_write_pending && bm_event && !transferCorrect_1 && controllable_tag_conc==`class_event) ? `os_error :
      ((state_osState_conc==`os_write_pending && bm_event && i_transSuccess_conc==1 && controllable_tag_conc==`class_event) ? `os_write_ack_succ :
      ((state_osState_conc==`os_write_pending && bm_event && i_transSuccess_conc==0 && controllable_tag_conc==`class_event) ? `os_write_ack_fail :
      ((state_osState_conc==`os_read_ack_succ && controllable_tag_conc==`ack_read_succ) ? `os_idle :
      ((state_osState_conc==`os_read_ack_fail && controllable_tag_conc==`ack_read_fail) ? `os_idle :
      ((state_osState_conc==`os_write_ack_succ && controllable_tag_conc==`ack_write_succ) ? `os_idle :
      ((state_osState_conc==`os_write_ack_fail && controllable_tag_conc==`ack_write_fail) ? `os_idle : state_osState_conc))))))))))))));


// buechi-to-safety construction:                            
assign buechi_satisfied = (state_osState_conc == `os_idle);                          
                            
assign o_err = (fair_cnt >= 3) || controllable_tag_conc >= 10;

initial
 begin
  state_stDMACmd_conc = `wait_bm_ready;
  state_setFeatState_conc = `setFeatIdle;
  state_regFeature0_abs = 0;
  state_regSectors0_abs = 0;
  state_regSectors1_abs = 0;
  state_regLBALow0_abs = 0;
  state_regLBALow1_abs = 0;
  state_regDev_LBA_abs = 0;
  state_regCommand_abs = 0;
  state_regBMCommand_Start_abs = 0;
  state_regBMCommand_RW_abs = 0;
  state_bufAddr_abs = 0;
  state_bufSectors_abs = 0;
  state_osState_conc = `os_init;
  state_os_lba0_abs = 0;
  state_os_lba1_abs = 0;
  state_os_sect0_abs = 0;
  state_os_sect1_abs = 0;
  state_os_buf_abs = 0;
  fair_cnt = 0;
 end

always @(posedge i_clk)
 begin

  if(buechi_satisfied)
   begin
    fair_cnt = 0;
   end
  else
   begin
    fair_cnt = fair_cnt + 1;
   end
 
  //Device state updates:
  state_regFeature0_abs          = next_state_regFeature0_abs ;
  state_regSectors0_abs          = next_state_regSectors0_abs ;
  state_regSectors1_abs          = next_state_regSectors1_abs ;
  state_regLBALow0_abs           = next_state_regLBALow0_abs ;
  state_regLBALow1_abs           = next_state_regLBALow1_abs ;
  state_regDev_LBA_abs           = next_state_regDev_LBA_abs ;
  state_regCommand_abs           = next_state_regCommand_abs ;
  state_regBMCommand_Start_abs   = next_state_regBMCommand_Start_abs ;
  state_regBMCommand_RW_abs      = next_state_regBMCommand_RW_abs ;
  state_bufAddr_abs              = next_state_bufAddr_abs ;
  state_bufSectors_abs           = next_state_bufSectors_abs ;
  state_setFeatState_conc        = next_state_setFeatState_conc ;
  state_stDMACmd_conc            = next_state_stDMACmd_conc ;
  state_os_lba0_abs              = next_state_os_lba0_abs ;
  state_os_lba1_abs              = next_state_os_lba1_abs ;
  state_os_sect0_abs             = next_state_os_sect0_abs ;
  state_os_sect1_abs             = next_state_os_sect1_abs ;
  state_os_buf_abs               = next_state_os_buf_abs ;
  state_osState_conc             = next_state_osState_conc ;
 end
 
 
endmodule
-------------------------------
#!SYNTCOMP
STATUS : unrealizable
SOLVED_BY : 3/3 [2015-pre-classification]
SOLVED_IN : 0.047901 [2015-pre-classification]
#.
