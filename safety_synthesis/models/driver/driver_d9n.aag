aag 778 40 56 1 682
2
4
6
8
10
12
14
16
18
20
22
24
26
28
30
32
34
36
38
40
42
44
46
48
50
52
54
56
58
60
62
64
66
68
70
72
74
76
78
80
82 1
84 303
86 315
88 327
90 343
92 355
94 373
96 385
98 397
100 409
102 421
104 433
106 445
108 457
110 555
112 574
114 592
116 609
118 621
120 633
122 645
124 657
126 669
128 693
130 711
132 729
134 739
136 753
138 907
140 935
142 941
144 947
146 953
148 1307
150 1356
152 1394
154 1432
156 1439
158 1445
160 1451
162 1457
164 1463
166 1469
168 1470
170 1478
172 1488
174 1498
176 1509
178 1515
180 1521
182 1527
184 1533
186 1539
188 1545
190 1551
192 1557
277
194 175 82
196 174 82
198 195 82
200 173 82
202 172 82
204 201 82
206 171 82
208 170 82
210 207 82
212 169 82
214 168 82
216 213 82
218 217 211
220 218 205
222 220 199
224 223 198
226 224 221
228 216 208
230 229 219
232 219 202
234 233 221
236 221 199
238 220 196
240 239 237
242 230 216
244 242 234
246 244 240
248 247 227
250 77 75
252 250 79
254 253 78
256 254 251
258 76 74
260 259 251
262 251 79
264 250 78
266 265 263
268 74 73
270 268 260
272 270 266
274 273 257
276 274 248
278 75 73
280 278 77
282 280 79
284 282 36
286 4 3
288 286 7
290 288 284
292 85 82
294 84 82
296 293 82
298 290 8
300 294 291
302 301 299
304 87 82
306 86 82
308 305 82
310 290 10
312 306 291
314 313 311
316 89 82
318 88 82
320 317 82
322 290 12
324 318 291
326 325 323
328 278 76
330 328 79
332 91 82
334 90 82
336 333 82
338 330 14
340 334 331
342 341 339
344 93 82
346 92 82
348 345 82
350 330 16
352 346 331
354 353 351
356 5 2
358 356 7
360 358 284
362 95 82
364 94 82
366 363 82
368 360 8
370 364 361
372 371 369
374 97 82
376 96 82
378 375 82
380 360 10
382 376 361
384 383 381
386 99 82
388 98 82
390 387 82
392 330 50
394 388 331
396 395 393
398 101 82
400 100 82
402 399 82
404 330 52
406 400 331
408 407 405
410 103 82
412 102 82
414 411 82
416 330 54
418 412 331
420 419 417
422 105 82
424 104 82
426 423 82
428 330 28
430 424 331
432 431 429
434 107 82
436 106 82
438 435 82
440 330 30
442 436 331
444 443 441
446 109 82
448 108 82
450 447 82
452 330 32
454 448 331
456 455 453
458 75 72
460 458 77
462 460 78
464 111 82
466 110 82
468 465 82
470 113 82
472 112 82
474 471 82
476 115 82
478 114 82
480 477 82
482 473 467
484 482 479
486 484 462
488 377 366
490 488 486
492 378 365
494 492 486
496 378 366
498 496 486
500 308 296
502 500 320
504 502 498
506 473 468
508 506 479
510 508 462
512 510 70
514 474 467
516 514 479
518 516 462
520 518 80
522 474 468
524 522 479
526 524 462
528 526 38
530 482 480
532 530 462
534 532 38
536 535 466
538 536 529
540 538 521
542 540 513
544 542 499
546 544 505
548 547 505
550 549 495
552 550 491
554 553 491
556 535 472
558 556 529
560 558 521
562 560 513
564 562 499
566 564 505
568 567 505
570 569 495
572 571 495
574 573 491
576 535 478
578 576 529
580 578 521
582 580 513
584 582 499
586 585 499
588 587 505
590 588 495
592 590 491
594 268 77
596 594 79
598 117 82
600 116 82
602 599 82
604 596 56
606 600 597
608 607 605
610 119 82
612 118 82
614 611 82
616 596 58
618 612 597
620 619 617
622 121 82
624 120 82
626 623 82
628 596 60
630 624 597
632 631 629
634 123 82
636 122 82
638 635 82
640 596 62
642 636 597
644 643 641
646 125 82
648 124 82
650 647 82
652 596 64
654 648 597
656 655 653
658 127 82
660 126 82
662 659 82
664 596 66
666 660 597
668 667 665
670 4 2
672 670 7
674 672 284
676 189 82
678 188 82
680 677 82
682 129 82
684 128 82
686 683 82
688 678 674
690 684 675
692 691 689
694 191 82
696 190 82
698 695 82
700 131 82
702 130 82
704 701 82
706 696 674
708 702 675
710 709 707
712 193 82
714 192 82
716 713 82
718 133 82
720 132 82
722 719 82
724 714 674
726 720 675
728 727 725
730 286 6
732 730 284
734 732 12
736 733 12
738 737 735
740 282 37
742 5 3
744 742 7
746 744 740
748 746 8
750 747 8
752 751 749
754 136 82
756 755 8
758 139 82
760 138 82
762 759 82
764 760 757
766 141 82
768 140 82
770 767 82
772 770 761
774 167 82
776 166 82
778 775 82
780 177 82
782 176 82
784 781 82
786 179 82
788 178 82
790 787 82
792 180 82
794 789 784
796 794 793
798 797 778
800 790 783
802 800 793
804 803 777
806 805 799
808 600 297
810 603 294
812 811 809
814 612 309
816 615 306
818 817 815
820 624 321
822 627 318
824 823 821
826 818 812
828 826 824
830 828 806
832 143 82
834 142 82
836 833 82
838 837 636
840 834 639
842 841 839
844 145 82
846 144 82
848 845 82
850 849 648
852 846 651
854 853 851
856 147 82
858 146 82
860 857 82
862 861 660
864 858 663
866 865 863
868 854 842
870 868 866
872 870 830
874 135 82
876 875 82
878 876 872
880 760 35
882 881 35
884 879 760
886 883 878
888 887 885
890 770 762
892 890 68
894 893 760
896 889 772
898 894 773
900 899 897
902 764 746
904 901 747
906 905 903
908 768 757
910 909 757
912 768 35
914 913 35
916 879 768
918 915 878
920 919 917
922 893 768
924 921 772
926 922 773
928 927 925
930 911 746
932 929 747
934 933 931
936 294 290
938 834 291
940 939 937
942 306 290
944 846 291
946 945 943
948 318 290
950 858 291
952 951 949
954 149 82
956 148 82
958 955 82
960 151 82
962 150 82
964 961 82
966 153 82
968 152 82
970 967 82
972 155 82
974 154 82
976 973 82
978 963 957
980 978 969
982 980 975
984 74 72
986 984 77
988 986 79
990 988 982
992 963 958
994 992 969
996 994 975
998 516 80
1000 998 996
1002 1000 462
1004 964 957
1006 1004 969
1008 1006 975
1010 530 38
1012 1010 1008
1014 1012 462
1016 964 958
1018 1016 969
1020 1018 975
1022 1020 330
1024 1022 49
1026 1022 48
1028 978 970
1030 1028 975
1032 1030 892
1034 678 427
1036 681 424
1038 1037 1035
1040 696 439
1042 699 436
1044 1043 1041
1046 714 451
1048 717 448
1050 1049 1047
1052 1044 1038
1054 1052 1050
1056 183 82
1058 182 82
1060 1057 82
1062 1061 684
1064 1058 687
1066 1065 1063
1068 185 82
1070 184 82
1072 1069 82
1074 1073 702
1076 1070 705
1078 1077 1075
1080 187 82
1082 186 82
1084 1081 82
1086 1085 720
1088 1082 723
1090 1089 1087
1092 1078 1066
1094 1092 1090
1096 1094 1054
1098 391 294
1100 388 297
1102 1101 1099
1104 403 306
1106 400 309
1108 1107 1105
1110 415 318
1112 412 321
1114 1113 1111
1116 1108 1102
1118 1116 1114
1120 1118 1096
1122 161 82
1124 160 82
1126 1123 82
1128 1127 834
1130 1124 837
1132 1131 1129
1134 163 82
1136 162 82
1138 1135 82
1140 1139 846
1142 1136 849
1144 1143 1141
1146 165 82
1148 164 82
1150 1147 82
1152 1151 858
1154 1148 861
1156 1155 1153
1158 1144 1132
1160 1158 1156
1162 1160 1120
1164 157 82
1166 156 82
1168 1165 82
1170 1166 337
1172 1169 334
1174 1173 1171
1176 159 82
1178 158 82
1180 1177 82
1182 1178 349
1184 1181 346
1186 1185 1183
1188 1186 1174
1190 1188 1162
1192 1190 777
1194 1193 1032
1196 1194 462
1198 1032 40
1200 1198 462
1202 1032 41
1204 1202 462
1206 992 970
1208 1206 975
1210 1208 892
1212 1190 778
1214 1213 1210
1216 1214 462
1218 1210 40
1220 1218 462
1222 1210 41
1224 1222 462
1226 1004 970
1228 1226 975
1230 458 76
1232 1230 79
1234 1232 1228
1236 1016 970
1238 1236 975
1240 268 76
1242 1240 79
1244 1242 1238
1246 980 976
1248 984 76
1250 1248 79
1252 1250 1246
1254 994 976
1256 280 78
1258 1256 1254
1260 1259 956
1262 1261 1259
1264 1263 1253
1266 1265 1253
1268 1267 1245
1270 1269 1245
1272 1271 1235
1274 1273 1235
1276 1275 1225
1278 1277 1225
1280 1279 1221
1282 1280 1217
1284 1282 1205
1286 1285 1205
1288 1287 1201
1290 1288 1197
1292 1290 1027
1294 1293 1027
1296 1295 1025
1298 1296 1015
1300 1299 1015
1302 1301 1003
1304 1302 991
1306 1305 991
1308 1259 962
1310 1309 1259
1312 1311 1253
1314 1313 1253
1316 1315 1245
1318 1317 1245
1320 1319 1235
1322 1321 1235
1324 1323 1225
1326 1324 1221
1328 1326 1217
1330 1329 1217
1332 1331 1205
1334 1333 1205
1336 1335 1201
1338 1337 1201
1340 1339 1197
1342 1341 1197
1344 1343 1027
1346 1344 1025
1348 1346 1015
1350 1349 1015
1352 1351 1003
1354 1353 1003
1356 1355 991
1358 1259 968
1360 1358 1253
1362 1360 1245
1364 1362 1235
1366 1364 1225
1368 1366 1221
1370 1368 1217
1372 1370 1205
1374 1373 1205
1376 1375 1201
1378 1377 1201
1380 1379 1197
1382 1380 1027
1384 1383 1027
1386 1385 1025
1388 1387 1025
1390 1389 1015
1392 1390 1003
1394 1392 991
1396 1259 974
1398 1396 1253
1400 1398 1245
1402 1400 1235
1404 1402 1225
1406 1405 1225
1408 1407 1221
1410 1409 1221
1412 1411 1217
1414 1413 1217
1416 1415 1205
1418 1416 1201
1420 1418 1197
1422 1421 1197
1424 1423 1027
1426 1424 1025
1428 1426 1015
1430 1428 1003
1432 1430 991
1434 596 24
1436 1166 597
1438 1437 1435
1440 596 26
1442 1178 597
1444 1443 1441
1446 330 42
1448 1124 331
1450 1449 1447
1452 330 44
1454 1136 331
1456 1455 1453
1458 330 46
1460 1148 331
1462 1461 1459
1464 746 10
1466 747 10
1468 1467 1465
1470 1021 217
1472 214 211
1474 215 208
1476 1475 1473
1478 1477 1021
1480 214 208
1482 1480 205
1484 1481 202
1486 1485 1483
1488 1487 1021
1490 1480 202
1492 1490 199
1494 1491 196
1496 1495 1493
1498 1497 1021
1500 670 6
1502 1500 284
1504 1502 8
1506 1503 782
1508 1507 1505
1510 1502 10
1512 1503 788
1514 1513 1511
1516 1502 12
1518 1503 792
1520 1519 1517
1522 330 18
1524 1058 331
1526 1525 1523
1528 330 20
1530 1070 331
1532 1531 1529
1534 330 22
1536 1082 331
1538 1537 1535
1540 674 8
1542 678 675
1544 1543 1541
1546 674 10
1548 696 675
1550 1549 1547
1552 674 12
1554 714 675
1556 1555 1553
i0 controllable_addr_abs<0>
i1 controllable_addr_abs<1>
i2 controllable_addr_abs<2>
i3 controllable_write8_val_abs<0>
i4 controllable_write8_val_abs<1>
i5 controllable_write8_val_abs<2>
i6 i_reqBuf_abs<0>
i7 i_reqBuf_abs<1>
i8 i_reqLBA1_abs<0>
i9 i_reqLBA1_abs<1>
i10 i_reqLBA1_abs<2>
i11 controllable_fillPrdAddr_abs<0>
i12 controllable_fillPrdAddr_abs<1>
i13 i_reqLBA0_abs<0>
i14 i_reqLBA0_abs<1>
i15 i_reqLBA0_abs<2>
i16 controllable_dmaStartClass_conc
i17 controllable_bank_abs
i18 controllable_featXFRClass_conc
i19 i_transSuccess_conc
i20 i_reqSect1_abs<0>
i21 i_reqSect1_abs<1>
i22 i_reqSect1_abs<2>
i23 i_osReqType_conc
i24 i_reqSect0_abs<0>
i25 i_reqSect0_abs<1>
i26 i_reqSect0_abs<2>
i27 controllable_fillPrdNSect_abs<0>
i28 controllable_fillPrdNSect_abs<1>
i29 controllable_fillPrdNSect_abs<2>
i30 controllable_fillPrdNSect_abs<3>
i31 controllable_fillPrdNSect_abs<4>
i32 controllable_fillPrdNSect_abs<5>
i33 controllable_busMasterClass_conc
i34 controllable_featWCClass_conc
i35 controllable_tag_conc<0>
i36 controllable_tag_conc<1>
i37 controllable_tag_conc<2>
i38 controllable_tag_conc<3>
i39 controllable_featNWCClass_conc
l0 n83
l1 state_regSectors0_abs<0>_out
l2 state_regSectors0_abs<1>_out
l3 state_regSectors0_abs<2>_out
l4 state_os_buf_abs<0>_out
l5 state_os_buf_abs<1>_out
l6 state_regFeature0_abs<0>_out
l7 state_regFeature0_abs<1>_out
l8 state_os_sect0_abs<0>_out
l9 state_os_sect0_abs<1>_out
l10 state_os_sect0_abs<2>_out
l11 state_os_lba0_abs<0>_out
l12 state_os_lba0_abs<1>_out
l13 state_os_lba0_abs<2>_out
l14 state_setFeatState_conc<0>_out
l15 state_setFeatState_conc<1>_out
l16 state_setFeatState_conc<2>_out
l17 state_bufSectors_abs<0>_out
l18 state_bufSectors_abs<1>_out
l19 state_bufSectors_abs<2>_out
l20 state_bufSectors_abs<3>_out
l21 state_bufSectors_abs<4>_out
l22 state_bufSectors_abs<5>_out
l23 state_regLBALow1_abs<0>_out
l24 state_regLBALow1_abs<1>_out
l25 state_regLBALow1_abs<2>_out
l26 state_regDev_LBA_abs_out
l27 state_regBMCommand_Start_abs_out
l28 state_stDMACmd_conc<0>_out
l29 state_stDMACmd_conc<1>_out
l30 state_regSectors1_abs<0>_out
l31 state_regSectors1_abs<1>_out
l32 state_regSectors1_abs<2>_out
l33 state_osState_conc<0>_out
l34 state_osState_conc<1>_out
l35 state_osState_conc<2>_out
l36 state_osState_conc<3>_out
l37 state_bufAddr_abs<0>_out
l38 state_bufAddr_abs<1>_out
l39 state_os_sect1_abs<0>_out
l40 state_os_sect1_abs<1>_out
l41 state_os_sect1_abs<2>_out
l42 state_regBMCommand_RW_abs_out
l43 fair_cnt<0>_out
l44 fair_cnt<1>_out
l45 fair_cnt<2>_out
l46 fair_cnt<3>_out
l47 state_regCommand_abs<0>_out
l48 state_regCommand_abs<1>_out
l49 state_regCommand_abs<2>_out
l50 state_os_lba1_abs<0>_out
l51 state_os_lba1_abs<1>_out
l52 state_os_lba1_abs<2>_out
l53 state_regLBALow0_abs<0>_out
l54 state_regLBALow0_abs<1>_out
l55 state_regLBALow0_abs<2>_out
o0 o_err
c
ide_hard_drive_controller_2
This file was written by ABC on Tue Mar 11 20:24:17 2014
For information about AIGER format, refer to http://fmv.jku.at/aiger
-------------------------------
This AIGER file has been created by the following sequence of commands:
> vl2mv driver_d9.v   ---gives--> driver_d9.mv
> abc -c "read_blif_mv driver_d9.mv; write_aiger -s driver_d9n.aig"   ---gives--> driver_d9n.aig
> aigtoaig driver_d9n.aig driver_d9n.aag   ---gives--> driver_d9n.aag (this file)
Content of driver_d9.v:
// IDE hard drive controller specification and operating system interface
// specification for device driver synthesis.
// This file describes a GR(1) game played by a device driver for an IDE hard
// disk against its environment consisting of the hard disk and operating
// system.

`define WIDTH1 2
`define WIDTH2 1

`define CMD_READ_DMA_EXT  1
`define CMD_WRITE_DMA_EXT 2
`define FEAT_WC           1
`define FEAT_NWC          2
`define FEAT_XFR_MODE     3
`define XM_ULTRA_DMA      7

`define RCMD              1
`define REG_FEATURE0      1
`define REG_SECTORS       2
`define REG_LBA_LOW       3
`define REG_LBA_MID       4
`define REG_LBA_HIGH      5
`define REG_DEV           6
`define REG_ERRCMD        7

`define RDMA              0
`define REG_BM_COMMAND    0

//typedef enum {read=0, write=1} i_osReqType_enum;
`define read              0
`define write             1

//typedef enum {write8, write32, fillPrd, reset, os_req, ack_read_succ, ack_read_fail, ack_write_succ, ack_write_fail, class_event} controllable_tag_enum;
`define write8            0
`define write32           1
`define fillPrd           2
`define reset             3
`define os_req            4
`define ack_read_succ     5
`define ack_read_fail     6
`define ack_write_succ    7
`define ack_write_fail    8
`define class_event       9

//typedef enum {wait_bm_ready=0, dma_read=1, bm_read_prd=2, bm_ready=3} state_stDMACmd_enum;
`define wait_bm_ready     0
`define dma_read          1
`define bm_read_prd       2
`define bm_ready          3


//typedef enum {setFeatIdle=0, setFeatWC=1, setFeatNWC=2, setFeatXFR0=3, setFeatXFR1=4} state_setFeatState_enum;
`define setFeatIdle       0
`define setFeatWC         1
`define setFeatNWC        2
`define setFeatXFR0       3
`define setFeatXFR1       4

//typedef enum {os_init=0, os_reset=1, os_write_cache=2, os_idle=3, os_read_pending=4, os_write_pending=5, os_read_ack_succ=6, os_read_ack_fail=7, os_write_ack_succ=8, os_write_ack_fail=9, os_error=10} state_osState_enum;
`define os_init           0
`define os_reset          1
`define os_write_cache    2
`define os_idle           3
`define os_read_pending   4
`define os_write_pending  5
`define os_read_ack_succ  6
`define os_read_ack_fail  7
`define os_write_ack_succ 8
`define os_write_ack_fail 9
`define os_error          10

module ide_hard_drive_controller_2(
        o_err,
        i_clk,
        i_osReqType_conc,
        i_reqLBA0_abs,
        i_reqLBA1_abs,
        i_reqSect0_abs,
        i_reqSect1_abs,
        i_reqBuf_abs,
        i_transSuccess_conc,
        controllable_tag_conc,
        controllable_bank_abs,
        controllable_addr_abs,
        controllable_write8_val_abs,
        controllable_fillPrdAddr_abs,
        controllable_fillPrdNSect_abs,
        controllable_featWCClass_conc,
        controllable_featNWCClass_conc,
        controllable_featXFRClass_conc,
        controllable_busMasterClass_conc,
        controllable_dmaStartClass_conc );

input i_clk;
input i_osReqType_conc ;
input [`WIDTH1:0] i_reqLBA0_abs ;
input [`WIDTH1:0] i_reqLBA1_abs ;
input [`WIDTH1:0] i_reqSect0_abs ;
input [`WIDTH1:0] i_reqSect1_abs ;
input [`WIDTH2:0] i_reqBuf_abs ;
input i_transSuccess_conc ;
input [3:0] controllable_tag_conc ;
input controllable_bank_abs ;
input [2:0] controllable_addr_abs ;
input [`WIDTH1:0] controllable_write8_val_abs ;
input [`WIDTH2:0] controllable_fillPrdAddr_abs ;
input [5:0] controllable_fillPrdNSect_abs ;
input controllable_featWCClass_conc ;
input controllable_featNWCClass_conc ;
input controllable_featXFRClass_conc ;
input controllable_busMasterClass_conc ;
input controllable_dmaStartClass_conc ;
output o_err;

reg [1:0] state_stDMACmd_conc ;
reg [2:0] state_setFeatState_conc ;
reg [1:0] state_regFeature0_abs ;
reg [`WIDTH1:0] state_regSectors0_abs ;
reg [`WIDTH1:0] state_regSectors1_abs ;
reg [`WIDTH1:0] state_regLBALow0_abs ;
reg [`WIDTH1:0] state_regLBALow1_abs ;
reg state_regDev_LBA_abs ;
reg [`WIDTH1:0] state_regCommand_abs ;
reg state_regBMCommand_Start_abs ;
reg state_regBMCommand_RW_abs ;
reg [`WIDTH2:0] state_bufAddr_abs ;
reg [5:0] state_bufSectors_abs ;

reg [3:0] state_osState_conc ;
reg [`WIDTH1:0] state_os_lba0_abs ;
reg [`WIDTH1:0] state_os_lba1_abs ;
reg [`WIDTH1:0] state_os_sect0_abs ;
reg [`WIDTH1:0] state_os_sect1_abs ;
reg [`WIDTH2:0] state_os_buf_abs ;

reg [3:0] fair_cnt;

wire transferMode3;
wire nwc;
wire bm_event;
wire transferCorrect;
wire transferCorrect_0;
wire transferCorrect_1;
wire buechi_satisfied;
wire [1:0] next_state_stDMACmd_conc ;
wire [2:0] next_state_setFeatState_conc ;
wire [1:0] next_state_regFeature0_abs ;
wire [`WIDTH1:0] next_state_regSectors0_abs ;
wire [`WIDTH1:0] next_state_regSectors1_abs ;
wire [`WIDTH1:0] next_state_regLBALow0_abs ;
wire [`WIDTH1:0] next_state_regLBALow1_abs ;
wire next_state_regDev_LBA_abs ;
wire [`WIDTH1:0] next_state_regCommand_abs ;
wire next_state_regBMCommand_Start_abs ;
wire next_state_regBMCommand_RW_abs ;
wire [`WIDTH2:0] next_state_bufAddr_abs ;
wire [5:0] next_state_bufSectors_abs ;

wire [3:0] next_state_osState_conc ;
wire [`WIDTH1:0] next_state_os_lba0_abs ;
wire [`WIDTH1:0] next_state_os_lba1_abs ;
wire [`WIDTH1:0] next_state_os_sect0_abs ;
wire [`WIDTH1:0] next_state_os_sect1_abs ;
wire [`WIDTH2:0] next_state_os_buf_abs ;

// some abbreviations:
assign transferMode3 = (state_setFeatState_conc==`setFeatXFR1 && controllable_featXFRClass_conc==1);
assign nwc =           (state_setFeatState_conc==`setFeatNWC  && controllable_featNWCClass_conc==1);
assign bm_event = (state_stDMACmd_conc==`bm_ready && controllable_busMasterClass_conc==1);
assign transferCorrect = (state_os_lba0_abs==state_regLBALow0_abs    &&
                          state_os_lba1_abs==state_regLBALow1_abs    &&
                          state_os_sect0_abs==state_regSectors0_abs  &&
                          state_os_sect1_abs==state_regSectors1_abs  &&
                          state_os_buf_abs==state_bufAddr_abs);
assign transferCorrect_0 = (transferCorrect      &&
                            state_regBMCommand_RW_abs==0);
assign transferCorrect_1 = (transferCorrect      &&
                            state_regBMCommand_RW_abs==1);


// state updates:
  //Device state updates:
assign next_state_regFeature0_abs  = (controllable_tag_conc==`write8 && controllable_bank_abs==`RCMD && controllable_addr_abs==`REG_FEATURE0) ? controllable_write8_val_abs  : state_regFeature0_abs;
assign next_state_regSectors0_abs  = (controllable_tag_conc==`write8 && controllable_bank_abs==`RCMD && controllable_addr_abs==`REG_SECTORS)  ? controllable_write8_val_abs  : state_regSectors0_abs;
assign next_state_regSectors1_abs  = (controllable_tag_conc==`write8 && controllable_bank_abs==`RCMD && controllable_addr_abs==`REG_SECTORS)  ? state_regSectors0_abs : state_regSectors1_abs;
assign next_state_regLBALow0_abs   = (controllable_tag_conc==`write8 && controllable_bank_abs==`RCMD && controllable_addr_abs==`REG_LBA_LOW)  ? controllable_write8_val_abs  : state_regLBALow0_abs;
assign next_state_regLBALow1_abs   = (controllable_tag_conc==`write8 && controllable_bank_abs==`RCMD && controllable_addr_abs==`REG_LBA_LOW)  ? state_regLBALow0_abs  : state_regLBALow1_abs;
assign next_state_regDev_LBA_abs   = (controllable_tag_conc==`write8 && controllable_bank_abs==`RCMD && controllable_addr_abs==`REG_DEV)      ? controllable_write8_val_abs[2:2] : state_regDev_LBA_abs;
assign next_state_regCommand_abs   = (controllable_tag_conc==`write8 && controllable_bank_abs==`RCMD && controllable_addr_abs==`REG_ERRCMD)   ? controllable_write8_val_abs  : state_regCommand_abs;
assign next_state_regBMCommand_Start_abs = (controllable_tag_conc==`write8 && controllable_bank_abs==`RDMA && controllable_addr_abs==`REG_BM_COMMAND) ? controllable_write8_val_abs[0:0] : state_regBMCommand_Start_abs;
assign next_state_regBMCommand_RW_abs = (controllable_tag_conc==`write8 && controllable_bank_abs==`RDMA && controllable_addr_abs==`REG_BM_COMMAND) ? controllable_write8_val_abs[1:1] : state_regBMCommand_RW_abs;
assign next_state_bufAddr_abs = (controllable_tag_conc==`fillPrd) ? controllable_fillPrdAddr_abs : state_bufAddr_abs;
assign next_state_bufSectors_abs = (controllable_tag_conc==`fillPrd) ? controllable_fillPrdNSect_abs : state_bufSectors_abs;

assign next_state_setFeatState_conc = (controllable_tag_conc==`class_event && state_setFeatState_conc==`setFeatIdle && state_regFeature0_abs==`FEAT_WC) ? `setFeatWC :
                 ((controllable_tag_conc==`class_event && state_setFeatState_conc==`setFeatIdle && state_regFeature0_abs==`FEAT_NWC) ? `setFeatNWC :
                 ((controllable_tag_conc==`class_event && state_setFeatState_conc==`setFeatIdle && state_regFeature0_abs==`FEAT_XFR_MODE && state_regSectors0_abs==`XM_ULTRA_DMA) ? `setFeatXFR0 :
                 ((controllable_tag_conc==`class_event && state_setFeatState_conc==`setFeatIdle && state_regFeature0_abs==`FEAT_XFR_MODE) ? `setFeatXFR1 :
                 ((controllable_tag_conc==`class_event && state_setFeatState_conc==`setFeatWC   && controllable_featWCClass_conc==1) ? `setFeatIdle :
                 ((controllable_tag_conc==`class_event && state_setFeatState_conc==`setFeatNWC  && controllable_featNWCClass_conc==1) ? `setFeatIdle :
                 ((controllable_tag_conc==`class_event && state_setFeatState_conc==`setFeatXFR0 && controllable_featXFRClass_conc==1) ? `setFeatIdle :
                 ((controllable_tag_conc==`class_event && state_setFeatState_conc==`setFeatXFR1 && controllable_featXFRClass_conc==1) ? `setFeatIdle : state_setFeatState_conc)))))));

assign next_state_stDMACmd_conc = (controllable_tag_conc==`write8 && controllable_bank_abs==`RDMA && controllable_addr_abs==`REG_BM_COMMAND) ?
               (
                 (state_regBMCommand_Start_abs==0 && controllable_write8_val_abs[0:0]==1) ? `bm_read_prd : state_stDMACmd_conc
               ) :
               (
                 (state_stDMACmd_conc==`bm_read_prd) ?
                 (((state_regBMCommand_RW_abs == 1 && state_regCommand_abs != `CMD_READ_DMA_EXT) || (state_regBMCommand_RW_abs == 0 && state_regCommand_abs != `CMD_WRITE_DMA_EXT) || (state_regSectors0_abs != state_bufSectors_abs[`WIDTH1:0]) || (state_regSectors1_abs != state_bufSectors_abs[5:3]) || state_regDev_LBA_abs != 1) ? state_stDMACmd_conc : ((controllable_dmaStartClass_conc==1) ? `bm_ready : state_stDMACmd_conc)) :
                 ((state_stDMACmd_conc==`bm_ready && controllable_busMasterClass_conc==1) ? `wait_bm_ready : state_stDMACmd_conc)
               );

//OS state updates
assign next_state_os_lba0_abs = (controllable_tag_conc==`os_req) ? i_reqLBA0_abs : state_os_lba0_abs;
assign next_state_os_lba1_abs = (controllable_tag_conc==`os_req) ? i_reqLBA1_abs : state_os_lba1_abs;
assign next_state_os_sect0_abs = (controllable_tag_conc==`os_req) ? i_reqSect0_abs : state_os_sect0_abs;
assign next_state_os_sect1_abs = (controllable_tag_conc==`os_req) ? i_reqSect1_abs : state_os_sect1_abs;
assign next_state_os_buf_abs = (controllable_tag_conc==`os_req) ? i_reqBuf_abs : state_os_buf_abs;

assign next_state_osState_conc = (state_osState_conc==`os_init && controllable_tag_conc==`reset) ? `os_reset :
      ((state_osState_conc==`os_reset && nwc && controllable_tag_conc==`class_event) ? `os_write_cache :
      ((state_osState_conc==`os_write_cache && transferMode3 && controllable_tag_conc==`class_event) ? `os_idle :
      ((state_osState_conc==`os_idle && controllable_tag_conc==`os_req && i_osReqType_conc==`read) ? `os_read_pending :
      ((state_osState_conc==`os_idle && controllable_tag_conc==`os_req && i_osReqType_conc==`write) ? `os_write_pending :
      ((state_osState_conc==`os_read_pending && bm_event && !transferCorrect_0 && controllable_tag_conc==`class_event) ? `os_error :
      ((state_osState_conc==`os_read_pending && bm_event && i_transSuccess_conc==1 && controllable_tag_conc==`class_event) ? `os_read_ack_succ :
      ((state_osState_conc==`os_read_pending && bm_event && i_transSuccess_conc==0 && controllable_tag_conc==`class_event) ? `os_read_ack_fail :
      ((state_osState_conc==`os_write_pending && bm_event && !transferCorrect_1 && controllable_tag_conc==`class_event) ? `os_error :
      ((state_osState_conc==`os_write_pending && bm_event && i_transSuccess_conc==1 && controllable_tag_conc==`class_event) ? `os_write_ack_succ :
      ((state_osState_conc==`os_write_pending && bm_event && i_transSuccess_conc==0 && controllable_tag_conc==`class_event) ? `os_write_ack_fail :
      ((state_osState_conc==`os_read_ack_succ && controllable_tag_conc==`ack_read_succ) ? `os_idle :
      ((state_osState_conc==`os_read_ack_fail && controllable_tag_conc==`ack_read_fail) ? `os_idle :
      ((state_osState_conc==`os_write_ack_succ && controllable_tag_conc==`ack_write_succ) ? `os_idle :
      ((state_osState_conc==`os_write_ack_fail && controllable_tag_conc==`ack_write_fail) ? `os_idle : state_osState_conc))))))))))))));


// buechi-to-safety construction:                            
assign buechi_satisfied = (state_osState_conc == `os_idle);                          
                            
assign o_err = (fair_cnt >= 9) || controllable_tag_conc >= 10;

initial
 begin
  state_stDMACmd_conc = `wait_bm_ready;
  state_setFeatState_conc = `setFeatIdle;
  state_regFeature0_abs = 0;
  state_regSectors0_abs = 0;
  state_regSectors1_abs = 0;
  state_regLBALow0_abs = 0;
  state_regLBALow1_abs = 0;
  state_regDev_LBA_abs = 0;
  state_regCommand_abs = 0;
  state_regBMCommand_Start_abs = 0;
  state_regBMCommand_RW_abs = 0;
  state_bufAddr_abs = 0;
  state_bufSectors_abs = 0;
  state_osState_conc = `os_init;
  state_os_lba0_abs = 0;
  state_os_lba1_abs = 0;
  state_os_sect0_abs = 0;
  state_os_sect1_abs = 0;
  state_os_buf_abs = 0;
  fair_cnt = 0;
 end

always @(posedge i_clk)
 begin

  if(buechi_satisfied)
   begin
    fair_cnt = 0;
   end
  else
   begin
    fair_cnt = fair_cnt + 1;
   end
 
  //Device state updates:
  state_regFeature0_abs          = next_state_regFeature0_abs ;
  state_regSectors0_abs          = next_state_regSectors0_abs ;
  state_regSectors1_abs          = next_state_regSectors1_abs ;
  state_regLBALow0_abs           = next_state_regLBALow0_abs ;
  state_regLBALow1_abs           = next_state_regLBALow1_abs ;
  state_regDev_LBA_abs           = next_state_regDev_LBA_abs ;
  state_regCommand_abs           = next_state_regCommand_abs ;
  state_regBMCommand_Start_abs   = next_state_regBMCommand_Start_abs ;
  state_regBMCommand_RW_abs      = next_state_regBMCommand_RW_abs ;
  state_bufAddr_abs              = next_state_bufAddr_abs ;
  state_bufSectors_abs           = next_state_bufSectors_abs ;
  state_setFeatState_conc        = next_state_setFeatState_conc ;
  state_stDMACmd_conc            = next_state_stDMACmd_conc ;
  state_os_lba0_abs              = next_state_os_lba0_abs ;
  state_os_lba1_abs              = next_state_os_lba1_abs ;
  state_os_sect0_abs             = next_state_os_sect0_abs ;
  state_os_sect1_abs             = next_state_os_sect1_abs ;
  state_os_buf_abs               = next_state_os_buf_abs ;
  state_osState_conc             = next_state_osState_conc ;
 end
 
 
endmodule
-------------------------------
#!SYNTCOMP
STATUS : realizable
SOLVED_BY : 3/3 [2015-pre-classification]
SOLVED_IN : 18.6018 [2015-pre-classification]
#.
