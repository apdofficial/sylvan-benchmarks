aag 746 40 54 1 652
2
4
6
8
10
12
14
16
18
20
22
24
26
28
30
32
34
36
38
40
42
44
46
48
50
52
54
56
58
60
62
64
66
68
70
72
74
76
78
80
82 1
84 259
86 271
88 283
90 299
92 311
94 329
96 341
98 353
100 365
102 377
104 389
106 401
108 413
110 511
112 530
114 548
116 565
118 577
120 589
122 601
124 613
126 625
128 649
130 667
132 685
134 695
136 709
138 863
140 891
142 897
144 903
146 909
148 1263
150 1312
152 1350
154 1388
156 1395
158 1401
160 1407
162 1413
164 1419
166 1425
168 1426
170 1434
172 1445
174 1451
176 1457
178 1463
180 1469
182 1475
184 1481
186 1487
188 1493
233
190 171 82
192 170 82
194 191 82
196 169 82
198 168 82
200 197 82
202 199 194
204 203 195
206 77 75
208 206 79
210 209 78
212 210 207
214 76 74
216 215 207
218 207 79
220 206 78
222 221 219
224 74 73
226 224 216
228 226 222
230 229 213
232 230 204
234 75 73
236 234 77
238 236 79
240 238 36
242 4 3
244 242 7
246 244 240
248 85 82
250 84 82
252 249 82
254 246 8
256 250 247
258 257 255
260 87 82
262 86 82
264 261 82
266 246 10
268 262 247
270 269 267
272 89 82
274 88 82
276 273 82
278 246 12
280 274 247
282 281 279
284 234 76
286 284 79
288 91 82
290 90 82
292 289 82
294 286 14
296 290 287
298 297 295
300 93 82
302 92 82
304 301 82
306 286 16
308 302 287
310 309 307
312 5 2
314 312 7
316 314 240
318 95 82
320 94 82
322 319 82
324 316 8
326 320 317
328 327 325
330 97 82
332 96 82
334 331 82
336 316 10
338 332 317
340 339 337
342 99 82
344 98 82
346 343 82
348 286 50
350 344 287
352 351 349
354 101 82
356 100 82
358 355 82
360 286 52
362 356 287
364 363 361
366 103 82
368 102 82
370 367 82
372 286 54
374 368 287
376 375 373
378 105 82
380 104 82
382 379 82
384 286 28
386 380 287
388 387 385
390 107 82
392 106 82
394 391 82
396 286 30
398 392 287
400 399 397
402 109 82
404 108 82
406 403 82
408 286 32
410 404 287
412 411 409
414 75 72
416 414 77
418 416 78
420 111 82
422 110 82
424 421 82
426 113 82
428 112 82
430 427 82
432 115 82
434 114 82
436 433 82
438 429 423
440 438 435
442 440 418
444 333 322
446 444 442
448 334 321
450 448 442
452 334 322
454 452 442
456 264 252
458 456 276
460 458 454
462 429 424
464 462 435
466 464 418
468 466 70
470 430 423
472 470 435
474 472 418
476 474 80
478 430 424
480 478 435
482 480 418
484 482 38
486 438 436
488 486 418
490 488 38
492 491 422
494 492 485
496 494 477
498 496 469
500 498 455
502 500 461
504 503 461
506 505 451
508 506 447
510 509 447
512 491 428
514 512 485
516 514 477
518 516 469
520 518 455
522 520 461
524 523 461
526 525 451
528 527 451
530 529 447
532 491 434
534 532 485
536 534 477
538 536 469
540 538 455
542 541 455
544 543 461
546 544 451
548 546 447
550 224 77
552 550 79
554 117 82
556 116 82
558 555 82
560 552 56
562 556 553
564 563 561
566 119 82
568 118 82
570 567 82
572 552 58
574 568 553
576 575 573
578 121 82
580 120 82
582 579 82
584 552 60
586 580 553
588 587 585
590 123 82
592 122 82
594 591 82
596 552 62
598 592 553
600 599 597
602 125 82
604 124 82
606 603 82
608 552 64
610 604 553
612 611 609
614 127 82
616 126 82
618 615 82
620 552 66
622 616 553
624 623 621
626 4 2
628 626 7
630 628 240
632 185 82
634 184 82
636 633 82
638 129 82
640 128 82
642 639 82
644 634 630
646 640 631
648 647 645
650 187 82
652 186 82
654 651 82
656 131 82
658 130 82
660 657 82
662 652 630
664 658 631
666 665 663
668 189 82
670 188 82
672 669 82
674 133 82
676 132 82
678 675 82
680 670 630
682 676 631
684 683 681
686 242 6
688 686 240
690 688 12
692 689 12
694 693 691
696 238 37
698 5 3
700 698 7
702 700 696
704 702 8
706 703 8
708 707 705
710 136 82
712 711 8
714 139 82
716 138 82
718 715 82
720 716 713
722 141 82
724 140 82
726 723 82
728 726 717
730 167 82
732 166 82
734 731 82
736 173 82
738 172 82
740 737 82
742 175 82
744 174 82
746 743 82
748 176 82
750 745 740
752 750 749
754 753 734
756 746 739
758 756 749
760 759 733
762 761 755
764 556 253
766 559 250
768 767 765
770 568 265
772 571 262
774 773 771
776 580 277
778 583 274
780 779 777
782 774 768
784 782 780
786 784 762
788 143 82
790 142 82
792 789 82
794 793 592
796 790 595
798 797 795
800 145 82
802 144 82
804 801 82
806 805 604
808 802 607
810 809 807
812 147 82
814 146 82
816 813 82
818 817 616
820 814 619
822 821 819
824 810 798
826 824 822
828 826 786
830 135 82
832 831 82
834 832 828
836 716 35
838 837 35
840 835 716
842 839 834
844 843 841
846 726 718
848 846 68
850 849 716
852 845 728
854 850 729
856 855 853
858 720 702
860 857 703
862 861 859
864 724 713
866 865 713
868 724 35
870 869 35
872 835 724
874 871 834
876 875 873
878 849 724
880 877 728
882 878 729
884 883 881
886 867 702
888 885 703
890 889 887
892 250 246
894 790 247
896 895 893
898 262 246
900 802 247
902 901 899
904 274 246
906 814 247
908 907 905
910 149 82
912 148 82
914 911 82
916 151 82
918 150 82
920 917 82
922 153 82
924 152 82
926 923 82
928 155 82
930 154 82
932 929 82
934 919 913
936 934 925
938 936 931
940 74 72
942 940 77
944 942 79
946 944 938
948 919 914
950 948 925
952 950 931
954 472 80
956 954 952
958 956 418
960 920 913
962 960 925
964 962 931
966 486 38
968 966 964
970 968 418
972 920 914
974 972 925
976 974 931
978 976 286
980 978 49
982 978 48
984 934 926
986 984 931
988 986 848
990 634 383
992 637 380
994 993 991
996 652 395
998 655 392
1000 999 997
1002 670 407
1004 673 404
1006 1005 1003
1008 1000 994
1010 1008 1006
1012 179 82
1014 178 82
1016 1013 82
1018 1017 640
1020 1014 643
1022 1021 1019
1024 181 82
1026 180 82
1028 1025 82
1030 1029 658
1032 1026 661
1034 1033 1031
1036 183 82
1038 182 82
1040 1037 82
1042 1041 676
1044 1038 679
1046 1045 1043
1048 1034 1022
1050 1048 1046
1052 1050 1010
1054 347 250
1056 344 253
1058 1057 1055
1060 359 262
1062 356 265
1064 1063 1061
1066 371 274
1068 368 277
1070 1069 1067
1072 1064 1058
1074 1072 1070
1076 1074 1052
1078 161 82
1080 160 82
1082 1079 82
1084 1083 790
1086 1080 793
1088 1087 1085
1090 163 82
1092 162 82
1094 1091 82
1096 1095 802
1098 1092 805
1100 1099 1097
1102 165 82
1104 164 82
1106 1103 82
1108 1107 814
1110 1104 817
1112 1111 1109
1114 1100 1088
1116 1114 1112
1118 1116 1076
1120 157 82
1122 156 82
1124 1121 82
1126 1122 293
1128 1125 290
1130 1129 1127
1132 159 82
1134 158 82
1136 1133 82
1138 1134 305
1140 1137 302
1142 1141 1139
1144 1142 1130
1146 1144 1118
1148 1146 733
1150 1149 988
1152 1150 418
1154 988 40
1156 1154 418
1158 988 41
1160 1158 418
1162 948 926
1164 1162 931
1166 1164 848
1168 1146 734
1170 1169 1166
1172 1170 418
1174 1166 40
1176 1174 418
1178 1166 41
1180 1178 418
1182 960 926
1184 1182 931
1186 414 76
1188 1186 79
1190 1188 1184
1192 972 926
1194 1192 931
1196 224 76
1198 1196 79
1200 1198 1194
1202 936 932
1204 940 76
1206 1204 79
1208 1206 1202
1210 950 932
1212 236 78
1214 1212 1210
1216 1215 912
1218 1217 1215
1220 1219 1209
1222 1221 1209
1224 1223 1201
1226 1225 1201
1228 1227 1191
1230 1229 1191
1232 1231 1181
1234 1233 1181
1236 1235 1177
1238 1236 1173
1240 1238 1161
1242 1241 1161
1244 1243 1157
1246 1244 1153
1248 1246 983
1250 1249 983
1252 1251 981
1254 1252 971
1256 1255 971
1258 1257 959
1260 1258 947
1262 1261 947
1264 1215 918
1266 1265 1215
1268 1267 1209
1270 1269 1209
1272 1271 1201
1274 1273 1201
1276 1275 1191
1278 1277 1191
1280 1279 1181
1282 1280 1177
1284 1282 1173
1286 1285 1173
1288 1287 1161
1290 1289 1161
1292 1291 1157
1294 1293 1157
1296 1295 1153
1298 1297 1153
1300 1299 983
1302 1300 981
1304 1302 971
1306 1305 971
1308 1307 959
1310 1309 959
1312 1311 947
1314 1215 924
1316 1314 1209
1318 1316 1201
1320 1318 1191
1322 1320 1181
1324 1322 1177
1326 1324 1173
1328 1326 1161
1330 1329 1161
1332 1331 1157
1334 1333 1157
1336 1335 1153
1338 1336 983
1340 1339 983
1342 1341 981
1344 1343 981
1346 1345 971
1348 1346 959
1350 1348 947
1352 1215 930
1354 1352 1209
1356 1354 1201
1358 1356 1191
1360 1358 1181
1362 1361 1181
1364 1363 1177
1366 1365 1177
1368 1367 1173
1370 1369 1173
1372 1371 1161
1374 1372 1157
1376 1374 1153
1378 1377 1153
1380 1379 983
1382 1380 981
1384 1382 971
1386 1384 959
1388 1386 947
1390 552 24
1392 1122 553
1394 1393 1391
1396 552 26
1398 1134 553
1400 1399 1397
1402 286 42
1404 1080 287
1406 1405 1403
1408 286 44
1410 1092 287
1412 1411 1409
1414 286 46
1416 1104 287
1418 1417 1415
1420 702 10
1422 703 10
1424 1423 1421
1426 977 201
1428 198 195
1430 199 192
1432 1431 1429
1434 1433 977
1436 626 6
1438 1436 240
1440 1438 8
1442 1439 738
1444 1443 1441
1446 1438 10
1448 1439 744
1450 1449 1447
1452 1438 12
1454 1439 748
1456 1455 1453
1458 286 18
1460 1014 287
1462 1461 1459
1464 286 20
1466 1026 287
1468 1467 1465
1470 286 22
1472 1038 287
1474 1473 1471
1476 630 8
1478 634 631
1480 1479 1477
1482 630 10
1484 652 631
1486 1485 1483
1488 630 12
1490 670 631
1492 1491 1489
i0 controllable_addr_abs<0>
i1 controllable_addr_abs<1>
i2 controllable_addr_abs<2>
i3 controllable_write8_val_abs<0>
i4 controllable_write8_val_abs<1>
i5 controllable_write8_val_abs<2>
i6 i_reqBuf_abs<0>
i7 i_reqBuf_abs<1>
i8 i_reqLBA1_abs<0>
i9 i_reqLBA1_abs<1>
i10 i_reqLBA1_abs<2>
i11 controllable_fillPrdAddr_abs<0>
i12 controllable_fillPrdAddr_abs<1>
i13 i_reqLBA0_abs<0>
i14 i_reqLBA0_abs<1>
i15 i_reqLBA0_abs<2>
i16 controllable_dmaStartClass_conc
i17 controllable_bank_abs
i18 controllable_featXFRClass_conc
i19 i_transSuccess_conc
i20 i_reqSect1_abs<0>
i21 i_reqSect1_abs<1>
i22 i_reqSect1_abs<2>
i23 i_osReqType_conc
i24 i_reqSect0_abs<0>
i25 i_reqSect0_abs<1>
i26 i_reqSect0_abs<2>
i27 controllable_fillPrdNSect_abs<0>
i28 controllable_fillPrdNSect_abs<1>
i29 controllable_fillPrdNSect_abs<2>
i30 controllable_fillPrdNSect_abs<3>
i31 controllable_fillPrdNSect_abs<4>
i32 controllable_fillPrdNSect_abs<5>
i33 controllable_busMasterClass_conc
i34 controllable_featWCClass_conc
i35 controllable_tag_conc<0>
i36 controllable_tag_conc<1>
i37 controllable_tag_conc<2>
i38 controllable_tag_conc<3>
i39 controllable_featNWCClass_conc
l0 n83
l1 state_regSectors0_abs<0>_out
l2 state_regSectors0_abs<1>_out
l3 state_regSectors0_abs<2>_out
l4 state_os_buf_abs<0>_out
l5 state_os_buf_abs<1>_out
l6 state_regFeature0_abs<0>_out
l7 state_regFeature0_abs<1>_out
l8 state_os_sect0_abs<0>_out
l9 state_os_sect0_abs<1>_out
l10 state_os_sect0_abs<2>_out
l11 state_os_lba0_abs<0>_out
l12 state_os_lba0_abs<1>_out
l13 state_os_lba0_abs<2>_out
l14 state_setFeatState_conc<0>_out
l15 state_setFeatState_conc<1>_out
l16 state_setFeatState_conc<2>_out
l17 state_bufSectors_abs<0>_out
l18 state_bufSectors_abs<1>_out
l19 state_bufSectors_abs<2>_out
l20 state_bufSectors_abs<3>_out
l21 state_bufSectors_abs<4>_out
l22 state_bufSectors_abs<5>_out
l23 state_regLBALow1_abs<0>_out
l24 state_regLBALow1_abs<1>_out
l25 state_regLBALow1_abs<2>_out
l26 state_regDev_LBA_abs_out
l27 state_regBMCommand_Start_abs_out
l28 state_stDMACmd_conc<0>_out
l29 state_stDMACmd_conc<1>_out
l30 state_regSectors1_abs<0>_out
l31 state_regSectors1_abs<1>_out
l32 state_regSectors1_abs<2>_out
l33 state_osState_conc<0>_out
l34 state_osState_conc<1>_out
l35 state_osState_conc<2>_out
l36 state_osState_conc<3>_out
l37 state_bufAddr_abs<0>_out
l38 state_bufAddr_abs<1>_out
l39 state_os_sect1_abs<0>_out
l40 state_os_sect1_abs<1>_out
l41 state_os_sect1_abs<2>_out
l42 state_regBMCommand_RW_abs_out
l43 fair_cnt<0>_out
l44 fair_cnt<1>_out
l45 state_regCommand_abs<0>_out
l46 state_regCommand_abs<1>_out
l47 state_regCommand_abs<2>_out
l48 state_os_lba1_abs<0>_out
l49 state_os_lba1_abs<1>_out
l50 state_os_lba1_abs<2>_out
l51 state_regLBALow0_abs<0>_out
l52 state_regLBALow0_abs<1>_out
l53 state_regLBALow0_abs<2>_out
o0 o_err
c
ide_hard_drive_controller_2
This file was written by ABC on Tue Mar 11 20:24:23 2014
For information about AIGER format, refer to http://fmv.jku.at/aiger
-------------------------------
This AIGER file has been created by the following sequence of commands:
> vl2mv driver_d2.v   ---gives--> driver_d2.mv
> abc -c "read_blif_mv driver_d2.mv; write_aiger -s driver_d2n.aig"   ---gives--> driver_d2n.aig
> aigtoaig driver_d2n.aig driver_d2n.aag   ---gives--> driver_d2n.aag (this file)
Content of driver_d2.v:
// IDE hard drive controller specification and operating system interface
// specification for device driver synthesis.
// This file describes a GR(1) game played by a device driver for an IDE hard
// disk against its environment consisting of the hard disk and operating
// system.

`define WIDTH1 2
`define WIDTH2 1

`define CMD_READ_DMA_EXT  1
`define CMD_WRITE_DMA_EXT 2
`define FEAT_WC           1
`define FEAT_NWC          2
`define FEAT_XFR_MODE     3
`define XM_ULTRA_DMA      7

`define RCMD              1
`define REG_FEATURE0      1
`define REG_SECTORS       2
`define REG_LBA_LOW       3
`define REG_LBA_MID       4
`define REG_LBA_HIGH      5
`define REG_DEV           6
`define REG_ERRCMD        7

`define RDMA              0
`define REG_BM_COMMAND    0

//typedef enum {read=0, write=1} i_osReqType_enum;
`define read              0
`define write             1

//typedef enum {write8, write32, fillPrd, reset, os_req, ack_read_succ, ack_read_fail, ack_write_succ, ack_write_fail, class_event} controllable_tag_enum;
`define write8            0
`define write32           1
`define fillPrd           2
`define reset             3
`define os_req            4
`define ack_read_succ     5
`define ack_read_fail     6
`define ack_write_succ    7
`define ack_write_fail    8
`define class_event       9

//typedef enum {wait_bm_ready=0, dma_read=1, bm_read_prd=2, bm_ready=3} state_stDMACmd_enum;
`define wait_bm_ready     0
`define dma_read          1
`define bm_read_prd       2
`define bm_ready          3


//typedef enum {setFeatIdle=0, setFeatWC=1, setFeatNWC=2, setFeatXFR0=3, setFeatXFR1=4} state_setFeatState_enum;
`define setFeatIdle       0
`define setFeatWC         1
`define setFeatNWC        2
`define setFeatXFR0       3
`define setFeatXFR1       4

//typedef enum {os_init=0, os_reset=1, os_write_cache=2, os_idle=3, os_read_pending=4, os_write_pending=5, os_read_ack_succ=6, os_read_ack_fail=7, os_write_ack_succ=8, os_write_ack_fail=9, os_error=10} state_osState_enum;
`define os_init           0
`define os_reset          1
`define os_write_cache    2
`define os_idle           3
`define os_read_pending   4
`define os_write_pending  5
`define os_read_ack_succ  6
`define os_read_ack_fail  7
`define os_write_ack_succ 8
`define os_write_ack_fail 9
`define os_error          10

module ide_hard_drive_controller_2(
        o_err,
        i_clk,
        i_osReqType_conc,
        i_reqLBA0_abs,
        i_reqLBA1_abs,
        i_reqSect0_abs,
        i_reqSect1_abs,
        i_reqBuf_abs,
        i_transSuccess_conc,
        controllable_tag_conc,
        controllable_bank_abs,
        controllable_addr_abs,
        controllable_write8_val_abs,
        controllable_fillPrdAddr_abs,
        controllable_fillPrdNSect_abs,
        controllable_featWCClass_conc,
        controllable_featNWCClass_conc,
        controllable_featXFRClass_conc,
        controllable_busMasterClass_conc,
        controllable_dmaStartClass_conc );

input i_clk;
input i_osReqType_conc ;
input [`WIDTH1:0] i_reqLBA0_abs ;
input [`WIDTH1:0] i_reqLBA1_abs ;
input [`WIDTH1:0] i_reqSect0_abs ;
input [`WIDTH1:0] i_reqSect1_abs ;
input [`WIDTH2:0] i_reqBuf_abs ;
input i_transSuccess_conc ;
input [3:0] controllable_tag_conc ;
input controllable_bank_abs ;
input [2:0] controllable_addr_abs ;
input [`WIDTH1:0] controllable_write8_val_abs ;
input [`WIDTH2:0] controllable_fillPrdAddr_abs ;
input [5:0] controllable_fillPrdNSect_abs ;
input controllable_featWCClass_conc ;
input controllable_featNWCClass_conc ;
input controllable_featXFRClass_conc ;
input controllable_busMasterClass_conc ;
input controllable_dmaStartClass_conc ;
output o_err;

reg [1:0] state_stDMACmd_conc ;
reg [2:0] state_setFeatState_conc ;
reg [1:0] state_regFeature0_abs ;
reg [`WIDTH1:0] state_regSectors0_abs ;
reg [`WIDTH1:0] state_regSectors1_abs ;
reg [`WIDTH1:0] state_regLBALow0_abs ;
reg [`WIDTH1:0] state_regLBALow1_abs ;
reg state_regDev_LBA_abs ;
reg [`WIDTH1:0] state_regCommand_abs ;
reg state_regBMCommand_Start_abs ;
reg state_regBMCommand_RW_abs ;
reg [`WIDTH2:0] state_bufAddr_abs ;
reg [5:0] state_bufSectors_abs ;

reg [3:0] state_osState_conc ;
reg [`WIDTH1:0] state_os_lba0_abs ;
reg [`WIDTH1:0] state_os_lba1_abs ;
reg [`WIDTH1:0] state_os_sect0_abs ;
reg [`WIDTH1:0] state_os_sect1_abs ;
reg [`WIDTH2:0] state_os_buf_abs ;

reg [1:0] fair_cnt;

wire transferMode3;
wire nwc;
wire bm_event;
wire transferCorrect;
wire transferCorrect_0;
wire transferCorrect_1;
wire buechi_satisfied;
wire [1:0] next_state_stDMACmd_conc ;
wire [2:0] next_state_setFeatState_conc ;
wire [1:0] next_state_regFeature0_abs ;
wire [`WIDTH1:0] next_state_regSectors0_abs ;
wire [`WIDTH1:0] next_state_regSectors1_abs ;
wire [`WIDTH1:0] next_state_regLBALow0_abs ;
wire [`WIDTH1:0] next_state_regLBALow1_abs ;
wire next_state_regDev_LBA_abs ;
wire [`WIDTH1:0] next_state_regCommand_abs ;
wire next_state_regBMCommand_Start_abs ;
wire next_state_regBMCommand_RW_abs ;
wire [`WIDTH2:0] next_state_bufAddr_abs ;
wire [5:0] next_state_bufSectors_abs ;

wire [3:0] next_state_osState_conc ;
wire [`WIDTH1:0] next_state_os_lba0_abs ;
wire [`WIDTH1:0] next_state_os_lba1_abs ;
wire [`WIDTH1:0] next_state_os_sect0_abs ;
wire [`WIDTH1:0] next_state_os_sect1_abs ;
wire [`WIDTH2:0] next_state_os_buf_abs ;

// some abbreviations:
assign transferMode3 = (state_setFeatState_conc==`setFeatXFR1 && controllable_featXFRClass_conc==1);
assign nwc =           (state_setFeatState_conc==`setFeatNWC  && controllable_featNWCClass_conc==1);
assign bm_event = (state_stDMACmd_conc==`bm_ready && controllable_busMasterClass_conc==1);
assign transferCorrect = (state_os_lba0_abs==state_regLBALow0_abs    &&
                          state_os_lba1_abs==state_regLBALow1_abs    &&
                          state_os_sect0_abs==state_regSectors0_abs  &&
                          state_os_sect1_abs==state_regSectors1_abs  &&
                          state_os_buf_abs==state_bufAddr_abs);
assign transferCorrect_0 = (transferCorrect      &&
                            state_regBMCommand_RW_abs==0);
assign transferCorrect_1 = (transferCorrect      &&
                            state_regBMCommand_RW_abs==1);


// state updates:
  //Device state updates:
assign next_state_regFeature0_abs  = (controllable_tag_conc==`write8 && controllable_bank_abs==`RCMD && controllable_addr_abs==`REG_FEATURE0) ? controllable_write8_val_abs  : state_regFeature0_abs;
assign next_state_regSectors0_abs  = (controllable_tag_conc==`write8 && controllable_bank_abs==`RCMD && controllable_addr_abs==`REG_SECTORS)  ? controllable_write8_val_abs  : state_regSectors0_abs;
assign next_state_regSectors1_abs  = (controllable_tag_conc==`write8 && controllable_bank_abs==`RCMD && controllable_addr_abs==`REG_SECTORS)  ? state_regSectors0_abs : state_regSectors1_abs;
assign next_state_regLBALow0_abs   = (controllable_tag_conc==`write8 && controllable_bank_abs==`RCMD && controllable_addr_abs==`REG_LBA_LOW)  ? controllable_write8_val_abs  : state_regLBALow0_abs;
assign next_state_regLBALow1_abs   = (controllable_tag_conc==`write8 && controllable_bank_abs==`RCMD && controllable_addr_abs==`REG_LBA_LOW)  ? state_regLBALow0_abs  : state_regLBALow1_abs;
assign next_state_regDev_LBA_abs   = (controllable_tag_conc==`write8 && controllable_bank_abs==`RCMD && controllable_addr_abs==`REG_DEV)      ? controllable_write8_val_abs[2:2] : state_regDev_LBA_abs;
assign next_state_regCommand_abs   = (controllable_tag_conc==`write8 && controllable_bank_abs==`RCMD && controllable_addr_abs==`REG_ERRCMD)   ? controllable_write8_val_abs  : state_regCommand_abs;
assign next_state_regBMCommand_Start_abs = (controllable_tag_conc==`write8 && controllable_bank_abs==`RDMA && controllable_addr_abs==`REG_BM_COMMAND) ? controllable_write8_val_abs[0:0] : state_regBMCommand_Start_abs;
assign next_state_regBMCommand_RW_abs = (controllable_tag_conc==`write8 && controllable_bank_abs==`RDMA && controllable_addr_abs==`REG_BM_COMMAND) ? controllable_write8_val_abs[1:1] : state_regBMCommand_RW_abs;
assign next_state_bufAddr_abs = (controllable_tag_conc==`fillPrd) ? controllable_fillPrdAddr_abs : state_bufAddr_abs;
assign next_state_bufSectors_abs = (controllable_tag_conc==`fillPrd) ? controllable_fillPrdNSect_abs : state_bufSectors_abs;

assign next_state_setFeatState_conc = (controllable_tag_conc==`class_event && state_setFeatState_conc==`setFeatIdle && state_regFeature0_abs==`FEAT_WC) ? `setFeatWC :
                 ((controllable_tag_conc==`class_event && state_setFeatState_conc==`setFeatIdle && state_regFeature0_abs==`FEAT_NWC) ? `setFeatNWC :
                 ((controllable_tag_conc==`class_event && state_setFeatState_conc==`setFeatIdle && state_regFeature0_abs==`FEAT_XFR_MODE && state_regSectors0_abs==`XM_ULTRA_DMA) ? `setFeatXFR0 :
                 ((controllable_tag_conc==`class_event && state_setFeatState_conc==`setFeatIdle && state_regFeature0_abs==`FEAT_XFR_MODE) ? `setFeatXFR1 :
                 ((controllable_tag_conc==`class_event && state_setFeatState_conc==`setFeatWC   && controllable_featWCClass_conc==1) ? `setFeatIdle :
                 ((controllable_tag_conc==`class_event && state_setFeatState_conc==`setFeatNWC  && controllable_featNWCClass_conc==1) ? `setFeatIdle :
                 ((controllable_tag_conc==`class_event && state_setFeatState_conc==`setFeatXFR0 && controllable_featXFRClass_conc==1) ? `setFeatIdle :
                 ((controllable_tag_conc==`class_event && state_setFeatState_conc==`setFeatXFR1 && controllable_featXFRClass_conc==1) ? `setFeatIdle : state_setFeatState_conc)))))));

assign next_state_stDMACmd_conc = (controllable_tag_conc==`write8 && controllable_bank_abs==`RDMA && controllable_addr_abs==`REG_BM_COMMAND) ?
               (
                 (state_regBMCommand_Start_abs==0 && controllable_write8_val_abs[0:0]==1) ? `bm_read_prd : state_stDMACmd_conc
               ) :
               (
                 (state_stDMACmd_conc==`bm_read_prd) ?
                 (((state_regBMCommand_RW_abs == 1 && state_regCommand_abs != `CMD_READ_DMA_EXT) || (state_regBMCommand_RW_abs == 0 && state_regCommand_abs != `CMD_WRITE_DMA_EXT) || (state_regSectors0_abs != state_bufSectors_abs[`WIDTH1:0]) || (state_regSectors1_abs != state_bufSectors_abs[5:3]) || state_regDev_LBA_abs != 1) ? state_stDMACmd_conc : ((controllable_dmaStartClass_conc==1) ? `bm_ready : state_stDMACmd_conc)) :
                 ((state_stDMACmd_conc==`bm_ready && controllable_busMasterClass_conc==1) ? `wait_bm_ready : state_stDMACmd_conc)
               );

//OS state updates
assign next_state_os_lba0_abs = (controllable_tag_conc==`os_req) ? i_reqLBA0_abs : state_os_lba0_abs;
assign next_state_os_lba1_abs = (controllable_tag_conc==`os_req) ? i_reqLBA1_abs : state_os_lba1_abs;
assign next_state_os_sect0_abs = (controllable_tag_conc==`os_req) ? i_reqSect0_abs : state_os_sect0_abs;
assign next_state_os_sect1_abs = (controllable_tag_conc==`os_req) ? i_reqSect1_abs : state_os_sect1_abs;
assign next_state_os_buf_abs = (controllable_tag_conc==`os_req) ? i_reqBuf_abs : state_os_buf_abs;

assign next_state_osState_conc = (state_osState_conc==`os_init && controllable_tag_conc==`reset) ? `os_reset :
      ((state_osState_conc==`os_reset && nwc && controllable_tag_conc==`class_event) ? `os_write_cache :
      ((state_osState_conc==`os_write_cache && transferMode3 && controllable_tag_conc==`class_event) ? `os_idle :
      ((state_osState_conc==`os_idle && controllable_tag_conc==`os_req && i_osReqType_conc==`read) ? `os_read_pending :
      ((state_osState_conc==`os_idle && controllable_tag_conc==`os_req && i_osReqType_conc==`write) ? `os_write_pending :
      ((state_osState_conc==`os_read_pending && bm_event && !transferCorrect_0 && controllable_tag_conc==`class_event) ? `os_error :
      ((state_osState_conc==`os_read_pending && bm_event && i_transSuccess_conc==1 && controllable_tag_conc==`class_event) ? `os_read_ack_succ :
      ((state_osState_conc==`os_read_pending && bm_event && i_transSuccess_conc==0 && controllable_tag_conc==`class_event) ? `os_read_ack_fail :
      ((state_osState_conc==`os_write_pending && bm_event && !transferCorrect_1 && controllable_tag_conc==`class_event) ? `os_error :
      ((state_osState_conc==`os_write_pending && bm_event && i_transSuccess_conc==1 && controllable_tag_conc==`class_event) ? `os_write_ack_succ :
      ((state_osState_conc==`os_write_pending && bm_event && i_transSuccess_conc==0 && controllable_tag_conc==`class_event) ? `os_write_ack_fail :
      ((state_osState_conc==`os_read_ack_succ && controllable_tag_conc==`ack_read_succ) ? `os_idle :
      ((state_osState_conc==`os_read_ack_fail && controllable_tag_conc==`ack_read_fail) ? `os_idle :
      ((state_osState_conc==`os_write_ack_succ && controllable_tag_conc==`ack_write_succ) ? `os_idle :
      ((state_osState_conc==`os_write_ack_fail && controllable_tag_conc==`ack_write_fail) ? `os_idle : state_osState_conc))))))))))))));


// buechi-to-safety construction:                            
assign buechi_satisfied = (state_osState_conc == `os_idle);                          
                            
assign o_err = (fair_cnt >= 2) || controllable_tag_conc >= 10;

initial
 begin
  state_stDMACmd_conc = `wait_bm_ready;
  state_setFeatState_conc = `setFeatIdle;
  state_regFeature0_abs = 0;
  state_regSectors0_abs = 0;
  state_regSectors1_abs = 0;
  state_regLBALow0_abs = 0;
  state_regLBALow1_abs = 0;
  state_regDev_LBA_abs = 0;
  state_regCommand_abs = 0;
  state_regBMCommand_Start_abs = 0;
  state_regBMCommand_RW_abs = 0;
  state_bufAddr_abs = 0;
  state_bufSectors_abs = 0;
  state_osState_conc = `os_init;
  state_os_lba0_abs = 0;
  state_os_lba1_abs = 0;
  state_os_sect0_abs = 0;
  state_os_sect1_abs = 0;
  state_os_buf_abs = 0;
  fair_cnt = 0;
 end

always @(posedge i_clk)
 begin

  if(buechi_satisfied)
   begin
    fair_cnt = 0;
   end
  else
   begin
    fair_cnt = fair_cnt + 1;
   end
 
  //Device state updates:
  state_regFeature0_abs          = next_state_regFeature0_abs ;
  state_regSectors0_abs          = next_state_regSectors0_abs ;
  state_regSectors1_abs          = next_state_regSectors1_abs ;
  state_regLBALow0_abs           = next_state_regLBALow0_abs ;
  state_regLBALow1_abs           = next_state_regLBALow1_abs ;
  state_regDev_LBA_abs           = next_state_regDev_LBA_abs ;
  state_regCommand_abs           = next_state_regCommand_abs ;
  state_regBMCommand_Start_abs   = next_state_regBMCommand_Start_abs ;
  state_regBMCommand_RW_abs      = next_state_regBMCommand_RW_abs ;
  state_bufAddr_abs              = next_state_bufAddr_abs ;
  state_bufSectors_abs           = next_state_bufSectors_abs ;
  state_setFeatState_conc        = next_state_setFeatState_conc ;
  state_stDMACmd_conc            = next_state_stDMACmd_conc ;
  state_os_lba0_abs              = next_state_os_lba0_abs ;
  state_os_lba1_abs              = next_state_os_lba1_abs ;
  state_os_sect0_abs             = next_state_os_sect0_abs ;
  state_os_sect1_abs             = next_state_os_sect1_abs ;
  state_os_buf_abs               = next_state_os_buf_abs ;
  state_osState_conc             = next_state_osState_conc ;
 end
 
 
endmodule
-------------------------------
#!SYNTCOMP
STATUS : unrealizable
SOLVED_BY : 3/3 [2015-pre-classification]
SOLVED_IN : 0.064567 [2015-pre-classification]
#.
