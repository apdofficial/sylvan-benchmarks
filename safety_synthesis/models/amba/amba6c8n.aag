aag 812 29 48 1 735
2
4
6
8
10
12
14
16
18
20
22
24
26
28
30
32
34
36
38
40
42
44
46
48
50
52
54
56
58
60 1
62 10
64 54
66 14
68 1061
70 52
72 18
74 1145
76 22
78 1169
80 6
82 46
84 28
86 1189
88 30
90 26
92 8
94 38
96 24
98 1219
100 1241
102 40
104 20
106 58
108 1263
110 2
112 42
114 1287
116 16
118 1429
120 1435
122 1441
124 1447
126 1541
128 1547
130 1553
132 1559
134 1581
136 44
138 12
140 32
142 183
144 1603
146 48
148 4
150 1625
152 50
154 56
876
156 39 12
158 41 16
160 159 157
162 43 20
164 163 160
166 45 24
168 167 164
170 49 26
172 171 168
174 51 28
176 175 172
178 143 60
180 179 60
182 181 176
184 57 55
186 184 53
188 38 31
190 39 30
192 191 189
194 193 186
196 56 55
198 196 53
200 40 31
202 41 30
204 203 201
206 205 198
208 207 195
210 57 54
212 210 53
214 42 31
216 43 30
218 217 215
220 219 212
222 221 208
224 56 54
226 224 53
228 44 31
230 45 30
232 231 229
234 233 226
236 235 222
238 184 52
240 48 31
242 49 30
244 243 241
246 245 238
248 247 236
250 196 52
252 50 31
254 51 30
256 255 253
258 257 250
260 259 248
262 141 60
264 140 60
266 263 60
268 267 9
270 269 260
272 99 60
274 98 60
276 273 60
278 274 9
280 279 270
282 75 60
284 74 60
286 283 60
288 79 60
290 78 60
292 289 60
294 293 287
296 87 60
298 86 60
300 297 60
302 301 294
304 303 9
306 305 280
308 111 60
310 110 60
312 309 60
314 310 186
316 313 187
318 317 315
320 319 264
322 321 306
324 149 60
326 148 60
328 325 60
330 329 198
332 326 199
334 333 331
336 335 264
338 337 322
340 63 60
342 62 60
344 341 60
346 345 212
348 342 213
350 349 347
352 351 264
354 353 338
356 67 60
358 66 60
360 357 60
362 361 226
364 358 227
366 365 363
368 367 264
370 369 354
372 73 60
374 72 60
376 373 60
378 377 238
380 374 239
382 381 379
384 383 264
386 385 370
388 77 60
390 76 60
392 389 60
394 393 250
396 390 251
398 397 395
400 399 264
402 401 386
404 81 60
406 80 60
408 405 60
410 406 59
412 409 58
414 413 411
416 415 264
418 417 402
420 155 60
422 154 60
424 421 60
426 65 60
428 64 60
430 427 60
432 431 425
434 71 60
436 70 60
438 435 60
440 439 432
442 441 186
444 440 187
446 445 443
448 447 8
450 449 418
452 431 422
454 452 439
456 455 198
458 454 199
460 459 457
462 461 8
464 463 450
466 428 425
468 466 439
470 469 212
472 468 213
474 473 471
476 475 8
478 477 464
480 428 422
482 480 439
484 483 226
486 482 227
488 487 485
490 489 8
492 491 478
494 436 432
496 495 238
498 494 239
500 499 497
502 501 8
504 503 492
506 452 436
508 507 250
510 506 251
512 511 509
514 513 8
516 515 504
518 107 60
520 106 60
522 519 60
524 523 58
526 520 59
528 527 525
530 529 8
532 531 516
534 83 60
536 82 60
538 535 60
540 139 60
542 138 60
544 541 60
546 542 539
548 546 3
550 548 7
552 551 532
554 545 539
556 554 3
558 556 6
560 559 552
562 117 60
564 116 60
566 563 60
568 564 539
570 568 4
572 570 7
574 573 560
576 567 539
578 576 4
580 578 6
582 581 574
584 105 60
586 104 60
588 585 60
590 586 539
592 590 10
594 592 7
596 595 582
598 589 539
600 598 10
602 600 6
604 603 596
606 97 60
608 96 60
610 607 60
612 608 539
614 612 14
616 614 7
618 617 604
620 611 539
622 620 14
624 622 6
626 625 618
628 91 60
630 90 60
632 629 60
634 630 539
636 634 18
638 636 7
640 639 626
642 633 539
644 642 18
646 644 6
648 647 640
650 85 60
652 84 60
654 651 60
656 652 539
658 656 22
660 658 7
662 661 648
664 655 539
666 664 22
668 666 6
670 669 662
672 313 2
674 310 3
676 675 673
678 677 536
680 679 670
682 326 5
684 329 4
686 685 683
688 687 536
690 689 680
692 342 11
694 345 10
696 695 693
698 697 536
700 699 690
702 358 15
704 361 14
706 705 703
708 707 536
710 709 700
712 374 19
714 377 18
716 715 713
718 717 536
720 719 710
722 390 23
724 393 22
726 725 723
728 727 536
730 729 720
732 406 7
734 409 6
736 735 733
738 737 536
740 739 730
742 101 60
744 100 60
746 743 60
748 41 4
750 748 744
752 751 740
754 109 60
756 108 60
758 755 60
760 43 10
762 760 756
764 763 752
766 135 60
768 134 60
770 767 60
772 45 14
774 772 768
776 775 764
778 145 60
780 144 60
782 779 60
784 49 18
786 784 780
788 787 776
790 151 60
792 150 60
794 791 60
796 51 22
798 796 792
800 799 788
802 95 60
804 803 60
806 103 60
808 807 60
810 809 805
812 113 60
814 813 60
816 815 810
818 137 60
820 819 60
822 821 816
824 147 60
826 825 60
828 827 822
830 153 60
832 831 60
834 833 828
836 834 539
838 836 2
840 839 800
842 125 60
844 124 60
846 843 60
848 123 60
850 122 60
852 849 60
854 121 60
856 120 60
858 855 60
860 119 60
862 118 60
864 861 60
866 863 857
868 866 851
870 868 846
872 871 847
874 872 840
876 875 182
878 127 60
880 126 60
882 879 60
884 129 60
886 128 60
888 885 60
890 131 60
892 130 60
894 891 60
896 132 60
898 887 881
900 898 893
902 900 897
904 902 277
906 887 882
908 906 893
910 908 897
912 910 302
914 888 881
916 914 893
918 916 897
920 187 38
922 921 918
924 888 882
926 924 893
928 926 897
930 199 40
932 931 928
934 898 894
936 934 897
938 213 42
940 939 936
942 906 894
944 942 897
946 227 44
948 947 944
950 914 894
952 950 897
954 239 48
956 955 952
958 924 894
960 958 897
962 251 50
964 963 960
966 69 60
968 68 60
970 967 60
972 115 60
974 114 60
976 973 60
978 977 971
980 968 32
982 912 905
984 983 905
986 913 905
988 986 922
990 989 984
992 986 923
994 992 932
996 995 990
998 992 933
1000 998 940
1002 1001 996
1004 998 941
1006 1004 948
1008 1007 1002
1010 1004 949
1012 1010 956
1014 1013 1008
1016 1010 957
1018 1016 964
1020 1019 1014
1022 1016 965
1024 1022 978
1026 1025 1020
1028 1022 979
1030 1028 980
1032 1031 1026
1034 981 968
1036 1034 979
1038 1037 979
1040 1039 965
1042 1040 957
1044 1042 949
1046 1044 941
1048 1046 933
1050 1048 923
1052 1050 913
1054 1052 905
1056 1054 1033
1058 1032 968
1060 1059 1057
1062 302 58
1064 1062 9
1066 1064 37
1068 1066 34
1070 1068 33
1072 1068 32
1074 293 284
1076 1074 301
1078 1076 32
1080 290 287
1082 1080 301
1084 1082 32
1086 290 284
1088 1086 301
1090 1088 32
1092 298 294
1094 1092 32
1096 1072 1071
1098 1097 1071
1100 1073 1071
1102 1100 1078
1104 1103 1098
1106 1100 1079
1108 1106 1084
1110 1109 1104
1112 1106 1085
1114 1112 1090
1116 1115 1110
1118 1112 1091
1120 1118 1094
1122 1121 1116
1124 1095 284
1126 1124 1091
1128 1126 1085
1130 1129 1085
1132 1131 1079
1134 1132 1073
1136 1134 1071
1138 1137 1071
1140 1139 1123
1142 1122 284
1144 1143 1141
1146 1095 290
1148 1146 1091
1150 1148 1085
1152 1151 1085
1154 1153 1079
1156 1155 1079
1158 1157 1073
1160 1159 1073
1162 1161 1071
1164 1162 1123
1166 1122 290
1168 1167 1165
1170 1095 298
1172 1170 1091
1174 1173 1091
1176 1175 1085
1178 1176 1079
1180 1178 1073
1182 1180 1071
1184 1182 1123
1186 1122 298
1188 1187 1185
1190 58 9
1192 1190 37
1194 1192 35
1196 1194 277
1198 274 31
1200 1199 1197
1202 1195 274
1204 1203 1195
1206 274 30
1208 1205 277
1210 1206 274
1212 1211 1209
1214 1213 1201
1216 1200 274
1218 1217 1215
1220 747 5
1222 1220 41
1224 744 40
1226 1224 1223
1228 1227 1223
1230 1225 744
1232 1230 1223
1234 1233 1223
1236 1235 1229
1238 1228 744
1240 1239 1237
1242 759 11
1244 1242 43
1246 756 42
1248 1246 1245
1250 1249 1245
1252 1247 756
1254 1252 1245
1256 1255 1245
1258 1257 1251
1260 1250 756
1262 1261 1259
1264 977 58
1266 1264 37
1268 1266 35
1270 974 31
1272 1270 1269
1274 1273 1269
1276 1271 974
1278 1276 1269
1280 1279 1269
1282 1281 1275
1284 1274 974
1286 1285 1283
1288 1031 1020
1290 980 865
1292 981 862
1294 1293 1291
1296 978 862
1298 1295 979
1300 1299 1297
1302 1301 965
1304 1302 957
1306 1304 949
1308 1306 941
1310 1308 933
1312 1310 923
1314 1312 913
1316 1314 905
1318 862 859
1320 863 856
1322 1321 1319
1324 1323 980
1326 981 856
1328 1327 1325
1330 978 856
1332 1329 979
1334 1333 1331
1336 1335 965
1338 1336 957
1340 1338 949
1342 1340 941
1344 1342 933
1346 1344 923
1348 1346 913
1350 1348 905
1352 862 856
1354 1352 853
1356 1353 850
1358 1357 1355
1360 1359 980
1362 981 850
1364 1363 1361
1366 978 850
1368 1365 979
1370 1369 1367
1372 1371 965
1374 1372 957
1376 1374 949
1378 1376 941
1380 1378 933
1382 1380 923
1384 1382 913
1386 1384 905
1388 1352 850
1390 1388 847
1392 1389 844
1394 1393 1391
1396 1395 980
1398 981 844
1400 1399 1397
1402 978 844
1404 1401 979
1406 1405 1403
1408 1407 965
1410 1408 957
1412 1410 949
1414 1412 941
1416 1414 933
1418 1416 923
1420 1418 913
1422 1420 905
1424 1316 1289
1426 1288 862
1428 1427 1425
1430 1350 1289
1432 1288 856
1434 1433 1431
1436 1386 1289
1438 1288 850
1440 1439 1437
1442 1422 1289
1444 1288 844
1446 1445 1443
1448 965 880
1450 1448 957
1452 1451 957
1454 1453 949
1456 1454 941
1458 1457 941
1460 1459 933
1462 1460 923
1464 1463 923
1466 1465 913
1468 1466 905
1470 1469 905
1472 965 886
1474 1472 957
1476 1475 957
1478 1477 949
1480 1479 949
1482 1481 941
1484 1482 933
1486 1484 923
1488 1487 923
1490 1489 913
1492 1491 913
1494 1493 905
1496 965 892
1498 1496 957
1500 1499 957
1502 1501 949
1504 1503 949
1506 1505 941
1508 1507 941
1510 1509 933
1512 1511 933
1514 1513 923
1516 1514 913
1518 1516 905
1520 965 896
1522 1520 957
1524 1522 949
1526 1524 941
1528 1526 933
1530 1528 923
1532 1530 913
1534 1532 905
1536 1471 1021
1538 1020 880
1540 1539 1537
1542 1494 1021
1544 1020 886
1546 1545 1543
1548 1518 1021
1550 1020 892
1552 1551 1549
1554 1534 1021
1556 1020 896
1558 1557 1555
1560 771 15
1562 1560 45
1564 768 44
1566 1564 1563
1568 1567 1563
1570 1565 768
1572 1570 1563
1574 1573 1563
1576 1575 1569
1578 1568 768
1580 1579 1577
1582 783 19
1584 1582 49
1586 780 48
1588 1586 1585
1590 1589 1585
1592 1587 780
1594 1592 1585
1596 1595 1585
1598 1597 1591
1600 1590 780
1602 1601 1599
1604 795 23
1606 1604 51
1608 792 50
1610 1608 1607
1612 1611 1607
1614 1609 792
1616 1614 1607
1618 1617 1607
1620 1619 1613
1622 1612 792
1624 1623 1621
i0 controllable_nhgrant0
i1 controllable_hgrant1
i2 controllable_locked
i3 controllable_nstart
i4 controllable_hgrant2
i5 i_hlock0
i6 controllable_hgrant3
i7 i_hlock1
i8 controllable_hgrant4
i9 i_hlock2
i10 controllable_hgrant5
i11 i_hlock3
i12 i_hlock4
i13 i_hlock5
i14 controllable_busreq
i15 i_hready
i16 i_hburst1
i17 i_hburst0
i18 i_hbusreq0
i19 i_hbusreq1
i20 i_hbusreq2
i21 i_hbusreq3
i22 controllable_ndecide
i23 i_hbusreq4
i24 i_hbusreq5
i25 controllable_hmaster2
i26 controllable_hmaster1
i27 controllable_hmaster0
i28 controllable_hmastlock
l0 n61
l1 reg_controllable_hgrant2_out
l2 reg_controllable_hmaster1_out
l3 reg_controllable_hgrant3_out
l4 next_env_fair_out
l5 reg_controllable_hmaster2_out
l6 reg_controllable_hgrant4_out
l7 reg_stateG3_0_out
l8 reg_controllable_hgrant5_out
l9 reg_stateG3_1_out
l10 reg_controllable_locked_out
l11 reg_controllable_ndecide_out
l12 reg_i_hlock5_out
l13 reg_stateG3_2_out
l14 reg_controllable_busreq_out
l15 reg_i_hlock4_out
l16 reg_controllable_nstart_out
l17 reg_i_hbusreq0_out
l18 reg_i_hlock3_out
l19 reg_stateG2_out
l20 reg_stateG10_1_out
l21 reg_i_hbusreq1_out
l22 reg_i_hlock2_out
l23 reg_controllable_hmastlock_out
l24 reg_stateG10_2_out
l25 reg_controllable_nhgrant0_out
l26 reg_i_hbusreq2_out
l27 reg_stateA1_out
l28 reg_i_hlock1_out
l29 fair_cnt<0>_out
l30 fair_cnt<1>_out
l31 fair_cnt<2>_out
l32 fair_cnt<3>_out
l33 next_sys_fair<0>_out
l34 next_sys_fair<1>_out
l35 next_sys_fair<2>_out
l36 next_sys_fair<3>_out
l37 reg_stateG10_3_out
l38 reg_i_hbusreq3_out
l39 reg_i_hlock0_out
l40 reg_i_hready_out
l41 env_safe_err_happened_out
l42 reg_stateG10_4_out
l43 reg_i_hbusreq4_out
l44 reg_controllable_hgrant1_out
l45 reg_stateG10_5_out
l46 reg_i_hbusreq5_out
l47 reg_controllable_hmaster0_out
o0 o_err
c
amba_6_new_8
This file was written by ABC on Tue May  5 16:50:47 2015
For information about AIGER format, refer to http://fmv.jku.at/aiger
-------------------------------
This AIGER file has been created by the following sequence of commands:
> vl2mv amba6c8.v   ---gives--> amba6c8.mv
> abc -c "read_blif_mv amba6c8.mv; write_aiger -s amba6c8n.aig"   ---gives--> amba6c8n.aig
> aigtoaig amba6c8n.aig amba6c8n.aag   ---gives--> amba6c8n.aag (this file)
Content of amba6c8.v:
module amba_6_new_8(
        o_err,
        i_clk,
        i_hready,
        i_hbusreq0,
        i_hlock0,
        i_hbusreq1,
        i_hlock1,
        i_hbusreq2,
        i_hlock2,
        i_hbusreq3,
        i_hlock3,
        i_hbusreq4,
        i_hlock4,
        i_hbusreq5,
        i_hlock5,
        i_hburst0,
        i_hburst1,
        controllable_hmaster0,
        controllable_hmaster1,
        controllable_hmaster2,
        controllable_hmastlock,
        controllable_nstart,
        controllable_ndecide,
        controllable_locked,
        controllable_nhgrant0,
        controllable_hgrant1,
        controllable_hgrant2,
        controllable_hgrant3,
        controllable_hgrant4,
        controllable_hgrant5,
        controllable_busreq);

input i_clk;
input i_hready;
input i_hbusreq0;
input i_hlock0;
input i_hbusreq1;
input i_hlock1;
input i_hbusreq2;
input i_hlock2;
input i_hbusreq3;
input i_hlock3;
input i_hbusreq4;
input i_hlock4;
input i_hbusreq5;
input i_hlock5;
input i_hburst0;
input i_hburst1;
input controllable_hmaster0;
input controllable_hmaster1;
input controllable_hmaster2;
input controllable_hmastlock;
input controllable_nstart;
input controllable_ndecide;
input controllable_locked;
input controllable_nhgrant0;
input controllable_hgrant1;
input controllable_hgrant2;
input controllable_hgrant3;
input controllable_hgrant4;
input controllable_hgrant5;
input controllable_busreq;
output o_err;

reg reg_i_hready;
reg reg_i_hbusreq0;
reg reg_i_hlock0;
reg reg_i_hbusreq1;
reg reg_i_hlock1;
reg reg_i_hbusreq2;
reg reg_i_hlock2;
reg reg_i_hbusreq3;
reg reg_i_hlock3;
reg reg_i_hbusreq4;
reg reg_i_hlock4;
reg reg_i_hbusreq5;
reg reg_i_hlock5;
reg reg_controllable_hmaster0;
reg reg_controllable_hmaster1;
reg reg_controllable_hmaster2;
reg reg_controllable_hmastlock;
reg reg_controllable_nstart;
reg reg_controllable_ndecide;
reg reg_controllable_locked;
reg reg_controllable_nhgrant0;
reg reg_controllable_hgrant1;
reg reg_controllable_hgrant2;
reg reg_controllable_hgrant3;
reg reg_controllable_hgrant4;
reg reg_controllable_hgrant5;
reg reg_controllable_busreq;
reg reg_stateA1;
reg reg_stateG2;
reg reg_stateG3_0;
reg reg_stateG3_1;
reg reg_stateG3_2;
reg reg_stateG10_1;
reg reg_stateG10_2;
reg reg_stateG10_3;
reg reg_stateG10_4;
reg reg_stateG10_5;
reg env_safe_err_happened;
reg next_env_fair;
reg [3:0] fair_cnt;
reg [3:0] next_sys_fair;

wire env_safe_err0;
wire env_safe_err1;
wire env_safe_err2;
wire env_safe_err3;
wire env_safe_err4;
wire env_safe_err5;
wire env_safe_err;

wire sys_safe_err0;
wire sys_safe_err1;
wire sys_safe_err2;
wire sys_safe_err3;
wire sys_safe_err4;
wire sys_safe_err5;
wire sys_safe_err6;
wire sys_safe_err7;
wire sys_safe_err8;
wire sys_safe_err9;
wire sys_safe_err10;
wire sys_safe_err11;
wire sys_safe_err12;
wire sys_safe_err13;
wire sys_safe_err14;
wire sys_safe_err15;
wire sys_safe_err16;
wire sys_safe_err17;
wire sys_safe_err18;
wire sys_safe_err19;
wire sys_safe_err20;
wire sys_safe_err21;
wire sys_safe_err22;
wire sys_safe_err23;
wire sys_safe_err24;
wire sys_safe_err25;
wire sys_safe_err26;
wire sys_safe_err27;
wire sys_safe_err28;
wire sys_safe_err29;
wire sys_safe_err30;
wire sys_safe_err31;
wire sys_safe_err32;
wire sys_safe_err33;
wire sys_safe_err34;
wire sys_safe_err35;
wire sys_safe_err36;
wire sys_safe_err37;
wire sys_safe_err38;
wire sys_safe_err39;
wire sys_safe_err40;
wire sys_safe_err41;
wire sys_safe_err42;
wire sys_safe_err43;
wire sys_safe_err44;
wire sys_safe_err45;
wire sys_safe_err46;
wire sys_safe_err47;
wire sys_safe_err;

wire env_fair0;
wire env_fair1;

wire sys_fair0;
wire sys_fair1;
wire sys_fair2;
wire sys_fair3;
wire sys_fair4;
wire sys_fair5;
wire sys_fair6;
wire sys_fair7;
wire fair_err;
wire o_err;

// =============================================================
//                        ENV_TRANSITION:
// =============================================================
// Assumption 3:
// G( hlock0=1 -> hbusreq0=1 );
assign env_safe_err0 =  ~(~ i_hlock0 | i_hbusreq0);

// Assumption 3:
// G( hlock1=1 -> hbusreq1=1 );
assign env_safe_err1 =  ~(~ i_hlock1 | i_hbusreq1);

// Assumption 3:
// G( hlock2=1 -> hbusreq2=1 );
assign env_safe_err2 =  ~(~ i_hlock2 | i_hbusreq2);

// Assumption 3:
// G( hlock3=1 -> hbusreq3=1 );
assign env_safe_err3 =  ~(~ i_hlock3 | i_hbusreq3);

// Assumption 3:
// G( hlock4=1 -> hbusreq4=1 );
assign env_safe_err4 =  ~(~ i_hlock4 | i_hbusreq4);

// Assumption 3:
// G( hlock5=1 -> hbusreq5=1 );
assign env_safe_err5 =  ~(~ i_hlock5 | i_hbusreq5);

// collecting together the safety error bits:
assign env_safe_err = env_safe_err0 |
                      env_safe_err1 |
                      env_safe_err2 |
                      env_safe_err3 |
                      env_safe_err4 |
                      env_safe_err5;

// =============================================================
//                        SYS_TRANSITION:
// =============================================================
// G((hmaster0=0) * (hmaster1=0) * (hmaster2=0) -> (hbusreq0=0 <-> busreq=0));
assign sys_safe_err0 =  ~( ~( ~(controllable_hmaster0) & ~(controllable_hmaster1) & ~(controllable_hmaster2) )|(~i_hbusreq0 ^~ (~controllable_busreq)));

// G((hmaster0=1) * (hmaster1=0) * (hmaster2=0) -> (hbusreq1=0 <-> busreq=0));
assign sys_safe_err1 =  ~( ~( controllable_hmaster0 & ~(controllable_hmaster1) & ~(controllable_hmaster2) )|(~i_hbusreq1 ^~ (~controllable_busreq)));

// G((hmaster0=0) * (hmaster1=1) * (hmaster2=0) -> (hbusreq2=0 <-> busreq=0));
assign sys_safe_err2 =  ~( ~( ~(controllable_hmaster0) & controllable_hmaster1 & ~(controllable_hmaster2) )|(~i_hbusreq2 ^~ (~controllable_busreq)));

// G((hmaster0=1) * (hmaster1=1) * (hmaster2=0) -> (hbusreq3=0 <-> busreq=0));
assign sys_safe_err3 =  ~( ~( controllable_hmaster0 & controllable_hmaster1 & ~(controllable_hmaster2) )|(~i_hbusreq3 ^~ (~controllable_busreq)));

// G((hmaster0=0) * (hmaster1=0) * (hmaster2=1) -> (hbusreq4=0 <-> busreq=0));
assign sys_safe_err4 =  ~( ~( ~(controllable_hmaster0) & ~(controllable_hmaster1) & controllable_hmaster2 )|(~i_hbusreq4 ^~ (~controllable_busreq)));

// G((hmaster0=1) * (hmaster1=0) * (hmaster2=1) -> (hbusreq5=0 <-> busreq=0));
assign sys_safe_err5 =  ~( ~( controllable_hmaster0 & ~(controllable_hmaster1) & controllable_hmaster2 )|(~i_hbusreq5 ^~ (~controllable_busreq)));

// Guarantee 1:
// G((hready=0) -> X(start=0));
assign sys_safe_err6 =  ~( reg_i_hready | controllable_nstart );

// G(((stateG2=1) * (start=1)) -> FALSE;
assign sys_safe_err7 =  ~( ~(reg_stateG2 & ~controllable_nstart) | 0 );

// G(((stateG3_0=1) * (stateG3_1=0) * (stateG3_2=0) * ((start=1))) -> FALSE);
// G(((stateG3_0=0) * (stateG3_1=1) * (stateG3_2=0) * ((start=1))) -> FALSE);
// G(((stateG3_0=1) * (stateG3_1=1) * (stateG3_2=0) * ((start=1))) -> FALSE);
// G(((stateG3_0=0) * (stateG3_1=0) * (stateG3_2=1) * ((start=1))) -> FALSE);
// all these rules can be summarized as: only in state 000, start=1 is allowed:
assign sys_safe_err8 =  (reg_stateG3_0 | reg_stateG3_1 | reg_stateG3_2) & ~controllable_nstart;

// G( (hready=1) -> (   (hgrant0=1) <-> (X(hmaster0=0) * X(hmaster1=0) * X(hmaster2=0))  ) );
assign sys_safe_err9 =  ~( ~(reg_i_hready) | ( ~reg_controllable_nhgrant0 ^~ ( ~(controllable_hmaster0) & ~(controllable_hmaster1) & ~(controllable_hmaster2) ) ) );

// G( (hready=1) -> (   (hgrant1=1) <-> (X(hmaster0=1) * X(hmaster1=0) * X(hmaster2=0))  ) );
assign sys_safe_err10 =  ~( ~(reg_i_hready) | ( reg_controllable_hgrant1 ^~ ( controllable_hmaster0 & ~(controllable_hmaster1) & ~(controllable_hmaster2) ) ) );

// G( (hready=1) -> (   (hgrant2=1) <-> (X(hmaster0=0) * X(hmaster1=1) * X(hmaster2=0))  ) );
assign sys_safe_err11 =  ~( ~(reg_i_hready) | ( reg_controllable_hgrant2 ^~ ( ~(controllable_hmaster0) & controllable_hmaster1 & ~(controllable_hmaster2) ) ) );

// G( (hready=1) -> (   (hgrant3=1) <-> (X(hmaster0=1) * X(hmaster1=1) * X(hmaster2=0))  ) );
assign sys_safe_err12 =  ~( ~(reg_i_hready) | ( reg_controllable_hgrant3 ^~ ( controllable_hmaster0 & controllable_hmaster1 & ~(controllable_hmaster2) ) ) );

// G( (hready=1) -> (   (hgrant4=1) <-> (X(hmaster0=0) * X(hmaster1=0) * X(hmaster2=1))  ) );
assign sys_safe_err13 =  ~( ~(reg_i_hready) | ( reg_controllable_hgrant4 ^~ ( ~(controllable_hmaster0) & ~(controllable_hmaster1) & controllable_hmaster2 ) ) );

// G( (hready=1) -> (   (hgrant5=1) <-> (X(hmaster0=1) * X(hmaster1=0) * X(hmaster2=1))  ) );
assign sys_safe_err14 =  ~( ~(reg_i_hready) | ( reg_controllable_hgrant5 ^~ ( controllable_hmaster0 & ~(controllable_hmaster1) & controllable_hmaster2 ) ) );

// HMASTLOCK:
// G(  (hready=1) -> (locked=0 <-> X(hmastlock=0) ) );
assign sys_safe_err15 =  ~( ~(reg_i_hready) | (~reg_controllable_locked ^~ ~controllable_hmastlock) );

// Master 0:
// G( X(start=0) -> ( ((hmaster0=0) * (hmaster1=0) * (hmaster2=0)) <-> (X(hmaster0=0) * X(hmaster1=0) * X(hmaster2=0)) ) );
assign sys_safe_err16 =  ~( ~(controllable_nstart) | ( ( ~(reg_controllable_hmaster0) & ~(reg_controllable_hmaster1) & ~(reg_controllable_hmaster2) ) ^~ ( ~(controllable_hmaster0) & ~(controllable_hmaster1) & ~(controllable_hmaster2) )) );

// Master 1:
// G( X(start=0) -> ( ((hmaster0=1) * (hmaster1=0) * (hmaster2=0)) <-> (X(hmaster0=1) * X(hmaster1=0) * X(hmaster2=0)) ) );
assign sys_safe_err17 =  ~( ~(controllable_nstart) | ( ( reg_controllable_hmaster0 & ~(reg_controllable_hmaster1) & ~(reg_controllable_hmaster2) ) ^~ ( controllable_hmaster0 & ~(controllable_hmaster1) & ~(controllable_hmaster2) )) );

// Master 2:
// G( X(start=0) -> ( ((hmaster0=0) * (hmaster1=1) * (hmaster2=0)) <-> (X(hmaster0=0) * X(hmaster1=1) * X(hmaster2=0)) ) );
assign sys_safe_err18 =  ~( ~(controllable_nstart) | ( ( ~(reg_controllable_hmaster0) & reg_controllable_hmaster1 & ~(reg_controllable_hmaster2) ) ^~ ( ~(controllable_hmaster0) & controllable_hmaster1 & ~(controllable_hmaster2) )) );

// Master 3:
// G( X(start=0) -> ( ((hmaster0=1) * (hmaster1=1) * (hmaster2=0)) <-> (X(hmaster0=1) * X(hmaster1=1) * X(hmaster2=0)) ) );
assign sys_safe_err19 =  ~( ~(controllable_nstart) | ( ( reg_controllable_hmaster0 & reg_controllable_hmaster1 & ~(reg_controllable_hmaster2) ) ^~ ( controllable_hmaster0 & controllable_hmaster1 & ~(controllable_hmaster2) )) );

// Master 4:
// G( X(start=0) -> ( ((hmaster0=0) * (hmaster1=0) * (hmaster2=1)) <-> (X(hmaster0=0) * X(hmaster1=0) * X(hmaster2=1)) ) );
assign sys_safe_err20 =  ~( ~(controllable_nstart) | ( ( ~(reg_controllable_hmaster0) & ~(reg_controllable_hmaster1) & reg_controllable_hmaster2 ) ^~ ( ~(controllable_hmaster0) & ~(controllable_hmaster1) & controllable_hmaster2 )) );

// Master 5:
// G( X(start=0) -> ( ((hmaster0=1) * (hmaster1=0) * (hmaster2=1)) <-> (X(hmaster0=1) * X(hmaster1=0) * X(hmaster2=1)) ) );
assign sys_safe_err21 =  ~( ~(controllable_nstart) | ( ( reg_controllable_hmaster0 & ~(reg_controllable_hmaster1) & reg_controllable_hmaster2 ) ^~ ( controllable_hmaster0 & ~(controllable_hmaster1) & controllable_hmaster2 )) );

// Guarantee 6.2:
// G( ((X(start=0))) -> ( (hmastlock=1) <-> X(hmastlock=1)) );
assign sys_safe_err22 =  ~( ~(controllable_nstart) | ( reg_controllable_hmastlock ^~ controllable_hmastlock) );

// G( (decide=1  *  hlock0=1  *  X(hgrant0=1) )->X(locked=1));
assign sys_safe_err23 =  ~( ~(~reg_controllable_ndecide & reg_i_hlock0 & ~controllable_nhgrant0) | (controllable_locked) );

// G((decide=1  *  hlock0=0  *  X(hgrant0=1))->X(locked=0));
assign sys_safe_err24 =  ~( ~(~reg_controllable_ndecide & ~reg_i_hlock0 & ~controllable_nhgrant0) | (~controllable_locked) );

// G( (decide=1  *  hlock1=1  *  X(hgrant1=1) )->X(locked=1));
assign sys_safe_err25 =  ~( ~(~reg_controllable_ndecide & reg_i_hlock1 & controllable_hgrant1) | (controllable_locked) );

// G((decide=1  *  hlock1=0  *  X(hgrant1=1))->X(locked=0));
assign sys_safe_err26 =  ~( ~(~reg_controllable_ndecide & ~reg_i_hlock1 & controllable_hgrant1) | (~controllable_locked) );

// G( (decide=1  *  hlock2=1  *  X(hgrant2=1) )->X(locked=1));
assign sys_safe_err27 =  ~( ~(~reg_controllable_ndecide & reg_i_hlock2 & controllable_hgrant2) | (controllable_locked) );

// G((decide=1  *  hlock2=0  *  X(hgrant2=1))->X(locked=0));
assign sys_safe_err28 =  ~( ~(~reg_controllable_ndecide & ~reg_i_hlock2 & controllable_hgrant2) | (~controllable_locked) );

// G( (decide=1  *  hlock3=1  *  X(hgrant3=1) )->X(locked=1));
assign sys_safe_err29 =  ~( ~(~reg_controllable_ndecide & reg_i_hlock3 & controllable_hgrant3) | (controllable_locked) );

// G((decide=1  *  hlock3=0  *  X(hgrant3=1))->X(locked=0));
assign sys_safe_err30 =  ~( ~(~reg_controllable_ndecide & ~reg_i_hlock3 & controllable_hgrant3) | (~controllable_locked) );

// G( (decide=1  *  hlock4=1  *  X(hgrant4=1) )->X(locked=1));
assign sys_safe_err31 =  ~( ~(~reg_controllable_ndecide & reg_i_hlock4 & controllable_hgrant4) | (controllable_locked) );

// G((decide=1  *  hlock4=0  *  X(hgrant4=1))->X(locked=0));
assign sys_safe_err32 =  ~( ~(~reg_controllable_ndecide & ~reg_i_hlock4 & controllable_hgrant4) | (~controllable_locked) );

// G( (decide=1  *  hlock5=1  *  X(hgrant5=1) )->X(locked=1));
assign sys_safe_err33 =  ~( ~(~reg_controllable_ndecide & reg_i_hlock5 & controllable_hgrant5) | (controllable_locked) );

// G((decide=1  *  hlock5=0  *  X(hgrant5=1))->X(locked=0));
assign sys_safe_err34 =  ~( ~(~reg_controllable_ndecide & ~reg_i_hlock5 & controllable_hgrant5) | (~controllable_locked) );

// G( (decide=0) -> (  ((hgrant0=0)<->X(hgrant0=0))  ));
assign sys_safe_err35 =  ~( ~(reg_controllable_ndecide) | (reg_controllable_nhgrant0 ^~ controllable_nhgrant0) );

// G( (decide=0) -> (  ((hgrant1=0)<->X(hgrant1=0))  ));
assign sys_safe_err36 =  ~( ~(reg_controllable_ndecide) | (~reg_controllable_hgrant1 ^~ ~controllable_hgrant1) );

// G( (decide=0) -> (  ((hgrant2=0)<->X(hgrant2=0))  ));
assign sys_safe_err37 =  ~( ~(reg_controllable_ndecide) | (~reg_controllable_hgrant2 ^~ ~controllable_hgrant2) );

// G( (decide=0) -> (  ((hgrant3=0)<->X(hgrant3=0))  ));
assign sys_safe_err38 =  ~( ~(reg_controllable_ndecide) | (~reg_controllable_hgrant3 ^~ ~controllable_hgrant3) );

// G( (decide=0) -> (  ((hgrant4=0)<->X(hgrant4=0))  ));
assign sys_safe_err39 =  ~( ~(reg_controllable_ndecide) | (~reg_controllable_hgrant4 ^~ ~controllable_hgrant4) );

// G( (decide=0) -> (  ((hgrant5=0)<->X(hgrant5=0))  ));
assign sys_safe_err40 =  ~( ~(reg_controllable_ndecide) | (~reg_controllable_hgrant5 ^~ ~controllable_hgrant5) );

// G((decide=0)->(locked=0 <-> X(locked=0)));
assign sys_safe_err41 =  ~( ~(reg_controllable_ndecide) | (~reg_controllable_locked ^~ ~controllable_locked) );

// G(((stateG10_1=1) * (((hgrant1=1)) * (hbusreq1=0)))->FALSE);
assign sys_safe_err42 =  ~( ~(reg_stateG10_1 & (controllable_hgrant1 & ~i_hbusreq1)) | 0 );

// G(((stateG10_2=1) * (((hgrant2=1)) * (hbusreq2=0)))->FALSE);
assign sys_safe_err43 =  ~( ~(reg_stateG10_2 & (controllable_hgrant2 & ~i_hbusreq2)) | 0 );

// G(((stateG10_3=1) * (((hgrant3=1)) * (hbusreq3=0)))->FALSE);
assign sys_safe_err44 =  ~( ~(reg_stateG10_3 & (controllable_hgrant3 & ~i_hbusreq3)) | 0 );

// G(((stateG10_4=1) * (((hgrant4=1)) * (hbusreq4=0)))->FALSE);
assign sys_safe_err45 =  ~( ~(reg_stateG10_4 & (controllable_hgrant4 & ~i_hbusreq4)) | 0 );

// G(((stateG10_5=1) * (((hgrant5=1)) * (hbusreq5=0)))->FALSE);
assign sys_safe_err46 =  ~( ~(reg_stateG10_5 & (controllable_hgrant5 & ~i_hbusreq5)) | 0 );

// default master
// G((decide=1  *  hbusreq0=0  *  hbusreq1=0  *  hbusreq2=0  *  hbusreq3=0  *  hbusreq4=0  *  hbusreq5=0) -> X(hgrant0=1));
assign sys_safe_err47 =  ~( ~(~reg_controllable_ndecide & (~reg_i_hbusreq0 & ~reg_i_hbusreq1 & ~reg_i_hbusreq2 & ~reg_i_hbusreq3 & ~reg_i_hbusreq4 & ~reg_i_hbusreq5)) | (~controllable_nhgrant0) );

// collecting together the safety error bits:
assign sys_safe_err = sys_safe_err0 |
                      sys_safe_err1 |
                      sys_safe_err2 |
                      sys_safe_err3 |
                      sys_safe_err4 |
                      sys_safe_err5 |
                      sys_safe_err6 |
                      sys_safe_err7 |
                      sys_safe_err8 |
                      sys_safe_err9 |
                      sys_safe_err10 |
                      sys_safe_err11 |
                      sys_safe_err12 |
                      sys_safe_err13 |
                      sys_safe_err14 |
                      sys_safe_err15 |
                      sys_safe_err16 |
                      sys_safe_err17 |
                      sys_safe_err18 |
                      sys_safe_err19 |
                      sys_safe_err20 |
                      sys_safe_err21 |
                      sys_safe_err22 |
                      sys_safe_err23 |
                      sys_safe_err24 |
                      sys_safe_err25 |
                      sys_safe_err26 |
                      sys_safe_err27 |
                      sys_safe_err28 |
                      sys_safe_err29 |
                      sys_safe_err30 |
                      sys_safe_err31 |
                      sys_safe_err32 |
                      sys_safe_err33 |
                      sys_safe_err34 |
                      sys_safe_err35 |
                      sys_safe_err36 |
                      sys_safe_err37 |
                      sys_safe_err38 |
                      sys_safe_err39 |
                      sys_safe_err40 |
                      sys_safe_err41 |
                      sys_safe_err42 |
                      sys_safe_err43 |
                      sys_safe_err44 |
                      sys_safe_err45 |
                      sys_safe_err46 |
                      sys_safe_err47;

// =============================================================
//                          ENV_FAIRNESS:
// =============================================================
// Assumption 1: 
// G(F(stateA1=0));
assign env_fair0 =  ~reg_stateA1;

// Assumption 2:
// G(F(hready=1));
assign env_fair1 =  i_hready;


// =============================================================
//                          SYS_FAIRNESS:
// =============================================================
// Guarantee 2:
// G(F(stateG2=0));
assign sys_fair0 = ~reg_stateG2;

// Guarantee 3:
// G(F((stateG3_0=0)  *  (stateG3_1=0)  *  (stateG3_2=0)));
assign sys_fair1 =  (~reg_stateG3_0 & ~reg_stateG3_1 & ~reg_stateG3_2);

// G(F(((hmaster0=0) * (hmaster1=0) * (hmaster2=0))  |  hbusreq0=0));
assign sys_fair2 =  ( ~(controllable_hmaster0) & ~(controllable_hmaster1) & ~(controllable_hmaster2) ) | ~i_hbusreq0;

// G(F(((hmaster0=1) * (hmaster1=0) * (hmaster2=0))  |  hbusreq1=0));
assign sys_fair3 =  ( controllable_hmaster0 & ~(controllable_hmaster1) & ~(controllable_hmaster2) ) | ~i_hbusreq1;

// G(F(((hmaster0=0) * (hmaster1=1) * (hmaster2=0))  |  hbusreq2=0));
assign sys_fair4 =  ( ~(controllable_hmaster0) & controllable_hmaster1 & ~(controllable_hmaster2) ) | ~i_hbusreq2;

// G(F(((hmaster0=1) * (hmaster1=1) * (hmaster2=0))  |  hbusreq3=0));
assign sys_fair5 =  ( controllable_hmaster0 & controllable_hmaster1 & ~(controllable_hmaster2) ) | ~i_hbusreq3;

// G(F(((hmaster0=0) * (hmaster1=0) * (hmaster2=1))  |  hbusreq4=0));
assign sys_fair6 =  ( ~(controllable_hmaster0) & ~(controllable_hmaster1) & controllable_hmaster2 ) | ~i_hbusreq4;

// G(F(((hmaster0=1) * (hmaster1=0) * (hmaster2=1))  |  hbusreq5=0));
assign sys_fair7 =  ( controllable_hmaster0 & ~(controllable_hmaster1) & controllable_hmaster2 ) | ~i_hbusreq5;

assign fair_err = (fair_cnt >= 4'b1000);

// computing the error output bit:
assign o_err = ~env_safe_err & ~env_safe_err_happened & (sys_safe_err | fair_err);

initial
 begin
  reg_i_hready = 0;
  reg_i_hbusreq0 = 0;
  reg_i_hlock0 = 0;
  reg_i_hbusreq1 = 0;
  reg_i_hlock1 = 0;
  reg_i_hbusreq2 = 0;
  reg_i_hlock2 = 0;
  reg_i_hbusreq3 = 0;
  reg_i_hlock3 = 0;
  reg_i_hbusreq4 = 0;
  reg_i_hlock4 = 0;
  reg_i_hbusreq5 = 0;
  reg_i_hlock5 = 0;
  reg_controllable_hmaster0 = 0;
  reg_controllable_hmaster1 = 0;
  reg_controllable_hmaster2 = 0;
  reg_controllable_hmastlock = 0;
  reg_controllable_nstart = 0;
  reg_controllable_ndecide = 0;
  reg_controllable_locked = 0;
  reg_controllable_nhgrant0 = 0;
  reg_controllable_hgrant1 = 0;
  reg_controllable_hgrant2 = 0;
  reg_controllable_hgrant3 = 0;
  reg_controllable_hgrant4 = 0;
  reg_controllable_hgrant5 = 0;
  reg_controllable_busreq = 0;
  reg_stateA1 = 0;
  reg_stateG2 = 0;
  reg_stateG3_0 = 0;
  reg_stateG3_1 = 0;
  reg_stateG3_2 = 0;
  reg_stateG10_1 = 0;
  reg_stateG10_2 = 0;
  reg_stateG10_3 = 0;
  reg_stateG10_4 = 0;
  reg_stateG10_5 = 0;
  env_safe_err_happened = 0;
  next_env_fair = 0;
  fair_cnt = 0;
  next_sys_fair = 0;
 end


always @(posedge i_clk)
 begin
   // We remember if an environment error occurred:
   env_safe_err_happened = env_safe_err_happened | env_safe_err;

   // Updating the fairness counters: 
   if((next_sys_fair == 0) & sys_fair0)
    begin
      next_sys_fair = 1;
      next_env_fair = 0;
      fair_cnt = 0;
    end
   else if((next_sys_fair == 1) & sys_fair1)
    begin
      next_sys_fair = 2;
      next_env_fair = 0;
      fair_cnt = 0;
    end
   else if((next_sys_fair == 2) & sys_fair2)
    begin
      next_sys_fair = 3;
      next_env_fair = 0;
      fair_cnt = 0;
    end
   else if((next_sys_fair == 3) & sys_fair3)
    begin
      next_sys_fair = 4;
      next_env_fair = 0;
      fair_cnt = 0;
    end
   else if((next_sys_fair == 4) & sys_fair4)
    begin
      next_sys_fair = 5;
      next_env_fair = 0;
      fair_cnt = 0;
    end
   else if((next_sys_fair == 5) & sys_fair5)
    begin
      next_sys_fair = 6;
      next_env_fair = 0;
      fair_cnt = 0;
    end
   else if((next_sys_fair == 6) & sys_fair6)
    begin
      next_sys_fair = 7;
      next_env_fair = 0;
      fair_cnt = 0;
    end
   else if((next_sys_fair == 7) & sys_fair7)
    begin
      next_sys_fair = 0;
      next_env_fair = 0;
      fair_cnt = 0;
    end
   else if(~next_env_fair & env_fair0)
    begin
      next_env_fair = 1;
    end
   else if(next_env_fair & env_fair1)
    begin
      next_env_fair = 0;
      fair_cnt = fair_cnt + 1;
    end

   // Updating the automata: 
   // Automaton A1: 
   if(~reg_stateA1 & controllable_hmastlock & ~i_hburst0 & ~i_hburst1)
    begin
      reg_stateA1 = 1'b1;
    end
   else if(reg_stateA1 & ~controllable_busreq)
    begin
      reg_stateA1 = 1'b0;
    end

   // Automaton G2: 
   if(~reg_stateG2)
    begin
      if(controllable_hmastlock & ~controllable_nstart & ~i_hburst0 & ~i_hburst1)
       begin
         reg_stateG2 = 1'b1;
       end
    end
   else // if(reg_stateG2)
    begin
      if(~controllable_busreq)
       begin
         reg_stateG2 = 1'b0;
       end
    end

   // Automaton G3: 
   if(~reg_stateG3_0 & ~reg_stateG3_1 & ~reg_stateG3_2 & controllable_hmastlock & ~controllable_nstart &  ~i_hburst0 & i_hburst1 & ~i_hready)
    begin
      reg_stateG3_0 = 1'b1;
      reg_stateG3_1 = 1'b0;
      reg_stateG3_2 = 1'b0;
    end
   else if(~reg_stateG3_0 & ~reg_stateG3_1 & ~reg_stateG3_2 & controllable_hmastlock & ~controllable_nstart &  ~i_hburst0 & i_hburst1 & i_hready)
    begin
      reg_stateG3_0 = 1'b0;
      reg_stateG3_1 = 1'b1;
      reg_stateG3_2 = 1'b0;
    end
   else if(reg_stateG3_0 & ~reg_stateG3_1 & ~reg_stateG3_2 & i_hready)
    begin
      reg_stateG3_0 = 1'b0;
      reg_stateG3_1 = 1'b1;
      reg_stateG3_2 = 1'b0;
    end
   else if(~reg_stateG3_0 & reg_stateG3_1 & ~reg_stateG3_2 & i_hready)
    begin
      reg_stateG3_0 = 1'b1;
      reg_stateG3_1 = 1'b1;
      reg_stateG3_2 = 1'b0;
    end
   else if(reg_stateG3_0 & reg_stateG3_1 & ~reg_stateG3_2 & i_hready)
    begin
      reg_stateG3_0 = 1'b0;
      reg_stateG3_1 = 1'b0;
      reg_stateG3_2 = 1'b1;
    end
   else if(~reg_stateG3_0 & ~reg_stateG3_1 & reg_stateG3_2 & i_hready)
    begin
      reg_stateG3_0 = 1'b0;
      reg_stateG3_1 = 1'b0;
      reg_stateG3_2 = 1'b0;
    end

   // Automaton G10_1: 
   if(~reg_stateG10_1 & ~controllable_hgrant1 & ~i_hbusreq1)
    begin
      reg_stateG10_1 = 1'b1;
    end
   else if(reg_stateG10_1 & i_hbusreq1)
    begin
      reg_stateG10_1 = 1'b0;
    end

   // Automaton G10_2: 
   if(~reg_stateG10_2 & ~controllable_hgrant2 & ~i_hbusreq2)
    begin
      reg_stateG10_2 = 1'b1;
    end
   else if(reg_stateG10_2 & i_hbusreq2)
    begin
      reg_stateG10_2 = 1'b0;
    end

   // Automaton G10_3: 
   if(~reg_stateG10_3 & ~controllable_hgrant3 & ~i_hbusreq3)
    begin
      reg_stateG10_3 = 1'b1;
    end
   else if(reg_stateG10_3 & i_hbusreq3)
    begin
      reg_stateG10_3 = 1'b0;
    end

   // Automaton G10_4: 
   if(~reg_stateG10_4 & ~controllable_hgrant4 & ~i_hbusreq4)
    begin
      reg_stateG10_4 = 1'b1;
    end
   else if(reg_stateG10_4 & i_hbusreq4)
    begin
      reg_stateG10_4 = 1'b0;
    end

   // Automaton G10_5: 
   if(~reg_stateG10_5 & ~controllable_hgrant5 & ~i_hbusreq5)
    begin
      reg_stateG10_5 = 1'b1;
    end
   else if(reg_stateG10_5 & i_hbusreq5)
    begin
      reg_stateG10_5 = 1'b0;
    end

   // Latching the previous input:
   reg_i_hready =  i_hready;
   reg_i_hbusreq0 =  i_hbusreq0;
   reg_i_hlock0 =  i_hlock0;
   reg_i_hbusreq1 =  i_hbusreq1;
   reg_i_hlock1 =  i_hlock1;
   reg_i_hbusreq2 =  i_hbusreq2;
   reg_i_hlock2 =  i_hlock2;
   reg_i_hbusreq3 =  i_hbusreq3;
   reg_i_hlock3 =  i_hlock3;
   reg_i_hbusreq4 =  i_hbusreq4;
   reg_i_hlock4 =  i_hlock4;
   reg_i_hbusreq5 =  i_hbusreq5;
   reg_i_hlock5 =  i_hlock5;
   reg_controllable_hmaster0 =  controllable_hmaster0;
   reg_controllable_hmaster1 =  controllable_hmaster1;
   reg_controllable_hmaster2 =  controllable_hmaster2;
   reg_controllable_hmastlock =  controllable_hmastlock;
   reg_controllable_nstart =  controllable_nstart;
   reg_controllable_ndecide =  controllable_ndecide;
   reg_controllable_locked =  controllable_locked;
   reg_controllable_nhgrant0 =  controllable_nhgrant0;
   reg_controllable_hgrant1 =  controllable_hgrant1;
   reg_controllable_hgrant2 =  controllable_hgrant2;
   reg_controllable_hgrant3 =  controllable_hgrant3;
   reg_controllable_hgrant4 =  controllable_hgrant4;
   reg_controllable_hgrant5 =  controllable_hgrant5;
   reg_controllable_busreq =  controllable_busreq;

 end
endmodule

-------------------------------
