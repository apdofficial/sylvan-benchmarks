aag 472 15 33 1 424
2
4
6
8
10
12
14
16
18
20
22
24
26
28
30
32 1
34 507
36 591
38 637
40 14
42 651
44 675
46 28
48 695
50 2
52 24
54 8
56 4
58 709
60 739
62 761
64 773
66 30
68 797
70 6
72 22
74 901
76 907
78 913
80 919
82 925
84 931
86 109
88 18
90 26
92 20
94 945
96 16
432
98 18 3
100 22 5
102 101 99
104 87 32
106 105 32
108 107 102
110 25 2
112 24 3
114 113 111
116 115 17
118 25 4
120 24 5
122 121 119
124 123 16
126 125 117
128 91 32
130 90 32
132 129 32
134 133 9
136 135 126
138 61 32
140 60 32
142 139 32
144 140 9
146 145 136
148 37 32
150 36 32
152 149 32
154 45 32
156 44 32
158 155 32
160 159 153
162 49 32
164 48 32
166 163 32
168 167 160
170 169 9
172 171 146
174 67 32
176 66 32
178 175 32
180 176 17
182 179 16
184 183 181
186 185 130
188 187 172
190 93 32
192 92 32
194 191 32
196 195 16
198 192 17
200 199 197
202 201 130
204 203 188
206 41 32
208 40 32
210 207 32
212 208 7
214 211 6
216 215 213
218 217 130
220 219 204
222 97 32
224 96 32
226 223 32
228 224 17
230 227 16
232 231 229
234 233 8
236 235 220
238 236 235
240 71 32
242 70 32
244 241 32
246 245 6
248 242 7
250 249 247
252 251 8
254 253 238
256 47 32
258 46 32
260 257 32
262 89 32
264 88 32
266 263 32
268 264 261
270 268 31
272 270 15
274 273 254
276 267 261
278 276 31
280 278 14
282 281 274
284 73 32
286 72 32
288 285 32
290 286 261
292 290 20
294 292 15
296 295 282
298 289 261
300 298 20
302 300 14
304 303 296
306 179 30
308 176 31
310 309 307
312 311 258
314 313 304
316 192 21
318 195 20
320 319 317
322 321 258
324 323 314
326 208 15
328 211 14
330 329 327
332 331 258
334 333 324
336 63 32
338 62 32
340 337 32
342 20 5
344 342 338
346 345 334
348 51 32
350 349 32
352 57 32
354 353 32
356 355 351
358 356 261
360 358 30
362 361 346
364 85 32
366 84 32
368 365 32
370 83 32
372 82 32
374 371 32
376 81 32
378 80 32
380 377 32
382 79 32
384 78 32
386 383 32
388 77 32
390 76 32
392 389 32
394 75 32
396 74 32
398 395 32
400 381 375
402 400 369
404 403 368
406 404 401
408 380 372
410 409 401
412 401 369
414 400 366
416 415 413
418 397 391
420 418 385
422 420 380
424 422 410
426 424 416
428 427 407
430 428 362
432 431 108
434 35 32
436 34 32
438 435 32
440 439 140
442 59 32
444 58 32
446 443 32
448 447 169
450 449 441
452 95 32
454 94 32
456 453 32
458 16 2
460 458 457
462 461 450
464 43 32
466 42 32
468 465 32
470 17 4
472 470 469
474 473 462
476 439 143
478 447 168
480 479 477
482 459 457
484 483 480
486 471 469
488 487 484
490 489 475
492 491 475
494 489 441
496 488 436
498 497 495
500 499 475
502 500 493
504 492 436
506 505 503
508 168 6
510 508 9
512 510 13
514 512 10
516 514 27
518 514 26
520 159 150
522 520 167
524 522 26
526 156 153
528 526 167
530 528 26
532 156 150
534 532 167
536 534 26
538 164 160
540 538 26
542 518 517
544 543 517
546 519 517
548 546 524
550 549 544
552 546 525
554 552 530
556 555 550
558 552 531
560 558 536
562 561 556
564 558 537
566 564 540
568 567 562
570 541 150
572 570 537
574 572 531
576 575 531
578 577 525
580 578 519
582 580 517
584 583 517
586 585 569
588 568 150
590 589 587
592 65 32
594 64 32
596 593 32
598 69 32
600 68 32
602 599 32
604 600 597
606 39 32
608 38 32
610 607 32
612 611 27
614 613 605
616 488 475
618 616 614
620 619 492
622 616 615
624 623 620
626 615 613
628 626 488
630 628 475
632 630 625
634 624 608
636 635 633
638 489 473
640 488 466
642 641 639
644 643 475
646 644 493
648 492 466
650 649 647
652 541 156
654 652 537
656 654 531
658 657 531
660 659 525
662 661 525
664 663 519
666 665 519
668 667 517
670 668 569
672 568 156
674 673 671
676 541 164
678 676 537
680 679 537
682 681 531
684 682 525
686 684 519
688 686 517
690 688 569
692 568 164
694 693 691
696 489 449
698 488 444
700 699 697
702 701 475
704 702 493
706 492 444
708 707 705
710 9 6
712 710 13
714 712 11
716 714 143
718 140 25
720 719 717
722 715 140
724 723 715
726 140 24
728 725 143
730 726 140
732 731 729
734 733 721
736 720 140
738 737 735
740 341 21
742 740 5
744 338 4
746 744 743
748 747 743
750 745 338
752 750 743
754 753 743
756 755 749
758 748 338
760 759 757
762 615 605
764 762 488
766 764 475
768 766 625
770 624 594
772 771 769
774 603 6
776 774 13
778 776 11
780 600 25
782 780 779
784 783 779
786 781 600
788 786 779
790 789 779
792 791 785
794 784 600
796 795 793
798 614 399
800 615 396
802 801 799
804 803 488
806 804 475
808 396 393
810 397 390
812 811 809
814 813 614
816 615 390
818 817 815
820 819 488
822 820 475
824 396 390
826 824 387
828 825 384
830 829 827
832 831 614
834 615 384
836 835 833
838 837 488
840 838 475
842 824 384
844 842 381
846 843 378
848 847 845
850 849 614
852 615 378
854 853 851
856 855 488
858 856 475
860 842 378
862 860 375
864 861 372
866 865 863
868 867 614
870 615 372
872 871 869
874 873 488
876 874 475
878 860 372
880 878 369
882 879 366
884 883 881
886 885 614
888 615 366
890 889 887
892 891 488
894 892 475
896 806 621
898 620 396
900 899 897
902 822 621
904 620 390
906 905 903
908 840 621
910 620 384
912 911 909
914 858 621
916 620 378
918 917 915
920 876 621
922 620 372
924 923 921
926 894 621
928 620 366
930 929 927
932 489 461
934 488 454
936 935 933
938 937 475
940 938 493
942 492 454
944 943 941
i0 i_hbusreq0
i1 i_hbusreq1
i2 controllable_hmastlock
i3 controllable_nstart
i4 i_hburst1
i5 i_hburst0
i6 controllable_locked
i7 controllable_hmaster0
i8 i_hlock0
i9 controllable_hgrant1
i10 i_hlock1
i11 controllable_busreq
i12 i_hready
i13 controllable_ndecide
i14 controllable_nhgrant0
l0 n33
l1 sys_fair0done_out
l2 reg_stateG3_0_out
l3 env_fair1done_out
l4 reg_controllable_locked_out
l5 sys_fair3done_out
l6 reg_stateG3_1_out
l7 reg_controllable_ndecide_out
l8 reg_stateG3_2_out
l9 reg_i_hbusreq0_out
l10 reg_controllable_busreq_out
l11 reg_controllable_nstart_out
l12 reg_i_hbusreq1_out
l13 sys_fair1done_out
l14 reg_stateG2_out
l15 reg_stateG10_1_out
l16 env_fair0done_out
l17 reg_controllable_nhgrant0_out
l18 reg_stateA1_out
l19 reg_controllable_hmastlock_out
l20 reg_i_hlock1_out
l21 fair_cnt<0>_out
l22 fair_cnt<1>_out
l23 fair_cnt<2>_out
l24 fair_cnt<3>_out
l25 fair_cnt<4>_out
l26 fair_cnt<5>_out
l27 env_safe_err_happened_out
l28 reg_i_hlock0_out
l29 reg_i_hready_out
l30 reg_controllable_hgrant1_out
l31 sys_fair2done_out
l32 reg_controllable_hmaster0_out
o0 o_err
c
amba_2_new_40
This file was written by ABC on Tue May  5 16:50:48 2015
For information about AIGER format, refer to http://fmv.jku.at/aiger
-------------------------------
This AIGER file has been created by the following sequence of commands:
> vl2mv amba2b40.v   ---gives--> amba2b40.mv
> abc -c "read_blif_mv amba2b40.mv; write_aiger -s amba2b40n.aig"   ---gives--> amba2b40n.aig
> aigtoaig amba2b40n.aig amba2b40n.aag   ---gives--> amba2b40n.aag (this file)
Content of amba2b40.v:
module amba_2_new_40(
        o_err,
        i_clk,
        i_hready,
        i_hbusreq0,
        i_hlock0,
        i_hbusreq1,
        i_hlock1,
        i_hburst0,
        i_hburst1,
        controllable_hmaster0,
        controllable_hmastlock,
        controllable_nstart,
        controllable_ndecide,
        controllable_locked,
        controllable_nhgrant0,
        controllable_hgrant1,
        controllable_busreq);

input i_clk;
input i_hready;
input i_hbusreq0;
input i_hlock0;
input i_hbusreq1;
input i_hlock1;
input i_hburst0;
input i_hburst1;
input controllable_hmaster0;
input controllable_hmastlock;
input controllable_nstart;
input controllable_ndecide;
input controllable_locked;
input controllable_nhgrant0;
input controllable_hgrant1;
input controllable_busreq;
output o_err;

reg reg_i_hready;
reg reg_i_hbusreq0;
reg reg_i_hlock0;
reg reg_i_hbusreq1;
reg reg_i_hlock1;
reg reg_controllable_hmaster0;
reg reg_controllable_hmastlock;
reg reg_controllable_nstart;
reg reg_controllable_ndecide;
reg reg_controllable_locked;
reg reg_controllable_nhgrant0;
reg reg_controllable_hgrant1;
reg reg_controllable_busreq;
reg reg_stateA1;
reg reg_stateG2;
reg reg_stateG3_0;
reg reg_stateG3_1;
reg reg_stateG3_2;
reg reg_stateG10_1;
reg env_safe_err_happened;
reg env_fair0done;
reg env_fair1done;
reg sys_fair0done;
reg sys_fair1done;
reg sys_fair2done;
reg sys_fair3done;
reg [5:0] fair_cnt;

wire env_safe_err0;
wire env_safe_err1;
wire env_safe_err;

wire sys_safe_err0;
wire sys_safe_err1;
wire sys_safe_err2;
wire sys_safe_err3;
wire sys_safe_err4;
wire sys_safe_err5;
wire sys_safe_err6;
wire sys_safe_err7;
wire sys_safe_err8;
wire sys_safe_err9;
wire sys_safe_err10;
wire sys_safe_err11;
wire sys_safe_err12;
wire sys_safe_err13;
wire sys_safe_err14;
wire sys_safe_err15;
wire sys_safe_err16;
wire sys_safe_err17;
wire sys_safe_err18;
wire sys_safe_err19;
wire sys_safe_err;

wire env_fair0;
wire env_fair1;

wire sys_fair0;
wire sys_fair1;
wire sys_fair2;
wire sys_fair3;
wire progress_in_sys_fair;
wire all_env_fair_fulfilled;
wire all_sys_fair_fulfilled;
wire fair_err;
wire o_err;

// =============================================================
//                        ENV_TRANSITION:
// =============================================================
// Assumption 3:
// G( hlock0=1 -> hbusreq0=1 );
assign env_safe_err0 =  ~(~ i_hlock0 | i_hbusreq0);

// Assumption 3:
// G( hlock1=1 -> hbusreq1=1 );
assign env_safe_err1 =  ~(~ i_hlock1 | i_hbusreq1);

// collecting together the safety error bits:
assign env_safe_err = env_safe_err0 |
                      env_safe_err1;

// =============================================================
//                        SYS_TRANSITION:
// =============================================================
// G((hmaster0=0) -> (hbusreq0=0 <-> busreq=0));
assign sys_safe_err0 =  ~( ~( ~(controllable_hmaster0) )|(~i_hbusreq0 ^~ (~controllable_busreq)));

// G((hmaster0=1) -> (hbusreq1=0 <-> busreq=0));
assign sys_safe_err1 =  ~( ~( controllable_hmaster0 )|(~i_hbusreq1 ^~ (~controllable_busreq)));

// Guarantee 1:
// G((hready=0) -> X(start=0));
assign sys_safe_err2 =  ~( reg_i_hready | controllable_nstart );

// G(((stateG2=1) * (start=1)) -> FALSE;
assign sys_safe_err3 =  ~( ~(reg_stateG2 & ~controllable_nstart) | 0 );

// G(((stateG3_0=1) * (stateG3_1=0) * (stateG3_2=0) * ((start=1))) -> FALSE);
// G(((stateG3_0=0) * (stateG3_1=1) * (stateG3_2=0) * ((start=1))) -> FALSE);
// G(((stateG3_0=1) * (stateG3_1=1) * (stateG3_2=0) * ((start=1))) -> FALSE);
// G(((stateG3_0=0) * (stateG3_1=0) * (stateG3_2=1) * ((start=1))) -> FALSE);
// all these rules can be summarized as: only in state 000, start=1 is allowed:
assign sys_safe_err4 =  (reg_stateG3_0 | reg_stateG3_1 | reg_stateG3_2) & ~controllable_nstart;

// G( (hready=1) -> (   (hgrant0=1) <-> (X(hmaster0=0))  ) );
assign sys_safe_err5 =  ~( ~(reg_i_hready) | ( ~reg_controllable_nhgrant0 ^~ ( ~(controllable_hmaster0) ) ) );

// G( (hready=1) -> (   (hgrant1=1) <-> (X(hmaster0=1))  ) );
assign sys_safe_err6 =  ~( ~(reg_i_hready) | ( reg_controllable_hgrant1 ^~ ( controllable_hmaster0 ) ) );

// HMASTLOCK:
// G(  (hready=1) -> (locked=0 <-> X(hmastlock=0) ) );
assign sys_safe_err7 =  ~( ~(reg_i_hready) | (~reg_controllable_locked ^~ ~controllable_hmastlock) );

// Master 0:
// G( X(start=0) -> ( ((hmaster0=0)) <-> (X(hmaster0=0)) ) );
assign sys_safe_err8 =  ~( ~(controllable_nstart) | ( ( ~(reg_controllable_hmaster0) ) ^~ ( ~(controllable_hmaster0) )) );

// Master 1:
// G( X(start=0) -> ( ((hmaster0=1)) <-> (X(hmaster0=1)) ) );
assign sys_safe_err9 =  ~( ~(controllable_nstart) | ( ( reg_controllable_hmaster0 ) ^~ ( controllable_hmaster0 )) );

// Guarantee 6.2:
// G( ((X(start=0))) -> ( (hmastlock=1) <-> X(hmastlock=1)) );
assign sys_safe_err10 =  ~( ~(controllable_nstart) | ( reg_controllable_hmastlock ^~ controllable_hmastlock) );

// G( (decide=1  *  hlock0=1  *  X(hgrant0=1) )->X(locked=1));
assign sys_safe_err11 =  ~( ~(~reg_controllable_ndecide & reg_i_hlock0 & ~controllable_nhgrant0) | (controllable_locked) );

// G((decide=1  *  hlock0=0  *  X(hgrant0=1))->X(locked=0));
assign sys_safe_err12 =  ~( ~(~reg_controllable_ndecide & ~reg_i_hlock0 & ~controllable_nhgrant0) | (~controllable_locked) );

// G( (decide=1  *  hlock1=1  *  X(hgrant1=1) )->X(locked=1));
assign sys_safe_err13 =  ~( ~(~reg_controllable_ndecide & reg_i_hlock1 & controllable_hgrant1) | (controllable_locked) );

// G((decide=1  *  hlock1=0  *  X(hgrant1=1))->X(locked=0));
assign sys_safe_err14 =  ~( ~(~reg_controllable_ndecide & ~reg_i_hlock1 & controllable_hgrant1) | (~controllable_locked) );

// G( (decide=0) -> (  ((hgrant0=0)<->X(hgrant0=0))  ));
assign sys_safe_err15 =  ~( ~(reg_controllable_ndecide) | (reg_controllable_nhgrant0 ^~ controllable_nhgrant0) );

// G( (decide=0) -> (  ((hgrant1=0)<->X(hgrant1=0))  ));
assign sys_safe_err16 =  ~( ~(reg_controllable_ndecide) | (~reg_controllable_hgrant1 ^~ ~controllable_hgrant1) );

// G((decide=0)->(locked=0 <-> X(locked=0)));
assign sys_safe_err17 =  ~( ~(reg_controllable_ndecide) | (~reg_controllable_locked ^~ ~controllable_locked) );

// G(((stateG10_1=1) * (((hgrant1=1)) * (hbusreq1=0)))->FALSE);
assign sys_safe_err18 =  ~( ~(reg_stateG10_1 & (controllable_hgrant1 & ~i_hbusreq1)) | 0 );

// default master
// G((decide=1  *  hbusreq0=0  *  hbusreq1=0) -> X(hgrant0=1));
assign sys_safe_err19 =  ~( ~(~reg_controllable_ndecide & (~reg_i_hbusreq0 & ~reg_i_hbusreq1)) | (~controllable_nhgrant0) );

// collecting together the safety error bits:
assign sys_safe_err = sys_safe_err0 |
                      sys_safe_err1 |
                      sys_safe_err2 |
                      sys_safe_err3 |
                      sys_safe_err4 |
                      sys_safe_err5 |
                      sys_safe_err6 |
                      sys_safe_err7 |
                      sys_safe_err8 |
                      sys_safe_err9 |
                      sys_safe_err10 |
                      sys_safe_err11 |
                      sys_safe_err12 |
                      sys_safe_err13 |
                      sys_safe_err14 |
                      sys_safe_err15 |
                      sys_safe_err16 |
                      sys_safe_err17 |
                      sys_safe_err18 |
                      sys_safe_err19;

// =============================================================
//                          ENV_FAIRNESS:
// =============================================================
// Assumption 1: 
// G(F(stateA1=0));
assign env_fair0 =  ~reg_stateA1;

// Assumption 2:
// G(F(hready=1));
assign env_fair1 =  i_hready;

assign all_env_fair_fulfilled = (env_fair0done | env_fair0) &
                                (env_fair1done | env_fair1);

// =============================================================
//                          SYS_FAIRNESS:
// =============================================================
// Guarantee 2:
// G(F(stateG2=0));
assign sys_fair0 = ~reg_stateG2;

// Guarantee 3:
// G(F((stateG3_0=0)  *  (stateG3_1=0)  *  (stateG3_2=0)));
assign sys_fair1 =  (~reg_stateG3_0 & ~reg_stateG3_1 & ~reg_stateG3_2);

// G(F(((hmaster0=0))  |  hbusreq0=0));
assign sys_fair2 =  ( ~(controllable_hmaster0) ) | ~i_hbusreq0;

// G(F(((hmaster0=1))  |  hbusreq1=0));
assign sys_fair3 =  ( controllable_hmaster0 ) | ~i_hbusreq1;

assign all_sys_fair_fulfilled = (sys_fair0done | sys_fair0) &
                                (sys_fair1done | sys_fair1) &
                                (sys_fair2done | sys_fair2) &
                                (sys_fair3done | sys_fair3);
assign progress_in_sys_fair = (~sys_fair0done & sys_fair0) |
                                (~sys_fair1done & sys_fair1) |
                                (~sys_fair2done & sys_fair2) |
                                (~sys_fair3done & sys_fair3);
assign fair_err = (fair_cnt >= 6'b101000);

// computing the error output bit:
assign o_err = ~env_safe_err & ~env_safe_err_happened & (sys_safe_err | fair_err);

initial
 begin
  reg_i_hready = 0;
  reg_i_hbusreq0 = 0;
  reg_i_hlock0 = 0;
  reg_i_hbusreq1 = 0;
  reg_i_hlock1 = 0;
  reg_controllable_hmaster0 = 0;
  reg_controllable_hmastlock = 0;
  reg_controllable_nstart = 0;
  reg_controllable_ndecide = 0;
  reg_controllable_locked = 0;
  reg_controllable_nhgrant0 = 0;
  reg_controllable_hgrant1 = 0;
  reg_controllable_busreq = 0;
  reg_stateA1 = 0;
  reg_stateG2 = 0;
  reg_stateG3_0 = 0;
  reg_stateG3_1 = 0;
  reg_stateG3_2 = 0;
  reg_stateG10_1 = 0;
  env_safe_err_happened = 0;
  env_fair0done = 0;
  env_fair1done = 0;
  sys_fair0done = 0;
  sys_fair1done = 0;
  sys_fair2done = 0;
  sys_fair3done = 0;
  fair_cnt = 0;
 end


always @(posedge i_clk)
 begin
   // We remember if an environment error occurred:
   env_safe_err_happened = env_safe_err_happened | env_safe_err;

   // Updating the fairness counters: 
   if(all_sys_fair_fulfilled)
    begin
      env_fair0done = 0;
      env_fair1done = 0;
      sys_fair0done = 0;
      sys_fair1done = 0;
      sys_fair2done = 0;
      sys_fair3done = 0;
      fair_cnt = 0;
    end
   else
    begin
      if(progress_in_sys_fair)
       begin
         env_fair0done = 0;
         env_fair1done = 0;
         fair_cnt = 0;
         sys_fair0done = sys_fair0done | sys_fair0;
         sys_fair1done = sys_fair1done | sys_fair1;
         sys_fair2done = sys_fair2done | sys_fair2;
         sys_fair3done = sys_fair3done | sys_fair3;
       end
      else
       begin
         if(all_env_fair_fulfilled)
          begin
            env_fair0done = 0;
            env_fair1done = 0;
            fair_cnt = fair_cnt + 1;
          end
         else
          begin
            env_fair0done = env_fair0done | env_fair0;
            env_fair1done = env_fair1done | env_fair1;
          end
       end
    end

   // Updating the automata: 
   // Automaton A1: 
   if(~reg_stateA1 & controllable_hmastlock & ~i_hburst0 & ~i_hburst1)
    begin
      reg_stateA1 = 1'b1;
    end
   else if(reg_stateA1 & ~controllable_busreq)
    begin
      reg_stateA1 = 1'b0;
    end

   // Automaton G2: 
   if(~reg_stateG2)
    begin
      if(controllable_hmastlock & ~controllable_nstart & ~i_hburst0 & ~i_hburst1)
       begin
         reg_stateG2 = 1'b1;
       end
    end
   else // if(reg_stateG2)
    begin
      if(~controllable_busreq)
       begin
         reg_stateG2 = 1'b0;
       end
    end

   // Automaton G3: 
   if(~reg_stateG3_0 & ~reg_stateG3_1 & ~reg_stateG3_2 & controllable_hmastlock & ~controllable_nstart &  ~i_hburst0 & i_hburst1 & ~i_hready)
    begin
      reg_stateG3_0 = 1'b1;
      reg_stateG3_1 = 1'b0;
      reg_stateG3_2 = 1'b0;
    end
   else if(~reg_stateG3_0 & ~reg_stateG3_1 & ~reg_stateG3_2 & controllable_hmastlock & ~controllable_nstart &  ~i_hburst0 & i_hburst1 & i_hready)
    begin
      reg_stateG3_0 = 1'b0;
      reg_stateG3_1 = 1'b1;
      reg_stateG3_2 = 1'b0;
    end
   else if(reg_stateG3_0 & ~reg_stateG3_1 & ~reg_stateG3_2 & i_hready)
    begin
      reg_stateG3_0 = 1'b0;
      reg_stateG3_1 = 1'b1;
      reg_stateG3_2 = 1'b0;
    end
   else if(~reg_stateG3_0 & reg_stateG3_1 & ~reg_stateG3_2 & i_hready)
    begin
      reg_stateG3_0 = 1'b1;
      reg_stateG3_1 = 1'b1;
      reg_stateG3_2 = 1'b0;
    end
   else if(reg_stateG3_0 & reg_stateG3_1 & ~reg_stateG3_2 & i_hready)
    begin
      reg_stateG3_0 = 1'b0;
      reg_stateG3_1 = 1'b0;
      reg_stateG3_2 = 1'b1;
    end
   else if(~reg_stateG3_0 & ~reg_stateG3_1 & reg_stateG3_2 & i_hready)
    begin
      reg_stateG3_0 = 1'b0;
      reg_stateG3_1 = 1'b0;
      reg_stateG3_2 = 1'b0;
    end

   // Automaton G10_1: 
   if(~reg_stateG10_1 & ~controllable_hgrant1 & ~i_hbusreq1)
    begin
      reg_stateG10_1 = 1'b1;
    end
   else if(reg_stateG10_1 & i_hbusreq1)
    begin
      reg_stateG10_1 = 1'b0;
    end

   // Latching the previous input:
   reg_i_hready =  i_hready;
   reg_i_hbusreq0 =  i_hbusreq0;
   reg_i_hlock0 =  i_hlock0;
   reg_i_hbusreq1 =  i_hbusreq1;
   reg_i_hlock1 =  i_hlock1;
   reg_controllable_hmaster0 =  controllable_hmaster0;
   reg_controllable_hmastlock =  controllable_hmastlock;
   reg_controllable_nstart =  controllable_nstart;
   reg_controllable_ndecide =  controllable_ndecide;
   reg_controllable_locked =  controllable_locked;
   reg_controllable_nhgrant0 =  controllable_nhgrant0;
   reg_controllable_hgrant1 =  controllable_hgrant1;
   reg_controllable_busreq =  controllable_busreq;

 end
endmodule

-------------------------------
