aag 891 32 52 1 807
2
4
6
8
10
12
14
16
18
20
22
24
26
28
30
32
34
36
38
40
42
44
46
48
50
52
54
56
58
60
62
64
66 1
68 10
70 999
72 56
74 60
76 14
78 1221
80 58
82 18
84 1305
86 32
88 22
90 1329
92 6
94 50
96 30
98 26
100 1349
102 34
104 28
106 8
108 42
110 24
112 1379
114 1401
116 44
118 20
120 64
122 1423
124 2
126 46
128 1447
130 16
132 1559
134 1565
136 1571
138 1693
140 1699
142 1705
144 1711
146 1717
148 1739
150 48
152 12
154 36
156 201
158 1761
160 52
162 4
164 1783
166 54
168 62
976
170 43 12
172 45 16
174 173 171
176 47 20
178 177 174
180 49 24
182 181 178
184 53 28
186 185 182
188 55 30
190 189 186
192 57 32
194 193 190
196 157 66
198 197 66
200 199 194
202 63 61
204 202 59
206 42 35
208 43 34
210 209 207
212 211 204
214 62 61
216 214 59
218 44 35
220 45 34
222 221 219
224 223 216
226 225 213
228 63 60
230 228 59
232 46 35
234 47 34
236 235 233
238 237 230
240 239 226
242 62 60
244 242 59
246 48 35
248 49 34
250 249 247
252 251 244
254 253 240
256 202 58
258 52 35
260 53 34
262 261 259
264 263 256
266 265 254
268 214 58
270 54 35
272 55 34
274 273 271
276 275 268
278 277 266
280 228 58
282 56 35
284 57 34
286 285 283
288 287 280
290 289 278
292 155 66
294 154 66
296 293 66
298 297 9
300 299 290
302 113 66
304 112 66
306 303 66
308 304 9
310 309 300
312 85 66
314 84 66
316 313 66
318 91 66
320 90 66
322 319 66
324 323 317
326 101 66
328 100 66
330 327 66
332 331 324
334 333 9
336 335 310
338 125 66
340 124 66
342 339 66
344 340 204
346 343 205
348 347 345
350 349 294
352 351 336
354 163 66
356 162 66
358 355 66
360 359 216
362 356 217
364 363 361
366 365 294
368 367 352
370 69 66
372 68 66
374 371 66
376 375 230
378 372 231
380 379 377
382 381 294
384 383 368
386 77 66
388 76 66
390 387 66
392 391 244
394 388 245
396 395 393
398 397 294
400 399 384
402 83 66
404 82 66
406 403 66
408 407 256
410 404 257
412 411 409
414 413 294
416 415 400
418 89 66
420 88 66
422 419 66
424 423 268
426 420 269
428 427 425
430 429 294
432 431 416
434 99 66
436 98 66
438 435 66
440 439 280
442 436 281
444 443 441
446 445 294
448 447 432
450 93 66
452 92 66
454 451 66
456 452 65
458 455 64
460 459 457
462 461 294
464 463 448
466 169 66
468 168 66
470 467 66
472 75 66
474 74 66
476 473 66
478 477 471
480 81 66
482 80 66
484 481 66
486 485 478
488 487 204
490 486 205
492 491 489
494 493 8
496 495 464
498 477 468
500 498 485
502 501 216
504 500 217
506 505 503
508 507 8
510 509 496
512 474 471
514 512 485
516 515 230
518 514 231
520 519 517
522 521 8
524 523 510
526 474 468
528 526 485
530 529 244
532 528 245
534 533 531
536 535 8
538 537 524
540 482 478
542 541 256
544 540 257
546 545 543
548 547 8
550 549 538
552 498 482
554 553 268
556 552 269
558 557 555
560 559 8
562 561 550
564 512 482
566 565 280
568 564 281
570 569 567
572 571 8
574 573 562
576 121 66
578 120 66
580 577 66
582 581 64
584 578 65
586 585 583
588 587 8
590 589 574
592 95 66
594 94 66
596 593 66
598 153 66
600 152 66
602 599 66
604 600 597
606 604 3
608 606 7
610 609 590
612 603 597
614 612 3
616 614 6
618 617 610
620 131 66
622 130 66
624 621 66
626 622 597
628 626 4
630 628 7
632 631 618
634 625 597
636 634 4
638 636 6
640 639 632
642 119 66
644 118 66
646 643 66
648 644 597
650 648 10
652 650 7
654 653 640
656 647 597
658 656 10
660 658 6
662 661 654
664 111 66
666 110 66
668 665 66
670 666 597
672 670 14
674 672 7
676 675 662
678 669 597
680 678 14
682 680 6
684 683 676
686 105 66
688 104 66
690 687 66
692 688 597
694 692 18
696 694 7
698 697 684
700 691 597
702 700 18
704 702 6
706 705 698
708 97 66
710 96 66
712 709 66
714 710 597
716 714 22
718 716 7
720 719 706
722 713 597
724 722 22
726 724 6
728 727 720
730 87 66
732 86 66
734 731 66
736 732 597
738 736 26
740 738 7
742 741 728
744 735 597
746 744 26
748 746 6
750 749 742
752 343 2
754 340 3
756 755 753
758 757 594
760 759 750
762 356 5
764 359 4
766 765 763
768 767 594
770 769 760
772 372 11
774 375 10
776 775 773
778 777 594
780 779 770
782 388 15
784 391 14
786 785 783
788 787 594
790 789 780
792 404 19
794 407 18
796 795 793
798 797 594
800 799 790
802 420 23
804 423 22
806 805 803
808 807 594
810 809 800
812 436 27
814 439 26
816 815 813
818 817 594
820 819 810
822 452 7
824 455 6
826 825 823
828 827 594
830 829 820
832 115 66
834 114 66
836 833 66
838 45 4
840 838 834
842 841 830
844 123 66
846 122 66
848 845 66
850 47 10
852 850 846
854 853 842
856 149 66
858 148 66
860 857 66
862 49 14
864 862 858
866 865 854
868 159 66
870 158 66
872 869 66
874 53 18
876 874 870
878 877 866
880 165 66
882 164 66
884 881 66
886 55 22
888 886 882
890 889 878
892 71 66
894 70 66
896 893 66
898 57 26
900 898 894
902 901 890
904 109 66
906 905 66
908 117 66
910 909 66
912 911 907
914 127 66
916 915 66
918 917 912
920 151 66
922 921 66
924 923 918
926 161 66
928 927 66
930 929 924
932 167 66
934 933 66
936 935 930
938 73 66
940 939 66
942 941 936
944 942 597
946 944 2
948 947 902
950 137 66
952 136 66
954 951 66
956 135 66
958 134 66
960 957 66
962 133 66
964 132 66
966 963 66
968 965 959
970 968 954
972 971 955
974 972 948
976 975 200
978 897 27
980 978 57
982 894 56
984 982 981
986 985 981
988 983 894
990 988 981
992 991 981
994 993 987
996 986 894
998 997 995
1000 139 66
1002 138 66
1004 1001 66
1006 141 66
1008 140 66
1010 1007 66
1012 143 66
1014 142 66
1016 1013 66
1018 145 66
1020 144 66
1022 1019 66
1024 146 66
1026 1009 1003
1028 1026 1015
1030 1028 1021
1032 1030 1025
1034 1032 307
1036 1009 1004
1038 1036 1015
1040 1038 1021
1042 1040 1025
1044 1042 332
1046 1010 1003
1048 1046 1015
1050 1048 1021
1052 1050 1025
1054 205 42
1056 1055 1052
1058 1010 1004
1060 1058 1015
1062 1060 1021
1064 1062 1025
1066 217 44
1068 1067 1064
1070 1026 1016
1072 1070 1021
1074 1072 1025
1076 231 46
1078 1077 1074
1080 1036 1016
1082 1080 1021
1084 1082 1025
1086 245 48
1088 1087 1084
1090 1046 1016
1092 1090 1021
1094 1092 1025
1096 257 52
1098 1097 1094
1100 1058 1016
1102 1100 1021
1104 1102 1025
1106 269 54
1108 1107 1104
1110 1028 1022
1112 1110 1025
1114 281 56
1116 1115 1112
1118 79 66
1120 78 66
1122 1119 66
1124 129 66
1126 128 66
1128 1125 66
1130 1129 1123
1132 1120 36
1134 1044 1035
1136 1135 1035
1138 1045 1035
1140 1138 1056
1142 1141 1136
1144 1138 1057
1146 1144 1068
1148 1147 1142
1150 1144 1069
1152 1150 1078
1154 1153 1148
1156 1150 1079
1158 1156 1088
1160 1159 1154
1162 1156 1089
1164 1162 1098
1166 1165 1160
1168 1162 1099
1170 1168 1108
1172 1171 1166
1174 1168 1109
1176 1174 1116
1178 1177 1172
1180 1174 1117
1182 1180 1130
1184 1183 1178
1186 1180 1131
1188 1186 1132
1190 1189 1184
1192 1133 1120
1194 1192 1131
1196 1195 1131
1198 1197 1117
1200 1198 1109
1202 1200 1099
1204 1202 1089
1206 1204 1079
1208 1206 1069
1210 1208 1057
1212 1210 1045
1214 1212 1035
1216 1214 1191
1218 1190 1120
1220 1219 1217
1222 332 64
1224 1222 9
1226 1224 41
1228 1226 38
1230 1228 37
1232 1228 36
1234 323 314
1236 1234 331
1238 1236 36
1240 320 317
1242 1240 331
1244 1242 36
1246 320 314
1248 1246 331
1250 1248 36
1252 328 324
1254 1252 36
1256 1232 1231
1258 1257 1231
1260 1233 1231
1262 1260 1238
1264 1263 1258
1266 1260 1239
1268 1266 1244
1270 1269 1264
1272 1266 1245
1274 1272 1250
1276 1275 1270
1278 1272 1251
1280 1278 1254
1282 1281 1276
1284 1255 314
1286 1284 1251
1288 1286 1245
1290 1289 1245
1292 1291 1239
1294 1292 1233
1296 1294 1231
1298 1297 1231
1300 1299 1283
1302 1282 314
1304 1303 1301
1306 1255 320
1308 1306 1251
1310 1308 1245
1312 1311 1245
1314 1313 1239
1316 1315 1239
1318 1317 1233
1320 1319 1233
1322 1321 1231
1324 1322 1283
1326 1282 320
1328 1327 1325
1330 1255 328
1332 1330 1251
1334 1333 1251
1336 1335 1245
1338 1336 1239
1340 1338 1233
1342 1340 1231
1344 1342 1283
1346 1282 328
1348 1347 1345
1350 64 9
1352 1350 41
1354 1352 39
1356 1354 307
1358 304 35
1360 1359 1357
1362 1355 304
1364 1363 1355
1366 304 34
1368 1365 307
1370 1366 304
1372 1371 1369
1374 1373 1361
1376 1360 304
1378 1377 1375
1380 837 5
1382 1380 45
1384 834 44
1386 1384 1383
1388 1387 1383
1390 1385 834
1392 1390 1383
1394 1393 1383
1396 1395 1389
1398 1388 834
1400 1399 1397
1402 849 11
1404 1402 47
1406 846 46
1408 1406 1405
1410 1409 1405
1412 1407 846
1414 1412 1405
1416 1415 1405
1418 1417 1411
1420 1410 846
1422 1421 1419
1424 1129 64
1426 1424 41
1428 1426 39
1430 1126 35
1432 1430 1429
1434 1433 1429
1436 1431 1126
1438 1436 1429
1440 1439 1429
1442 1441 1435
1444 1434 1126
1446 1445 1443
1448 1189 1178
1450 1132 967
1452 1133 964
1454 1453 1451
1456 1130 964
1458 1455 1131
1460 1459 1457
1462 1461 1117
1464 1462 1109
1466 1464 1099
1468 1466 1089
1470 1468 1079
1472 1470 1069
1474 1472 1057
1476 1474 1045
1478 1476 1035
1480 964 961
1482 965 958
1484 1483 1481
1486 1485 1132
1488 1133 958
1490 1489 1487
1492 1130 958
1494 1491 1131
1496 1495 1493
1498 1497 1117
1500 1498 1109
1502 1500 1099
1504 1502 1089
1506 1504 1079
1508 1506 1069
1510 1508 1057
1512 1510 1045
1514 1512 1035
1516 964 958
1518 1516 955
1520 1517 952
1522 1521 1519
1524 1523 1132
1526 1133 952
1528 1527 1525
1530 1130 952
1532 1529 1131
1534 1533 1531
1536 1535 1117
1538 1536 1109
1540 1538 1099
1542 1540 1089
1544 1542 1079
1546 1544 1069
1548 1546 1057
1550 1548 1045
1552 1550 1035
1554 1478 1449
1556 1448 964
1558 1557 1555
1560 1514 1449
1562 1448 958
1564 1563 1561
1566 1552 1449
1568 1448 952
1570 1569 1567
1572 1117 1002
1574 1572 1109
1576 1574 1099
1578 1577 1099
1580 1579 1089
1582 1580 1079
1584 1583 1079
1586 1585 1069
1588 1586 1057
1590 1589 1057
1592 1591 1045
1594 1592 1035
1596 1595 1035
1598 1117 1008
1600 1598 1109
1602 1600 1099
1604 1603 1099
1606 1605 1089
1608 1607 1089
1610 1609 1079
1612 1610 1069
1614 1612 1057
1616 1615 1057
1618 1617 1045
1620 1619 1045
1622 1621 1035
1624 1117 1014
1626 1624 1109
1628 1626 1099
1630 1629 1099
1632 1631 1089
1634 1633 1089
1636 1635 1079
1638 1637 1079
1640 1639 1069
1642 1641 1069
1644 1643 1057
1646 1644 1045
1648 1646 1035
1650 1117 1020
1652 1650 1109
1654 1653 1109
1656 1655 1099
1658 1656 1089
1660 1658 1079
1662 1660 1069
1664 1662 1057
1666 1664 1045
1668 1666 1035
1670 1117 1024
1672 1670 1109
1674 1672 1099
1676 1674 1089
1678 1676 1079
1680 1678 1069
1682 1680 1057
1684 1682 1045
1686 1684 1035
1688 1597 1179
1690 1178 1002
1692 1691 1689
1694 1622 1179
1696 1178 1008
1698 1697 1695
1700 1648 1179
1702 1178 1014
1704 1703 1701
1706 1668 1179
1708 1178 1020
1710 1709 1707
1712 1686 1179
1714 1178 1024
1716 1715 1713
1718 861 15
1720 1718 49
1722 858 48
1724 1722 1721
1726 1725 1721
1728 1723 858
1730 1728 1721
1732 1731 1721
1734 1733 1727
1736 1726 858
1738 1737 1735
1740 873 19
1742 1740 53
1744 870 52
1746 1744 1743
1748 1747 1743
1750 1745 870
1752 1750 1743
1754 1753 1743
1756 1755 1749
1758 1748 870
1760 1759 1757
1762 885 23
1764 1762 55
1766 882 54
1768 1766 1765
1770 1769 1765
1772 1767 882
1774 1772 1765
1776 1775 1765
1778 1777 1771
1780 1770 882
1782 1781 1779
i0 controllable_nhgrant0
i1 controllable_hgrant1
i2 controllable_locked
i3 controllable_nstart
i4 controllable_hgrant2
i5 i_hlock0
i6 controllable_hgrant3
i7 i_hlock1
i8 controllable_hgrant4
i9 i_hlock2
i10 controllable_hgrant5
i11 i_hlock3
i12 controllable_hgrant6
i13 i_hlock4
i14 i_hlock5
i15 i_hlock6
i16 controllable_busreq
i17 i_hready
i18 i_hburst1
i19 i_hburst0
i20 i_hbusreq0
i21 i_hbusreq1
i22 i_hbusreq2
i23 i_hbusreq3
i24 controllable_ndecide
i25 i_hbusreq4
i26 i_hbusreq5
i27 i_hbusreq6
i28 controllable_hmaster2
i29 controllable_hmaster1
i30 controllable_hmaster0
i31 controllable_hmastlock
l0 n67
l1 reg_controllable_hgrant2_out
l2 reg_stateG10_6_out
l3 reg_i_hbusreq6_out
l4 reg_controllable_hmaster1_out
l5 reg_controllable_hgrant3_out
l6 next_env_fair_out
l7 reg_controllable_hmaster2_out
l8 reg_controllable_hgrant4_out
l9 reg_stateG3_0_out
l10 reg_i_hlock6_out
l11 reg_controllable_hgrant5_out
l12 reg_stateG3_1_out
l13 reg_controllable_locked_out
l14 reg_controllable_ndecide_out
l15 reg_i_hlock5_out
l16 reg_controllable_hgrant6_out
l17 reg_stateG3_2_out
l18 reg_controllable_busreq_out
l19 reg_i_hlock4_out
l20 reg_controllable_nstart_out
l21 reg_i_hbusreq0_out
l22 reg_i_hlock3_out
l23 reg_stateG2_out
l24 reg_stateG10_1_out
l25 reg_i_hbusreq1_out
l26 reg_i_hlock2_out
l27 reg_controllable_hmastlock_out
l28 reg_stateG10_2_out
l29 reg_controllable_nhgrant0_out
l30 reg_i_hbusreq2_out
l31 reg_stateA1_out
l32 reg_i_hlock1_out
l33 fair_cnt<0>_out
l34 fair_cnt<1>_out
l35 fair_cnt<2>_out
l36 next_sys_fair<0>_out
l37 next_sys_fair<1>_out
l38 next_sys_fair<2>_out
l39 next_sys_fair<3>_out
l40 next_sys_fair<4>_out
l41 reg_stateG10_3_out
l42 reg_i_hbusreq3_out
l43 reg_i_hlock0_out
l44 reg_i_hready_out
l45 env_safe_err_happened_out
l46 reg_stateG10_4_out
l47 reg_i_hbusreq4_out
l48 reg_controllable_hgrant1_out
l49 reg_stateG10_5_out
l50 reg_i_hbusreq5_out
l51 reg_controllable_hmaster0_out
o0 o_err
c
amba_7_new_4
This file was written by ABC on Sat Aug 31 20:24:36 2013
For information about AIGER format, refer to http://fmv.jku.at/aiger
-------------------------------
This AIGER file has been created by the following sequence of commands:
> vl2mv amba7c4unreal.v   ---gives--> amba7c4unreal.mv
> abc -c "read_blif_mv amba7c4unreal.mv; write_aiger -s amba7c4unrealn.aig"   ---gives--> amba7c4unrealn.aig
> aigtoaig amba7c4unrealn.aig amba7c4unrealn.aag   ---gives--> amba7c4unrealn.aag (this file)
Content of amba7c4unreal.v:
module amba_7_new_4(
        o_err,
        i_clk,
        i_hready,
        i_hbusreq0,
        i_hlock0,
        i_hbusreq1,
        i_hlock1,
        i_hbusreq2,
        i_hlock2,
        i_hbusreq3,
        i_hlock3,
        i_hbusreq4,
        i_hlock4,
        i_hbusreq5,
        i_hlock5,
        i_hbusreq6,
        i_hlock6,
        i_hburst0,
        i_hburst1,
        controllable_hmaster0,
        controllable_hmaster1,
        controllable_hmaster2,
        controllable_hmastlock,
        controllable_nstart,
        controllable_ndecide,
        controllable_locked,
        controllable_nhgrant0,
        controllable_hgrant1,
        controllable_hgrant2,
        controllable_hgrant3,
        controllable_hgrant4,
        controllable_hgrant5,
        controllable_hgrant6,
        controllable_busreq);

input i_clk;
input i_hready;
input i_hbusreq0;
input i_hlock0;
input i_hbusreq1;
input i_hlock1;
input i_hbusreq2;
input i_hlock2;
input i_hbusreq3;
input i_hlock3;
input i_hbusreq4;
input i_hlock4;
input i_hbusreq5;
input i_hlock5;
input i_hbusreq6;
input i_hlock6;
input i_hburst0;
input i_hburst1;
input controllable_hmaster0;
input controllable_hmaster1;
input controllable_hmaster2;
input controllable_hmastlock;
input controllable_nstart;
input controllable_ndecide;
input controllable_locked;
input controllable_nhgrant0;
input controllable_hgrant1;
input controllable_hgrant2;
input controllable_hgrant3;
input controllable_hgrant4;
input controllable_hgrant5;
input controllable_hgrant6;
input controllable_busreq;
output o_err;

reg reg_i_hready;
reg reg_i_hbusreq0;
reg reg_i_hlock0;
reg reg_i_hbusreq1;
reg reg_i_hlock1;
reg reg_i_hbusreq2;
reg reg_i_hlock2;
reg reg_i_hbusreq3;
reg reg_i_hlock3;
reg reg_i_hbusreq4;
reg reg_i_hlock4;
reg reg_i_hbusreq5;
reg reg_i_hlock5;
reg reg_i_hbusreq6;
reg reg_i_hlock6;
reg reg_controllable_hmaster0;
reg reg_controllable_hmaster1;
reg reg_controllable_hmaster2;
reg reg_controllable_hmastlock;
reg reg_controllable_nstart;
reg reg_controllable_ndecide;
reg reg_controllable_locked;
reg reg_controllable_nhgrant0;
reg reg_controllable_hgrant1;
reg reg_controllable_hgrant2;
reg reg_controllable_hgrant3;
reg reg_controllable_hgrant4;
reg reg_controllable_hgrant5;
reg reg_controllable_hgrant6;
reg reg_controllable_busreq;
reg reg_stateA1;
reg reg_stateG2;
reg reg_stateG3_0;
reg reg_stateG3_1;
reg reg_stateG3_2;
reg reg_stateG10_1;
reg reg_stateG10_2;
reg reg_stateG10_3;
reg reg_stateG10_4;
reg reg_stateG10_5;
reg reg_stateG10_6;
reg env_safe_err_happened;
reg next_env_fair;
reg [2:0] fair_cnt;
reg [4:0] next_sys_fair;

wire env_safe_err0;
wire env_safe_err1;
wire env_safe_err2;
wire env_safe_err3;
wire env_safe_err4;
wire env_safe_err5;
wire env_safe_err6;
wire env_safe_err;

wire sys_safe_err0;
wire sys_safe_err1;
wire sys_safe_err2;
wire sys_safe_err3;
wire sys_safe_err4;
wire sys_safe_err5;
wire sys_safe_err6;
wire sys_safe_err7;
wire sys_safe_err8;
wire sys_safe_err9;
wire sys_safe_err10;
wire sys_safe_err11;
wire sys_safe_err12;
wire sys_safe_err13;
wire sys_safe_err14;
wire sys_safe_err15;
wire sys_safe_err16;
wire sys_safe_err17;
wire sys_safe_err18;
wire sys_safe_err19;
wire sys_safe_err20;
wire sys_safe_err21;
wire sys_safe_err22;
wire sys_safe_err23;
wire sys_safe_err24;
wire sys_safe_err25;
wire sys_safe_err26;
wire sys_safe_err27;
wire sys_safe_err28;
wire sys_safe_err29;
wire sys_safe_err30;
wire sys_safe_err31;
wire sys_safe_err32;
wire sys_safe_err33;
wire sys_safe_err34;
wire sys_safe_err35;
wire sys_safe_err36;
wire sys_safe_err37;
wire sys_safe_err38;
wire sys_safe_err39;
wire sys_safe_err40;
wire sys_safe_err41;
wire sys_safe_err42;
wire sys_safe_err43;
wire sys_safe_err44;
wire sys_safe_err45;
wire sys_safe_err46;
wire sys_safe_err47;
wire sys_safe_err48;
wire sys_safe_err49;
wire sys_safe_err50;
wire sys_safe_err51;
wire sys_safe_err52;
wire sys_safe_err53;
wire sys_safe_err54;
wire sys_safe_err;

wire env_fair0;
wire env_fair1;

wire sys_fair0;
wire sys_fair1;
wire sys_fair2;
wire sys_fair3;
wire sys_fair4;
wire sys_fair5;
wire sys_fair6;
wire sys_fair7;
wire sys_fair8;
wire fair_err;
wire o_err;

// =============================================================
//                        ENV_TRANSITION:
// =============================================================
// Assumption 3:
// G( hlock0=1 -> hbusreq0=1 );
assign env_safe_err0 =  ~(~ i_hlock0 | i_hbusreq0);

// Assumption 3:
// G( hlock1=1 -> hbusreq1=1 );
assign env_safe_err1 =  ~(~ i_hlock1 | i_hbusreq1);

// Assumption 3:
// G( hlock2=1 -> hbusreq2=1 );
assign env_safe_err2 =  ~(~ i_hlock2 | i_hbusreq2);

// Assumption 3:
// G( hlock3=1 -> hbusreq3=1 );
assign env_safe_err3 =  ~(~ i_hlock3 | i_hbusreq3);

// Assumption 3:
// G( hlock4=1 -> hbusreq4=1 );
assign env_safe_err4 =  ~(~ i_hlock4 | i_hbusreq4);

// Assumption 3:
// G( hlock5=1 -> hbusreq5=1 );
assign env_safe_err5 =  ~(~ i_hlock5 | i_hbusreq5);

// Assumption 3:
// G( hlock6=1 -> hbusreq6=1 );
assign env_safe_err6 =  ~(~ i_hlock6 | i_hbusreq6);

// collecting together the safety error bits:
assign env_safe_err = env_safe_err0 |
                      env_safe_err1 |
                      env_safe_err2 |
                      env_safe_err3 |
                      env_safe_err4 |
                      env_safe_err5 |
                      env_safe_err6;

// =============================================================
//                        SYS_TRANSITION:
// =============================================================
// G((hmaster0=0) * (hmaster1=0) * (hmaster2=0) -> (hbusreq0=0 <-> busreq=0));
assign sys_safe_err0 =  ~( ~( ~(controllable_hmaster0) & ~(controllable_hmaster1) & ~(controllable_hmaster2) )|(~i_hbusreq0 ^~ (~controllable_busreq)));

// G((hmaster0=1) * (hmaster1=0) * (hmaster2=0) -> (hbusreq1=0 <-> busreq=0));
assign sys_safe_err1 =  ~( ~( controllable_hmaster0 & ~(controllable_hmaster1) & ~(controllable_hmaster2) )|(~i_hbusreq1 ^~ (~controllable_busreq)));

// G((hmaster0=0) * (hmaster1=1) * (hmaster2=0) -> (hbusreq2=0 <-> busreq=0));
assign sys_safe_err2 =  ~( ~( ~(controllable_hmaster0) & controllable_hmaster1 & ~(controllable_hmaster2) )|(~i_hbusreq2 ^~ (~controllable_busreq)));

// G((hmaster0=1) * (hmaster1=1) * (hmaster2=0) -> (hbusreq3=0 <-> busreq=0));
assign sys_safe_err3 =  ~( ~( controllable_hmaster0 & controllable_hmaster1 & ~(controllable_hmaster2) )|(~i_hbusreq3 ^~ (~controllable_busreq)));

// G((hmaster0=0) * (hmaster1=0) * (hmaster2=1) -> (hbusreq4=0 <-> busreq=0));
assign sys_safe_err4 =  ~( ~( ~(controllable_hmaster0) & ~(controllable_hmaster1) & controllable_hmaster2 )|(~i_hbusreq4 ^~ (~controllable_busreq)));

// G((hmaster0=1) * (hmaster1=0) * (hmaster2=1) -> (hbusreq5=0 <-> busreq=0));
assign sys_safe_err5 =  ~( ~( controllable_hmaster0 & ~(controllable_hmaster1) & controllable_hmaster2 )|(~i_hbusreq5 ^~ (~controllable_busreq)));

// G((hmaster0=0) * (hmaster1=1) * (hmaster2=1) -> (hbusreq6=0 <-> busreq=0));
assign sys_safe_err6 =  ~( ~( ~(controllable_hmaster0) & controllable_hmaster1 & controllable_hmaster2 )|(~i_hbusreq6 ^~ (~controllable_busreq)));

// Guarantee 1:
// G((hready=0) -> X(start=0));
assign sys_safe_err7 =  ~( reg_i_hready | controllable_nstart );

// G(((stateG2=1) * (start=1)) -> FALSE;
assign sys_safe_err8 =  ~( ~(reg_stateG2 & ~controllable_nstart) | 0 );

// G(((stateG3_0=1) * (stateG3_1=0) * (stateG3_2=0) * ((start=1))) -> FALSE);
// G(((stateG3_0=0) * (stateG3_1=1) * (stateG3_2=0) * ((start=1))) -> FALSE);
// G(((stateG3_0=1) * (stateG3_1=1) * (stateG3_2=0) * ((start=1))) -> FALSE);
// G(((stateG3_0=0) * (stateG3_1=0) * (stateG3_2=1) * ((start=1))) -> FALSE);
// all these rules can be summarized as: only in state 000, start=1 is allowed:
assign sys_safe_err9 =  (reg_stateG3_0 | reg_stateG3_1 | reg_stateG3_2) & ~controllable_nstart;

// G( (hready=1) -> (   (hgrant0=1) <-> (X(hmaster0=0) * X(hmaster1=0) * X(hmaster2=0))  ) );
assign sys_safe_err10 =  ~( ~(reg_i_hready) | ( ~reg_controllable_nhgrant0 ^~ ( ~(controllable_hmaster0) & ~(controllable_hmaster1) & ~(controllable_hmaster2) ) ) );

// G( (hready=1) -> (   (hgrant1=1) <-> (X(hmaster0=1) * X(hmaster1=0) * X(hmaster2=0))  ) );
assign sys_safe_err11 =  ~( ~(reg_i_hready) | ( reg_controllable_hgrant1 ^~ ( controllable_hmaster0 & ~(controllable_hmaster1) & ~(controllable_hmaster2) ) ) );

// G( (hready=1) -> (   (hgrant2=1) <-> (X(hmaster0=0) * X(hmaster1=1) * X(hmaster2=0))  ) );
assign sys_safe_err12 =  ~( ~(reg_i_hready) | ( reg_controllable_hgrant2 ^~ ( ~(controllable_hmaster0) & controllable_hmaster1 & ~(controllable_hmaster2) ) ) );

// G( (hready=1) -> (   (hgrant3=1) <-> (X(hmaster0=1) * X(hmaster1=1) * X(hmaster2=0))  ) );
assign sys_safe_err13 =  ~( ~(reg_i_hready) | ( reg_controllable_hgrant3 ^~ ( controllable_hmaster0 & controllable_hmaster1 & ~(controllable_hmaster2) ) ) );

// G( (hready=1) -> (   (hgrant4=1) <-> (X(hmaster0=0) * X(hmaster1=0) * X(hmaster2=1))  ) );
assign sys_safe_err14 =  ~( ~(reg_i_hready) | ( reg_controllable_hgrant4 ^~ ( ~(controllable_hmaster0) & ~(controllable_hmaster1) & controllable_hmaster2 ) ) );

// G( (hready=1) -> (   (hgrant5=1) <-> (X(hmaster0=1) * X(hmaster1=0) * X(hmaster2=1))  ) );
assign sys_safe_err15 =  ~( ~(reg_i_hready) | ( reg_controllable_hgrant5 ^~ ( controllable_hmaster0 & ~(controllable_hmaster1) & controllable_hmaster2 ) ) );

// G( (hready=1) -> (   (hgrant6=1) <-> (X(hmaster0=0) * X(hmaster1=1) * X(hmaster2=1))  ) );
assign sys_safe_err16 =  ~( ~(reg_i_hready) | ( reg_controllable_hgrant6 ^~ ( ~(controllable_hmaster0) & controllable_hmaster1 & controllable_hmaster2 ) ) );

// HMASTLOCK:
// G(  (hready=1) -> (locked=0 <-> X(hmastlock=0) ) );
assign sys_safe_err17 =  ~( ~(reg_i_hready) | (~reg_controllable_locked ^~ ~controllable_hmastlock) );

// Master 0:
// G( X(start=0) -> ( ((hmaster0=0) * (hmaster1=0) * (hmaster2=0)) <-> (X(hmaster0=0) * X(hmaster1=0) * X(hmaster2=0)) ) );
assign sys_safe_err18 =  ~( ~(controllable_nstart) | ( ( ~(reg_controllable_hmaster0) & ~(reg_controllable_hmaster1) & ~(reg_controllable_hmaster2) ) ^~ ( ~(controllable_hmaster0) & ~(controllable_hmaster1) & ~(controllable_hmaster2) )) );

// Master 1:
// G( X(start=0) -> ( ((hmaster0=1) * (hmaster1=0) * (hmaster2=0)) <-> (X(hmaster0=1) * X(hmaster1=0) * X(hmaster2=0)) ) );
assign sys_safe_err19 =  ~( ~(controllable_nstart) | ( ( reg_controllable_hmaster0 & ~(reg_controllable_hmaster1) & ~(reg_controllable_hmaster2) ) ^~ ( controllable_hmaster0 & ~(controllable_hmaster1) & ~(controllable_hmaster2) )) );

// Master 2:
// G( X(start=0) -> ( ((hmaster0=0) * (hmaster1=1) * (hmaster2=0)) <-> (X(hmaster0=0) * X(hmaster1=1) * X(hmaster2=0)) ) );
assign sys_safe_err20 =  ~( ~(controllable_nstart) | ( ( ~(reg_controllable_hmaster0) & reg_controllable_hmaster1 & ~(reg_controllable_hmaster2) ) ^~ ( ~(controllable_hmaster0) & controllable_hmaster1 & ~(controllable_hmaster2) )) );

// Master 3:
// G( X(start=0) -> ( ((hmaster0=1) * (hmaster1=1) * (hmaster2=0)) <-> (X(hmaster0=1) * X(hmaster1=1) * X(hmaster2=0)) ) );
assign sys_safe_err21 =  ~( ~(controllable_nstart) | ( ( reg_controllable_hmaster0 & reg_controllable_hmaster1 & ~(reg_controllable_hmaster2) ) ^~ ( controllable_hmaster0 & controllable_hmaster1 & ~(controllable_hmaster2) )) );

// Master 4:
// G( X(start=0) -> ( ((hmaster0=0) * (hmaster1=0) * (hmaster2=1)) <-> (X(hmaster0=0) * X(hmaster1=0) * X(hmaster2=1)) ) );
assign sys_safe_err22 =  ~( ~(controllable_nstart) | ( ( ~(reg_controllable_hmaster0) & ~(reg_controllable_hmaster1) & reg_controllable_hmaster2 ) ^~ ( ~(controllable_hmaster0) & ~(controllable_hmaster1) & controllable_hmaster2 )) );

// Master 5:
// G( X(start=0) -> ( ((hmaster0=1) * (hmaster1=0) * (hmaster2=1)) <-> (X(hmaster0=1) * X(hmaster1=0) * X(hmaster2=1)) ) );
assign sys_safe_err23 =  ~( ~(controllable_nstart) | ( ( reg_controllable_hmaster0 & ~(reg_controllable_hmaster1) & reg_controllable_hmaster2 ) ^~ ( controllable_hmaster0 & ~(controllable_hmaster1) & controllable_hmaster2 )) );

// Master 6:
// G( X(start=0) -> ( ((hmaster0=0) * (hmaster1=1) * (hmaster2=1)) <-> (X(hmaster0=0) * X(hmaster1=1) * X(hmaster2=1)) ) );
assign sys_safe_err24 =  ~( ~(controllable_nstart) | ( ( ~(reg_controllable_hmaster0) & reg_controllable_hmaster1 & reg_controllable_hmaster2 ) ^~ ( ~(controllable_hmaster0) & controllable_hmaster1 & controllable_hmaster2 )) );

// Guarantee 6.2:
// G( ((X(start=0))) -> ( (hmastlock=1) <-> X(hmastlock=1)) );
assign sys_safe_err25 =  ~( ~(controllable_nstart) | ( reg_controllable_hmastlock ^~ controllable_hmastlock) );

// G( (decide=1  *  hlock0=1  *  X(hgrant0=1) )->X(locked=1));
assign sys_safe_err26 =  ~( ~(~reg_controllable_ndecide & reg_i_hlock0 & ~controllable_nhgrant0) | (controllable_locked) );

// G((decide=1  *  hlock0=0  *  X(hgrant0=1))->X(locked=0));
assign sys_safe_err27 =  ~( ~(~reg_controllable_ndecide & ~reg_i_hlock0 & ~controllable_nhgrant0) | (~controllable_locked) );

// G( (decide=1  *  hlock1=1  *  X(hgrant1=1) )->X(locked=1));
assign sys_safe_err28 =  ~( ~(~reg_controllable_ndecide & reg_i_hlock1 & controllable_hgrant1) | (controllable_locked) );

// G((decide=1  *  hlock1=0  *  X(hgrant1=1))->X(locked=0));
assign sys_safe_err29 =  ~( ~(~reg_controllable_ndecide & ~reg_i_hlock1 & controllable_hgrant1) | (~controllable_locked) );

// G( (decide=1  *  hlock2=1  *  X(hgrant2=1) )->X(locked=1));
assign sys_safe_err30 =  ~( ~(~reg_controllable_ndecide & reg_i_hlock2 & controllable_hgrant2) | (controllable_locked) );

// G((decide=1  *  hlock2=0  *  X(hgrant2=1))->X(locked=0));
assign sys_safe_err31 =  ~( ~(~reg_controllable_ndecide & ~reg_i_hlock2 & controllable_hgrant2) | (~controllable_locked) );

// G( (decide=1  *  hlock3=1  *  X(hgrant3=1) )->X(locked=1));
assign sys_safe_err32 =  ~( ~(~reg_controllable_ndecide & reg_i_hlock3 & controllable_hgrant3) | (controllable_locked) );

// G((decide=1  *  hlock3=0  *  X(hgrant3=1))->X(locked=0));
assign sys_safe_err33 =  ~( ~(~reg_controllable_ndecide & ~reg_i_hlock3 & controllable_hgrant3) | (~controllable_locked) );

// G( (decide=1  *  hlock4=1  *  X(hgrant4=1) )->X(locked=1));
assign sys_safe_err34 =  ~( ~(~reg_controllable_ndecide & reg_i_hlock4 & controllable_hgrant4) | (controllable_locked) );

// G((decide=1  *  hlock4=0  *  X(hgrant4=1))->X(locked=0));
assign sys_safe_err35 =  ~( ~(~reg_controllable_ndecide & ~reg_i_hlock4 & controllable_hgrant4) | (~controllable_locked) );

// G( (decide=1  *  hlock5=1  *  X(hgrant5=1) )->X(locked=1));
assign sys_safe_err36 =  ~( ~(~reg_controllable_ndecide & reg_i_hlock5 & controllable_hgrant5) | (controllable_locked) );

// G((decide=1  *  hlock5=0  *  X(hgrant5=1))->X(locked=0));
assign sys_safe_err37 =  ~( ~(~reg_controllable_ndecide & ~reg_i_hlock5 & controllable_hgrant5) | (~controllable_locked) );

// G( (decide=1  *  hlock6=1  *  X(hgrant6=1) )->X(locked=1));
assign sys_safe_err38 =  ~( ~(~reg_controllable_ndecide & reg_i_hlock6 & controllable_hgrant6) | (controllable_locked) );

// G((decide=1  *  hlock6=0  *  X(hgrant6=1))->X(locked=0));
assign sys_safe_err39 =  ~( ~(~reg_controllable_ndecide & ~reg_i_hlock6 & controllable_hgrant6) | (~controllable_locked) );

// G( (decide=0) -> (  ((hgrant0=0)<->X(hgrant0=0))  ));
assign sys_safe_err40 =  ~( ~(reg_controllable_ndecide) | (reg_controllable_nhgrant0 ^~ controllable_nhgrant0) );

// G( (decide=0) -> (  ((hgrant1=0)<->X(hgrant1=0))  ));
assign sys_safe_err41 =  ~( ~(reg_controllable_ndecide) | (~reg_controllable_hgrant1 ^~ ~controllable_hgrant1) );

// G( (decide=0) -> (  ((hgrant2=0)<->X(hgrant2=0))  ));
assign sys_safe_err42 =  ~( ~(reg_controllable_ndecide) | (~reg_controllable_hgrant2 ^~ ~controllable_hgrant2) );

// G( (decide=0) -> (  ((hgrant3=0)<->X(hgrant3=0))  ));
assign sys_safe_err43 =  ~( ~(reg_controllable_ndecide) | (~reg_controllable_hgrant3 ^~ ~controllable_hgrant3) );

// G( (decide=0) -> (  ((hgrant4=0)<->X(hgrant4=0))  ));
assign sys_safe_err44 =  ~( ~(reg_controllable_ndecide) | (~reg_controllable_hgrant4 ^~ ~controllable_hgrant4) );

// G( (decide=0) -> (  ((hgrant5=0)<->X(hgrant5=0))  ));
assign sys_safe_err45 =  ~( ~(reg_controllable_ndecide) | (~reg_controllable_hgrant5 ^~ ~controllable_hgrant5) );

// G( (decide=0) -> (  ((hgrant6=0)<->X(hgrant6=0))  ));
assign sys_safe_err46 =  ~( ~(reg_controllable_ndecide) | (~reg_controllable_hgrant6 ^~ ~controllable_hgrant6) );

// G((decide=0)->(locked=0 <-> X(locked=0)));
assign sys_safe_err47 =  ~( ~(reg_controllable_ndecide) | (~reg_controllable_locked ^~ ~controllable_locked) );

// G(((stateG10_1=1) * (((hgrant1=1)) * (hbusreq1=0)))->FALSE);
assign sys_safe_err48 =  ~( ~(reg_stateG10_1 & (controllable_hgrant1 & ~i_hbusreq1)) | 0 );

// G(((stateG10_2=1) * (((hgrant2=1)) * (hbusreq2=0)))->FALSE);
assign sys_safe_err49 =  ~( ~(reg_stateG10_2 & (controllable_hgrant2 & ~i_hbusreq2)) | 0 );

// G(((stateG10_3=1) * (((hgrant3=1)) * (hbusreq3=0)))->FALSE);
assign sys_safe_err50 =  ~( ~(reg_stateG10_3 & (controllable_hgrant3 & ~i_hbusreq3)) | 0 );

// G(((stateG10_4=1) * (((hgrant4=1)) * (hbusreq4=0)))->FALSE);
assign sys_safe_err51 =  ~( ~(reg_stateG10_4 & (controllable_hgrant4 & ~i_hbusreq4)) | 0 );

// G(((stateG10_5=1) * (((hgrant5=1)) * (hbusreq5=0)))->FALSE);
assign sys_safe_err52 =  ~( ~(reg_stateG10_5 & (controllable_hgrant5 & ~i_hbusreq5)) | 0 );

// G(((stateG10_6=1) * (((hgrant6=1)) * (hbusreq6=0)))->FALSE);
assign sys_safe_err53 =  ~( ~(reg_stateG10_6 & (controllable_hgrant6 & ~i_hbusreq6)) | 0 );

// default master
// G((decide=1  *  hbusreq0=0  *  hbusreq1=0  *  hbusreq2=0  *  hbusreq3=0  *  hbusreq4=0  *  hbusreq5=0  *  hbusreq6=0) -> X(hgrant0=1));
assign sys_safe_err54 =  ~( ~(~reg_controllable_ndecide & (~reg_i_hbusreq0 & ~reg_i_hbusreq1 & ~reg_i_hbusreq2 & ~reg_i_hbusreq3 & ~reg_i_hbusreq4 & ~reg_i_hbusreq5 & ~reg_i_hbusreq6)) | (~controllable_nhgrant0) );

// collecting together the safety error bits:
assign sys_safe_err = sys_safe_err0 |
                      sys_safe_err1 |
                      sys_safe_err2 |
                      sys_safe_err3 |
                      sys_safe_err4 |
                      sys_safe_err5 |
                      sys_safe_err6 |
                      sys_safe_err7 |
                      sys_safe_err8 |
                      sys_safe_err9 |
                      sys_safe_err10 |
                      sys_safe_err11 |
                      sys_safe_err12 |
                      sys_safe_err13 |
                      sys_safe_err14 |
                      sys_safe_err15 |
                      sys_safe_err16 |
                      sys_safe_err17 |
                      sys_safe_err18 |
                      sys_safe_err19 |
                      sys_safe_err20 |
                      sys_safe_err21 |
                      sys_safe_err22 |
                      sys_safe_err23 |
                      sys_safe_err24 |
                      sys_safe_err25 |
                      sys_safe_err26 |
                      sys_safe_err27 |
                      sys_safe_err28 |
                      sys_safe_err29 |
                      sys_safe_err30 |
                      sys_safe_err31 |
                      sys_safe_err32 |
                      sys_safe_err33 |
                      sys_safe_err34 |
                      sys_safe_err35 |
                      sys_safe_err36 |
                      sys_safe_err37 |
                      sys_safe_err38 |
                      sys_safe_err39 |
                      sys_safe_err40 |
                      sys_safe_err41 |
                      sys_safe_err42 |
                      sys_safe_err43 |
                      sys_safe_err44 |
                      sys_safe_err45 |
                      sys_safe_err46 |
                      sys_safe_err47 |
                      sys_safe_err48 |
                      sys_safe_err49 |
                      sys_safe_err50 |
                      sys_safe_err51 |
                      sys_safe_err52 |
                      sys_safe_err53 |
                      sys_safe_err54;

// =============================================================
//                          ENV_FAIRNESS:
// =============================================================
// Assumption 1: 
// G(F(stateA1=0));
assign env_fair0 =  ~reg_stateA1;

// Assumption 2:
// G(F(hready=1));
assign env_fair1 =  i_hready;


// =============================================================
//                          SYS_FAIRNESS:
// =============================================================
// Guarantee 2:
// G(F(stateG2=0));
assign sys_fair0 = ~reg_stateG2;

// Guarantee 3:
// G(F((stateG3_0=0)  *  (stateG3_1=0)  *  (stateG3_2=0)));
assign sys_fair1 =  (~reg_stateG3_0 & ~reg_stateG3_1 & ~reg_stateG3_2);

// G(F(((hmaster0=0) * (hmaster1=0) * (hmaster2=0))  |  hbusreq0=0));
assign sys_fair2 =  ( ~(controllable_hmaster0) & ~(controllable_hmaster1) & ~(controllable_hmaster2) ) | ~i_hbusreq0;

// G(F(((hmaster0=1) * (hmaster1=0) * (hmaster2=0))  |  hbusreq1=0));
assign sys_fair3 =  ( controllable_hmaster0 & ~(controllable_hmaster1) & ~(controllable_hmaster2) ) | ~i_hbusreq1;

// G(F(((hmaster0=0) * (hmaster1=1) * (hmaster2=0))  |  hbusreq2=0));
assign sys_fair4 =  ( ~(controllable_hmaster0) & controllable_hmaster1 & ~(controllable_hmaster2) ) | ~i_hbusreq2;

// G(F(((hmaster0=1) * (hmaster1=1) * (hmaster2=0))  |  hbusreq3=0));
assign sys_fair5 =  ( controllable_hmaster0 & controllable_hmaster1 & ~(controllable_hmaster2) ) | ~i_hbusreq3;

// G(F(((hmaster0=0) * (hmaster1=0) * (hmaster2=1))  |  hbusreq4=0));
assign sys_fair6 =  ( ~(controllable_hmaster0) & ~(controllable_hmaster1) & controllable_hmaster2 ) | ~i_hbusreq4;

// G(F(((hmaster0=1) * (hmaster1=0) * (hmaster2=1))  |  hbusreq5=0));
assign sys_fair7 =  ( controllable_hmaster0 & ~(controllable_hmaster1) & controllable_hmaster2 ) | ~i_hbusreq5;

// G(F(((hmaster0=0) * (hmaster1=1) * (hmaster2=1))  |  hbusreq6=0));
assign sys_fair8 =  ( ~(controllable_hmaster0) & controllable_hmaster1 & controllable_hmaster2 ) | ~i_hbusreq6;

assign fair_err = (fair_cnt >= 3'b100);

// computing the error output bit:
assign o_err = ~env_safe_err & ~env_safe_err_happened & (sys_safe_err | fair_err);

initial
 begin
  reg_i_hready = 0;
  reg_i_hbusreq0 = 0;
  reg_i_hlock0 = 0;
  reg_i_hbusreq1 = 0;
  reg_i_hlock1 = 0;
  reg_i_hbusreq2 = 0;
  reg_i_hlock2 = 0;
  reg_i_hbusreq3 = 0;
  reg_i_hlock3 = 0;
  reg_i_hbusreq4 = 0;
  reg_i_hlock4 = 0;
  reg_i_hbusreq5 = 0;
  reg_i_hlock5 = 0;
  reg_i_hbusreq6 = 0;
  reg_i_hlock6 = 0;
  reg_controllable_hmaster0 = 0;
  reg_controllable_hmaster1 = 0;
  reg_controllable_hmaster2 = 0;
  reg_controllable_hmastlock = 0;
  reg_controllable_nstart = 0;
  reg_controllable_ndecide = 0;
  reg_controllable_locked = 0;
  reg_controllable_nhgrant0 = 0;
  reg_controllable_hgrant1 = 0;
  reg_controllable_hgrant2 = 0;
  reg_controllable_hgrant3 = 0;
  reg_controllable_hgrant4 = 0;
  reg_controllable_hgrant5 = 0;
  reg_controllable_hgrant6 = 0;
  reg_controllable_busreq = 0;
  reg_stateA1 = 0;
  reg_stateG2 = 0;
  reg_stateG3_0 = 0;
  reg_stateG3_1 = 0;
  reg_stateG3_2 = 0;
  reg_stateG10_1 = 0;
  reg_stateG10_2 = 0;
  reg_stateG10_3 = 0;
  reg_stateG10_4 = 0;
  reg_stateG10_5 = 0;
  reg_stateG10_6 = 0;
  env_safe_err_happened = 0;
  next_env_fair = 0;
  fair_cnt = 0;
  next_sys_fair = 0;
 end


always @(posedge i_clk)
 begin
   // We remember if an environment error occurred:
   env_safe_err_happened = env_safe_err_happened | env_safe_err;

   // Updating the fairness counters: 
   if((next_sys_fair == 0) & sys_fair0)
    begin
      next_sys_fair = 1;
      next_env_fair = 0;
      fair_cnt = 0;
    end
   else if((next_sys_fair == 1) & sys_fair1)
    begin
      next_sys_fair = 2;
      next_env_fair = 0;
      fair_cnt = 0;
    end
   else if((next_sys_fair == 2) & sys_fair2)
    begin
      next_sys_fair = 3;
      next_env_fair = 0;
      fair_cnt = 0;
    end
   else if((next_sys_fair == 3) & sys_fair3)
    begin
      next_sys_fair = 4;
      next_env_fair = 0;
      fair_cnt = 0;
    end
   else if((next_sys_fair == 4) & sys_fair4)
    begin
      next_sys_fair = 5;
      next_env_fair = 0;
      fair_cnt = 0;
    end
   else if((next_sys_fair == 5) & sys_fair5)
    begin
      next_sys_fair = 6;
      next_env_fair = 0;
      fair_cnt = 0;
    end
   else if((next_sys_fair == 6) & sys_fair6)
    begin
      next_sys_fair = 7;
      next_env_fair = 0;
      fair_cnt = 0;
    end
   else if((next_sys_fair == 7) & sys_fair7)
    begin
      next_sys_fair = 8;
      next_env_fair = 0;
      fair_cnt = 0;
    end
   else if((next_sys_fair == 8) & sys_fair8)
    begin
      next_sys_fair = 0;
      next_env_fair = 0;
      fair_cnt = 0;
    end
   else if(~next_env_fair & env_fair0)
    begin
      next_env_fair = 1;
    end
   else if(next_env_fair & env_fair1)
    begin
      next_env_fair = 0;
      fair_cnt = fair_cnt + 1;
    end

   // Updating the automata: 
   // Automaton A1: 
   if(~reg_stateA1 & controllable_hmastlock & ~i_hburst0 & ~i_hburst1)
    begin
      reg_stateA1 = 1'b1;
    end
   else if(reg_stateA1 & ~controllable_busreq)
    begin
      reg_stateA1 = 1'b0;
    end

   // Automaton G2: 
   if(~reg_stateG2)
    begin
      if(controllable_hmastlock & ~controllable_nstart & ~i_hburst0 & ~i_hburst1)
       begin
         reg_stateG2 = 1'b1;
       end
    end
   else // if(reg_stateG2)
    begin
      if(~controllable_busreq)
       begin
         reg_stateG2 = 1'b0;
       end
    end

   // Automaton G3: 
   if(~reg_stateG3_0 & ~reg_stateG3_1 & ~reg_stateG3_2 & controllable_hmastlock & ~controllable_nstart &  ~i_hburst0 & i_hburst1 & ~i_hready)
    begin
      reg_stateG3_0 = 1'b1;
      reg_stateG3_1 = 1'b0;
      reg_stateG3_2 = 1'b0;
    end
   else if(~reg_stateG3_0 & ~reg_stateG3_1 & ~reg_stateG3_2 & controllable_hmastlock & ~controllable_nstart &  ~i_hburst0 & i_hburst1 & i_hready)
    begin
      reg_stateG3_0 = 1'b0;
      reg_stateG3_1 = 1'b1;
      reg_stateG3_2 = 1'b0;
    end
   else if(reg_stateG3_0 & ~reg_stateG3_1 & ~reg_stateG3_2 & i_hready)
    begin
      reg_stateG3_0 = 1'b0;
      reg_stateG3_1 = 1'b1;
      reg_stateG3_2 = 1'b0;
    end
   else if(~reg_stateG3_0 & reg_stateG3_1 & ~reg_stateG3_2 & i_hready)
    begin
      reg_stateG3_0 = 1'b1;
      reg_stateG3_1 = 1'b1;
      reg_stateG3_2 = 1'b0;
    end
   else if(reg_stateG3_0 & reg_stateG3_1 & ~reg_stateG3_2 & i_hready)
    begin
      reg_stateG3_0 = 1'b0;
      reg_stateG3_1 = 1'b0;
      reg_stateG3_2 = 1'b1;
    end
   else if(~reg_stateG3_0 & ~reg_stateG3_1 & reg_stateG3_2 & i_hready)
    begin
      reg_stateG3_0 = 1'b0;
      reg_stateG3_1 = 1'b0;
      reg_stateG3_2 = 1'b0;
    end

   // Automaton G10_1: 
   if(~reg_stateG10_1 & ~controllable_hgrant1 & ~i_hbusreq1)
    begin
      reg_stateG10_1 = 1'b1;
    end
   else if(reg_stateG10_1 & i_hbusreq1)
    begin
      reg_stateG10_1 = 1'b0;
    end

   // Automaton G10_2: 
   if(~reg_stateG10_2 & ~controllable_hgrant2 & ~i_hbusreq2)
    begin
      reg_stateG10_2 = 1'b1;
    end
   else if(reg_stateG10_2 & i_hbusreq2)
    begin
      reg_stateG10_2 = 1'b0;
    end

   // Automaton G10_3: 
   if(~reg_stateG10_3 & ~controllable_hgrant3 & ~i_hbusreq3)
    begin
      reg_stateG10_3 = 1'b1;
    end
   else if(reg_stateG10_3 & i_hbusreq3)
    begin
      reg_stateG10_3 = 1'b0;
    end

   // Automaton G10_4: 
   if(~reg_stateG10_4 & ~controllable_hgrant4 & ~i_hbusreq4)
    begin
      reg_stateG10_4 = 1'b1;
    end
   else if(reg_stateG10_4 & i_hbusreq4)
    begin
      reg_stateG10_4 = 1'b0;
    end

   // Automaton G10_5: 
   if(~reg_stateG10_5 & ~controllable_hgrant5 & ~i_hbusreq5)
    begin
      reg_stateG10_5 = 1'b1;
    end
   else if(reg_stateG10_5 & i_hbusreq5)
    begin
      reg_stateG10_5 = 1'b0;
    end

   // Automaton G10_6: 
   if(~reg_stateG10_6 & ~controllable_hgrant6 & ~i_hbusreq6)
    begin
      reg_stateG10_6 = 1'b1;
    end
   else if(reg_stateG10_6 & i_hbusreq6)
    begin
      reg_stateG10_6 = 1'b0;
    end

   // Latching the previous input:
   reg_i_hready =  i_hready;
   reg_i_hbusreq0 =  i_hbusreq0;
   reg_i_hlock0 =  i_hlock0;
   reg_i_hbusreq1 =  i_hbusreq1;
   reg_i_hlock1 =  i_hlock1;
   reg_i_hbusreq2 =  i_hbusreq2;
   reg_i_hlock2 =  i_hlock2;
   reg_i_hbusreq3 =  i_hbusreq3;
   reg_i_hlock3 =  i_hlock3;
   reg_i_hbusreq4 =  i_hbusreq4;
   reg_i_hlock4 =  i_hlock4;
   reg_i_hbusreq5 =  i_hbusreq5;
   reg_i_hlock5 =  i_hlock5;
   reg_i_hbusreq6 =  i_hbusreq6;
   reg_i_hlock6 =  i_hlock6;
   reg_controllable_hmaster0 =  controllable_hmaster0;
   reg_controllable_hmaster1 =  controllable_hmaster1;
   reg_controllable_hmaster2 =  controllable_hmaster2;
   reg_controllable_hmastlock =  controllable_hmastlock;
   reg_controllable_nstart =  controllable_nstart;
   reg_controllable_ndecide =  controllable_ndecide;
   reg_controllable_locked =  controllable_locked;
   reg_controllable_nhgrant0 =  controllable_nhgrant0;
   reg_controllable_hgrant1 =  controllable_hgrant1;
   reg_controllable_hgrant2 =  controllable_hgrant2;
   reg_controllable_hgrant3 =  controllable_hgrant3;
   reg_controllable_hgrant4 =  controllable_hgrant4;
   reg_controllable_hgrant5 =  controllable_hgrant5;
   reg_controllable_hgrant6 =  controllable_hgrant6;
   reg_controllable_busreq =  controllable_busreq;

 end
endmodule

-------------------------------
#!SYNTCOMP
SOLVED_BY : 7/8 [SYNTCOMP2014-RealSeq], 3/4 [SYNTCOMP2015-SyntSeq], 3/3 [SYNTCOMP2015-SyntPar], 7/7 [SYNTCOMP2015-RealSeq], 4/4 [SYNTCOMP2015-RealPar]
SOLVED_IN : 8.40452 [SYNTCOMP2014-RealSeq], 7.40681 [SYNTCOMP2015-RealSeq], 11.1124 [SYNTCOMP2015-RealPar]
REF_SIZE : 0
STATUS : unrealizable
#.
