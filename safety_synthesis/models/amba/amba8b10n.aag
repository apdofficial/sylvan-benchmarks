aag 950 35 63 1 852
2
4
6
8
10
12
14
16
18
20
22
24
26
28
30
32
34
36
38
40
42
44
46
48
50
52
54
56
58
60
62
64
66
68
70
72 1
74 50
76 1295
78 52
80 56
82 1309
84 1323
86 1369
88 58
90 1383
92 60
94 8
96 62
98 1397
100 1481
102 1495
104 1507
106 1531
108 1551
110 1575
112 70
114 1589
116 1657
118 1663
120 1669
122 1675
124 36
126 68
128 1689
130 1711
132 34
134 1733
136 1763
138 30
140 66
142 1785
144 1799
146 28
148 64
150 54
152 1821
154 40
156 24
158 1843
160 4
162 20
164 38
166 1857
168 16
170 1879
172 10
174 12
176 2
178 1901
180 14
182 233
184 18
186 22
188 46
190 26
192 48
194 32
196 6
1124
198 47 12
200 49 16
202 201 199
204 51 20
206 205 202
208 53 24
210 209 206
212 57 28
214 213 210
216 59 30
218 217 214
220 61 34
222 221 218
224 63 36
226 225 222
228 183 72
230 229 72
232 231 226
234 69 67
236 234 65
238 46 39
240 47 38
242 241 239
244 243 236
246 68 67
248 246 65
250 48 39
252 49 38
254 253 251
256 255 248
258 257 245
260 69 66
262 260 65
264 50 39
266 51 38
268 267 265
270 269 262
272 271 258
274 68 66
276 274 65
278 52 39
280 53 38
282 281 279
284 283 276
286 285 272
288 234 64
290 56 39
292 57 38
294 293 291
296 295 288
298 297 286
300 246 64
302 58 39
304 59 38
306 305 303
308 307 300
310 309 298
312 260 64
314 60 39
316 61 38
318 317 315
320 319 312
322 321 310
324 274 64
326 62 39
328 63 38
330 329 327
332 331 324
334 333 322
336 155 72
338 154 72
340 337 72
342 341 9
344 343 334
346 137 72
348 136 72
350 347 72
352 348 9
354 353 344
356 101 72
358 100 72
360 357 72
362 107 72
364 106 72
366 363 72
368 367 361
370 109 72
372 108 72
374 371 72
376 375 368
378 377 9
380 379 354
382 177 72
384 176 72
386 383 72
388 384 236
390 387 237
392 391 389
394 393 338
396 395 380
398 161 72
400 160 72
402 399 72
404 403 248
406 400 249
408 407 405
410 409 338
412 411 396
414 173 72
416 172 72
418 415 72
420 419 262
422 416 263
424 423 421
426 425 338
428 427 412
430 181 72
432 180 72
434 431 72
436 435 276
438 432 277
440 439 437
442 441 338
444 443 428
446 185 72
448 184 72
450 447 72
452 451 288
454 448 289
456 455 453
458 457 338
460 459 444
462 187 72
464 186 72
466 463 72
468 467 300
470 464 301
472 471 469
474 473 338
476 475 460
478 191 72
480 190 72
482 479 72
484 483 312
486 480 313
488 487 485
490 489 338
492 491 476
494 195 72
496 194 72
498 495 72
500 499 324
502 496 325
504 503 501
506 505 338
508 507 492
510 197 72
512 196 72
514 511 72
516 512 71
518 515 70
520 519 517
522 521 338
524 523 508
526 127 72
528 126 72
530 527 72
532 141 72
534 140 72
536 533 72
538 537 531
540 149 72
542 148 72
544 541 72
546 545 538
548 547 236
550 546 237
552 551 549
554 553 8
556 555 524
558 537 528
560 558 545
562 561 248
564 560 249
566 565 563
568 567 8
570 569 556
572 534 531
574 572 545
576 575 262
578 574 263
580 579 577
582 581 8
584 583 570
586 534 528
588 586 545
590 589 276
592 588 277
594 593 591
596 595 8
598 597 584
600 542 538
602 601 288
604 600 289
606 605 603
608 607 8
610 609 598
612 558 542
614 613 300
616 612 301
618 617 615
620 619 8
622 621 610
624 572 542
626 625 312
628 624 313
630 629 627
632 631 8
634 633 622
636 586 542
638 637 324
640 636 325
642 641 639
644 643 8
646 645 634
648 113 72
650 112 72
652 649 72
654 653 70
656 650 71
658 657 655
660 659 8
662 661 646
664 151 72
666 150 72
668 665 72
670 175 72
672 174 72
674 671 72
676 672 669
678 676 3
680 678 7
682 681 662
684 675 669
686 684 3
688 686 6
690 689 682
692 169 72
694 168 72
696 693 72
698 694 669
700 698 4
702 700 7
704 703 690
706 697 669
708 706 4
710 708 6
712 711 704
714 163 72
716 162 72
718 715 72
720 716 669
722 720 10
724 722 7
726 725 712
728 719 669
730 728 10
732 730 6
734 733 726
736 157 72
738 156 72
740 737 72
742 738 669
744 742 14
746 744 7
748 747 734
750 741 669
752 750 14
754 752 6
756 755 748
758 147 72
760 146 72
762 759 72
764 760 669
766 764 18
768 766 7
770 769 756
772 763 669
774 772 18
776 774 6
778 777 770
780 139 72
782 138 72
784 781 72
786 782 669
788 786 22
790 788 7
792 791 778
794 785 669
796 794 22
798 796 6
800 799 792
802 133 72
804 132 72
806 803 72
808 804 669
810 808 26
812 810 7
814 813 800
816 807 669
818 816 26
820 818 6
822 821 814
824 125 72
826 124 72
828 825 72
830 826 669
832 830 32
834 832 7
836 835 822
838 829 669
840 838 32
842 840 6
844 843 836
846 387 2
848 384 3
850 849 847
852 851 666
854 853 844
856 400 5
858 403 4
860 859 857
862 861 666
864 863 854
866 416 11
868 419 10
870 869 867
872 871 666
874 873 864
876 432 15
878 435 14
880 879 877
882 881 666
884 883 874
886 448 19
888 451 18
890 889 887
892 891 666
894 893 884
896 464 23
898 467 22
900 899 897
902 901 666
904 903 894
906 480 27
908 483 26
910 909 907
912 911 666
914 913 904
916 496 33
918 499 32
920 919 917
922 921 666
924 923 914
926 512 7
928 515 6
930 929 927
932 931 666
934 933 924
936 131 72
938 130 72
940 937 72
942 49 4
944 942 938
946 945 934
948 135 72
950 134 72
952 949 72
954 51 10
956 954 950
958 957 946
960 143 72
962 142 72
964 961 72
966 53 14
968 966 962
970 969 958
972 153 72
974 152 72
976 973 72
978 57 18
980 978 974
982 981 970
984 159 72
986 158 72
988 985 72
990 59 22
992 990 986
994 993 982
996 171 72
998 170 72
1000 997 72
1002 61 26
1004 1002 998
1006 1005 994
1008 179 72
1010 178 72
1012 1009 72
1014 63 32
1016 1014 1010
1018 1017 1006
1020 189 72
1022 1021 72
1024 193 72
1026 1025 72
1028 1027 1023
1030 75 72
1032 1031 72
1034 1033 1028
1036 79 72
1038 1037 72
1040 1039 1034
1042 81 72
1044 1043 72
1046 1045 1040
1048 89 72
1050 1049 72
1052 1051 1046
1054 93 72
1056 1055 72
1058 1057 1052
1060 97 72
1062 1061 72
1064 1063 1058
1066 1064 669
1068 1066 2
1070 1069 1018
1072 123 72
1074 122 72
1076 1073 72
1078 121 72
1080 120 72
1082 1079 72
1084 119 72
1086 118 72
1088 1085 72
1090 117 72
1092 116 72
1094 1091 72
1096 1089 1083
1098 1096 1077
1100 1099 1076
1102 1100 1097
1104 1088 1080
1106 1105 1097
1108 1097 1077
1110 1096 1074
1112 1111 1109
1114 1093 1088
1116 1114 1106
1118 1116 1112
1120 1119 1103
1122 1120 1070
1124 1123 232
1126 167 72
1128 166 72
1130 1127 72
1132 1131 348
1134 145 72
1136 144 72
1138 1135 72
1140 1139 377
1142 1141 1133
1144 129 72
1146 128 72
1148 1145 72
1150 237 46
1152 1150 1149
1154 1153 1142
1156 115 72
1158 114 72
1160 1157 72
1162 249 48
1164 1162 1161
1166 1165 1154
1168 103 72
1170 102 72
1172 1169 72
1174 263 50
1176 1174 1173
1178 1177 1166
1180 99 72
1182 98 72
1184 1181 72
1186 277 52
1188 1186 1185
1190 1189 1178
1192 91 72
1194 90 72
1196 1193 72
1198 289 56
1200 1198 1197
1202 1201 1190
1204 83 72
1206 82 72
1208 1205 72
1210 301 58
1212 1210 1209
1214 1213 1202
1216 77 72
1218 76 72
1220 1217 72
1222 313 60
1224 1222 1221
1226 1225 1214
1228 85 72
1230 84 72
1232 1229 72
1234 325 62
1236 1234 1233
1238 1237 1226
1240 1131 351
1242 1139 376
1244 1243 1241
1246 1151 1149
1248 1247 1244
1250 1163 1161
1252 1251 1248
1254 1175 1173
1256 1255 1252
1258 1187 1185
1260 1259 1256
1262 1199 1197
1264 1263 1260
1266 1211 1209
1268 1267 1264
1270 1223 1221
1272 1271 1268
1274 1235 1233
1276 1275 1272
1278 1277 1239
1280 1279 1239
1282 1277 1225
1284 1276 1218
1286 1285 1283
1288 1287 1239
1290 1288 1281
1292 1280 1218
1294 1293 1291
1296 1277 1213
1298 1276 1206
1300 1299 1297
1302 1301 1239
1304 1302 1281
1306 1280 1206
1308 1307 1305
1310 1277 1237
1312 1276 1230
1314 1313 1311
1316 1315 1239
1318 1316 1281
1320 1280 1230
1322 1321 1319
1324 105 72
1326 104 72
1328 1325 72
1330 111 72
1332 110 72
1334 1331 72
1336 1332 1329
1338 87 72
1340 86 72
1342 1339 72
1344 1343 41
1346 1345 1337
1348 1276 1239
1350 1348 1346
1352 1351 1280
1354 1348 1347
1356 1355 1352
1358 1347 1345
1360 1358 1276
1362 1360 1239
1364 1362 1357
1366 1356 1340
1368 1367 1365
1370 1277 1201
1372 1276 1194
1374 1373 1371
1376 1375 1239
1378 1376 1281
1380 1280 1194
1382 1381 1379
1384 1277 1189
1386 1276 1182
1388 1387 1385
1390 1389 1239
1392 1390 1281
1394 1280 1182
1396 1395 1393
1398 376 70
1400 1398 9
1402 1400 45
1404 1402 42
1406 1404 41
1408 1404 40
1410 367 358
1412 1410 375
1414 1412 40
1416 364 361
1418 1416 375
1420 1418 40
1422 364 358
1424 1422 375
1426 1424 40
1428 372 368
1430 1428 40
1432 1408 1407
1434 1433 1407
1436 1409 1407
1438 1436 1414
1440 1439 1434
1442 1436 1415
1444 1442 1420
1446 1445 1440
1448 1442 1421
1450 1448 1426
1452 1451 1446
1454 1448 1427
1456 1454 1430
1458 1457 1452
1460 1431 358
1462 1460 1427
1464 1462 1421
1466 1465 1421
1468 1467 1415
1470 1468 1409
1472 1470 1407
1474 1473 1407
1476 1475 1459
1478 1458 358
1480 1479 1477
1482 1277 1177
1484 1276 1170
1486 1485 1483
1488 1487 1239
1490 1488 1281
1492 1280 1170
1494 1493 1491
1496 1347 1337
1498 1496 1276
1500 1498 1239
1502 1500 1357
1504 1356 1326
1506 1505 1503
1508 1431 364
1510 1508 1427
1512 1510 1421
1514 1513 1421
1516 1515 1415
1518 1517 1415
1520 1519 1409
1522 1521 1409
1524 1523 1407
1526 1524 1459
1528 1458 364
1530 1529 1527
1532 1431 372
1534 1532 1427
1536 1535 1427
1538 1537 1421
1540 1538 1415
1542 1540 1409
1544 1542 1407
1546 1544 1459
1548 1458 372
1550 1549 1547
1552 1335 70
1554 1552 45
1556 1554 43
1558 1332 39
1560 1558 1557
1562 1561 1557
1564 1559 1332
1566 1564 1557
1568 1567 1557
1570 1569 1563
1572 1562 1332
1574 1573 1571
1576 1277 1165
1578 1276 1158
1580 1579 1577
1582 1581 1239
1584 1582 1281
1586 1280 1158
1588 1587 1585
1590 1346 1095
1592 1347 1092
1594 1593 1591
1596 1595 1276
1598 1596 1239
1600 1092 1089
1602 1093 1086
1604 1603 1601
1606 1605 1346
1608 1347 1086
1610 1609 1607
1612 1611 1276
1614 1612 1239
1616 1092 1086
1618 1616 1083
1620 1617 1080
1622 1621 1619
1624 1623 1346
1626 1347 1080
1628 1627 1625
1630 1629 1276
1632 1630 1239
1634 1616 1080
1636 1634 1077
1638 1635 1074
1640 1639 1637
1642 1641 1346
1644 1347 1074
1646 1645 1643
1648 1647 1276
1650 1648 1239
1652 1598 1353
1654 1352 1092
1656 1655 1653
1658 1614 1353
1660 1352 1086
1662 1661 1659
1664 1632 1353
1666 1352 1080
1668 1667 1665
1670 1650 1353
1672 1352 1074
1674 1673 1671
1676 1277 1153
1678 1276 1146
1680 1679 1677
1682 1681 1239
1684 1682 1281
1686 1280 1146
1688 1687 1685
1690 941 5
1692 1690 49
1694 938 48
1696 1694 1693
1698 1697 1693
1700 1695 938
1702 1700 1693
1704 1703 1693
1706 1705 1699
1708 1698 938
1710 1709 1707
1712 953 11
1714 1712 51
1716 950 50
1718 1716 1715
1720 1719 1715
1722 1717 950
1724 1722 1715
1726 1725 1715
1728 1727 1721
1730 1720 950
1732 1731 1729
1734 70 9
1736 1734 45
1738 1736 43
1740 1738 351
1742 348 39
1744 1743 1741
1746 1739 348
1748 1747 1739
1750 348 38
1752 1749 351
1754 1750 348
1756 1755 1753
1758 1757 1745
1760 1744 348
1762 1761 1759
1764 965 15
1766 1764 53
1768 962 52
1770 1768 1767
1772 1771 1767
1774 1769 962
1776 1774 1767
1778 1777 1767
1780 1779 1773
1782 1772 962
1784 1783 1781
1786 1277 1141
1788 1276 1136
1790 1789 1787
1792 1791 1239
1794 1792 1281
1796 1280 1136
1798 1797 1795
1800 977 19
1802 1800 57
1804 974 56
1806 1804 1803
1808 1807 1803
1810 1805 974
1812 1810 1803
1814 1813 1803
1816 1815 1809
1818 1808 974
1820 1819 1817
1822 989 23
1824 1822 59
1826 986 58
1828 1826 1825
1830 1829 1825
1832 1827 986
1834 1832 1825
1836 1835 1825
1838 1837 1831
1840 1830 986
1842 1841 1839
1844 1277 1133
1846 1276 1128
1848 1847 1845
1850 1849 1239
1852 1850 1281
1854 1280 1128
1856 1855 1853
1858 1001 27
1860 1858 61
1862 998 60
1864 1862 1861
1866 1865 1861
1868 1863 998
1870 1868 1861
1872 1871 1861
1874 1873 1867
1876 1866 998
1878 1877 1875
1880 1013 33
1882 1880 63
1884 1010 62
1886 1884 1883
1888 1887 1883
1890 1885 1010
1892 1890 1883
1894 1893 1883
1896 1895 1889
1898 1888 1010
1900 1899 1897
i0 controllable_nhgrant0
i1 controllable_hgrant1
i2 controllable_locked
i3 controllable_nstart
i4 controllable_hgrant2
i5 i_hlock0
i6 controllable_hgrant3
i7 i_hlock1
i8 controllable_hgrant4
i9 i_hlock2
i10 controllable_hgrant5
i11 i_hlock3
i12 controllable_hgrant6
i13 i_hlock4
i14 i_hlock5
i15 controllable_hgrant7
i16 i_hlock6
i17 i_hlock7
i18 controllable_busreq
i19 i_hready
i20 i_hburst1
i21 i_hburst0
i22 i_hbusreq0
i23 i_hbusreq1
i24 i_hbusreq2
i25 i_hbusreq3
i26 controllable_ndecide
i27 i_hbusreq4
i28 i_hbusreq5
i29 i_hbusreq6
i30 i_hbusreq7
i31 controllable_hmaster2
i32 controllable_hmaster1
i33 controllable_hmaster0
i34 controllable_hmastlock
l0 n73
l1 reg_i_hbusreq2_out
l2 sys_fair8done_out
l3 reg_i_hbusreq3_out
l4 reg_i_hbusreq4_out
l5 sys_fair7done_out
l6 sys_fair9done_out
l7 env_fair1done_out
l8 reg_i_hbusreq5_out
l9 sys_fair6done_out
l10 reg_i_hbusreq6_out
l11 reg_controllable_nstart_out
l12 reg_i_hbusreq7_out
l13 sys_fair5done_out
l14 reg_stateG3_0_out
l15 sys_fair4done_out
l16 env_fair0done_out
l17 reg_stateG3_1_out
l18 reg_stateG3_2_out
l19 reg_stateA1_out
l20 reg_controllable_hmastlock_out
l21 sys_fair3done_out
l22 fair_cnt<0>_out
l23 fair_cnt<1>_out
l24 fair_cnt<2>_out
l25 fair_cnt<3>_out
l26 reg_i_hlock7_out
l27 reg_controllable_hmaster0_out
l28 sys_fair2done_out
l29 reg_stateG10_1_out
l30 reg_i_hlock6_out
l31 reg_stateG10_2_out
l32 reg_stateG2_out
l33 reg_i_hlock5_out
l34 reg_controllable_hmaster1_out
l35 reg_stateG10_3_out
l36 sys_fair1done_out
l37 reg_i_hlock4_out
l38 reg_controllable_hmaster2_out
l39 reg_controllable_ndecide_out
l40 reg_stateG10_4_out
l41 reg_i_hready_out
l42 reg_i_hlock3_out
l43 reg_stateG10_5_out
l44 reg_controllable_hgrant1_out
l45 reg_i_hlock2_out
l46 reg_controllable_busreq_out
l47 sys_fair0done_out
l48 reg_i_hlock1_out
l49 reg_stateG10_6_out
l50 reg_controllable_hgrant2_out
l51 reg_i_hlock0_out
l52 reg_controllable_nhgrant0_out
l53 reg_stateG10_7_out
l54 reg_controllable_hgrant3_out
l55 env_safe_err_happened_out
l56 reg_controllable_hgrant4_out
l57 reg_controllable_hgrant5_out
l58 reg_i_hbusreq0_out
l59 reg_controllable_hgrant6_out
l60 reg_i_hbusreq1_out
l61 reg_controllable_hgrant7_out
l62 reg_controllable_locked_out
o0 o_err
c
amba_8_new_10
This file was written by ABC on Tue May  5 16:53:32 2015
For information about AIGER format, refer to http://fmv.jku.at/aiger
-------------------------------
This AIGER file has been created by the following sequence of commands:
> vl2mv amba8b10.v   ---gives--> amba8b10.mv
> abc -c "read_blif_mv amba8b10.mv; write_aiger -s amba8b10n.aig"   ---gives--> amba8b10n.aig
> aigtoaig amba8b10n.aig amba8b10n.aag   ---gives--> amba8b10n.aag (this file)
Content of amba8b10.v:
module amba_8_new_10(
        o_err,
        i_clk,
        i_hready,
        i_hbusreq0,
        i_hlock0,
        i_hbusreq1,
        i_hlock1,
        i_hbusreq2,
        i_hlock2,
        i_hbusreq3,
        i_hlock3,
        i_hbusreq4,
        i_hlock4,
        i_hbusreq5,
        i_hlock5,
        i_hbusreq6,
        i_hlock6,
        i_hbusreq7,
        i_hlock7,
        i_hburst0,
        i_hburst1,
        controllable_hmaster0,
        controllable_hmaster1,
        controllable_hmaster2,
        controllable_hmastlock,
        controllable_nstart,
        controllable_ndecide,
        controllable_locked,
        controllable_nhgrant0,
        controllable_hgrant1,
        controllable_hgrant2,
        controllable_hgrant3,
        controllable_hgrant4,
        controllable_hgrant5,
        controllable_hgrant6,
        controllable_hgrant7,
        controllable_busreq);

input i_clk;
input i_hready;
input i_hbusreq0;
input i_hlock0;
input i_hbusreq1;
input i_hlock1;
input i_hbusreq2;
input i_hlock2;
input i_hbusreq3;
input i_hlock3;
input i_hbusreq4;
input i_hlock4;
input i_hbusreq5;
input i_hlock5;
input i_hbusreq6;
input i_hlock6;
input i_hbusreq7;
input i_hlock7;
input i_hburst0;
input i_hburst1;
input controllable_hmaster0;
input controllable_hmaster1;
input controllable_hmaster2;
input controllable_hmastlock;
input controllable_nstart;
input controllable_ndecide;
input controllable_locked;
input controllable_nhgrant0;
input controllable_hgrant1;
input controllable_hgrant2;
input controllable_hgrant3;
input controllable_hgrant4;
input controllable_hgrant5;
input controllable_hgrant6;
input controllable_hgrant7;
input controllable_busreq;
output o_err;

reg reg_i_hready;
reg reg_i_hbusreq0;
reg reg_i_hlock0;
reg reg_i_hbusreq1;
reg reg_i_hlock1;
reg reg_i_hbusreq2;
reg reg_i_hlock2;
reg reg_i_hbusreq3;
reg reg_i_hlock3;
reg reg_i_hbusreq4;
reg reg_i_hlock4;
reg reg_i_hbusreq5;
reg reg_i_hlock5;
reg reg_i_hbusreq6;
reg reg_i_hlock6;
reg reg_i_hbusreq7;
reg reg_i_hlock7;
reg reg_controllable_hmaster0;
reg reg_controllable_hmaster1;
reg reg_controllable_hmaster2;
reg reg_controllable_hmastlock;
reg reg_controllable_nstart;
reg reg_controllable_ndecide;
reg reg_controllable_locked;
reg reg_controllable_nhgrant0;
reg reg_controllable_hgrant1;
reg reg_controllable_hgrant2;
reg reg_controllable_hgrant3;
reg reg_controllable_hgrant4;
reg reg_controllable_hgrant5;
reg reg_controllable_hgrant6;
reg reg_controllable_hgrant7;
reg reg_controllable_busreq;
reg reg_stateA1;
reg reg_stateG2;
reg reg_stateG3_0;
reg reg_stateG3_1;
reg reg_stateG3_2;
reg reg_stateG10_1;
reg reg_stateG10_2;
reg reg_stateG10_3;
reg reg_stateG10_4;
reg reg_stateG10_5;
reg reg_stateG10_6;
reg reg_stateG10_7;
reg env_safe_err_happened;
reg env_fair0done;
reg env_fair1done;
reg sys_fair0done;
reg sys_fair1done;
reg sys_fair2done;
reg sys_fair3done;
reg sys_fair4done;
reg sys_fair5done;
reg sys_fair6done;
reg sys_fair7done;
reg sys_fair8done;
reg sys_fair9done;
reg [3:0] fair_cnt;

wire env_safe_err0;
wire env_safe_err1;
wire env_safe_err2;
wire env_safe_err3;
wire env_safe_err4;
wire env_safe_err5;
wire env_safe_err6;
wire env_safe_err7;
wire env_safe_err;

wire sys_safe_err0;
wire sys_safe_err1;
wire sys_safe_err2;
wire sys_safe_err3;
wire sys_safe_err4;
wire sys_safe_err5;
wire sys_safe_err6;
wire sys_safe_err7;
wire sys_safe_err8;
wire sys_safe_err9;
wire sys_safe_err10;
wire sys_safe_err11;
wire sys_safe_err12;
wire sys_safe_err13;
wire sys_safe_err14;
wire sys_safe_err15;
wire sys_safe_err16;
wire sys_safe_err17;
wire sys_safe_err18;
wire sys_safe_err19;
wire sys_safe_err20;
wire sys_safe_err21;
wire sys_safe_err22;
wire sys_safe_err23;
wire sys_safe_err24;
wire sys_safe_err25;
wire sys_safe_err26;
wire sys_safe_err27;
wire sys_safe_err28;
wire sys_safe_err29;
wire sys_safe_err30;
wire sys_safe_err31;
wire sys_safe_err32;
wire sys_safe_err33;
wire sys_safe_err34;
wire sys_safe_err35;
wire sys_safe_err36;
wire sys_safe_err37;
wire sys_safe_err38;
wire sys_safe_err39;
wire sys_safe_err40;
wire sys_safe_err41;
wire sys_safe_err42;
wire sys_safe_err43;
wire sys_safe_err44;
wire sys_safe_err45;
wire sys_safe_err46;
wire sys_safe_err47;
wire sys_safe_err48;
wire sys_safe_err49;
wire sys_safe_err50;
wire sys_safe_err51;
wire sys_safe_err52;
wire sys_safe_err53;
wire sys_safe_err54;
wire sys_safe_err55;
wire sys_safe_err56;
wire sys_safe_err57;
wire sys_safe_err58;
wire sys_safe_err59;
wire sys_safe_err60;
wire sys_safe_err61;
wire sys_safe_err;

wire env_fair0;
wire env_fair1;

wire sys_fair0;
wire sys_fair1;
wire sys_fair2;
wire sys_fair3;
wire sys_fair4;
wire sys_fair5;
wire sys_fair6;
wire sys_fair7;
wire sys_fair8;
wire sys_fair9;
wire progress_in_sys_fair;
wire all_env_fair_fulfilled;
wire all_sys_fair_fulfilled;
wire fair_err;
wire o_err;

// =============================================================
//                        ENV_TRANSITION:
// =============================================================
// Assumption 3:
// G( hlock0=1 -> hbusreq0=1 );
assign env_safe_err0 =  ~(~ i_hlock0 | i_hbusreq0);

// Assumption 3:
// G( hlock1=1 -> hbusreq1=1 );
assign env_safe_err1 =  ~(~ i_hlock1 | i_hbusreq1);

// Assumption 3:
// G( hlock2=1 -> hbusreq2=1 );
assign env_safe_err2 =  ~(~ i_hlock2 | i_hbusreq2);

// Assumption 3:
// G( hlock3=1 -> hbusreq3=1 );
assign env_safe_err3 =  ~(~ i_hlock3 | i_hbusreq3);

// Assumption 3:
// G( hlock4=1 -> hbusreq4=1 );
assign env_safe_err4 =  ~(~ i_hlock4 | i_hbusreq4);

// Assumption 3:
// G( hlock5=1 -> hbusreq5=1 );
assign env_safe_err5 =  ~(~ i_hlock5 | i_hbusreq5);

// Assumption 3:
// G( hlock6=1 -> hbusreq6=1 );
assign env_safe_err6 =  ~(~ i_hlock6 | i_hbusreq6);

// Assumption 3:
// G( hlock7=1 -> hbusreq7=1 );
assign env_safe_err7 =  ~(~ i_hlock7 | i_hbusreq7);

// collecting together the safety error bits:
assign env_safe_err = env_safe_err0 |
                      env_safe_err1 |
                      env_safe_err2 |
                      env_safe_err3 |
                      env_safe_err4 |
                      env_safe_err5 |
                      env_safe_err6 |
                      env_safe_err7;

// =============================================================
//                        SYS_TRANSITION:
// =============================================================
// G((hmaster0=0) * (hmaster1=0) * (hmaster2=0) -> (hbusreq0=0 <-> busreq=0));
assign sys_safe_err0 =  ~( ~( ~(controllable_hmaster0) & ~(controllable_hmaster1) & ~(controllable_hmaster2) )|(~i_hbusreq0 ^~ (~controllable_busreq)));

// G((hmaster0=1) * (hmaster1=0) * (hmaster2=0) -> (hbusreq1=0 <-> busreq=0));
assign sys_safe_err1 =  ~( ~( controllable_hmaster0 & ~(controllable_hmaster1) & ~(controllable_hmaster2) )|(~i_hbusreq1 ^~ (~controllable_busreq)));

// G((hmaster0=0) * (hmaster1=1) * (hmaster2=0) -> (hbusreq2=0 <-> busreq=0));
assign sys_safe_err2 =  ~( ~( ~(controllable_hmaster0) & controllable_hmaster1 & ~(controllable_hmaster2) )|(~i_hbusreq2 ^~ (~controllable_busreq)));

// G((hmaster0=1) * (hmaster1=1) * (hmaster2=0) -> (hbusreq3=0 <-> busreq=0));
assign sys_safe_err3 =  ~( ~( controllable_hmaster0 & controllable_hmaster1 & ~(controllable_hmaster2) )|(~i_hbusreq3 ^~ (~controllable_busreq)));

// G((hmaster0=0) * (hmaster1=0) * (hmaster2=1) -> (hbusreq4=0 <-> busreq=0));
assign sys_safe_err4 =  ~( ~( ~(controllable_hmaster0) & ~(controllable_hmaster1) & controllable_hmaster2 )|(~i_hbusreq4 ^~ (~controllable_busreq)));

// G((hmaster0=1) * (hmaster1=0) * (hmaster2=1) -> (hbusreq5=0 <-> busreq=0));
assign sys_safe_err5 =  ~( ~( controllable_hmaster0 & ~(controllable_hmaster1) & controllable_hmaster2 )|(~i_hbusreq5 ^~ (~controllable_busreq)));

// G((hmaster0=0) * (hmaster1=1) * (hmaster2=1) -> (hbusreq6=0 <-> busreq=0));
assign sys_safe_err6 =  ~( ~( ~(controllable_hmaster0) & controllable_hmaster1 & controllable_hmaster2 )|(~i_hbusreq6 ^~ (~controllable_busreq)));

// G((hmaster0=1) * (hmaster1=1) * (hmaster2=1) -> (hbusreq7=0 <-> busreq=0));
assign sys_safe_err7 =  ~( ~( controllable_hmaster0 & controllable_hmaster1 & controllable_hmaster2 )|(~i_hbusreq7 ^~ (~controllable_busreq)));

// Guarantee 1:
// G((hready=0) -> X(start=0));
assign sys_safe_err8 =  ~( reg_i_hready | controllable_nstart );

// G(((stateG2=1) * (start=1)) -> FALSE;
assign sys_safe_err9 =  ~( ~(reg_stateG2 & ~controllable_nstart) | 0 );

// G(((stateG3_0=1) * (stateG3_1=0) * (stateG3_2=0) * ((start=1))) -> FALSE);
// G(((stateG3_0=0) * (stateG3_1=1) * (stateG3_2=0) * ((start=1))) -> FALSE);
// G(((stateG3_0=1) * (stateG3_1=1) * (stateG3_2=0) * ((start=1))) -> FALSE);
// G(((stateG3_0=0) * (stateG3_1=0) * (stateG3_2=1) * ((start=1))) -> FALSE);
// all these rules can be summarized as: only in state 000, start=1 is allowed:
assign sys_safe_err10 =  (reg_stateG3_0 | reg_stateG3_1 | reg_stateG3_2) & ~controllable_nstart;

// G( (hready=1) -> (   (hgrant0=1) <-> (X(hmaster0=0) * X(hmaster1=0) * X(hmaster2=0))  ) );
assign sys_safe_err11 =  ~( ~(reg_i_hready) | ( ~reg_controllable_nhgrant0 ^~ ( ~(controllable_hmaster0) & ~(controllable_hmaster1) & ~(controllable_hmaster2) ) ) );

// G( (hready=1) -> (   (hgrant1=1) <-> (X(hmaster0=1) * X(hmaster1=0) * X(hmaster2=0))  ) );
assign sys_safe_err12 =  ~( ~(reg_i_hready) | ( reg_controllable_hgrant1 ^~ ( controllable_hmaster0 & ~(controllable_hmaster1) & ~(controllable_hmaster2) ) ) );

// G( (hready=1) -> (   (hgrant2=1) <-> (X(hmaster0=0) * X(hmaster1=1) * X(hmaster2=0))  ) );
assign sys_safe_err13 =  ~( ~(reg_i_hready) | ( reg_controllable_hgrant2 ^~ ( ~(controllable_hmaster0) & controllable_hmaster1 & ~(controllable_hmaster2) ) ) );

// G( (hready=1) -> (   (hgrant3=1) <-> (X(hmaster0=1) * X(hmaster1=1) * X(hmaster2=0))  ) );
assign sys_safe_err14 =  ~( ~(reg_i_hready) | ( reg_controllable_hgrant3 ^~ ( controllable_hmaster0 & controllable_hmaster1 & ~(controllable_hmaster2) ) ) );

// G( (hready=1) -> (   (hgrant4=1) <-> (X(hmaster0=0) * X(hmaster1=0) * X(hmaster2=1))  ) );
assign sys_safe_err15 =  ~( ~(reg_i_hready) | ( reg_controllable_hgrant4 ^~ ( ~(controllable_hmaster0) & ~(controllable_hmaster1) & controllable_hmaster2 ) ) );

// G( (hready=1) -> (   (hgrant5=1) <-> (X(hmaster0=1) * X(hmaster1=0) * X(hmaster2=1))  ) );
assign sys_safe_err16 =  ~( ~(reg_i_hready) | ( reg_controllable_hgrant5 ^~ ( controllable_hmaster0 & ~(controllable_hmaster1) & controllable_hmaster2 ) ) );

// G( (hready=1) -> (   (hgrant6=1) <-> (X(hmaster0=0) * X(hmaster1=1) * X(hmaster2=1))  ) );
assign sys_safe_err17 =  ~( ~(reg_i_hready) | ( reg_controllable_hgrant6 ^~ ( ~(controllable_hmaster0) & controllable_hmaster1 & controllable_hmaster2 ) ) );

// G( (hready=1) -> (   (hgrant7=1) <-> (X(hmaster0=1) * X(hmaster1=1) * X(hmaster2=1))  ) );
assign sys_safe_err18 =  ~( ~(reg_i_hready) | ( reg_controllable_hgrant7 ^~ ( controllable_hmaster0 & controllable_hmaster1 & controllable_hmaster2 ) ) );

// HMASTLOCK:
// G(  (hready=1) -> (locked=0 <-> X(hmastlock=0) ) );
assign sys_safe_err19 =  ~( ~(reg_i_hready) | (~reg_controllable_locked ^~ ~controllable_hmastlock) );

// Master 0:
// G( X(start=0) -> ( ((hmaster0=0) * (hmaster1=0) * (hmaster2=0)) <-> (X(hmaster0=0) * X(hmaster1=0) * X(hmaster2=0)) ) );
assign sys_safe_err20 =  ~( ~(controllable_nstart) | ( ( ~(reg_controllable_hmaster0) & ~(reg_controllable_hmaster1) & ~(reg_controllable_hmaster2) ) ^~ ( ~(controllable_hmaster0) & ~(controllable_hmaster1) & ~(controllable_hmaster2) )) );

// Master 1:
// G( X(start=0) -> ( ((hmaster0=1) * (hmaster1=0) * (hmaster2=0)) <-> (X(hmaster0=1) * X(hmaster1=0) * X(hmaster2=0)) ) );
assign sys_safe_err21 =  ~( ~(controllable_nstart) | ( ( reg_controllable_hmaster0 & ~(reg_controllable_hmaster1) & ~(reg_controllable_hmaster2) ) ^~ ( controllable_hmaster0 & ~(controllable_hmaster1) & ~(controllable_hmaster2) )) );

// Master 2:
// G( X(start=0) -> ( ((hmaster0=0) * (hmaster1=1) * (hmaster2=0)) <-> (X(hmaster0=0) * X(hmaster1=1) * X(hmaster2=0)) ) );
assign sys_safe_err22 =  ~( ~(controllable_nstart) | ( ( ~(reg_controllable_hmaster0) & reg_controllable_hmaster1 & ~(reg_controllable_hmaster2) ) ^~ ( ~(controllable_hmaster0) & controllable_hmaster1 & ~(controllable_hmaster2) )) );

// Master 3:
// G( X(start=0) -> ( ((hmaster0=1) * (hmaster1=1) * (hmaster2=0)) <-> (X(hmaster0=1) * X(hmaster1=1) * X(hmaster2=0)) ) );
assign sys_safe_err23 =  ~( ~(controllable_nstart) | ( ( reg_controllable_hmaster0 & reg_controllable_hmaster1 & ~(reg_controllable_hmaster2) ) ^~ ( controllable_hmaster0 & controllable_hmaster1 & ~(controllable_hmaster2) )) );

// Master 4:
// G( X(start=0) -> ( ((hmaster0=0) * (hmaster1=0) * (hmaster2=1)) <-> (X(hmaster0=0) * X(hmaster1=0) * X(hmaster2=1)) ) );
assign sys_safe_err24 =  ~( ~(controllable_nstart) | ( ( ~(reg_controllable_hmaster0) & ~(reg_controllable_hmaster1) & reg_controllable_hmaster2 ) ^~ ( ~(controllable_hmaster0) & ~(controllable_hmaster1) & controllable_hmaster2 )) );

// Master 5:
// G( X(start=0) -> ( ((hmaster0=1) * (hmaster1=0) * (hmaster2=1)) <-> (X(hmaster0=1) * X(hmaster1=0) * X(hmaster2=1)) ) );
assign sys_safe_err25 =  ~( ~(controllable_nstart) | ( ( reg_controllable_hmaster0 & ~(reg_controllable_hmaster1) & reg_controllable_hmaster2 ) ^~ ( controllable_hmaster0 & ~(controllable_hmaster1) & controllable_hmaster2 )) );

// Master 6:
// G( X(start=0) -> ( ((hmaster0=0) * (hmaster1=1) * (hmaster2=1)) <-> (X(hmaster0=0) * X(hmaster1=1) * X(hmaster2=1)) ) );
assign sys_safe_err26 =  ~( ~(controllable_nstart) | ( ( ~(reg_controllable_hmaster0) & reg_controllable_hmaster1 & reg_controllable_hmaster2 ) ^~ ( ~(controllable_hmaster0) & controllable_hmaster1 & controllable_hmaster2 )) );

// Master 7:
// G( X(start=0) -> ( ((hmaster0=1) * (hmaster1=1) * (hmaster2=1)) <-> (X(hmaster0=1) * X(hmaster1=1) * X(hmaster2=1)) ) );
assign sys_safe_err27 =  ~( ~(controllable_nstart) | ( ( reg_controllable_hmaster0 & reg_controllable_hmaster1 & reg_controllable_hmaster2 ) ^~ ( controllable_hmaster0 & controllable_hmaster1 & controllable_hmaster2 )) );

// Guarantee 6.2:
// G( ((X(start=0))) -> ( (hmastlock=1) <-> X(hmastlock=1)) );
assign sys_safe_err28 =  ~( ~(controllable_nstart) | ( reg_controllable_hmastlock ^~ controllable_hmastlock) );

// G( (decide=1  *  hlock0=1  *  X(hgrant0=1) )->X(locked=1));
assign sys_safe_err29 =  ~( ~(~reg_controllable_ndecide & reg_i_hlock0 & ~controllable_nhgrant0) | (controllable_locked) );

// G((decide=1  *  hlock0=0  *  X(hgrant0=1))->X(locked=0));
assign sys_safe_err30 =  ~( ~(~reg_controllable_ndecide & ~reg_i_hlock0 & ~controllable_nhgrant0) | (~controllable_locked) );

// G( (decide=1  *  hlock1=1  *  X(hgrant1=1) )->X(locked=1));
assign sys_safe_err31 =  ~( ~(~reg_controllable_ndecide & reg_i_hlock1 & controllable_hgrant1) | (controllable_locked) );

// G((decide=1  *  hlock1=0  *  X(hgrant1=1))->X(locked=0));
assign sys_safe_err32 =  ~( ~(~reg_controllable_ndecide & ~reg_i_hlock1 & controllable_hgrant1) | (~controllable_locked) );

// G( (decide=1  *  hlock2=1  *  X(hgrant2=1) )->X(locked=1));
assign sys_safe_err33 =  ~( ~(~reg_controllable_ndecide & reg_i_hlock2 & controllable_hgrant2) | (controllable_locked) );

// G((decide=1  *  hlock2=0  *  X(hgrant2=1))->X(locked=0));
assign sys_safe_err34 =  ~( ~(~reg_controllable_ndecide & ~reg_i_hlock2 & controllable_hgrant2) | (~controllable_locked) );

// G( (decide=1  *  hlock3=1  *  X(hgrant3=1) )->X(locked=1));
assign sys_safe_err35 =  ~( ~(~reg_controllable_ndecide & reg_i_hlock3 & controllable_hgrant3) | (controllable_locked) );

// G((decide=1  *  hlock3=0  *  X(hgrant3=1))->X(locked=0));
assign sys_safe_err36 =  ~( ~(~reg_controllable_ndecide & ~reg_i_hlock3 & controllable_hgrant3) | (~controllable_locked) );

// G( (decide=1  *  hlock4=1  *  X(hgrant4=1) )->X(locked=1));
assign sys_safe_err37 =  ~( ~(~reg_controllable_ndecide & reg_i_hlock4 & controllable_hgrant4) | (controllable_locked) );

// G((decide=1  *  hlock4=0  *  X(hgrant4=1))->X(locked=0));
assign sys_safe_err38 =  ~( ~(~reg_controllable_ndecide & ~reg_i_hlock4 & controllable_hgrant4) | (~controllable_locked) );

// G( (decide=1  *  hlock5=1  *  X(hgrant5=1) )->X(locked=1));
assign sys_safe_err39 =  ~( ~(~reg_controllable_ndecide & reg_i_hlock5 & controllable_hgrant5) | (controllable_locked) );

// G((decide=1  *  hlock5=0  *  X(hgrant5=1))->X(locked=0));
assign sys_safe_err40 =  ~( ~(~reg_controllable_ndecide & ~reg_i_hlock5 & controllable_hgrant5) | (~controllable_locked) );

// G( (decide=1  *  hlock6=1  *  X(hgrant6=1) )->X(locked=1));
assign sys_safe_err41 =  ~( ~(~reg_controllable_ndecide & reg_i_hlock6 & controllable_hgrant6) | (controllable_locked) );

// G((decide=1  *  hlock6=0  *  X(hgrant6=1))->X(locked=0));
assign sys_safe_err42 =  ~( ~(~reg_controllable_ndecide & ~reg_i_hlock6 & controllable_hgrant6) | (~controllable_locked) );

// G( (decide=1  *  hlock7=1  *  X(hgrant7=1) )->X(locked=1));
assign sys_safe_err43 =  ~( ~(~reg_controllable_ndecide & reg_i_hlock7 & controllable_hgrant7) | (controllable_locked) );

// G((decide=1  *  hlock7=0  *  X(hgrant7=1))->X(locked=0));
assign sys_safe_err44 =  ~( ~(~reg_controllable_ndecide & ~reg_i_hlock7 & controllable_hgrant7) | (~controllable_locked) );

// G( (decide=0) -> (  ((hgrant0=0)<->X(hgrant0=0))  ));
assign sys_safe_err45 =  ~( ~(reg_controllable_ndecide) | (reg_controllable_nhgrant0 ^~ controllable_nhgrant0) );

// G( (decide=0) -> (  ((hgrant1=0)<->X(hgrant1=0))  ));
assign sys_safe_err46 =  ~( ~(reg_controllable_ndecide) | (~reg_controllable_hgrant1 ^~ ~controllable_hgrant1) );

// G( (decide=0) -> (  ((hgrant2=0)<->X(hgrant2=0))  ));
assign sys_safe_err47 =  ~( ~(reg_controllable_ndecide) | (~reg_controllable_hgrant2 ^~ ~controllable_hgrant2) );

// G( (decide=0) -> (  ((hgrant3=0)<->X(hgrant3=0))  ));
assign sys_safe_err48 =  ~( ~(reg_controllable_ndecide) | (~reg_controllable_hgrant3 ^~ ~controllable_hgrant3) );

// G( (decide=0) -> (  ((hgrant4=0)<->X(hgrant4=0))  ));
assign sys_safe_err49 =  ~( ~(reg_controllable_ndecide) | (~reg_controllable_hgrant4 ^~ ~controllable_hgrant4) );

// G( (decide=0) -> (  ((hgrant5=0)<->X(hgrant5=0))  ));
assign sys_safe_err50 =  ~( ~(reg_controllable_ndecide) | (~reg_controllable_hgrant5 ^~ ~controllable_hgrant5) );

// G( (decide=0) -> (  ((hgrant6=0)<->X(hgrant6=0))  ));
assign sys_safe_err51 =  ~( ~(reg_controllable_ndecide) | (~reg_controllable_hgrant6 ^~ ~controllable_hgrant6) );

// G( (decide=0) -> (  ((hgrant7=0)<->X(hgrant7=0))  ));
assign sys_safe_err52 =  ~( ~(reg_controllable_ndecide) | (~reg_controllable_hgrant7 ^~ ~controllable_hgrant7) );

// G((decide=0)->(locked=0 <-> X(locked=0)));
assign sys_safe_err53 =  ~( ~(reg_controllable_ndecide) | (~reg_controllable_locked ^~ ~controllable_locked) );

// G(((stateG10_1=1) * (((hgrant1=1)) * (hbusreq1=0)))->FALSE);
assign sys_safe_err54 =  ~( ~(reg_stateG10_1 & (controllable_hgrant1 & ~i_hbusreq1)) | 0 );

// G(((stateG10_2=1) * (((hgrant2=1)) * (hbusreq2=0)))->FALSE);
assign sys_safe_err55 =  ~( ~(reg_stateG10_2 & (controllable_hgrant2 & ~i_hbusreq2)) | 0 );

// G(((stateG10_3=1) * (((hgrant3=1)) * (hbusreq3=0)))->FALSE);
assign sys_safe_err56 =  ~( ~(reg_stateG10_3 & (controllable_hgrant3 & ~i_hbusreq3)) | 0 );

// G(((stateG10_4=1) * (((hgrant4=1)) * (hbusreq4=0)))->FALSE);
assign sys_safe_err57 =  ~( ~(reg_stateG10_4 & (controllable_hgrant4 & ~i_hbusreq4)) | 0 );

// G(((stateG10_5=1) * (((hgrant5=1)) * (hbusreq5=0)))->FALSE);
assign sys_safe_err58 =  ~( ~(reg_stateG10_5 & (controllable_hgrant5 & ~i_hbusreq5)) | 0 );

// G(((stateG10_6=1) * (((hgrant6=1)) * (hbusreq6=0)))->FALSE);
assign sys_safe_err59 =  ~( ~(reg_stateG10_6 & (controllable_hgrant6 & ~i_hbusreq6)) | 0 );

// G(((stateG10_7=1) * (((hgrant7=1)) * (hbusreq7=0)))->FALSE);
assign sys_safe_err60 =  ~( ~(reg_stateG10_7 & (controllable_hgrant7 & ~i_hbusreq7)) | 0 );

// default master
// G((decide=1  *  hbusreq0=0  *  hbusreq1=0  *  hbusreq2=0  *  hbusreq3=0  *  hbusreq4=0  *  hbusreq5=0  *  hbusreq6=0  *  hbusreq7=0) -> X(hgrant0=1));
assign sys_safe_err61 =  ~( ~(~reg_controllable_ndecide & (~reg_i_hbusreq0 & ~reg_i_hbusreq1 & ~reg_i_hbusreq2 & ~reg_i_hbusreq3 & ~reg_i_hbusreq4 & ~reg_i_hbusreq5 & ~reg_i_hbusreq6 & ~reg_i_hbusreq7)) | (~controllable_nhgrant0) );

// collecting together the safety error bits:
assign sys_safe_err = sys_safe_err0 |
                      sys_safe_err1 |
                      sys_safe_err2 |
                      sys_safe_err3 |
                      sys_safe_err4 |
                      sys_safe_err5 |
                      sys_safe_err6 |
                      sys_safe_err7 |
                      sys_safe_err8 |
                      sys_safe_err9 |
                      sys_safe_err10 |
                      sys_safe_err11 |
                      sys_safe_err12 |
                      sys_safe_err13 |
                      sys_safe_err14 |
                      sys_safe_err15 |
                      sys_safe_err16 |
                      sys_safe_err17 |
                      sys_safe_err18 |
                      sys_safe_err19 |
                      sys_safe_err20 |
                      sys_safe_err21 |
                      sys_safe_err22 |
                      sys_safe_err23 |
                      sys_safe_err24 |
                      sys_safe_err25 |
                      sys_safe_err26 |
                      sys_safe_err27 |
                      sys_safe_err28 |
                      sys_safe_err29 |
                      sys_safe_err30 |
                      sys_safe_err31 |
                      sys_safe_err32 |
                      sys_safe_err33 |
                      sys_safe_err34 |
                      sys_safe_err35 |
                      sys_safe_err36 |
                      sys_safe_err37 |
                      sys_safe_err38 |
                      sys_safe_err39 |
                      sys_safe_err40 |
                      sys_safe_err41 |
                      sys_safe_err42 |
                      sys_safe_err43 |
                      sys_safe_err44 |
                      sys_safe_err45 |
                      sys_safe_err46 |
                      sys_safe_err47 |
                      sys_safe_err48 |
                      sys_safe_err49 |
                      sys_safe_err50 |
                      sys_safe_err51 |
                      sys_safe_err52 |
                      sys_safe_err53 |
                      sys_safe_err54 |
                      sys_safe_err55 |
                      sys_safe_err56 |
                      sys_safe_err57 |
                      sys_safe_err58 |
                      sys_safe_err59 |
                      sys_safe_err60 |
                      sys_safe_err61;

// =============================================================
//                          ENV_FAIRNESS:
// =============================================================
// Assumption 1: 
// G(F(stateA1=0));
assign env_fair0 =  ~reg_stateA1;

// Assumption 2:
// G(F(hready=1));
assign env_fair1 =  i_hready;

assign all_env_fair_fulfilled = (env_fair0done | env_fair0) &
                                (env_fair1done | env_fair1);

// =============================================================
//                          SYS_FAIRNESS:
// =============================================================
// Guarantee 2:
// G(F(stateG2=0));
assign sys_fair0 = ~reg_stateG2;

// Guarantee 3:
// G(F((stateG3_0=0)  *  (stateG3_1=0)  *  (stateG3_2=0)));
assign sys_fair1 =  (~reg_stateG3_0 & ~reg_stateG3_1 & ~reg_stateG3_2);

// G(F(((hmaster0=0) * (hmaster1=0) * (hmaster2=0))  |  hbusreq0=0));
assign sys_fair2 =  ( ~(controllable_hmaster0) & ~(controllable_hmaster1) & ~(controllable_hmaster2) ) | ~i_hbusreq0;

// G(F(((hmaster0=1) * (hmaster1=0) * (hmaster2=0))  |  hbusreq1=0));
assign sys_fair3 =  ( controllable_hmaster0 & ~(controllable_hmaster1) & ~(controllable_hmaster2) ) | ~i_hbusreq1;

// G(F(((hmaster0=0) * (hmaster1=1) * (hmaster2=0))  |  hbusreq2=0));
assign sys_fair4 =  ( ~(controllable_hmaster0) & controllable_hmaster1 & ~(controllable_hmaster2) ) | ~i_hbusreq2;

// G(F(((hmaster0=1) * (hmaster1=1) * (hmaster2=0))  |  hbusreq3=0));
assign sys_fair5 =  ( controllable_hmaster0 & controllable_hmaster1 & ~(controllable_hmaster2) ) | ~i_hbusreq3;

// G(F(((hmaster0=0) * (hmaster1=0) * (hmaster2=1))  |  hbusreq4=0));
assign sys_fair6 =  ( ~(controllable_hmaster0) & ~(controllable_hmaster1) & controllable_hmaster2 ) | ~i_hbusreq4;

// G(F(((hmaster0=1) * (hmaster1=0) * (hmaster2=1))  |  hbusreq5=0));
assign sys_fair7 =  ( controllable_hmaster0 & ~(controllable_hmaster1) & controllable_hmaster2 ) | ~i_hbusreq5;

// G(F(((hmaster0=0) * (hmaster1=1) * (hmaster2=1))  |  hbusreq6=0));
assign sys_fair8 =  ( ~(controllable_hmaster0) & controllable_hmaster1 & controllable_hmaster2 ) | ~i_hbusreq6;

// G(F(((hmaster0=1) * (hmaster1=1) * (hmaster2=1))  |  hbusreq7=0));
assign sys_fair9 =  ( controllable_hmaster0 & controllable_hmaster1 & controllable_hmaster2 ) | ~i_hbusreq7;

assign all_sys_fair_fulfilled = (sys_fair0done | sys_fair0) &
                                (sys_fair1done | sys_fair1) &
                                (sys_fair2done | sys_fair2) &
                                (sys_fair3done | sys_fair3) &
                                (sys_fair4done | sys_fair4) &
                                (sys_fair5done | sys_fair5) &
                                (sys_fair6done | sys_fair6) &
                                (sys_fair7done | sys_fair7) &
                                (sys_fair8done | sys_fair8) &
                                (sys_fair9done | sys_fair9);
assign progress_in_sys_fair = (~sys_fair0done & sys_fair0) |
                                (~sys_fair1done & sys_fair1) |
                                (~sys_fair2done & sys_fair2) |
                                (~sys_fair3done & sys_fair3) |
                                (~sys_fair4done & sys_fair4) |
                                (~sys_fair5done & sys_fair5) |
                                (~sys_fair6done & sys_fair6) |
                                (~sys_fair7done & sys_fair7) |
                                (~sys_fair8done & sys_fair8) |
                                (~sys_fair9done & sys_fair9);
assign fair_err = (fair_cnt >= 4'b1010);

// computing the error output bit:
assign o_err = ~env_safe_err & ~env_safe_err_happened & (sys_safe_err | fair_err);

initial
 begin
  reg_i_hready = 0;
  reg_i_hbusreq0 = 0;
  reg_i_hlock0 = 0;
  reg_i_hbusreq1 = 0;
  reg_i_hlock1 = 0;
  reg_i_hbusreq2 = 0;
  reg_i_hlock2 = 0;
  reg_i_hbusreq3 = 0;
  reg_i_hlock3 = 0;
  reg_i_hbusreq4 = 0;
  reg_i_hlock4 = 0;
  reg_i_hbusreq5 = 0;
  reg_i_hlock5 = 0;
  reg_i_hbusreq6 = 0;
  reg_i_hlock6 = 0;
  reg_i_hbusreq7 = 0;
  reg_i_hlock7 = 0;
  reg_controllable_hmaster0 = 0;
  reg_controllable_hmaster1 = 0;
  reg_controllable_hmaster2 = 0;
  reg_controllable_hmastlock = 0;
  reg_controllable_nstart = 0;
  reg_controllable_ndecide = 0;
  reg_controllable_locked = 0;
  reg_controllable_nhgrant0 = 0;
  reg_controllable_hgrant1 = 0;
  reg_controllable_hgrant2 = 0;
  reg_controllable_hgrant3 = 0;
  reg_controllable_hgrant4 = 0;
  reg_controllable_hgrant5 = 0;
  reg_controllable_hgrant6 = 0;
  reg_controllable_hgrant7 = 0;
  reg_controllable_busreq = 0;
  reg_stateA1 = 0;
  reg_stateG2 = 0;
  reg_stateG3_0 = 0;
  reg_stateG3_1 = 0;
  reg_stateG3_2 = 0;
  reg_stateG10_1 = 0;
  reg_stateG10_2 = 0;
  reg_stateG10_3 = 0;
  reg_stateG10_4 = 0;
  reg_stateG10_5 = 0;
  reg_stateG10_6 = 0;
  reg_stateG10_7 = 0;
  env_safe_err_happened = 0;
  env_fair0done = 0;
  env_fair1done = 0;
  sys_fair0done = 0;
  sys_fair1done = 0;
  sys_fair2done = 0;
  sys_fair3done = 0;
  sys_fair4done = 0;
  sys_fair5done = 0;
  sys_fair6done = 0;
  sys_fair7done = 0;
  sys_fair8done = 0;
  sys_fair9done = 0;
  fair_cnt = 0;
 end


always @(posedge i_clk)
 begin
   // We remember if an environment error occurred:
   env_safe_err_happened = env_safe_err_happened | env_safe_err;

   // Updating the fairness counters: 
   if(all_sys_fair_fulfilled)
    begin
      env_fair0done = 0;
      env_fair1done = 0;
      sys_fair0done = 0;
      sys_fair1done = 0;
      sys_fair2done = 0;
      sys_fair3done = 0;
      sys_fair4done = 0;
      sys_fair5done = 0;
      sys_fair6done = 0;
      sys_fair7done = 0;
      sys_fair8done = 0;
      sys_fair9done = 0;
      fair_cnt = 0;
    end
   else
    begin
      if(progress_in_sys_fair)
       begin
         env_fair0done = 0;
         env_fair1done = 0;
         fair_cnt = 0;
         sys_fair0done = sys_fair0done | sys_fair0;
         sys_fair1done = sys_fair1done | sys_fair1;
         sys_fair2done = sys_fair2done | sys_fair2;
         sys_fair3done = sys_fair3done | sys_fair3;
         sys_fair4done = sys_fair4done | sys_fair4;
         sys_fair5done = sys_fair5done | sys_fair5;
         sys_fair6done = sys_fair6done | sys_fair6;
         sys_fair7done = sys_fair7done | sys_fair7;
         sys_fair8done = sys_fair8done | sys_fair8;
         sys_fair9done = sys_fair9done | sys_fair9;
       end
      else
       begin
         if(all_env_fair_fulfilled)
          begin
            env_fair0done = 0;
            env_fair1done = 0;
            fair_cnt = fair_cnt + 1;
          end
         else
          begin
            env_fair0done = env_fair0done | env_fair0;
            env_fair1done = env_fair1done | env_fair1;
          end
       end
    end

   // Updating the automata: 
   // Automaton A1: 
   if(~reg_stateA1 & controllable_hmastlock & ~i_hburst0 & ~i_hburst1)
    begin
      reg_stateA1 = 1'b1;
    end
   else if(reg_stateA1 & ~controllable_busreq)
    begin
      reg_stateA1 = 1'b0;
    end

   // Automaton G2: 
   if(~reg_stateG2)
    begin
      if(controllable_hmastlock & ~controllable_nstart & ~i_hburst0 & ~i_hburst1)
       begin
         reg_stateG2 = 1'b1;
       end
    end
   else // if(reg_stateG2)
    begin
      if(~controllable_busreq)
       begin
         reg_stateG2 = 1'b0;
       end
    end

   // Automaton G3: 
   if(~reg_stateG3_0 & ~reg_stateG3_1 & ~reg_stateG3_2 & controllable_hmastlock & ~controllable_nstart &  ~i_hburst0 & i_hburst1 & ~i_hready)
    begin
      reg_stateG3_0 = 1'b1;
      reg_stateG3_1 = 1'b0;
      reg_stateG3_2 = 1'b0;
    end
   else if(~reg_stateG3_0 & ~reg_stateG3_1 & ~reg_stateG3_2 & controllable_hmastlock & ~controllable_nstart &  ~i_hburst0 & i_hburst1 & i_hready)
    begin
      reg_stateG3_0 = 1'b0;
      reg_stateG3_1 = 1'b1;
      reg_stateG3_2 = 1'b0;
    end
   else if(reg_stateG3_0 & ~reg_stateG3_1 & ~reg_stateG3_2 & i_hready)
    begin
      reg_stateG3_0 = 1'b0;
      reg_stateG3_1 = 1'b1;
      reg_stateG3_2 = 1'b0;
    end
   else if(~reg_stateG3_0 & reg_stateG3_1 & ~reg_stateG3_2 & i_hready)
    begin
      reg_stateG3_0 = 1'b1;
      reg_stateG3_1 = 1'b1;
      reg_stateG3_2 = 1'b0;
    end
   else if(reg_stateG3_0 & reg_stateG3_1 & ~reg_stateG3_2 & i_hready)
    begin
      reg_stateG3_0 = 1'b0;
      reg_stateG3_1 = 1'b0;
      reg_stateG3_2 = 1'b1;
    end
   else if(~reg_stateG3_0 & ~reg_stateG3_1 & reg_stateG3_2 & i_hready)
    begin
      reg_stateG3_0 = 1'b0;
      reg_stateG3_1 = 1'b0;
      reg_stateG3_2 = 1'b0;
    end

   // Automaton G10_1: 
   if(~reg_stateG10_1 & ~controllable_hgrant1 & ~i_hbusreq1)
    begin
      reg_stateG10_1 = 1'b1;
    end
   else if(reg_stateG10_1 & i_hbusreq1)
    begin
      reg_stateG10_1 = 1'b0;
    end

   // Automaton G10_2: 
   if(~reg_stateG10_2 & ~controllable_hgrant2 & ~i_hbusreq2)
    begin
      reg_stateG10_2 = 1'b1;
    end
   else if(reg_stateG10_2 & i_hbusreq2)
    begin
      reg_stateG10_2 = 1'b0;
    end

   // Automaton G10_3: 
   if(~reg_stateG10_3 & ~controllable_hgrant3 & ~i_hbusreq3)
    begin
      reg_stateG10_3 = 1'b1;
    end
   else if(reg_stateG10_3 & i_hbusreq3)
    begin
      reg_stateG10_3 = 1'b0;
    end

   // Automaton G10_4: 
   if(~reg_stateG10_4 & ~controllable_hgrant4 & ~i_hbusreq4)
    begin
      reg_stateG10_4 = 1'b1;
    end
   else if(reg_stateG10_4 & i_hbusreq4)
    begin
      reg_stateG10_4 = 1'b0;
    end

   // Automaton G10_5: 
   if(~reg_stateG10_5 & ~controllable_hgrant5 & ~i_hbusreq5)
    begin
      reg_stateG10_5 = 1'b1;
    end
   else if(reg_stateG10_5 & i_hbusreq5)
    begin
      reg_stateG10_5 = 1'b0;
    end

   // Automaton G10_6: 
   if(~reg_stateG10_6 & ~controllable_hgrant6 & ~i_hbusreq6)
    begin
      reg_stateG10_6 = 1'b1;
    end
   else if(reg_stateG10_6 & i_hbusreq6)
    begin
      reg_stateG10_6 = 1'b0;
    end

   // Automaton G10_7: 
   if(~reg_stateG10_7 & ~controllable_hgrant7 & ~i_hbusreq7)
    begin
      reg_stateG10_7 = 1'b1;
    end
   else if(reg_stateG10_7 & i_hbusreq7)
    begin
      reg_stateG10_7 = 1'b0;
    end

   // Latching the previous input:
   reg_i_hready =  i_hready;
   reg_i_hbusreq0 =  i_hbusreq0;
   reg_i_hlock0 =  i_hlock0;
   reg_i_hbusreq1 =  i_hbusreq1;
   reg_i_hlock1 =  i_hlock1;
   reg_i_hbusreq2 =  i_hbusreq2;
   reg_i_hlock2 =  i_hlock2;
   reg_i_hbusreq3 =  i_hbusreq3;
   reg_i_hlock3 =  i_hlock3;
   reg_i_hbusreq4 =  i_hbusreq4;
   reg_i_hlock4 =  i_hlock4;
   reg_i_hbusreq5 =  i_hbusreq5;
   reg_i_hlock5 =  i_hlock5;
   reg_i_hbusreq6 =  i_hbusreq6;
   reg_i_hlock6 =  i_hlock6;
   reg_i_hbusreq7 =  i_hbusreq7;
   reg_i_hlock7 =  i_hlock7;
   reg_controllable_hmaster0 =  controllable_hmaster0;
   reg_controllable_hmaster1 =  controllable_hmaster1;
   reg_controllable_hmaster2 =  controllable_hmaster2;
   reg_controllable_hmastlock =  controllable_hmastlock;
   reg_controllable_nstart =  controllable_nstart;
   reg_controllable_ndecide =  controllable_ndecide;
   reg_controllable_locked =  controllable_locked;
   reg_controllable_nhgrant0 =  controllable_nhgrant0;
   reg_controllable_hgrant1 =  controllable_hgrant1;
   reg_controllable_hgrant2 =  controllable_hgrant2;
   reg_controllable_hgrant3 =  controllable_hgrant3;
   reg_controllable_hgrant4 =  controllable_hgrant4;
   reg_controllable_hgrant5 =  controllable_hgrant5;
   reg_controllable_hgrant6 =  controllable_hgrant6;
   reg_controllable_hgrant7 =  controllable_hgrant7;
   reg_controllable_busreq =  controllable_busreq;

 end
endmodule

-------------------------------
#!SYNTCOMP
STATUS : realizable
SOLVED_BY : 3/3 [2015-pre-classification]
SOLVED_IN : 12.8452 [2015-pre-classification]
#.
