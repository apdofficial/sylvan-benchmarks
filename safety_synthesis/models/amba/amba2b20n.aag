aag 455 15 32 1 408
2
4
6
8
10
12
14
16
18
20
22
24
26
28
30
32 1
34 497
36 581
38 627
40 14
42 641
44 665
46 28
48 685
50 2
52 24
54 8
56 4
58 699
60 729
62 751
64 763
66 30
68 787
70 6
72 22
74 873
76 879
78 885
80 891
82 897
84 107
86 18
88 26
90 20
92 911
94 16
422
96 18 3
98 22 5
100 99 97
102 85 32
104 103 32
106 105 100
108 25 2
110 24 3
112 111 109
114 113 17
116 25 4
118 24 5
120 119 117
122 121 16
124 123 115
126 89 32
128 88 32
130 127 32
132 131 9
134 133 124
136 61 32
138 60 32
140 137 32
142 138 9
144 143 134
146 37 32
148 36 32
150 147 32
152 45 32
154 44 32
156 153 32
158 157 151
160 49 32
162 48 32
164 161 32
166 165 158
168 167 9
170 169 144
172 67 32
174 66 32
176 173 32
178 174 17
180 177 16
182 181 179
184 183 128
186 185 170
188 91 32
190 90 32
192 189 32
194 193 16
196 190 17
198 197 195
200 199 128
202 201 186
204 41 32
206 40 32
208 205 32
210 206 7
212 209 6
214 213 211
216 215 128
218 217 202
220 95 32
222 94 32
224 221 32
226 222 17
228 225 16
230 229 227
232 231 8
234 233 218
236 234 233
238 71 32
240 70 32
242 239 32
244 243 6
246 240 7
248 247 245
250 249 8
252 251 236
254 47 32
256 46 32
258 255 32
260 87 32
262 86 32
264 261 32
266 262 259
268 266 31
270 268 15
272 271 252
274 265 259
276 274 31
278 276 14
280 279 272
282 73 32
284 72 32
286 283 32
288 284 259
290 288 20
292 290 15
294 293 280
296 287 259
298 296 20
300 298 14
302 301 294
304 177 30
306 174 31
308 307 305
310 309 256
312 311 302
314 190 21
316 193 20
318 317 315
320 319 256
322 321 312
324 206 15
326 209 14
328 327 325
330 329 256
332 331 322
334 63 32
336 62 32
338 335 32
340 20 5
342 340 336
344 343 332
346 51 32
348 347 32
350 57 32
352 351 32
354 353 349
356 354 259
358 356 30
360 359 344
362 83 32
364 82 32
366 363 32
368 81 32
370 80 32
372 369 32
374 79 32
376 78 32
378 375 32
380 77 32
382 76 32
384 381 32
386 75 32
388 74 32
390 387 32
392 379 373
394 392 367
396 395 366
398 396 393
400 378 370
402 401 393
404 393 367
406 392 364
408 407 405
410 389 383
412 410 378
414 412 402
416 414 408
418 417 399
420 418 360
422 421 106
424 35 32
426 34 32
428 425 32
430 429 138
432 59 32
434 58 32
436 433 32
438 437 167
440 439 431
442 93 32
444 92 32
446 443 32
448 16 2
450 448 447
452 451 440
454 43 32
456 42 32
458 455 32
460 17 4
462 460 459
464 463 452
466 429 141
468 437 166
470 469 467
472 449 447
474 473 470
476 461 459
478 477 474
480 479 465
482 481 465
484 479 431
486 478 426
488 487 485
490 489 465
492 490 483
494 482 426
496 495 493
498 166 6
500 498 9
502 500 13
504 502 10
506 504 27
508 504 26
510 157 148
512 510 165
514 512 26
516 154 151
518 516 165
520 518 26
522 154 148
524 522 165
526 524 26
528 162 158
530 528 26
532 508 507
534 533 507
536 509 507
538 536 514
540 539 534
542 536 515
544 542 520
546 545 540
548 542 521
550 548 526
552 551 546
554 548 527
556 554 530
558 557 552
560 531 148
562 560 527
564 562 521
566 565 521
568 567 515
570 568 509
572 570 507
574 573 507
576 575 559
578 558 148
580 579 577
582 65 32
584 64 32
586 583 32
588 69 32
590 68 32
592 589 32
594 590 587
596 39 32
598 38 32
600 597 32
602 601 27
604 603 595
606 478 465
608 606 604
610 609 482
612 606 605
614 613 610
616 605 603
618 616 478
620 618 465
622 620 615
624 614 598
626 625 623
628 479 463
630 478 456
632 631 629
634 633 465
636 634 483
638 482 456
640 639 637
642 531 154
644 642 527
646 644 521
648 647 521
650 649 515
652 651 515
654 653 509
656 655 509
658 657 507
660 658 559
662 558 154
664 663 661
666 531 162
668 666 527
670 669 527
672 671 521
674 672 515
676 674 509
678 676 507
680 678 559
682 558 162
684 683 681
686 479 439
688 478 434
690 689 687
692 691 465
694 692 483
696 482 434
698 697 695
700 9 6
702 700 13
704 702 11
706 704 141
708 138 25
710 709 707
712 705 138
714 713 705
716 138 24
718 715 141
720 716 138
722 721 719
724 723 711
726 710 138
728 727 725
730 339 21
732 730 5
734 336 4
736 734 733
738 737 733
740 735 336
742 740 733
744 743 733
746 745 739
748 738 336
750 749 747
752 605 595
754 752 478
756 754 465
758 756 615
760 614 584
762 761 759
764 593 6
766 764 13
768 766 11
770 590 25
772 770 769
774 773 769
776 771 590
778 776 769
780 779 769
782 781 775
784 774 590
786 785 783
788 604 391
790 605 388
792 791 789
794 793 478
796 794 465
798 388 385
800 389 382
802 801 799
804 803 604
806 605 382
808 807 805
810 809 478
812 810 465
814 388 382
816 814 379
818 815 376
820 819 817
822 821 604
824 605 376
826 825 823
828 827 478
830 828 465
832 814 376
834 832 373
836 833 370
838 837 835
840 839 604
842 605 370
844 843 841
846 845 478
848 846 465
850 832 370
852 850 367
854 851 364
856 855 853
858 857 604
860 605 364
862 861 859
864 863 478
866 864 465
868 796 611
870 610 388
872 871 869
874 812 611
876 610 382
878 877 875
880 830 611
882 610 376
884 883 881
886 848 611
888 610 370
890 889 887
892 866 611
894 610 364
896 895 893
898 479 451
900 478 444
902 901 899
904 903 465
906 904 483
908 482 444
910 909 907
i0 i_hbusreq0
i1 i_hbusreq1
i2 controllable_hmastlock
i3 controllable_nstart
i4 i_hburst1
i5 i_hburst0
i6 controllable_locked
i7 controllable_hmaster0
i8 i_hlock0
i9 controllable_hgrant1
i10 i_hlock1
i11 controllable_busreq
i12 i_hready
i13 controllable_ndecide
i14 controllable_nhgrant0
l0 n33
l1 sys_fair0done_out
l2 reg_stateG3_0_out
l3 env_fair1done_out
l4 reg_controllable_locked_out
l5 sys_fair3done_out
l6 reg_stateG3_1_out
l7 reg_controllable_ndecide_out
l8 reg_stateG3_2_out
l9 reg_i_hbusreq0_out
l10 reg_controllable_busreq_out
l11 reg_controllable_nstart_out
l12 reg_i_hbusreq1_out
l13 sys_fair1done_out
l14 reg_stateG2_out
l15 reg_stateG10_1_out
l16 env_fair0done_out
l17 reg_controllable_nhgrant0_out
l18 reg_stateA1_out
l19 reg_controllable_hmastlock_out
l20 reg_i_hlock1_out
l21 fair_cnt<0>_out
l22 fair_cnt<1>_out
l23 fair_cnt<2>_out
l24 fair_cnt<3>_out
l25 fair_cnt<4>_out
l26 env_safe_err_happened_out
l27 reg_i_hlock0_out
l28 reg_i_hready_out
l29 reg_controllable_hgrant1_out
l30 sys_fair2done_out
l31 reg_controllable_hmaster0_out
o0 o_err
c
amba_2_new_20
This file was written by ABC on Tue May  5 16:50:58 2015
For information about AIGER format, refer to http://fmv.jku.at/aiger
-------------------------------
This AIGER file has been created by the following sequence of commands:
> vl2mv amba2b20.v   ---gives--> amba2b20.mv
> abc -c "read_blif_mv amba2b20.mv; write_aiger -s amba2b20n.aig"   ---gives--> amba2b20n.aig
> aigtoaig amba2b20n.aig amba2b20n.aag   ---gives--> amba2b20n.aag (this file)
Content of amba2b20.v:
module amba_2_new_20(
        o_err,
        i_clk,
        i_hready,
        i_hbusreq0,
        i_hlock0,
        i_hbusreq1,
        i_hlock1,
        i_hburst0,
        i_hburst1,
        controllable_hmaster0,
        controllable_hmastlock,
        controllable_nstart,
        controllable_ndecide,
        controllable_locked,
        controllable_nhgrant0,
        controllable_hgrant1,
        controllable_busreq);

input i_clk;
input i_hready;
input i_hbusreq0;
input i_hlock0;
input i_hbusreq1;
input i_hlock1;
input i_hburst0;
input i_hburst1;
input controllable_hmaster0;
input controllable_hmastlock;
input controllable_nstart;
input controllable_ndecide;
input controllable_locked;
input controllable_nhgrant0;
input controllable_hgrant1;
input controllable_busreq;
output o_err;

reg reg_i_hready;
reg reg_i_hbusreq0;
reg reg_i_hlock0;
reg reg_i_hbusreq1;
reg reg_i_hlock1;
reg reg_controllable_hmaster0;
reg reg_controllable_hmastlock;
reg reg_controllable_nstart;
reg reg_controllable_ndecide;
reg reg_controllable_locked;
reg reg_controllable_nhgrant0;
reg reg_controllable_hgrant1;
reg reg_controllable_busreq;
reg reg_stateA1;
reg reg_stateG2;
reg reg_stateG3_0;
reg reg_stateG3_1;
reg reg_stateG3_2;
reg reg_stateG10_1;
reg env_safe_err_happened;
reg env_fair0done;
reg env_fair1done;
reg sys_fair0done;
reg sys_fair1done;
reg sys_fair2done;
reg sys_fair3done;
reg [4:0] fair_cnt;

wire env_safe_err0;
wire env_safe_err1;
wire env_safe_err;

wire sys_safe_err0;
wire sys_safe_err1;
wire sys_safe_err2;
wire sys_safe_err3;
wire sys_safe_err4;
wire sys_safe_err5;
wire sys_safe_err6;
wire sys_safe_err7;
wire sys_safe_err8;
wire sys_safe_err9;
wire sys_safe_err10;
wire sys_safe_err11;
wire sys_safe_err12;
wire sys_safe_err13;
wire sys_safe_err14;
wire sys_safe_err15;
wire sys_safe_err16;
wire sys_safe_err17;
wire sys_safe_err18;
wire sys_safe_err19;
wire sys_safe_err;

wire env_fair0;
wire env_fair1;

wire sys_fair0;
wire sys_fair1;
wire sys_fair2;
wire sys_fair3;
wire progress_in_sys_fair;
wire all_env_fair_fulfilled;
wire all_sys_fair_fulfilled;
wire fair_err;
wire o_err;

// =============================================================
//                        ENV_TRANSITION:
// =============================================================
// Assumption 3:
// G( hlock0=1 -> hbusreq0=1 );
assign env_safe_err0 =  ~(~ i_hlock0 | i_hbusreq0);

// Assumption 3:
// G( hlock1=1 -> hbusreq1=1 );
assign env_safe_err1 =  ~(~ i_hlock1 | i_hbusreq1);

// collecting together the safety error bits:
assign env_safe_err = env_safe_err0 |
                      env_safe_err1;

// =============================================================
//                        SYS_TRANSITION:
// =============================================================
// G((hmaster0=0) -> (hbusreq0=0 <-> busreq=0));
assign sys_safe_err0 =  ~( ~( ~(controllable_hmaster0) )|(~i_hbusreq0 ^~ (~controllable_busreq)));

// G((hmaster0=1) -> (hbusreq1=0 <-> busreq=0));
assign sys_safe_err1 =  ~( ~( controllable_hmaster0 )|(~i_hbusreq1 ^~ (~controllable_busreq)));

// Guarantee 1:
// G((hready=0) -> X(start=0));
assign sys_safe_err2 =  ~( reg_i_hready | controllable_nstart );

// G(((stateG2=1) * (start=1)) -> FALSE;
assign sys_safe_err3 =  ~( ~(reg_stateG2 & ~controllable_nstart) | 0 );

// G(((stateG3_0=1) * (stateG3_1=0) * (stateG3_2=0) * ((start=1))) -> FALSE);
// G(((stateG3_0=0) * (stateG3_1=1) * (stateG3_2=0) * ((start=1))) -> FALSE);
// G(((stateG3_0=1) * (stateG3_1=1) * (stateG3_2=0) * ((start=1))) -> FALSE);
// G(((stateG3_0=0) * (stateG3_1=0) * (stateG3_2=1) * ((start=1))) -> FALSE);
// all these rules can be summarized as: only in state 000, start=1 is allowed:
assign sys_safe_err4 =  (reg_stateG3_0 | reg_stateG3_1 | reg_stateG3_2) & ~controllable_nstart;

// G( (hready=1) -> (   (hgrant0=1) <-> (X(hmaster0=0))  ) );
assign sys_safe_err5 =  ~( ~(reg_i_hready) | ( ~reg_controllable_nhgrant0 ^~ ( ~(controllable_hmaster0) ) ) );

// G( (hready=1) -> (   (hgrant1=1) <-> (X(hmaster0=1))  ) );
assign sys_safe_err6 =  ~( ~(reg_i_hready) | ( reg_controllable_hgrant1 ^~ ( controllable_hmaster0 ) ) );

// HMASTLOCK:
// G(  (hready=1) -> (locked=0 <-> X(hmastlock=0) ) );
assign sys_safe_err7 =  ~( ~(reg_i_hready) | (~reg_controllable_locked ^~ ~controllable_hmastlock) );

// Master 0:
// G( X(start=0) -> ( ((hmaster0=0)) <-> (X(hmaster0=0)) ) );
assign sys_safe_err8 =  ~( ~(controllable_nstart) | ( ( ~(reg_controllable_hmaster0) ) ^~ ( ~(controllable_hmaster0) )) );

// Master 1:
// G( X(start=0) -> ( ((hmaster0=1)) <-> (X(hmaster0=1)) ) );
assign sys_safe_err9 =  ~( ~(controllable_nstart) | ( ( reg_controllable_hmaster0 ) ^~ ( controllable_hmaster0 )) );

// Guarantee 6.2:
// G( ((X(start=0))) -> ( (hmastlock=1) <-> X(hmastlock=1)) );
assign sys_safe_err10 =  ~( ~(controllable_nstart) | ( reg_controllable_hmastlock ^~ controllable_hmastlock) );

// G( (decide=1  *  hlock0=1  *  X(hgrant0=1) )->X(locked=1));
assign sys_safe_err11 =  ~( ~(~reg_controllable_ndecide & reg_i_hlock0 & ~controllable_nhgrant0) | (controllable_locked) );

// G((decide=1  *  hlock0=0  *  X(hgrant0=1))->X(locked=0));
assign sys_safe_err12 =  ~( ~(~reg_controllable_ndecide & ~reg_i_hlock0 & ~controllable_nhgrant0) | (~controllable_locked) );

// G( (decide=1  *  hlock1=1  *  X(hgrant1=1) )->X(locked=1));
assign sys_safe_err13 =  ~( ~(~reg_controllable_ndecide & reg_i_hlock1 & controllable_hgrant1) | (controllable_locked) );

// G((decide=1  *  hlock1=0  *  X(hgrant1=1))->X(locked=0));
assign sys_safe_err14 =  ~( ~(~reg_controllable_ndecide & ~reg_i_hlock1 & controllable_hgrant1) | (~controllable_locked) );

// G( (decide=0) -> (  ((hgrant0=0)<->X(hgrant0=0))  ));
assign sys_safe_err15 =  ~( ~(reg_controllable_ndecide) | (reg_controllable_nhgrant0 ^~ controllable_nhgrant0) );

// G( (decide=0) -> (  ((hgrant1=0)<->X(hgrant1=0))  ));
assign sys_safe_err16 =  ~( ~(reg_controllable_ndecide) | (~reg_controllable_hgrant1 ^~ ~controllable_hgrant1) );

// G((decide=0)->(locked=0 <-> X(locked=0)));
assign sys_safe_err17 =  ~( ~(reg_controllable_ndecide) | (~reg_controllable_locked ^~ ~controllable_locked) );

// G(((stateG10_1=1) * (((hgrant1=1)) * (hbusreq1=0)))->FALSE);
assign sys_safe_err18 =  ~( ~(reg_stateG10_1 & (controllable_hgrant1 & ~i_hbusreq1)) | 0 );

// default master
// G((decide=1  *  hbusreq0=0  *  hbusreq1=0) -> X(hgrant0=1));
assign sys_safe_err19 =  ~( ~(~reg_controllable_ndecide & (~reg_i_hbusreq0 & ~reg_i_hbusreq1)) | (~controllable_nhgrant0) );

// collecting together the safety error bits:
assign sys_safe_err = sys_safe_err0 |
                      sys_safe_err1 |
                      sys_safe_err2 |
                      sys_safe_err3 |
                      sys_safe_err4 |
                      sys_safe_err5 |
                      sys_safe_err6 |
                      sys_safe_err7 |
                      sys_safe_err8 |
                      sys_safe_err9 |
                      sys_safe_err10 |
                      sys_safe_err11 |
                      sys_safe_err12 |
                      sys_safe_err13 |
                      sys_safe_err14 |
                      sys_safe_err15 |
                      sys_safe_err16 |
                      sys_safe_err17 |
                      sys_safe_err18 |
                      sys_safe_err19;

// =============================================================
//                          ENV_FAIRNESS:
// =============================================================
// Assumption 1: 
// G(F(stateA1=0));
assign env_fair0 =  ~reg_stateA1;

// Assumption 2:
// G(F(hready=1));
assign env_fair1 =  i_hready;

assign all_env_fair_fulfilled = (env_fair0done | env_fair0) &
                                (env_fair1done | env_fair1);

// =============================================================
//                          SYS_FAIRNESS:
// =============================================================
// Guarantee 2:
// G(F(stateG2=0));
assign sys_fair0 = ~reg_stateG2;

// Guarantee 3:
// G(F((stateG3_0=0)  *  (stateG3_1=0)  *  (stateG3_2=0)));
assign sys_fair1 =  (~reg_stateG3_0 & ~reg_stateG3_1 & ~reg_stateG3_2);

// G(F(((hmaster0=0))  |  hbusreq0=0));
assign sys_fair2 =  ( ~(controllable_hmaster0) ) | ~i_hbusreq0;

// G(F(((hmaster0=1))  |  hbusreq1=0));
assign sys_fair3 =  ( controllable_hmaster0 ) | ~i_hbusreq1;

assign all_sys_fair_fulfilled = (sys_fair0done | sys_fair0) &
                                (sys_fair1done | sys_fair1) &
                                (sys_fair2done | sys_fair2) &
                                (sys_fair3done | sys_fair3);
assign progress_in_sys_fair = (~sys_fair0done & sys_fair0) |
                                (~sys_fair1done & sys_fair1) |
                                (~sys_fair2done & sys_fair2) |
                                (~sys_fair3done & sys_fair3);
assign fair_err = (fair_cnt >= 5'b10100);

// computing the error output bit:
assign o_err = ~env_safe_err & ~env_safe_err_happened & (sys_safe_err | fair_err);

initial
 begin
  reg_i_hready = 0;
  reg_i_hbusreq0 = 0;
  reg_i_hlock0 = 0;
  reg_i_hbusreq1 = 0;
  reg_i_hlock1 = 0;
  reg_controllable_hmaster0 = 0;
  reg_controllable_hmastlock = 0;
  reg_controllable_nstart = 0;
  reg_controllable_ndecide = 0;
  reg_controllable_locked = 0;
  reg_controllable_nhgrant0 = 0;
  reg_controllable_hgrant1 = 0;
  reg_controllable_busreq = 0;
  reg_stateA1 = 0;
  reg_stateG2 = 0;
  reg_stateG3_0 = 0;
  reg_stateG3_1 = 0;
  reg_stateG3_2 = 0;
  reg_stateG10_1 = 0;
  env_safe_err_happened = 0;
  env_fair0done = 0;
  env_fair1done = 0;
  sys_fair0done = 0;
  sys_fair1done = 0;
  sys_fair2done = 0;
  sys_fair3done = 0;
  fair_cnt = 0;
 end


always @(posedge i_clk)
 begin
   // We remember if an environment error occurred:
   env_safe_err_happened = env_safe_err_happened | env_safe_err;

   // Updating the fairness counters: 
   if(all_sys_fair_fulfilled)
    begin
      env_fair0done = 0;
      env_fair1done = 0;
      sys_fair0done = 0;
      sys_fair1done = 0;
      sys_fair2done = 0;
      sys_fair3done = 0;
      fair_cnt = 0;
    end
   else
    begin
      if(progress_in_sys_fair)
       begin
         env_fair0done = 0;
         env_fair1done = 0;
         fair_cnt = 0;
         sys_fair0done = sys_fair0done | sys_fair0;
         sys_fair1done = sys_fair1done | sys_fair1;
         sys_fair2done = sys_fair2done | sys_fair2;
         sys_fair3done = sys_fair3done | sys_fair3;
       end
      else
       begin
         if(all_env_fair_fulfilled)
          begin
            env_fair0done = 0;
            env_fair1done = 0;
            fair_cnt = fair_cnt + 1;
          end
         else
          begin
            env_fair0done = env_fair0done | env_fair0;
            env_fair1done = env_fair1done | env_fair1;
          end
       end
    end

   // Updating the automata: 
   // Automaton A1: 
   if(~reg_stateA1 & controllable_hmastlock & ~i_hburst0 & ~i_hburst1)
    begin
      reg_stateA1 = 1'b1;
    end
   else if(reg_stateA1 & ~controllable_busreq)
    begin
      reg_stateA1 = 1'b0;
    end

   // Automaton G2: 
   if(~reg_stateG2)
    begin
      if(controllable_hmastlock & ~controllable_nstart & ~i_hburst0 & ~i_hburst1)
       begin
         reg_stateG2 = 1'b1;
       end
    end
   else // if(reg_stateG2)
    begin
      if(~controllable_busreq)
       begin
         reg_stateG2 = 1'b0;
       end
    end

   // Automaton G3: 
   if(~reg_stateG3_0 & ~reg_stateG3_1 & ~reg_stateG3_2 & controllable_hmastlock & ~controllable_nstart &  ~i_hburst0 & i_hburst1 & ~i_hready)
    begin
      reg_stateG3_0 = 1'b1;
      reg_stateG3_1 = 1'b0;
      reg_stateG3_2 = 1'b0;
    end
   else if(~reg_stateG3_0 & ~reg_stateG3_1 & ~reg_stateG3_2 & controllable_hmastlock & ~controllable_nstart &  ~i_hburst0 & i_hburst1 & i_hready)
    begin
      reg_stateG3_0 = 1'b0;
      reg_stateG3_1 = 1'b1;
      reg_stateG3_2 = 1'b0;
    end
   else if(reg_stateG3_0 & ~reg_stateG3_1 & ~reg_stateG3_2 & i_hready)
    begin
      reg_stateG3_0 = 1'b0;
      reg_stateG3_1 = 1'b1;
      reg_stateG3_2 = 1'b0;
    end
   else if(~reg_stateG3_0 & reg_stateG3_1 & ~reg_stateG3_2 & i_hready)
    begin
      reg_stateG3_0 = 1'b1;
      reg_stateG3_1 = 1'b1;
      reg_stateG3_2 = 1'b0;
    end
   else if(reg_stateG3_0 & reg_stateG3_1 & ~reg_stateG3_2 & i_hready)
    begin
      reg_stateG3_0 = 1'b0;
      reg_stateG3_1 = 1'b0;
      reg_stateG3_2 = 1'b1;
    end
   else if(~reg_stateG3_0 & ~reg_stateG3_1 & reg_stateG3_2 & i_hready)
    begin
      reg_stateG3_0 = 1'b0;
      reg_stateG3_1 = 1'b0;
      reg_stateG3_2 = 1'b0;
    end

   // Automaton G10_1: 
   if(~reg_stateG10_1 & ~controllable_hgrant1 & ~i_hbusreq1)
    begin
      reg_stateG10_1 = 1'b1;
    end
   else if(reg_stateG10_1 & i_hbusreq1)
    begin
      reg_stateG10_1 = 1'b0;
    end

   // Latching the previous input:
   reg_i_hready =  i_hready;
   reg_i_hbusreq0 =  i_hbusreq0;
   reg_i_hlock0 =  i_hlock0;
   reg_i_hbusreq1 =  i_hbusreq1;
   reg_i_hlock1 =  i_hlock1;
   reg_controllable_hmaster0 =  controllable_hmaster0;
   reg_controllable_hmastlock =  controllable_hmastlock;
   reg_controllable_nstart =  controllable_nstart;
   reg_controllable_ndecide =  controllable_ndecide;
   reg_controllable_locked =  controllable_locked;
   reg_controllable_nhgrant0 =  controllable_nhgrant0;
   reg_controllable_hgrant1 =  controllable_hgrant1;
   reg_controllable_busreq =  controllable_busreq;

 end
endmodule

-------------------------------
