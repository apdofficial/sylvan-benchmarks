aag 941 35 63 1 843
2
4
6
8
10
12
14
16
18
20
22
24
26
28
30
32
34
36
38
40
42
44
46
48
50
52
54
56
58
60
62
64
66
68
70
72 1
74 50
76 1277
78 52
80 56
82 1291
84 1305
86 1351
88 58
90 1365
92 60
94 8
96 62
98 1379
100 1463
102 1477
104 1489
106 1513
108 1533
110 1557
112 70
114 1571
116 1639
118 1645
120 1651
122 1657
124 36
126 68
128 1671
130 1693
132 34
134 1715
136 1745
138 30
140 66
142 1767
144 1781
146 28
148 64
150 54
152 1803
154 40
156 24
158 1825
160 4
162 20
164 38
166 1839
168 16
170 1861
172 10
174 12
176 2
178 1883
180 14
182 233
184 18
186 22
188 46
190 26
192 48
194 32
196 6
1106
198 47 12
200 49 16
202 201 199
204 51 20
206 205 202
208 53 24
210 209 206
212 57 28
214 213 210
216 59 30
218 217 214
220 61 34
222 221 218
224 63 36
226 225 222
228 183 72
230 229 72
232 231 226
234 69 67
236 234 65
238 46 39
240 47 38
242 241 239
244 243 236
246 68 67
248 246 65
250 48 39
252 49 38
254 253 251
256 255 248
258 257 245
260 69 66
262 260 65
264 50 39
266 51 38
268 267 265
270 269 262
272 271 258
274 68 66
276 274 65
278 52 39
280 53 38
282 281 279
284 283 276
286 285 272
288 234 64
290 56 39
292 57 38
294 293 291
296 295 288
298 297 286
300 246 64
302 58 39
304 59 38
306 305 303
308 307 300
310 309 298
312 260 64
314 60 39
316 61 38
318 317 315
320 319 312
322 321 310
324 274 64
326 62 39
328 63 38
330 329 327
332 331 324
334 333 322
336 155 72
338 154 72
340 337 72
342 341 9
344 343 334
346 137 72
348 136 72
350 347 72
352 348 9
354 353 344
356 101 72
358 100 72
360 357 72
362 107 72
364 106 72
366 363 72
368 367 361
370 109 72
372 108 72
374 371 72
376 375 368
378 377 9
380 379 354
382 177 72
384 176 72
386 383 72
388 384 236
390 387 237
392 391 389
394 393 338
396 395 380
398 161 72
400 160 72
402 399 72
404 403 248
406 400 249
408 407 405
410 409 338
412 411 396
414 173 72
416 172 72
418 415 72
420 419 262
422 416 263
424 423 421
426 425 338
428 427 412
430 181 72
432 180 72
434 431 72
436 435 276
438 432 277
440 439 437
442 441 338
444 443 428
446 185 72
448 184 72
450 447 72
452 451 288
454 448 289
456 455 453
458 457 338
460 459 444
462 187 72
464 186 72
466 463 72
468 467 300
470 464 301
472 471 469
474 473 338
476 475 460
478 191 72
480 190 72
482 479 72
484 483 312
486 480 313
488 487 485
490 489 338
492 491 476
494 195 72
496 194 72
498 495 72
500 499 324
502 496 325
504 503 501
506 505 338
508 507 492
510 197 72
512 196 72
514 511 72
516 512 71
518 515 70
520 519 517
522 521 338
524 523 508
526 127 72
528 126 72
530 527 72
532 141 72
534 140 72
536 533 72
538 537 531
540 149 72
542 148 72
544 541 72
546 545 538
548 547 236
550 546 237
552 551 549
554 553 8
556 555 524
558 537 528
560 558 545
562 561 248
564 560 249
566 565 563
568 567 8
570 569 556
572 534 531
574 572 545
576 575 262
578 574 263
580 579 577
582 581 8
584 583 570
586 534 528
588 586 545
590 589 276
592 588 277
594 593 591
596 595 8
598 597 584
600 542 538
602 601 288
604 600 289
606 605 603
608 607 8
610 609 598
612 558 542
614 613 300
616 612 301
618 617 615
620 619 8
622 621 610
624 572 542
626 625 312
628 624 313
630 629 627
632 631 8
634 633 622
636 586 542
638 637 324
640 636 325
642 641 639
644 643 8
646 645 634
648 113 72
650 112 72
652 649 72
654 653 70
656 650 71
658 657 655
660 659 8
662 661 646
664 151 72
666 150 72
668 665 72
670 175 72
672 174 72
674 671 72
676 672 669
678 676 3
680 678 7
682 681 662
684 675 669
686 684 3
688 686 6
690 689 682
692 169 72
694 168 72
696 693 72
698 694 669
700 698 4
702 700 7
704 703 690
706 697 669
708 706 4
710 708 6
712 711 704
714 163 72
716 162 72
718 715 72
720 716 669
722 720 10
724 722 7
726 725 712
728 719 669
730 728 10
732 730 6
734 733 726
736 157 72
738 156 72
740 737 72
742 738 669
744 742 14
746 744 7
748 747 734
750 741 669
752 750 14
754 752 6
756 755 748
758 147 72
760 146 72
762 759 72
764 760 669
766 764 18
768 766 7
770 769 756
772 763 669
774 772 18
776 774 6
778 777 770
780 139 72
782 138 72
784 781 72
786 782 669
788 786 22
790 788 7
792 791 778
794 785 669
796 794 22
798 796 6
800 799 792
802 133 72
804 132 72
806 803 72
808 804 669
810 808 26
812 810 7
814 813 800
816 807 669
818 816 26
820 818 6
822 821 814
824 125 72
826 124 72
828 825 72
830 826 669
832 830 32
834 832 7
836 835 822
838 829 669
840 838 32
842 840 6
844 843 836
846 387 2
848 384 3
850 849 847
852 851 666
854 853 844
856 400 5
858 403 4
860 859 857
862 861 666
864 863 854
866 416 11
868 419 10
870 869 867
872 871 666
874 873 864
876 432 15
878 435 14
880 879 877
882 881 666
884 883 874
886 448 19
888 451 18
890 889 887
892 891 666
894 893 884
896 464 23
898 467 22
900 899 897
902 901 666
904 903 894
906 480 27
908 483 26
910 909 907
912 911 666
914 913 904
916 496 33
918 499 32
920 919 917
922 921 666
924 923 914
926 512 7
928 515 6
930 929 927
932 931 666
934 933 924
936 131 72
938 130 72
940 937 72
942 49 4
944 942 938
946 945 934
948 135 72
950 134 72
952 949 72
954 51 10
956 954 950
958 957 946
960 143 72
962 142 72
964 961 72
966 53 14
968 966 962
970 969 958
972 153 72
974 152 72
976 973 72
978 57 18
980 978 974
982 981 970
984 159 72
986 158 72
988 985 72
990 59 22
992 990 986
994 993 982
996 171 72
998 170 72
1000 997 72
1002 61 26
1004 1002 998
1006 1005 994
1008 179 72
1010 178 72
1012 1009 72
1014 63 32
1016 1014 1010
1018 1017 1006
1020 189 72
1022 1021 72
1024 193 72
1026 1025 72
1028 1027 1023
1030 75 72
1032 1031 72
1034 1033 1028
1036 79 72
1038 1037 72
1040 1039 1034
1042 81 72
1044 1043 72
1046 1045 1040
1048 89 72
1050 1049 72
1052 1051 1046
1054 93 72
1056 1055 72
1058 1057 1052
1060 97 72
1062 1061 72
1064 1063 1058
1066 1064 669
1068 1066 2
1070 1069 1018
1072 123 72
1074 122 72
1076 1073 72
1078 121 72
1080 120 72
1082 1079 72
1084 119 72
1086 118 72
1088 1085 72
1090 117 72
1092 116 72
1094 1091 72
1096 1093 1087
1098 1096 1081
1100 1098 1076
1102 1101 1077
1104 1102 1070
1106 1105 232
1108 167 72
1110 166 72
1112 1109 72
1114 1113 348
1116 145 72
1118 144 72
1120 1117 72
1122 1121 377
1124 1123 1115
1126 129 72
1128 128 72
1130 1127 72
1132 237 46
1134 1132 1131
1136 1135 1124
1138 115 72
1140 114 72
1142 1139 72
1144 249 48
1146 1144 1143
1148 1147 1136
1150 103 72
1152 102 72
1154 1151 72
1156 263 50
1158 1156 1155
1160 1159 1148
1162 99 72
1164 98 72
1166 1163 72
1168 277 52
1170 1168 1167
1172 1171 1160
1174 91 72
1176 90 72
1178 1175 72
1180 289 56
1182 1180 1179
1184 1183 1172
1186 83 72
1188 82 72
1190 1187 72
1192 301 58
1194 1192 1191
1196 1195 1184
1198 77 72
1200 76 72
1202 1199 72
1204 313 60
1206 1204 1203
1208 1207 1196
1210 85 72
1212 84 72
1214 1211 72
1216 325 62
1218 1216 1215
1220 1219 1208
1222 1113 351
1224 1121 376
1226 1225 1223
1228 1133 1131
1230 1229 1226
1232 1145 1143
1234 1233 1230
1236 1157 1155
1238 1237 1234
1240 1169 1167
1242 1241 1238
1244 1181 1179
1246 1245 1242
1248 1193 1191
1250 1249 1246
1252 1205 1203
1254 1253 1250
1256 1217 1215
1258 1257 1254
1260 1259 1221
1262 1261 1221
1264 1259 1207
1266 1258 1200
1268 1267 1265
1270 1269 1221
1272 1270 1263
1274 1262 1200
1276 1275 1273
1278 1259 1195
1280 1258 1188
1282 1281 1279
1284 1283 1221
1286 1284 1263
1288 1262 1188
1290 1289 1287
1292 1259 1219
1294 1258 1212
1296 1295 1293
1298 1297 1221
1300 1298 1263
1302 1262 1212
1304 1303 1301
1306 105 72
1308 104 72
1310 1307 72
1312 111 72
1314 110 72
1316 1313 72
1318 1314 1311
1320 87 72
1322 86 72
1324 1321 72
1326 1325 41
1328 1327 1319
1330 1258 1221
1332 1330 1328
1334 1333 1262
1336 1330 1329
1338 1337 1334
1340 1329 1327
1342 1340 1258
1344 1342 1221
1346 1344 1339
1348 1338 1322
1350 1349 1347
1352 1259 1183
1354 1258 1176
1356 1355 1353
1358 1357 1221
1360 1358 1263
1362 1262 1176
1364 1363 1361
1366 1259 1171
1368 1258 1164
1370 1369 1367
1372 1371 1221
1374 1372 1263
1376 1262 1164
1378 1377 1375
1380 376 70
1382 1380 9
1384 1382 45
1386 1384 42
1388 1386 41
1390 1386 40
1392 367 358
1394 1392 375
1396 1394 40
1398 364 361
1400 1398 375
1402 1400 40
1404 364 358
1406 1404 375
1408 1406 40
1410 372 368
1412 1410 40
1414 1390 1389
1416 1415 1389
1418 1391 1389
1420 1418 1396
1422 1421 1416
1424 1418 1397
1426 1424 1402
1428 1427 1422
1430 1424 1403
1432 1430 1408
1434 1433 1428
1436 1430 1409
1438 1436 1412
1440 1439 1434
1442 1413 358
1444 1442 1409
1446 1444 1403
1448 1447 1403
1450 1449 1397
1452 1450 1391
1454 1452 1389
1456 1455 1389
1458 1457 1441
1460 1440 358
1462 1461 1459
1464 1259 1159
1466 1258 1152
1468 1467 1465
1470 1469 1221
1472 1470 1263
1474 1262 1152
1476 1475 1473
1478 1329 1319
1480 1478 1258
1482 1480 1221
1484 1482 1339
1486 1338 1308
1488 1487 1485
1490 1413 364
1492 1490 1409
1494 1492 1403
1496 1495 1403
1498 1497 1397
1500 1499 1397
1502 1501 1391
1504 1503 1391
1506 1505 1389
1508 1506 1441
1510 1440 364
1512 1511 1509
1514 1413 372
1516 1514 1409
1518 1517 1409
1520 1519 1403
1522 1520 1397
1524 1522 1391
1526 1524 1389
1528 1526 1441
1530 1440 372
1532 1531 1529
1534 1317 70
1536 1534 45
1538 1536 43
1540 1314 39
1542 1540 1539
1544 1543 1539
1546 1541 1314
1548 1546 1539
1550 1549 1539
1552 1551 1545
1554 1544 1314
1556 1555 1553
1558 1259 1147
1560 1258 1140
1562 1561 1559
1564 1563 1221
1566 1564 1263
1568 1262 1140
1570 1569 1567
1572 1328 1095
1574 1329 1092
1576 1575 1573
1578 1577 1258
1580 1578 1221
1582 1092 1089
1584 1093 1086
1586 1585 1583
1588 1587 1328
1590 1329 1086
1592 1591 1589
1594 1593 1258
1596 1594 1221
1598 1092 1086
1600 1598 1083
1602 1599 1080
1604 1603 1601
1606 1605 1328
1608 1329 1080
1610 1609 1607
1612 1611 1258
1614 1612 1221
1616 1598 1080
1618 1616 1077
1620 1617 1074
1622 1621 1619
1624 1623 1328
1626 1329 1074
1628 1627 1625
1630 1629 1258
1632 1630 1221
1634 1580 1335
1636 1334 1092
1638 1637 1635
1640 1596 1335
1642 1334 1086
1644 1643 1641
1646 1614 1335
1648 1334 1080
1650 1649 1647
1652 1632 1335
1654 1334 1074
1656 1655 1653
1658 1259 1135
1660 1258 1128
1662 1661 1659
1664 1663 1221
1666 1664 1263
1668 1262 1128
1670 1669 1667
1672 941 5
1674 1672 49
1676 938 48
1678 1676 1675
1680 1679 1675
1682 1677 938
1684 1682 1675
1686 1685 1675
1688 1687 1681
1690 1680 938
1692 1691 1689
1694 953 11
1696 1694 51
1698 950 50
1700 1698 1697
1702 1701 1697
1704 1699 950
1706 1704 1697
1708 1707 1697
1710 1709 1703
1712 1702 950
1714 1713 1711
1716 70 9
1718 1716 45
1720 1718 43
1722 1720 351
1724 348 39
1726 1725 1723
1728 1721 348
1730 1729 1721
1732 348 38
1734 1731 351
1736 1732 348
1738 1737 1735
1740 1739 1727
1742 1726 348
1744 1743 1741
1746 965 15
1748 1746 53
1750 962 52
1752 1750 1749
1754 1753 1749
1756 1751 962
1758 1756 1749
1760 1759 1749
1762 1761 1755
1764 1754 962
1766 1765 1763
1768 1259 1123
1770 1258 1118
1772 1771 1769
1774 1773 1221
1776 1774 1263
1778 1262 1118
1780 1779 1777
1782 977 19
1784 1782 57
1786 974 56
1788 1786 1785
1790 1789 1785
1792 1787 974
1794 1792 1785
1796 1795 1785
1798 1797 1791
1800 1790 974
1802 1801 1799
1804 989 23
1806 1804 59
1808 986 58
1810 1808 1807
1812 1811 1807
1814 1809 986
1816 1814 1807
1818 1817 1807
1820 1819 1813
1822 1812 986
1824 1823 1821
1826 1259 1115
1828 1258 1110
1830 1829 1827
1832 1831 1221
1834 1832 1263
1836 1262 1110
1838 1837 1835
1840 1001 27
1842 1840 61
1844 998 60
1846 1844 1843
1848 1847 1843
1850 1845 998
1852 1850 1843
1854 1853 1843
1856 1855 1849
1858 1848 998
1860 1859 1857
1862 1013 33
1864 1862 63
1866 1010 62
1868 1866 1865
1870 1869 1865
1872 1867 1010
1874 1872 1865
1876 1875 1865
1878 1877 1871
1880 1870 1010
1882 1881 1879
i0 controllable_nhgrant0
i1 controllable_hgrant1
i2 controllable_locked
i3 controllable_nstart
i4 controllable_hgrant2
i5 i_hlock0
i6 controllable_hgrant3
i7 i_hlock1
i8 controllable_hgrant4
i9 i_hlock2
i10 controllable_hgrant5
i11 i_hlock3
i12 controllable_hgrant6
i13 i_hlock4
i14 i_hlock5
i15 controllable_hgrant7
i16 i_hlock6
i17 i_hlock7
i18 controllable_busreq
i19 i_hready
i20 i_hburst1
i21 i_hburst0
i22 i_hbusreq0
i23 i_hbusreq1
i24 i_hbusreq2
i25 i_hbusreq3
i26 controllable_ndecide
i27 i_hbusreq4
i28 i_hbusreq5
i29 i_hbusreq6
i30 i_hbusreq7
i31 controllable_hmaster2
i32 controllable_hmaster1
i33 controllable_hmaster0
i34 controllable_hmastlock
l0 n73
l1 reg_i_hbusreq2_out
l2 sys_fair8done_out
l3 reg_i_hbusreq3_out
l4 reg_i_hbusreq4_out
l5 sys_fair7done_out
l6 sys_fair9done_out
l7 env_fair1done_out
l8 reg_i_hbusreq5_out
l9 sys_fair6done_out
l10 reg_i_hbusreq6_out
l11 reg_controllable_nstart_out
l12 reg_i_hbusreq7_out
l13 sys_fair5done_out
l14 reg_stateG3_0_out
l15 sys_fair4done_out
l16 env_fair0done_out
l17 reg_stateG3_1_out
l18 reg_stateG3_2_out
l19 reg_stateA1_out
l20 reg_controllable_hmastlock_out
l21 sys_fair3done_out
l22 fair_cnt<0>_out
l23 fair_cnt<1>_out
l24 fair_cnt<2>_out
l25 fair_cnt<3>_out
l26 reg_i_hlock7_out
l27 reg_controllable_hmaster0_out
l28 sys_fair2done_out
l29 reg_stateG10_1_out
l30 reg_i_hlock6_out
l31 reg_stateG10_2_out
l32 reg_stateG2_out
l33 reg_i_hlock5_out
l34 reg_controllable_hmaster1_out
l35 reg_stateG10_3_out
l36 sys_fair1done_out
l37 reg_i_hlock4_out
l38 reg_controllable_hmaster2_out
l39 reg_controllable_ndecide_out
l40 reg_stateG10_4_out
l41 reg_i_hready_out
l42 reg_i_hlock3_out
l43 reg_stateG10_5_out
l44 reg_controllable_hgrant1_out
l45 reg_i_hlock2_out
l46 reg_controllable_busreq_out
l47 sys_fair0done_out
l48 reg_i_hlock1_out
l49 reg_stateG10_6_out
l50 reg_controllable_hgrant2_out
l51 reg_i_hlock0_out
l52 reg_controllable_nhgrant0_out
l53 reg_stateG10_7_out
l54 reg_controllable_hgrant3_out
l55 env_safe_err_happened_out
l56 reg_controllable_hgrant4_out
l57 reg_controllable_hgrant5_out
l58 reg_i_hbusreq0_out
l59 reg_controllable_hgrant6_out
l60 reg_i_hbusreq1_out
l61 reg_controllable_hgrant7_out
l62 reg_controllable_locked_out
o0 o_err
c
amba_8_new_8
This file was written by ABC on Tue May  5 16:53:37 2015
For information about AIGER format, refer to http://fmv.jku.at/aiger
-------------------------------
This AIGER file has been created by the following sequence of commands:
> vl2mv amba8b8.v   ---gives--> amba8b8.mv
> abc -c "read_blif_mv amba8b8.mv; write_aiger -s amba8b8n.aig"   ---gives--> amba8b8n.aig
> aigtoaig amba8b8n.aig amba8b8n.aag   ---gives--> amba8b8n.aag (this file)
Content of amba8b8.v:
module amba_8_new_8(
        o_err,
        i_clk,
        i_hready,
        i_hbusreq0,
        i_hlock0,
        i_hbusreq1,
        i_hlock1,
        i_hbusreq2,
        i_hlock2,
        i_hbusreq3,
        i_hlock3,
        i_hbusreq4,
        i_hlock4,
        i_hbusreq5,
        i_hlock5,
        i_hbusreq6,
        i_hlock6,
        i_hbusreq7,
        i_hlock7,
        i_hburst0,
        i_hburst1,
        controllable_hmaster0,
        controllable_hmaster1,
        controllable_hmaster2,
        controllable_hmastlock,
        controllable_nstart,
        controllable_ndecide,
        controllable_locked,
        controllable_nhgrant0,
        controllable_hgrant1,
        controllable_hgrant2,
        controllable_hgrant3,
        controllable_hgrant4,
        controllable_hgrant5,
        controllable_hgrant6,
        controllable_hgrant7,
        controllable_busreq);

input i_clk;
input i_hready;
input i_hbusreq0;
input i_hlock0;
input i_hbusreq1;
input i_hlock1;
input i_hbusreq2;
input i_hlock2;
input i_hbusreq3;
input i_hlock3;
input i_hbusreq4;
input i_hlock4;
input i_hbusreq5;
input i_hlock5;
input i_hbusreq6;
input i_hlock6;
input i_hbusreq7;
input i_hlock7;
input i_hburst0;
input i_hburst1;
input controllable_hmaster0;
input controllable_hmaster1;
input controllable_hmaster2;
input controllable_hmastlock;
input controllable_nstart;
input controllable_ndecide;
input controllable_locked;
input controllable_nhgrant0;
input controllable_hgrant1;
input controllable_hgrant2;
input controllable_hgrant3;
input controllable_hgrant4;
input controllable_hgrant5;
input controllable_hgrant6;
input controllable_hgrant7;
input controllable_busreq;
output o_err;

reg reg_i_hready;
reg reg_i_hbusreq0;
reg reg_i_hlock0;
reg reg_i_hbusreq1;
reg reg_i_hlock1;
reg reg_i_hbusreq2;
reg reg_i_hlock2;
reg reg_i_hbusreq3;
reg reg_i_hlock3;
reg reg_i_hbusreq4;
reg reg_i_hlock4;
reg reg_i_hbusreq5;
reg reg_i_hlock5;
reg reg_i_hbusreq6;
reg reg_i_hlock6;
reg reg_i_hbusreq7;
reg reg_i_hlock7;
reg reg_controllable_hmaster0;
reg reg_controllable_hmaster1;
reg reg_controllable_hmaster2;
reg reg_controllable_hmastlock;
reg reg_controllable_nstart;
reg reg_controllable_ndecide;
reg reg_controllable_locked;
reg reg_controllable_nhgrant0;
reg reg_controllable_hgrant1;
reg reg_controllable_hgrant2;
reg reg_controllable_hgrant3;
reg reg_controllable_hgrant4;
reg reg_controllable_hgrant5;
reg reg_controllable_hgrant6;
reg reg_controllable_hgrant7;
reg reg_controllable_busreq;
reg reg_stateA1;
reg reg_stateG2;
reg reg_stateG3_0;
reg reg_stateG3_1;
reg reg_stateG3_2;
reg reg_stateG10_1;
reg reg_stateG10_2;
reg reg_stateG10_3;
reg reg_stateG10_4;
reg reg_stateG10_5;
reg reg_stateG10_6;
reg reg_stateG10_7;
reg env_safe_err_happened;
reg env_fair0done;
reg env_fair1done;
reg sys_fair0done;
reg sys_fair1done;
reg sys_fair2done;
reg sys_fair3done;
reg sys_fair4done;
reg sys_fair5done;
reg sys_fair6done;
reg sys_fair7done;
reg sys_fair8done;
reg sys_fair9done;
reg [3:0] fair_cnt;

wire env_safe_err0;
wire env_safe_err1;
wire env_safe_err2;
wire env_safe_err3;
wire env_safe_err4;
wire env_safe_err5;
wire env_safe_err6;
wire env_safe_err7;
wire env_safe_err;

wire sys_safe_err0;
wire sys_safe_err1;
wire sys_safe_err2;
wire sys_safe_err3;
wire sys_safe_err4;
wire sys_safe_err5;
wire sys_safe_err6;
wire sys_safe_err7;
wire sys_safe_err8;
wire sys_safe_err9;
wire sys_safe_err10;
wire sys_safe_err11;
wire sys_safe_err12;
wire sys_safe_err13;
wire sys_safe_err14;
wire sys_safe_err15;
wire sys_safe_err16;
wire sys_safe_err17;
wire sys_safe_err18;
wire sys_safe_err19;
wire sys_safe_err20;
wire sys_safe_err21;
wire sys_safe_err22;
wire sys_safe_err23;
wire sys_safe_err24;
wire sys_safe_err25;
wire sys_safe_err26;
wire sys_safe_err27;
wire sys_safe_err28;
wire sys_safe_err29;
wire sys_safe_err30;
wire sys_safe_err31;
wire sys_safe_err32;
wire sys_safe_err33;
wire sys_safe_err34;
wire sys_safe_err35;
wire sys_safe_err36;
wire sys_safe_err37;
wire sys_safe_err38;
wire sys_safe_err39;
wire sys_safe_err40;
wire sys_safe_err41;
wire sys_safe_err42;
wire sys_safe_err43;
wire sys_safe_err44;
wire sys_safe_err45;
wire sys_safe_err46;
wire sys_safe_err47;
wire sys_safe_err48;
wire sys_safe_err49;
wire sys_safe_err50;
wire sys_safe_err51;
wire sys_safe_err52;
wire sys_safe_err53;
wire sys_safe_err54;
wire sys_safe_err55;
wire sys_safe_err56;
wire sys_safe_err57;
wire sys_safe_err58;
wire sys_safe_err59;
wire sys_safe_err60;
wire sys_safe_err61;
wire sys_safe_err;

wire env_fair0;
wire env_fair1;

wire sys_fair0;
wire sys_fair1;
wire sys_fair2;
wire sys_fair3;
wire sys_fair4;
wire sys_fair5;
wire sys_fair6;
wire sys_fair7;
wire sys_fair8;
wire sys_fair9;
wire progress_in_sys_fair;
wire all_env_fair_fulfilled;
wire all_sys_fair_fulfilled;
wire fair_err;
wire o_err;

// =============================================================
//                        ENV_TRANSITION:
// =============================================================
// Assumption 3:
// G( hlock0=1 -> hbusreq0=1 );
assign env_safe_err0 =  ~(~ i_hlock0 | i_hbusreq0);

// Assumption 3:
// G( hlock1=1 -> hbusreq1=1 );
assign env_safe_err1 =  ~(~ i_hlock1 | i_hbusreq1);

// Assumption 3:
// G( hlock2=1 -> hbusreq2=1 );
assign env_safe_err2 =  ~(~ i_hlock2 | i_hbusreq2);

// Assumption 3:
// G( hlock3=1 -> hbusreq3=1 );
assign env_safe_err3 =  ~(~ i_hlock3 | i_hbusreq3);

// Assumption 3:
// G( hlock4=1 -> hbusreq4=1 );
assign env_safe_err4 =  ~(~ i_hlock4 | i_hbusreq4);

// Assumption 3:
// G( hlock5=1 -> hbusreq5=1 );
assign env_safe_err5 =  ~(~ i_hlock5 | i_hbusreq5);

// Assumption 3:
// G( hlock6=1 -> hbusreq6=1 );
assign env_safe_err6 =  ~(~ i_hlock6 | i_hbusreq6);

// Assumption 3:
// G( hlock7=1 -> hbusreq7=1 );
assign env_safe_err7 =  ~(~ i_hlock7 | i_hbusreq7);

// collecting together the safety error bits:
assign env_safe_err = env_safe_err0 |
                      env_safe_err1 |
                      env_safe_err2 |
                      env_safe_err3 |
                      env_safe_err4 |
                      env_safe_err5 |
                      env_safe_err6 |
                      env_safe_err7;

// =============================================================
//                        SYS_TRANSITION:
// =============================================================
// G((hmaster0=0) * (hmaster1=0) * (hmaster2=0) -> (hbusreq0=0 <-> busreq=0));
assign sys_safe_err0 =  ~( ~( ~(controllable_hmaster0) & ~(controllable_hmaster1) & ~(controllable_hmaster2) )|(~i_hbusreq0 ^~ (~controllable_busreq)));

// G((hmaster0=1) * (hmaster1=0) * (hmaster2=0) -> (hbusreq1=0 <-> busreq=0));
assign sys_safe_err1 =  ~( ~( controllable_hmaster0 & ~(controllable_hmaster1) & ~(controllable_hmaster2) )|(~i_hbusreq1 ^~ (~controllable_busreq)));

// G((hmaster0=0) * (hmaster1=1) * (hmaster2=0) -> (hbusreq2=0 <-> busreq=0));
assign sys_safe_err2 =  ~( ~( ~(controllable_hmaster0) & controllable_hmaster1 & ~(controllable_hmaster2) )|(~i_hbusreq2 ^~ (~controllable_busreq)));

// G((hmaster0=1) * (hmaster1=1) * (hmaster2=0) -> (hbusreq3=0 <-> busreq=0));
assign sys_safe_err3 =  ~( ~( controllable_hmaster0 & controllable_hmaster1 & ~(controllable_hmaster2) )|(~i_hbusreq3 ^~ (~controllable_busreq)));

// G((hmaster0=0) * (hmaster1=0) * (hmaster2=1) -> (hbusreq4=0 <-> busreq=0));
assign sys_safe_err4 =  ~( ~( ~(controllable_hmaster0) & ~(controllable_hmaster1) & controllable_hmaster2 )|(~i_hbusreq4 ^~ (~controllable_busreq)));

// G((hmaster0=1) * (hmaster1=0) * (hmaster2=1) -> (hbusreq5=0 <-> busreq=0));
assign sys_safe_err5 =  ~( ~( controllable_hmaster0 & ~(controllable_hmaster1) & controllable_hmaster2 )|(~i_hbusreq5 ^~ (~controllable_busreq)));

// G((hmaster0=0) * (hmaster1=1) * (hmaster2=1) -> (hbusreq6=0 <-> busreq=0));
assign sys_safe_err6 =  ~( ~( ~(controllable_hmaster0) & controllable_hmaster1 & controllable_hmaster2 )|(~i_hbusreq6 ^~ (~controllable_busreq)));

// G((hmaster0=1) * (hmaster1=1) * (hmaster2=1) -> (hbusreq7=0 <-> busreq=0));
assign sys_safe_err7 =  ~( ~( controllable_hmaster0 & controllable_hmaster1 & controllable_hmaster2 )|(~i_hbusreq7 ^~ (~controllable_busreq)));

// Guarantee 1:
// G((hready=0) -> X(start=0));
assign sys_safe_err8 =  ~( reg_i_hready | controllable_nstart );

// G(((stateG2=1) * (start=1)) -> FALSE;
assign sys_safe_err9 =  ~( ~(reg_stateG2 & ~controllable_nstart) | 0 );

// G(((stateG3_0=1) * (stateG3_1=0) * (stateG3_2=0) * ((start=1))) -> FALSE);
// G(((stateG3_0=0) * (stateG3_1=1) * (stateG3_2=0) * ((start=1))) -> FALSE);
// G(((stateG3_0=1) * (stateG3_1=1) * (stateG3_2=0) * ((start=1))) -> FALSE);
// G(((stateG3_0=0) * (stateG3_1=0) * (stateG3_2=1) * ((start=1))) -> FALSE);
// all these rules can be summarized as: only in state 000, start=1 is allowed:
assign sys_safe_err10 =  (reg_stateG3_0 | reg_stateG3_1 | reg_stateG3_2) & ~controllable_nstart;

// G( (hready=1) -> (   (hgrant0=1) <-> (X(hmaster0=0) * X(hmaster1=0) * X(hmaster2=0))  ) );
assign sys_safe_err11 =  ~( ~(reg_i_hready) | ( ~reg_controllable_nhgrant0 ^~ ( ~(controllable_hmaster0) & ~(controllable_hmaster1) & ~(controllable_hmaster2) ) ) );

// G( (hready=1) -> (   (hgrant1=1) <-> (X(hmaster0=1) * X(hmaster1=0) * X(hmaster2=0))  ) );
assign sys_safe_err12 =  ~( ~(reg_i_hready) | ( reg_controllable_hgrant1 ^~ ( controllable_hmaster0 & ~(controllable_hmaster1) & ~(controllable_hmaster2) ) ) );

// G( (hready=1) -> (   (hgrant2=1) <-> (X(hmaster0=0) * X(hmaster1=1) * X(hmaster2=0))  ) );
assign sys_safe_err13 =  ~( ~(reg_i_hready) | ( reg_controllable_hgrant2 ^~ ( ~(controllable_hmaster0) & controllable_hmaster1 & ~(controllable_hmaster2) ) ) );

// G( (hready=1) -> (   (hgrant3=1) <-> (X(hmaster0=1) * X(hmaster1=1) * X(hmaster2=0))  ) );
assign sys_safe_err14 =  ~( ~(reg_i_hready) | ( reg_controllable_hgrant3 ^~ ( controllable_hmaster0 & controllable_hmaster1 & ~(controllable_hmaster2) ) ) );

// G( (hready=1) -> (   (hgrant4=1) <-> (X(hmaster0=0) * X(hmaster1=0) * X(hmaster2=1))  ) );
assign sys_safe_err15 =  ~( ~(reg_i_hready) | ( reg_controllable_hgrant4 ^~ ( ~(controllable_hmaster0) & ~(controllable_hmaster1) & controllable_hmaster2 ) ) );

// G( (hready=1) -> (   (hgrant5=1) <-> (X(hmaster0=1) * X(hmaster1=0) * X(hmaster2=1))  ) );
assign sys_safe_err16 =  ~( ~(reg_i_hready) | ( reg_controllable_hgrant5 ^~ ( controllable_hmaster0 & ~(controllable_hmaster1) & controllable_hmaster2 ) ) );

// G( (hready=1) -> (   (hgrant6=1) <-> (X(hmaster0=0) * X(hmaster1=1) * X(hmaster2=1))  ) );
assign sys_safe_err17 =  ~( ~(reg_i_hready) | ( reg_controllable_hgrant6 ^~ ( ~(controllable_hmaster0) & controllable_hmaster1 & controllable_hmaster2 ) ) );

// G( (hready=1) -> (   (hgrant7=1) <-> (X(hmaster0=1) * X(hmaster1=1) * X(hmaster2=1))  ) );
assign sys_safe_err18 =  ~( ~(reg_i_hready) | ( reg_controllable_hgrant7 ^~ ( controllable_hmaster0 & controllable_hmaster1 & controllable_hmaster2 ) ) );

// HMASTLOCK:
// G(  (hready=1) -> (locked=0 <-> X(hmastlock=0) ) );
assign sys_safe_err19 =  ~( ~(reg_i_hready) | (~reg_controllable_locked ^~ ~controllable_hmastlock) );

// Master 0:
// G( X(start=0) -> ( ((hmaster0=0) * (hmaster1=0) * (hmaster2=0)) <-> (X(hmaster0=0) * X(hmaster1=0) * X(hmaster2=0)) ) );
assign sys_safe_err20 =  ~( ~(controllable_nstart) | ( ( ~(reg_controllable_hmaster0) & ~(reg_controllable_hmaster1) & ~(reg_controllable_hmaster2) ) ^~ ( ~(controllable_hmaster0) & ~(controllable_hmaster1) & ~(controllable_hmaster2) )) );

// Master 1:
// G( X(start=0) -> ( ((hmaster0=1) * (hmaster1=0) * (hmaster2=0)) <-> (X(hmaster0=1) * X(hmaster1=0) * X(hmaster2=0)) ) );
assign sys_safe_err21 =  ~( ~(controllable_nstart) | ( ( reg_controllable_hmaster0 & ~(reg_controllable_hmaster1) & ~(reg_controllable_hmaster2) ) ^~ ( controllable_hmaster0 & ~(controllable_hmaster1) & ~(controllable_hmaster2) )) );

// Master 2:
// G( X(start=0) -> ( ((hmaster0=0) * (hmaster1=1) * (hmaster2=0)) <-> (X(hmaster0=0) * X(hmaster1=1) * X(hmaster2=0)) ) );
assign sys_safe_err22 =  ~( ~(controllable_nstart) | ( ( ~(reg_controllable_hmaster0) & reg_controllable_hmaster1 & ~(reg_controllable_hmaster2) ) ^~ ( ~(controllable_hmaster0) & controllable_hmaster1 & ~(controllable_hmaster2) )) );

// Master 3:
// G( X(start=0) -> ( ((hmaster0=1) * (hmaster1=1) * (hmaster2=0)) <-> (X(hmaster0=1) * X(hmaster1=1) * X(hmaster2=0)) ) );
assign sys_safe_err23 =  ~( ~(controllable_nstart) | ( ( reg_controllable_hmaster0 & reg_controllable_hmaster1 & ~(reg_controllable_hmaster2) ) ^~ ( controllable_hmaster0 & controllable_hmaster1 & ~(controllable_hmaster2) )) );

// Master 4:
// G( X(start=0) -> ( ((hmaster0=0) * (hmaster1=0) * (hmaster2=1)) <-> (X(hmaster0=0) * X(hmaster1=0) * X(hmaster2=1)) ) );
assign sys_safe_err24 =  ~( ~(controllable_nstart) | ( ( ~(reg_controllable_hmaster0) & ~(reg_controllable_hmaster1) & reg_controllable_hmaster2 ) ^~ ( ~(controllable_hmaster0) & ~(controllable_hmaster1) & controllable_hmaster2 )) );

// Master 5:
// G( X(start=0) -> ( ((hmaster0=1) * (hmaster1=0) * (hmaster2=1)) <-> (X(hmaster0=1) * X(hmaster1=0) * X(hmaster2=1)) ) );
assign sys_safe_err25 =  ~( ~(controllable_nstart) | ( ( reg_controllable_hmaster0 & ~(reg_controllable_hmaster1) & reg_controllable_hmaster2 ) ^~ ( controllable_hmaster0 & ~(controllable_hmaster1) & controllable_hmaster2 )) );

// Master 6:
// G( X(start=0) -> ( ((hmaster0=0) * (hmaster1=1) * (hmaster2=1)) <-> (X(hmaster0=0) * X(hmaster1=1) * X(hmaster2=1)) ) );
assign sys_safe_err26 =  ~( ~(controllable_nstart) | ( ( ~(reg_controllable_hmaster0) & reg_controllable_hmaster1 & reg_controllable_hmaster2 ) ^~ ( ~(controllable_hmaster0) & controllable_hmaster1 & controllable_hmaster2 )) );

// Master 7:
// G( X(start=0) -> ( ((hmaster0=1) * (hmaster1=1) * (hmaster2=1)) <-> (X(hmaster0=1) * X(hmaster1=1) * X(hmaster2=1)) ) );
assign sys_safe_err27 =  ~( ~(controllable_nstart) | ( ( reg_controllable_hmaster0 & reg_controllable_hmaster1 & reg_controllable_hmaster2 ) ^~ ( controllable_hmaster0 & controllable_hmaster1 & controllable_hmaster2 )) );

// Guarantee 6.2:
// G( ((X(start=0))) -> ( (hmastlock=1) <-> X(hmastlock=1)) );
assign sys_safe_err28 =  ~( ~(controllable_nstart) | ( reg_controllable_hmastlock ^~ controllable_hmastlock) );

// G( (decide=1  *  hlock0=1  *  X(hgrant0=1) )->X(locked=1));
assign sys_safe_err29 =  ~( ~(~reg_controllable_ndecide & reg_i_hlock0 & ~controllable_nhgrant0) | (controllable_locked) );

// G((decide=1  *  hlock0=0  *  X(hgrant0=1))->X(locked=0));
assign sys_safe_err30 =  ~( ~(~reg_controllable_ndecide & ~reg_i_hlock0 & ~controllable_nhgrant0) | (~controllable_locked) );

// G( (decide=1  *  hlock1=1  *  X(hgrant1=1) )->X(locked=1));
assign sys_safe_err31 =  ~( ~(~reg_controllable_ndecide & reg_i_hlock1 & controllable_hgrant1) | (controllable_locked) );

// G((decide=1  *  hlock1=0  *  X(hgrant1=1))->X(locked=0));
assign sys_safe_err32 =  ~( ~(~reg_controllable_ndecide & ~reg_i_hlock1 & controllable_hgrant1) | (~controllable_locked) );

// G( (decide=1  *  hlock2=1  *  X(hgrant2=1) )->X(locked=1));
assign sys_safe_err33 =  ~( ~(~reg_controllable_ndecide & reg_i_hlock2 & controllable_hgrant2) | (controllable_locked) );

// G((decide=1  *  hlock2=0  *  X(hgrant2=1))->X(locked=0));
assign sys_safe_err34 =  ~( ~(~reg_controllable_ndecide & ~reg_i_hlock2 & controllable_hgrant2) | (~controllable_locked) );

// G( (decide=1  *  hlock3=1  *  X(hgrant3=1) )->X(locked=1));
assign sys_safe_err35 =  ~( ~(~reg_controllable_ndecide & reg_i_hlock3 & controllable_hgrant3) | (controllable_locked) );

// G((decide=1  *  hlock3=0  *  X(hgrant3=1))->X(locked=0));
assign sys_safe_err36 =  ~( ~(~reg_controllable_ndecide & ~reg_i_hlock3 & controllable_hgrant3) | (~controllable_locked) );

// G( (decide=1  *  hlock4=1  *  X(hgrant4=1) )->X(locked=1));
assign sys_safe_err37 =  ~( ~(~reg_controllable_ndecide & reg_i_hlock4 & controllable_hgrant4) | (controllable_locked) );

// G((decide=1  *  hlock4=0  *  X(hgrant4=1))->X(locked=0));
assign sys_safe_err38 =  ~( ~(~reg_controllable_ndecide & ~reg_i_hlock4 & controllable_hgrant4) | (~controllable_locked) );

// G( (decide=1  *  hlock5=1  *  X(hgrant5=1) )->X(locked=1));
assign sys_safe_err39 =  ~( ~(~reg_controllable_ndecide & reg_i_hlock5 & controllable_hgrant5) | (controllable_locked) );

// G((decide=1  *  hlock5=0  *  X(hgrant5=1))->X(locked=0));
assign sys_safe_err40 =  ~( ~(~reg_controllable_ndecide & ~reg_i_hlock5 & controllable_hgrant5) | (~controllable_locked) );

// G( (decide=1  *  hlock6=1  *  X(hgrant6=1) )->X(locked=1));
assign sys_safe_err41 =  ~( ~(~reg_controllable_ndecide & reg_i_hlock6 & controllable_hgrant6) | (controllable_locked) );

// G((decide=1  *  hlock6=0  *  X(hgrant6=1))->X(locked=0));
assign sys_safe_err42 =  ~( ~(~reg_controllable_ndecide & ~reg_i_hlock6 & controllable_hgrant6) | (~controllable_locked) );

// G( (decide=1  *  hlock7=1  *  X(hgrant7=1) )->X(locked=1));
assign sys_safe_err43 =  ~( ~(~reg_controllable_ndecide & reg_i_hlock7 & controllable_hgrant7) | (controllable_locked) );

// G((decide=1  *  hlock7=0  *  X(hgrant7=1))->X(locked=0));
assign sys_safe_err44 =  ~( ~(~reg_controllable_ndecide & ~reg_i_hlock7 & controllable_hgrant7) | (~controllable_locked) );

// G( (decide=0) -> (  ((hgrant0=0)<->X(hgrant0=0))  ));
assign sys_safe_err45 =  ~( ~(reg_controllable_ndecide) | (reg_controllable_nhgrant0 ^~ controllable_nhgrant0) );

// G( (decide=0) -> (  ((hgrant1=0)<->X(hgrant1=0))  ));
assign sys_safe_err46 =  ~( ~(reg_controllable_ndecide) | (~reg_controllable_hgrant1 ^~ ~controllable_hgrant1) );

// G( (decide=0) -> (  ((hgrant2=0)<->X(hgrant2=0))  ));
assign sys_safe_err47 =  ~( ~(reg_controllable_ndecide) | (~reg_controllable_hgrant2 ^~ ~controllable_hgrant2) );

// G( (decide=0) -> (  ((hgrant3=0)<->X(hgrant3=0))  ));
assign sys_safe_err48 =  ~( ~(reg_controllable_ndecide) | (~reg_controllable_hgrant3 ^~ ~controllable_hgrant3) );

// G( (decide=0) -> (  ((hgrant4=0)<->X(hgrant4=0))  ));
assign sys_safe_err49 =  ~( ~(reg_controllable_ndecide) | (~reg_controllable_hgrant4 ^~ ~controllable_hgrant4) );

// G( (decide=0) -> (  ((hgrant5=0)<->X(hgrant5=0))  ));
assign sys_safe_err50 =  ~( ~(reg_controllable_ndecide) | (~reg_controllable_hgrant5 ^~ ~controllable_hgrant5) );

// G( (decide=0) -> (  ((hgrant6=0)<->X(hgrant6=0))  ));
assign sys_safe_err51 =  ~( ~(reg_controllable_ndecide) | (~reg_controllable_hgrant6 ^~ ~controllable_hgrant6) );

// G( (decide=0) -> (  ((hgrant7=0)<->X(hgrant7=0))  ));
assign sys_safe_err52 =  ~( ~(reg_controllable_ndecide) | (~reg_controllable_hgrant7 ^~ ~controllable_hgrant7) );

// G((decide=0)->(locked=0 <-> X(locked=0)));
assign sys_safe_err53 =  ~( ~(reg_controllable_ndecide) | (~reg_controllable_locked ^~ ~controllable_locked) );

// G(((stateG10_1=1) * (((hgrant1=1)) * (hbusreq1=0)))->FALSE);
assign sys_safe_err54 =  ~( ~(reg_stateG10_1 & (controllable_hgrant1 & ~i_hbusreq1)) | 0 );

// G(((stateG10_2=1) * (((hgrant2=1)) * (hbusreq2=0)))->FALSE);
assign sys_safe_err55 =  ~( ~(reg_stateG10_2 & (controllable_hgrant2 & ~i_hbusreq2)) | 0 );

// G(((stateG10_3=1) * (((hgrant3=1)) * (hbusreq3=0)))->FALSE);
assign sys_safe_err56 =  ~( ~(reg_stateG10_3 & (controllable_hgrant3 & ~i_hbusreq3)) | 0 );

// G(((stateG10_4=1) * (((hgrant4=1)) * (hbusreq4=0)))->FALSE);
assign sys_safe_err57 =  ~( ~(reg_stateG10_4 & (controllable_hgrant4 & ~i_hbusreq4)) | 0 );

// G(((stateG10_5=1) * (((hgrant5=1)) * (hbusreq5=0)))->FALSE);
assign sys_safe_err58 =  ~( ~(reg_stateG10_5 & (controllable_hgrant5 & ~i_hbusreq5)) | 0 );

// G(((stateG10_6=1) * (((hgrant6=1)) * (hbusreq6=0)))->FALSE);
assign sys_safe_err59 =  ~( ~(reg_stateG10_6 & (controllable_hgrant6 & ~i_hbusreq6)) | 0 );

// G(((stateG10_7=1) * (((hgrant7=1)) * (hbusreq7=0)))->FALSE);
assign sys_safe_err60 =  ~( ~(reg_stateG10_7 & (controllable_hgrant7 & ~i_hbusreq7)) | 0 );

// default master
// G((decide=1  *  hbusreq0=0  *  hbusreq1=0  *  hbusreq2=0  *  hbusreq3=0  *  hbusreq4=0  *  hbusreq5=0  *  hbusreq6=0  *  hbusreq7=0) -> X(hgrant0=1));
assign sys_safe_err61 =  ~( ~(~reg_controllable_ndecide & (~reg_i_hbusreq0 & ~reg_i_hbusreq1 & ~reg_i_hbusreq2 & ~reg_i_hbusreq3 & ~reg_i_hbusreq4 & ~reg_i_hbusreq5 & ~reg_i_hbusreq6 & ~reg_i_hbusreq7)) | (~controllable_nhgrant0) );

// collecting together the safety error bits:
assign sys_safe_err = sys_safe_err0 |
                      sys_safe_err1 |
                      sys_safe_err2 |
                      sys_safe_err3 |
                      sys_safe_err4 |
                      sys_safe_err5 |
                      sys_safe_err6 |
                      sys_safe_err7 |
                      sys_safe_err8 |
                      sys_safe_err9 |
                      sys_safe_err10 |
                      sys_safe_err11 |
                      sys_safe_err12 |
                      sys_safe_err13 |
                      sys_safe_err14 |
                      sys_safe_err15 |
                      sys_safe_err16 |
                      sys_safe_err17 |
                      sys_safe_err18 |
                      sys_safe_err19 |
                      sys_safe_err20 |
                      sys_safe_err21 |
                      sys_safe_err22 |
                      sys_safe_err23 |
                      sys_safe_err24 |
                      sys_safe_err25 |
                      sys_safe_err26 |
                      sys_safe_err27 |
                      sys_safe_err28 |
                      sys_safe_err29 |
                      sys_safe_err30 |
                      sys_safe_err31 |
                      sys_safe_err32 |
                      sys_safe_err33 |
                      sys_safe_err34 |
                      sys_safe_err35 |
                      sys_safe_err36 |
                      sys_safe_err37 |
                      sys_safe_err38 |
                      sys_safe_err39 |
                      sys_safe_err40 |
                      sys_safe_err41 |
                      sys_safe_err42 |
                      sys_safe_err43 |
                      sys_safe_err44 |
                      sys_safe_err45 |
                      sys_safe_err46 |
                      sys_safe_err47 |
                      sys_safe_err48 |
                      sys_safe_err49 |
                      sys_safe_err50 |
                      sys_safe_err51 |
                      sys_safe_err52 |
                      sys_safe_err53 |
                      sys_safe_err54 |
                      sys_safe_err55 |
                      sys_safe_err56 |
                      sys_safe_err57 |
                      sys_safe_err58 |
                      sys_safe_err59 |
                      sys_safe_err60 |
                      sys_safe_err61;

// =============================================================
//                          ENV_F                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          