aag 1067 35 59 1 973
2
4
6
8
10
12
14
16
18
20
22
24
26
28
30
32
34
36
38
40
42
44
46
48
50
52
54
56
58
60
62
64
66
68
70
72 1
74 10
76 1155
78 60
80 66
82 14
84 1177
86 62
88 1415
90 64
92 36
94 18
96 1499
98 34
100 22
102 1523
104 6
106 54
108 30
110 26
112 1543
114 38
116 28
118 8
120 32
122 46
124 24
126 1573
128 1595
130 48
132 20
134 70
136 1617
138 2
140 50
142 1641
144 16
146 1879
148 1885
150 1891
152 1897
154 1903
156 1909
158 2045
160 2051
162 2057
164 2063
166 2069
168 2091
170 52
172 12
174 40
176 225
178 2113
180 56
182 4
184 2135
186 58
188 68
1132
190 47 12
192 49 16
194 193 191
196 51 20
198 197 194
200 53 24
202 201 198
204 57 28
206 205 202
208 59 30
210 209 206
212 61 34
214 213 210
216 63 36
218 217 214
220 177 72
222 221 72
224 223 218
226 69 67
228 226 65
230 46 39
232 47 38
234 233 231
236 235 228
238 68 67
240 238 65
242 48 39
244 49 38
246 245 243
248 247 240
250 249 237
252 69 66
254 252 65
256 50 39
258 51 38
260 259 257
262 261 254
264 263 250
266 68 66
268 266 65
270 52 39
272 53 38
274 273 271
276 275 268
278 277 264
280 226 64
282 56 39
284 57 38
286 285 283
288 287 280
290 289 278
292 238 64
294 58 39
296 59 38
298 297 295
300 299 292
302 301 290
304 252 64
306 60 39
308 61 38
310 309 307
312 311 304
314 313 302
316 266 64
318 62 39
320 63 38
322 321 319
324 323 316
326 325 314
328 175 72
330 174 72
332 329 72
334 333 9
336 335 326
338 127 72
340 126 72
342 339 72
344 340 9
346 345 336
348 97 72
350 96 72
352 349 72
354 103 72
356 102 72
358 355 72
360 359 353
362 113 72
364 112 72
366 363 72
368 367 360
370 369 9
372 371 346
374 139 72
376 138 72
378 375 72
380 376 228
382 379 229
384 383 381
386 385 330
388 387 372
390 183 72
392 182 72
394 391 72
396 395 240
398 392 241
400 399 397
402 401 330
404 403 388
406 75 72
408 74 72
410 407 72
412 411 254
414 408 255
416 415 413
418 417 330
420 419 404
422 83 72
424 82 72
426 423 72
428 427 268
430 424 269
432 431 429
434 433 330
436 435 420
438 95 72
440 94 72
442 439 72
444 443 280
446 440 281
448 447 445
450 449 330
452 451 436
454 101 72
456 100 72
458 455 72
460 459 292
462 456 293
464 463 461
466 465 330
468 467 452
470 111 72
472 110 72
474 471 72
476 475 304
478 472 305
480 479 477
482 481 330
484 483 468
486 121 72
488 120 72
490 487 72
492 491 316
494 488 317
496 495 493
498 497 330
500 499 484
502 105 72
504 104 72
506 503 72
508 504 71
510 507 70
512 511 509
514 513 330
516 515 500
518 189 72
520 188 72
522 519 72
524 81 72
526 80 72
528 525 72
530 529 523
532 91 72
534 90 72
536 533 72
538 537 530
540 539 228
542 538 229
544 543 541
546 545 8
548 547 516
550 529 520
552 550 537
554 553 240
556 552 241
558 557 555
560 559 8
562 561 548
564 526 523
566 564 537
568 567 254
570 566 255
572 571 569
574 573 8
576 575 562
578 526 520
580 578 537
582 581 268
584 580 269
586 585 583
588 587 8
590 589 576
592 534 530
594 593 280
596 592 281
598 597 595
600 599 8
602 601 590
604 550 534
606 605 292
608 604 293
610 609 607
612 611 8
614 613 602
616 564 534
618 617 304
620 616 305
622 621 619
624 623 8
626 625 614
628 578 534
630 629 316
632 628 317
634 633 631
636 635 8
638 637 626
640 135 72
642 134 72
644 641 72
646 645 70
648 642 71
650 649 647
652 651 8
654 653 638
656 107 72
658 106 72
660 657 72
662 173 72
664 172 72
666 663 72
668 664 661
670 668 3
672 670 7
674 673 654
676 667 661
678 676 3
680 678 6
682 681 674
684 145 72
686 144 72
688 685 72
690 686 661
692 690 4
694 692 7
696 695 682
698 689 661
700 698 4
702 700 6
704 703 696
706 133 72
708 132 72
710 707 72
712 708 661
714 712 10
716 714 7
718 717 704
720 711 661
722 720 10
724 722 6
726 725 718
728 125 72
730 124 72
732 729 72
734 730 661
736 734 14
738 736 7
740 739 726
742 733 661
744 742 14
746 744 6
748 747 740
750 117 72
752 116 72
754 751 72
756 752 661
758 756 18
760 758 7
762 761 748
764 755 661
766 764 18
768 766 6
770 769 762
772 109 72
774 108 72
776 773 72
778 774 661
780 778 22
782 780 7
784 783 770
786 777 661
788 786 22
790 788 6
792 791 784
794 99 72
796 98 72
798 795 72
800 796 661
802 800 26
804 802 7
806 805 792
808 799 661
810 808 26
812 810 6
814 813 806
816 93 72
818 92 72
820 817 72
822 818 661
824 822 32
826 824 7
828 827 814
830 821 661
832 830 32
834 832 6
836 835 828
838 379 2
840 376 3
842 841 839
844 843 658
846 845 836
848 392 5
850 395 4
852 851 849
854 853 658
856 855 846
858 408 11
860 411 10
862 861 859
864 863 658
866 865 856
868 424 15
870 427 14
872 871 869
874 873 658
876 875 866
878 440 19
880 443 18
882 881 879
884 883 658
886 885 876
888 456 23
890 459 22
892 891 889
894 893 658
896 895 886
898 472 27
900 475 26
902 901 899
904 903 658
906 905 896
908 488 33
910 491 32
912 911 909
914 913 658
916 915 906
918 504 7
920 507 6
922 921 919
924 923 658
926 925 916
928 129 72
930 128 72
932 929 72
934 49 4
936 934 930
938 937 926
940 137 72
942 136 72
944 941 72
946 51 10
948 946 942
950 949 938
952 169 72
954 168 72
956 953 72
958 53 14
960 958 954
962 961 950
964 179 72
966 178 72
968 965 72
970 57 18
972 970 966
974 973 962
976 185 72
978 184 72
980 977 72
982 59 22
984 982 978
986 985 974
988 77 72
990 76 72
992 989 72
994 61 26
996 994 990
998 997 986
1000 85 72
1002 84 72
1004 1001 72
1006 63 32
1008 1006 1002
1010 1009 998
1012 123 72
1014 1013 72
1016 131 72
1018 1017 72
1020 1019 1015
1022 141 72
1024 1023 72
1026 1025 1020
1028 171 72
1030 1029 72
1032 1031 1026
1034 181 72
1036 1035 72
1038 1037 1032
1040 187 72
1042 1041 72
1044 1043 1038
1046 79 72
1048 1047 72
1050 1049 1044
1052 87 72
1054 1053 72
1056 1055 1050
1058 1056 661
1060 1058 2
1062 1061 1010
1064 157 72
1066 156 72
1068 1065 72
1070 155 72
1072 154 72
1074 1071 72
1076 153 72
1078 152 72
1080 1077 72
1082 151 72
1084 150 72
1086 1083 72
1088 149 72
1090 148 72
1092 1089 72
1094 147 72
1096 146 72
1098 1095 72
1100 1081 1075
1102 1100 1069
1104 1103 1068
1106 1104 1101
1108 1080 1072
1110 1109 1101
1112 1101 1069
1114 1100 1066
1116 1115 1113
1118 1097 1091
1120 1118 1085
1122 1120 1080
1124 1122 1110
1126 1124 1116
1128 1127 1107
1130 1128 1062
1132 1131 224
1134 993 27
1136 1134 61
1138 990 60
1140 1138 1137
1142 1141 1137
1144 1139 990
1146 1144 1137
1148 1147 1137
1150 1149 1143
1152 1142 990
1154 1153 1151
1156 1005 33
1158 1156 63
1160 1002 62
1162 1160 1159
1164 1163 1159
1166 1161 1002
1168 1166 1159
1170 1169 1159
1172 1171 1165
1174 1164 1002
1176 1175 1173
1178 159 72
1180 158 72
1182 1179 72
1184 161 72
1186 160 72
1188 1185 72
1190 163 72
1192 162 72
1194 1191 72
1196 165 72
1198 164 72
1200 1197 72
1202 166 72
1204 1187 1181
1206 1204 1193
1208 1206 1199
1210 1208 1203
1212 1210 343
1214 1187 1182
1216 1214 1193
1218 1216 1199
1220 1218 1203
1222 1220 368
1224 1188 1181
1226 1224 1193
1228 1226 1199
1230 1228 1203
1232 229 46
1234 1233 1230
1236 1188 1182
1238 1236 1193
1240 1238 1199
1242 1240 1203
1244 241 48
1246 1245 1242
1248 1204 1194
1250 1248 1199
1252 1250 1203
1254 255 50
1256 1255 1252
1258 1214 1194
1260 1258 1199
1262 1260 1203
1264 269 52
1266 1265 1262
1268 1224 1194
1270 1268 1199
1272 1270 1203
1274 281 56
1276 1275 1272
1278 1236 1194
1280 1278 1199
1282 1280 1203
1284 293 58
1286 1285 1282
1288 1206 1200
1290 1288 1203
1292 305 60
1294 1293 1290
1296 1216 1200
1298 1296 1203
1300 317 62
1302 1301 1298
1304 89 72
1306 88 72
1308 1305 72
1310 143 72
1312 142 72
1314 1311 72
1316 1315 1309
1318 1306 40
1320 1222 1213
1322 1321 1213
1324 1223 1213
1326 1324 1234
1328 1327 1322
1330 1324 1235
1332 1330 1246
1334 1333 1328
1336 1330 1247
1338 1336 1256
1340 1339 1334
1342 1336 1257
1344 1342 1266
1346 1345 1340
1348 1342 1267
1350 1348 1276
1352 1351 1346
1354 1348 1277
1356 1354 1286
1358 1357 1352
1360 1354 1287
1362 1360 1294
1364 1363 1358
1366 1360 1295
1368 1366 1302
1370 1369 1364
1372 1366 1303
1374 1372 1316
1376 1375 1370
1378 1372 1317
1380 1378 1318
1382 1381 1376
1384 1319 1306
1386 1384 1317
1388 1387 1317
1390 1389 1303
1392 1390 1295
1394 1392 1287
1396 1394 1277
1398 1396 1267
1400 1398 1257
1402 1400 1247
1404 1402 1235
1406 1404 1223
1408 1406 1213
1410 1408 1383
1412 1382 1306
1414 1413 1411
1416 368 70
1418 1416 9
1420 1418 45
1422 1420 42
1424 1422 41
1426 1422 40
1428 359 350
1430 1428 367
1432 1430 40
1434 356 353
1436 1434 367
1438 1436 40
1440 356 350
1442 1440 367
1444 1442 40
1446 364 360
1448 1446 40
1450 1426 1425
1452 1451 1425
1454 1427 1425
1456 1454 1432
1458 1457 1452
1460 1454 1433
1462 1460 1438
1464 1463 1458
1466 1460 1439
1468 1466 1444
1470 1469 1464
1472 1466 1445
1474 1472 1448
1476 1475 1470
1478 1449 350
1480 1478 1445
1482 1480 1439
1484 1483 1439
1486 1485 1433
1488 1486 1427
1490 1488 1425
1492 1491 1425
1494 1493 1477
1496 1476 350
1498 1497 1495
1500 1449 356
1502 1500 1445
1504 1502 1439
1506 1505 1439
1508 1507 1433
1510 1509 1433
1512 1511 1427
1514 1513 1427
1516 1515 1425
1518 1516 1477
1520 1476 356
1522 1521 1519
1524 1449 364
1526 1524 1445
1528 1527 1445
1530 1529 1439
1532 1530 1433
1534 1532 1427
1536 1534 1425
1538 1536 1477
1540 1476 364
1542 1541 1539
1544 70 9
1546 1544 45
1548 1546 43
1550 1548 343
1552 340 39
1554 1553 1551
1556 1549 340
1558 1557 1549
1560 340 38
1562 1559 343
1564 1560 340
1566 1565 1563
1568 1567 1555
1570 1554 340
1572 1571 1569
1574 933 5
1576 1574 49
1578 930 48
1580 1578 1577
1582 1581 1577
1584 1579 930
1586 1584 1577
1588 1587 1577
1590 1589 1583
1592 1582 930
1594 1593 1591
1596 945 11
1598 1596 51
1600 942 50
1602 1600 1599
1604 1603 1599
1606 1601 942
1608 1606 1599
1610 1609 1599
1612 1611 1605
1614 1604 942
1616 1615 1613
1618 1315 70
1620 1618 45
1622 1620 43
1624 1312 39
1626 1624 1623
1628 1627 1623
1630 1625 1312
1632 1630 1623
1634 1633 1623
1636 1635 1629
1638 1628 1312
1640 1639 1637
1642 1381 1370
1644 1318 1099
1646 1319 1096
1648 1647 1645
1650 1316 1096
1652 1649 1317
1654 1653 1651
1656 1655 1303
1658 1656 1295
1660 1658 1287
1662 1660 1277
1664 1662 1267
1666 1664 1257
1668 1666 1247
1670 1668 1235
1672 1670 1223
1674 1672 1213
1676 1096 1093
1678 1097 1090
1680 1679 1677
1682 1681 1318
1684 1319 1090
1686 1685 1683
1688 1316 1090
1690 1687 1317
1692 1691 1689
1694 1693 1303
1696 1694 1295
1698 1696 1287
1700 1698 1277
1702 1700 1267
1704 1702 1257
1706 1704 1247
1708 1706 1235
1710 1708 1223
1712 1710 1213
1714 1096 1090
1716 1714 1087
1718 1715 1084
1720 1719 1717
1722 1721 1318
1724 1319 1084
1726 1725 1723
1728 1316 1084
1730 1727 1317
1732 1731 1729
1734 1733 1303
1736 1734 1295
1738 1736 1287
1740 1738 1277
1742 1740 1267
1744 1742 1257
1746 1744 1247
1748 1746 1235
1750 1748 1223
1752 1750 1213
1754 1714 1084
1756 1754 1081
1758 1755 1078
1760 1759 1757
1762 1761 1318
1764 1319 1078
1766 1765 1763
1768 1316 1078
1770 1767 1317
1772 1771 1769
1774 1773 1303
1776 1774 1295
1778 1776 1287
1780 1778 1277
1782 1780 1267
1784 1782 1257
1786 1784 1247
1788 1786 1235
1790 1788 1223
1792 1790 1213
1794 1754 1078
1796 1794 1075
1798 1795 1072
1800 1799 1797
1802 1801 1318
1804 1319 1072
1806 1805 1803
1808 1316 1072
1810 1807 1317
1812 1811 1809
1814 1813 1303
1816 1814 1295
1818 1816 1287
1820 1818 1277
1822 1820 1267
1824 1822 1257
1826 1824 1247
1828 1826 1235
1830 1828 1223
1832 1830 1213
1834 1794 1072
1836 1834 1069
1838 1835 1066
1840 1839 1837
1842 1841 1318
1844 1319 1066
1846 1845 1843
1848 1316 1066
1850 1847 1317
1852 1851 1849
1854 1853 1303
1856 1854 1295
1858 1856 1287
1860 1858 1277
1862 1860 1267
1864 1862 1257
1866 1864 1247
1868 1866 1235
1870 1868 1223
1872 1870 1213
1874 1674 1643
1876 1642 1096
1878 1877 1875
1880 1712 1643
1882 1642 1090
1884 1883 1881
1886 1752 1643
1888 1642 1084
1890 1889 1887
1892 1792 1643
1894 1642 1078
1896 1895 1893
1898 1832 1643
1900 1642 1072
1902 1901 1899
1904 1872 1643
1906 1642 1066
1908 1907 1905
1910 1303 1180
1912 1910 1295
1914 1913 1295
1916 1915 1287
1918 1916 1277
1920 1919 1277
1922 1921 1267
1924 1922 1257
1926 1925 1257
1928 1927 1247
1930 1928 1235
1932 1931 1235
1934 1933 1223
1936 1934 1213
1938 1937 1213
1940 1303 1186
1942 1940 1295
1944 1942 1287
1946 1944 1277
1948 1947 1277
1950 1949 1267
1952 1951 1267
1954 1953 1257
1956 1954 1247
1958 1956 1235
1960 1959 1235
1962 1961 1223
1964 1963 1223
1966 1965 1213
1968 1303 1192
1970 1968 1295
1972 1970 1287
1974 1972 1277
1976 1975 1277
1978 1977 1267
1980 1979 1267
1982 1981 1257
1984 1983 1257
1986 1985 1247
1988 1987 1247
1990 1989 1235
1992 1990 1223
1994 1992 1213
1996 1303 1198
1998 1996 1295
2000 1999 1295
2002 2001 1287
2004 2003 1287
2006 2005 1277
2008 2006 1267
2010 2008 1257
2012 2010 1247
2014 2012 1235
2016 2014 1223
2018 2016 1213
2020 1303 1202
2022 2020 1295
2024 2022 1287
2026 2024 1277
2028 2026 1267
2030 2028 1257
2032 2030 1247
2034 2032 1235
2036 2034 1223
2038 2036 1213
2040 1939 1371
2042 1370 1180
2044 2043 2041
2046 1966 1371
2048 1370 1186
2050 2049 2047
2052 1994 1371
2054 1370 1192
2056 2055 2053
2058 2018 1371
2060 1370 1198
2062 2061 2059
2064 2038 1371
2066 1370 1202
2068 2067 2065
2070 957 15
2072 2070 53
2074 954 52
2076 2074 2073
2078 2077 2073
2080 2075 954
2082 2080 2073
2084 2083 2073
2086 2085 2079
2088 2078 954
2090 2089 2087
2092 969 19
2094 2092 57
2096 966 56
2098 2096 2095
2100 2099 2095
2102 2097 966
2104 2102 2095
2106 2105 2095
2108 2107 2101
2110 2100 966
2112 2111 2109
2114 981 23
2116 2114 59
2118 978 58
2120 2118 2117
2122 2121 2117
2124 2119 978
2126 2124 2117
2128 2127 2117
2130 2129 2123
2132 2122 978
2134 2133 2131
i0 controllable_nhgrant0
i1 controllable_hgrant1
i2 controllable_locked
i3 controllable_nstart
i4 controllable_hgrant2
i5 i_hlock0
i6 controllable_hgrant3
i7 i_hlock1
i8 controllable_hgrant4
i9 i_hlock2
i10 controllable_hgrant5
i11 i_hlock3
i12 controllable_hgrant6
i13 i_hlock4
i14 i_hlock5
i15 controllable_hgrant7
i16 i_hlock6
i17 i_hlock7
i18 controllable_busreq
i19 i_hready
i20 i_hburst1
i21 i_hburst0
i22 i_hbusreq0
i23 i_hbusreq1
i24 i_hbusreq2
i25 i_hbusreq3
i26 controllable_ndecide
i27 i_hbusreq4
i28 i_hbusreq5
i29 i_hbusreq6
i30 i_hbusreq7
i31 controllable_hmaster2
i32 controllable_hmaster1
i33 controllable_hmaster0
i34 controllable_hmastlock
l0 n73
l1 reg_controllable_hgrant2_out
l2 reg_stateG10_6_out
l3 reg_i_hbusreq6_out
l4 reg_controllable_hmaster1_out
l5 reg_controllable_hgrant3_out
l6 reg_stateG10_7_out
l7 reg_i_hbusreq7_out
l8 next_env_fair_out
l9 reg_controllable_hmaster2_out
l10 reg_i_hlock7_out
l11 reg_controllable_hgrant4_out
l12 reg_stateG3_0_out
l13 reg_i_hlock6_out
l14 reg_controllable_hgrant5_out
l15 reg_stateG3_1_out
l16 reg_controllable_locked_out
l17 reg_controllable_ndecide_out
l18 reg_i_hlock5_out
l19 reg_controllable_hgrant6_out
l20 reg_stateG3_2_out
l21 reg_controllable_busreq_out
l22 reg_i_hlock4_out
l23 reg_controllable_nstart_out
l24 reg_controllable_hgrant7_out
l25 reg_i_hbusreq0_out
l26 reg_i_hlock3_out
l27 reg_stateG2_out
l28 reg_stateG10_1_out
l29 reg_i_hbusreq1_out
l30 reg_i_hlock2_out
l31 reg_controllable_hmastlock_out
l32 reg_stateG10_2_out
l33 reg_controllable_nhgrant0_out
l34 reg_i_hbusreq2_out
l35 reg_stateA1_out
l36 reg_i_hlock1_out
l37 fair_cnt<0>_out
l38 fair_cnt<1>_out
l39 fair_cnt<2>_out
l40 fair_cnt<3>_out
l41 fair_cnt<4>_out
l42 fair_cnt<5>_out
l43 next_sys_fair<0>_out
l44 next_sys_fair<1>_out
l45 next_sys_fair<2>_out
l46 next_sys_fair<3>_out
l47 next_sys_fair<4>_out
l48 reg_stateG10_3_out
l49 reg_i_hbusreq3_out
l50 reg_i_hlock0_out
l51 reg_i_hready_out
l52 env_safe_err_happened_out
l53 reg_stateG10_4_out
l54 reg_i_hbusreq4_out
l55 reg_controllable_hgrant1_out
l56 reg_stateG10_5_out
l57 reg_i_hbusreq5_out
l58 reg_controllable_hmaster0_out
o0 o_err
c
amba_8_new_40
This file was written by ABC on Tue May  5 16:53:38 2015
For information about AIGER format, refer to http://fmv.jku.at/aiger
-------------------------------
This AIGER file has been created by the following sequence of commands:
> vl2mv amba8c40.v   ---gives--> amba8c40.mv
> abc -c "read_blif_mv amba8c40.mv; write_aiger -s amba8c40n.aig"   ---gives--> amba8c40n.aig
> aigtoaig amba8c40n.aig amba8c40n.aag   ---gives--> amba8c40n.aag (this file)
Content of amba8c40.v:
module amba_8_new_40(
        o_err,
        i_clk,
        i_hready,
        i_hbusreq0,
        i_hlock0,
        i_hbusreq1,
        i_hlock1,
        i_hbusreq2,
        i_hlock2,
        i_hbusreq3,
        i_hlock3,
        i_hbusreq4,
        i_hlock4,
        i_hbusreq5,
        i_hlock5,
        i_hbusreq6,
        i_hlock6,
        i_hbusreq7,
        i_hlock7,
        i_hburst0,
        i_hburst1,
        controllable_hmaster0,
        controllable_hmaster1,
        controllable_hmaster2,
        controllable_hmastlock,
        controllable_nstart,
        controllable_ndecide,
        controllable_locked,
        controllable_nhgrant0,
        controllable_hgrant1,
        controllable_hgrant2,
        controllable_hgrant3,
        controllable_hgrant4,
        controllable_hgrant5,
        controllable_hgrant6,
        controllable_hgrant7,
        controllable_busreq);

input i_clk;
input i_hready;
input i_hbusreq0;
input i_hlock0;
input i_hbusreq1;
input i_hlock1;
input i_hbusreq2;
input i_hlock2;
input i_hbusreq3;
input i_hlock3;
input i_hbusreq4;
input i_hlock4;
input i_hbusreq5;
input i_hlock5;
input i_hbusreq6;
input i_hlock6;
input i_hbusreq7;
input i_hlock7;
input i_hburst0;
input i_hburst1;
input controllable_hmaster0;
input controllable_hmaster1;
input controllable_hmaster2;
input controllable_hmastlock;
input controllable_nstart;
input controllable_ndecide;
input controllable_locked;
input controllable_nhgrant0;
input controllable_hgrant1;
input controllable_hgrant2;
input controllable_hgrant3;
input controllable_hgrant4;
input controllable_hgrant5;
input controllable_hgrant6;
input controllable_hgrant7;
input controllable_busreq;
output o_err;

reg reg_i_hready;
reg reg_i_hbusreq0;
reg reg_i_hlock0;
reg reg_i_hbusreq1;
reg reg_i_hlock1;
reg reg_i_hbusreq2;
reg reg_i_hlock2;
reg reg_i_hbusreq3;
reg reg_i_hlock3;
reg reg_i_hbusreq4;
reg reg_i_hlock4;
reg reg_i_hbusreq5;
reg reg_i_hlock5;
reg reg_i_hbusreq6;
reg reg_i_hlock6;
reg reg_i_hbusreq7;
reg reg_i_hlock7;
reg reg_controllable_hmaster0;
reg reg_controllable_hmaster1;
reg reg_controllable_hmaster2;
reg reg_controllable_hmastlock;
reg reg_controllable_nstart;
reg reg_controllable_ndecide;
reg reg_controllable_locked;
reg reg_controllable_nhgrant0;
reg reg_controllable_hgrant1;
reg reg_controllable_hgrant2;
reg reg_controllable_hgrant3;
reg reg_controllable_hgrant4;
reg reg_controllable_hgrant5;
reg reg_controllable_hgrant6;
reg reg_controllable_hgrant7;
reg reg_controllable_busreq;
reg reg_stateA1;
reg reg_stateG2;
reg reg_stateG3_0;
reg reg_stateG3_1;
reg reg_stateG3_2;
reg reg_stateG10_1;
reg reg_stateG10_2;
reg reg_stateG10_3;
reg reg_stateG10_4;
reg reg_stateG10_5;
reg reg_stateG10_6;
reg reg_stateG10_7;
reg env_safe_err_happened;
reg next_env_fair;
reg [5:0] fair_cnt;
reg [4:0] next_sys_fair;

wire env_safe_err0;
wire env_safe_err1;
wire env_safe_err2;
wire env_safe_err3;
wire env_safe_err4;
wire env_safe_err5;
wire env_safe_err6;
wire env_safe_err7;
wire env_safe_err;

wire sys_safe_err0;
wire sys_safe_err1;
wire sys_safe_err2;
wire sys_safe_err3;
wire sys_safe_err4;
wire sys_safe_err5;
wire sys_safe_err6;
wire sys_safe_err7;
wire sys_safe_err8;
wire sys_safe_err9;
wire sys_safe_err10;
wire sys_safe_err11;
wire sys_safe_err12;
wire sys_safe_err13;
wire sys_safe_err14;
wire sys_safe_err15;
wire sys_safe_err16;
wire sys_safe_err17;
wire sys_safe_err18;
wire sys_safe_err19;
wire sys_safe_err20;
wire sys_safe_err21;
wire sys_safe_err22;
wire sys_safe_err23;
wire sys_safe_err24;
wire sys_safe_err25;
wire sys_safe_err26;
wire sys_safe_err27;
wire sys_safe_err28;
wire sys_safe_err29;
wire sys_safe_err30;
wire sys_safe_err31;
wire sys_safe_err32;
wire sys_safe_err33;
wire sys_safe_err34;
wire sys_safe_err35;
wire sys_safe_err36;
wire sys_safe_err37;
wire sys_safe_err38;
wire sys_safe_err39;
wire sys_safe_err40;
wire sys_safe_err41;
wire sys_safe_err42;
wire sys_safe_err43;
wire sys_safe_err44;
wire sys_safe_err45;
wire sys_safe_err46;
wire sys_safe_err47;
wire sys_safe_err48;
wire sys_safe_err49;
wire sys_safe_err50;
wire sys_safe_err51;
wire sys_safe_err52;
wire sys_safe_err53;
wire sys_safe_err54;
wire sys_safe_err55;
wire sys_safe_err56;
wire sys_safe_err57;
wire sys_safe_err58;
wire sys_safe_err59;
wire sys_safe_err60;
wire sys_safe_err61;
wire sys_safe_err;

wire env_fair0;
wire env_fair1;

wire sys_fair0;
wire sys_fair1;
wire sys_fair2;
wire sys_fair3;
wire sys_fair4;
wire sys_fair5;
wire sys_fair6;
wire sys_fair7;
wire sys_fair8;
wire sys_fair9;
wire fair_err;
wire o_err;

// =============================================================
//                        ENV_TRANSITION:
// =============================================================
// Assumption 3:
// G( hlock0=1 -> hbusreq0=1 );
assign env_safe_err0 =  ~(~ i_hlock0 | i_hbusreq0);

// Assumption 3:
// G( hlock1=1 -> hbusreq1=1 );
assign env_safe_err1 =  ~(~ i_hlock1 | i_hbusreq1);

// Assumption 3:
// G( hlock2=1 -> hbusreq2=1 );
assign env_safe_err2 =  ~(~ i_hlock2 | i_hbusreq2);

// Assumption 3:
// G( hlock3=1 -> hbusreq3=1 );
assign env_safe_err3 =  ~(~ i_hlock3 | i_hbusreq3);

// Assumption 3:
// G( hlock4=1 -> hbusreq4=1 );
assign env_safe_err4 =  ~(~ i_hlock4 | i_hbusreq4);

// Assumption 3:
// G( hlock5=1 -> hbusreq5=1 );
assign env_safe_err5 =  ~(~ i_hlock5 | i_hbusreq5);

// Assumption 3:
// G( hlock6=1 -> hbusreq6=1 );
assign env_safe_err6 =  ~(~ i_hlock6 | i_hbusreq6);

// Assumption 3:
// G( hlock7=1 -> hbusreq7=1 );
assign env_safe_err7 =  ~(~ i_hlock7 | i_hbusreq7);

// collecting together the safety error bits:
assign env_safe_err = env_safe_err0 |
                      env_safe_err1 |
                      env_safe_err2 |
                      env_safe_err3 |
                      env_safe_err4 |
                      env_safe_err5 |
                      env_safe_err6 |
                      env_safe_err7;

// =============================================================
//                        SYS_TRANSITION:
// =============================================================
// G((hmaster0=0) * (hmaster1=0) * (hmaster2=0) -> (hbusreq0=0 <-> busreq=0));
assign sys_safe_err0 =  ~( ~( ~(controllable_hmaster0) & ~(controllable_hmaster1) & ~(controllable_hmaster2) )|(~i_hbusreq0 ^~ (~controllable_busreq)));

// G((hmaster0=1) * (hmaster1=0) * (hmaster2=0) -> (hbusreq1=0 <-> busreq=0));
assign sys_safe_err1 =  ~( ~( controllable_hmaster0 & ~(controllable_hmaster1) & ~(controllable_hmaster2) )|(~i_hbusreq1 ^~ (~controllable_busreq)));

// G((hmaster0=0) * (hmaster1=1) * (hmaster2=0) -> (hbusreq2=0 <-> busreq=0));
assign sys_safe_err2 =  ~( ~( ~(controllable_hmaster0) & controllable_hmaster1 & ~(controllable_hmaster2) )|(~i_hbusreq2 ^~ (~controllable_busreq)));

// G((hmaster0=1) * (hmaster1=1) * (hmaster2=0) -> (hbusreq3=0 <-> busreq=0));
assign sys_safe_err3 =  ~( ~( controllable_hmaster0 & controllable_hmaster1 & ~(controllable_hmaster2) )|(~i_hbusreq3 ^~ (~controllable_busreq)));

// G((hmaster0=0) * (hmaster1=0) * (hmaster2=1) -> (hbusreq4=0 <-> busreq=0));
assign sys_safe_err4 =  ~( ~( ~(controllable_hmaster0) & ~(controllable_hmaster1) & controllable_hmaster2 )|(~i_hbusreq4 ^~ (~controllable_busreq)));

// G((hmaster0=1) * (hmaster1=0) * (hmaster2=1) -> (hbusreq5=0 <-> busreq=0));
assign sys_safe_err5 =  ~( ~( controllable_hmaster0 & ~(controllable_hmaster1) & controllable_hmaster2 )|(~i_hbusreq5 ^~ (~controllable_busreq)));

// G((hmaster0=0) * (hmaster1=1) * (hmaster2=1) -> (hbusreq6=0 <-> busreq=0));
assign sys_safe_err6 =  ~( ~( ~(controllable_hmaster0) & controllable_hmaster1 & controllable_hmaster2 )|(~i_hbusreq6 ^~ (~controllable_busreq)));

// G((hmaster0=1) * (hmaster1=1) * (hmaster2=1) -> (hbusreq7=0 <-> busreq=0));
assign sys_safe_err7 =  ~( ~( controllable_hmaster0 & controllable_hmaster1 & controllable_hmaster2 )|(~i_hbusreq7 ^~ (~controllable_busreq)));

// Guarantee 1:
// G((hready=0) -> X(start=0));
assign sys_safe_err8 =  ~( reg_i_hready | controllable_nstart );

// G(((stateG2=1) * (start=1)) -> FALSE;
assign sys_safe_err9 =  ~( ~(reg_stateG2 & ~controllable_nstart) | 0 );

// G(((stateG3_0=1) * (stateG3_1=0) * (stateG3_2=0) * ((start=1))) -> FALSE);
// G(((stateG3_0=0) * (stateG3_1=1) * (stateG3_2=0) * ((start=1))) -> FALSE);
// G(((stateG3_0=1) * (stateG3_1=1) * (stateG3_2=0) * ((start=1))) -> FALSE);
// G(((stateG3_0=0) * (stateG3_1=0) * (stateG3_2=1) * ((start=1))) -> FALSE);
// all these rules can be summarized as: only in state 000, start=1 is allowed:
assign sys_safe_err10 =  (reg_stateG3_0 | reg_stateG3_1 | reg_stateG3_2) & ~controllable_nstart;

// G( (hready=1) -> (   (hgrant0=1) <-> (X(hmaster0=0) * X(hmaster1=0) * X(hmaster2=0))  ) );
assign sys_safe_err11 =  ~( ~(reg_i_hready) | ( ~reg_controllable_nhgrant0 ^~ ( ~(controllable_hmaster0) & ~(controllable_hmaster1) & ~(controllable_hmaster2) ) ) );

// G( (hready=1) -> (   (hgrant1=1) <-> (X(hmaster0=1) * X(hmaster1=0) * X(hmaster2=0))  ) );
assign sys_safe_err12 =  ~( ~(reg_i_hready) | ( reg_controllable_hgrant1 ^~ ( controllable_hmaster0 & ~(controllable_hmaster1) & ~(controllable_hmaster2) ) ) );

// G( (hready=1) -> (   (hgrant2=1) <-> (X(hmaster0=0) * X(hmaster1=1) * X(hmaster2=0))  ) );
assign sys_safe_err13 =  ~( ~(reg_i_hready) | ( reg_controllable_hgrant2 ^~ ( ~(controllable_hmaster0) & controllable_hmaster1 & ~(controllable_hmaster2) ) ) );

// G( (hready=1) -> (   (hgrant3=1) <-> (X(hmaster0=1) * X(hmaster1=1) * X(hmaster2=0))  ) );
assign sys_safe_err14 =  ~( ~(reg_i_hready) | ( reg_controllable_hgrant3 ^~ ( controllable_hmaster0 & controllable_hmaster1 & ~(controllable_hmaster2) ) ) );

// G( (hready=1) -> (   (hgrant4=1) <-> (X(hmaster0=0) * X(hmaster1=0) * X(hmaster2=1))  ) );
assign sys_safe_err15 =  ~( ~(reg_i_hready) | ( reg_controllable_hgrant4 ^~ ( ~(controllable_hmaster0) & ~(controllable_hmaster1) & controllable_hmaster2 ) ) );

// G( (hready=1) -> (   (hgrant5=1) <-> (X(hmaster0=1) * X(hmaster1=0) * X(hmaster2=1))  ) );
assign sys_safe_err16 =  ~( ~(reg_i_hready) | ( reg_controllable_hgrant5 ^~ ( controllable_hmaster0 & ~(controllable_hmaster1) & controllable_hmaster2 ) ) );

// G( (hready=1) -> (   (hgrant6=1) <-> (X(hmaster0=0) * X(hmaster1=1) * X(hmaster2=1))  ) );
assign sys_safe_err17 =  ~( ~(reg_i_hready) | ( reg_controllable_hgrant6 ^~ ( ~(controllable_hmaster0) & controllable_hmaster1 & controllable_hmaster2 ) ) );

// G( (hready=1) -> (   (hgrant7=1) <-> (X(hmaster0=1) * X(hmaster1=1) * X(hmaster2=1))  ) );
assign sys_safe_err18 =  ~( ~(reg_i_hready) | ( reg_controllable_hgrant7 ^~ ( controllable_hmaster0 & controllable_hmaster1 & controllable_hmaster2 ) ) );

// HMASTLOCK:
// G(  (hready=1) -> (locked=0 <-> X(hmastlock=0) ) );
assign sys_safe_err19 =  ~( ~(reg_i_hready) | (~reg_controllable_locked ^~ ~controllable_hmastlock) );

// Master 0:
// G( X(start=0) -> ( ((hmaster0=0) * (hmaster1=0) * (hmaster2=0)) <-> (X(hmaster0=0) * X(hmaster1=0) * X(hmaster2=0)) ) );
assign sys_safe_err20 =  ~( ~(controllable_nstart) | ( ( ~(reg_controllable_hmaster0) & ~(reg_controllable_hmaster1) & ~(reg_controllable_hmaster2) ) ^~ ( ~(controllable_hmaster0) & ~(controllable_hmaster1) & ~(controllable_hmaster2) )) );

// Master 1:
// G( X(start=0) -> ( ((hmaster0=1) * (hmaster1=0) * (hmaster2=0)) <-> (X(hmaster0=1) * X(hmaster1=0) * X(hmaster2=0)) ) );
assign sys_safe_err21 =  ~( ~(controllable_nstart) | ( ( reg_controllable_hmaster0 & ~(reg_controllable_hmaster1) & ~(reg_controllable_hmaster2) ) ^~ ( controllable_hmaster0 & ~(controllable_hmaster1) & ~(controllable_hmaster2) )) );

// Master 2:
// G( X(start=0) -> ( ((hmaster0=0) * (hmaster1=1) * (hmaster2=0)) <-> (X(hmaster0=0) * X(hmaster1=1) * X(hmaster2=0)) ) );
assign sys_safe_err22 =  ~( ~(controllable_nstart) | ( ( ~(reg_controllable_hmaster0) & reg_controllable_hmaster1 & ~(reg_controllable_hmaster2) ) ^~ ( ~(controllable_hmaster0) & controllable_hmaster1 & ~(controllable_hmaster2) )) );

// Master 3:
// G( X(start=0) -> ( ((hmaster0=1) * (hmaster1=1) * (hmaster2=0)) <-> (X(hmaster0=1) * X(hmaster1=1) * X(hmaster2=0)) ) );
assign sys_safe_err23 =  ~( ~(controllable_nstart) | ( ( reg_controllable_hmaster0 & reg_controllable_hmaster1 & ~(reg_controllable_hmaster2) ) ^~ ( controllable_hmaster0 & controllable_hmaster1 & ~(controllable_hmaster2) )) );

// Master 4:
// G( X(start=0) -> ( ((hmaster0=0) * (hmaster1=0) * (hmaster2=1)) <-> (X(hmaster0=0) * X(hmaster1=0) * X(hmaster2=1)) ) );
assign sys_safe_err24 =  ~( ~(controllable_nstart) | ( ( ~(reg_controllable_hmaster0) & ~(reg_controllable_hmaster1) & reg_controllable_hmaster2 ) ^~ ( ~(controllable_hmaster0) & ~(controllable_hmaster1) & controllable_hmaster2 )) );

// Master 5:
// G( X(start=0) -> ( ((hmaster0=1) * (hmaster1=0) * (hmaster2=1)) <-> (X(hmaster0=1) * X(hmaster1=0) * X(hmaster2=1)) ) );
assign sys_safe_err25 =  ~( ~(controllable_nstart) | ( ( reg_controllable_hmaster0 & ~(reg_controllable_hmaster1) & reg_controllable_hmaster2 ) ^~ ( controllable_hmaster0 & ~(controllable_hmaster1) & controllable_hmaster2 )) );

// Master 6:
// G( X(start=0) -> ( ((hmaster0=0) * (hmaster1=1) * (hmaster2=1)) <-> (X(hmaster0=0) * X(hmaster1=1) * X(hmaster2=1)) ) );
assign sys_safe_err26 =  ~( ~(controllable_nstart) | ( ( ~(reg_controllable_hmaster0) & reg_controllable_hmaster1 & reg_controllable_hmaster2 ) ^~ ( ~(controllable_hmaster0) & controllable_hmaster1 & controllable_hmaster2 )) );

// Master 7:
// G( X(start=0) -> ( ((hmaster0=1) * (hmaster1=1) * (hmaster2=1)) <-> (X(hmaster0=1) * X(hmaster1=1) * X(hmaster2=1)) ) );
assign sys_safe_err27 =  ~( ~(controllable_nstart) | ( ( reg_controllable_hmaster0 & reg_controllable_hmaster1 & reg_controllable_hmaster2 ) ^~ ( controllable_hmaster0 & controllable_hmaster1 & controllable_hmaster2 )) );

// Guarantee 6.2:
// G( ((X(start=0))) -> ( (hmastlock=1) <-> X(hmastlock=1)) );
assign sys_safe_err28 =  ~( ~(controllable_nstart) | ( reg_controllable_hmastlock ^~ controllable_hmastlock) );

// G( (decide=1  *  hlock0=1  *  X(hgrant0=1) )->X(locked=1));
assign sys_safe_err29 =  ~( ~(~reg_controllable_ndecide & reg_i_hlock0 & ~controllable_nhgrant0) | (controllable_locked) );

// G((decide=1  *  hlock0=0  *  X(hgrant0=1))->X(locked=0));
assign sys_safe_err30 =  ~( ~(~reg_controllable_ndecide & ~reg_i_hlock0 & ~controllable_nhgrant0) | (~controllable_locked) );

// G( (decide=1  *  hlock1=1  *  X(hgrant1=1) )->X(locked=1));
assign sys_safe_err31 =  ~( ~(~reg_controllable_ndecide & reg_i_hlock1 & controllable_hgrant1) | (controllable_locked) );

// G((decide=1  *  hlock1=0  *  X(hgrant1=1))->X(locked=0));
assign sys_safe_err32 =  ~( ~(~reg_controllable_ndecide & ~reg_i_hlock1 & controllable_hgrant1) | (~controllable_locked) );

// G( (decide=1  *  hlock2=1  *  X(hgrant2=1) )->X(locked=1));
assign sys_safe_err33 =  ~( ~(~reg_controllable_ndecide & reg_i_hlock2 & controllable_hgrant2) | (controllable_locked) );

// G((decide=1  *  hlock2=0  *  X(hgrant2=1))->X(locked=0));
assign sys_safe_err34 =  ~( ~(~reg_controllable_ndecide & ~reg_i_hlock2 & controllable_hgrant2) | (~controllable_locked) );

// G( (decide=1  *  hlock3=1  *  X(hgrant3=1) )->X(locked=1));
assign sys_safe_err35 =  ~( ~(~reg_controllable_ndecide & reg_i_hlock3 & controllable_hgrant3) | (controllable_locked) );

// G((decide=1  *  hlock3=0  *  X(hgrant3=1))->X(locked=0));
assign sys_safe_err36 =  ~( ~(~reg_controllable_ndecide & ~reg_i_hlock3 & controllable_hgrant3) | (~controllable_locked) );

// G( (decide=1  *  hlock4=1  *  X(hgrant4=1) )->X(locked=1));
assign sys_safe_err37 =  ~( ~(~reg_controllable_ndecide & reg_i_hlock4 & controllable_hgrant4) | (controllable_locked) );

// G((decide=1  *  hlock4=0  *  X(hgrant4=1))->X(locked=0));
assign sys_safe_err38 =  ~( ~(~reg_controllable_ndecide & ~reg_i_hlock4 & controllable_hgrant4) | (~controllable_locked) );

// G( (decide=1  *  hlock5=1  *  X(hgrant5=1) )->X(locked=1));
assign sys_safe_err39 =  ~( ~(~reg_controllable_ndecide & reg_i_hlock5 & controllable_hgrant5) | (controllable_locked) );

// G((decide=1  *  hlock5=0  *  X(hgrant5=1))->X(locked=0));
assign sys_safe_err40 =  ~( ~(~reg_controllable_ndecide & ~reg_i_hlock5 & controllable_hgrant5) | (~controllable_locked) );

// G( (decide=1  *  hlock6=1  *  X(hgrant6=1) )->X(locked=1));
assign sys_safe_err41 =  ~( ~(~reg_controllable_ndecide & reg_i_hlock6 & controllable_hgrant6) | (controllable_locked) );

// G((decide=1  *  hlock6=0  *  X(hgrant6=1))->X(locked=0));
assign sys_safe_err42 =  ~( ~(~reg_controllable_ndecide & ~reg_i_hlock6 & controllable_hgrant6) | (~controllable_locked) );

// G( (decide=1  *  hlock7=1  *  X(hgrant7=1) )->X(locked=1));
assign sys_safe_err43 =  ~( ~(~reg_controllable_ndecide & reg_i_hlock7 & controllable_hgrant7) | (controllable_locked) );

// G((decide=1  *  hlock7=0  *  X(hgrant7=1))->X(locked=0));
assign sys_safe_err44 =  ~( ~(~reg_controllable_ndecide & ~reg_i_hlock7 & controllable_hgrant7) | (~controllable_locked) );

// G( (decide=0) -> (  ((hgrant0=0)<->X(hgrant0=0))  ));
assign sys_safe_err45 =  ~( ~(reg_controllable_ndecide) | (reg_controllable_nhgrant0 ^~ controllable_nhgrant0) );

// G( (decide=0) -> (  ((hgrant1=0)<->X(hgrant1=0))  ));
assign sys_safe_err46 =  ~( ~(reg_controllable_ndecide) | (~reg_controllable_hgrant1 ^~ ~controllable_hgrant1) );

// G( (decide=0) -> (  ((hgrant2=0)<->X(hgrant2=0))  ));
assign sys_safe_err47 =  ~( ~(reg_controllable_ndecide) | (~reg_controllable_hgrant2 ^~ ~controllable_hgrant2) );

// G( (decide=0) -> (  ((hgrant3=0)<->X(hgrant3=0))  ));
assign sys_safe_err48 =  ~( ~(reg_controllable_ndecide) | (~reg_controllable_hgrant3 ^~ ~controllable_hgrant3) );

// G( (decide=0) -> (  ((hgrant4=0)<->X(hgrant4=0))  ));
assign sys_safe_err49 =  ~( ~(reg_controllable_ndecide) | (~reg_controllable_hgrant4 ^~ ~controllable_hgrant4) );

// G( (decide=0) -> (  ((hgrant5=0)<->X(hgrant5=0))  ));
assign sys_safe_err50 =  ~( ~(reg_controllable_ndecide) | (~reg_controllable_hgrant5 ^~ ~controllable_hgrant5) );

// G( (decide=0) -> (  ((hgrant6=0)<->X(hgrant6=0))  ));
assign sys_safe_err51 =  ~( ~(reg_controllable_ndecide) | (~reg_controllable_hgrant6 ^~ ~controllable_hgrant6) );

// G( (decide=0) -> (  ((hgrant7=0)<->X(hgrant7=0))  ));
assign sys_safe_err52 =  ~( ~(reg_controllable_ndecide) | (~reg_controllable_hgrant7 ^~ ~controllable_hgrant7) );

// G((decide=0)->(locked=0 <-> X(locked=0)));
assign sys_safe_err53 =  ~( ~(reg_controllable_ndecide) | (~reg_controllable_locked ^~ ~controllable_locked) );

// G(((stateG10_1=1) * (((hgrant1=1)) * (hbusreq1=0)))->FALSE);
assign sys_safe_err54 =  ~( ~(reg_stateG10_1 & (controllable_hgrant1 & ~i_hbusreq1)) | 0 );

// G(((stateG10_2=1) * (((hgrant2=1)) * (hbusreq2=0)))->FALSE);
assign sys_safe_err55 =  ~( ~(reg_stateG10_2 & (controllable_hgrant2 & ~i_hbusreq2)) | 0 );

// G(((stateG10_3=1) * (((hgrant3=1)) * (hbusreq3=0)))->FALSE);
assign sys_safe_err56 =  ~( ~(reg_stateG10_3 & (controllable_hgrant3 & ~i_hbusreq3)) | 0 );

// G(((stateG10_4=1) * (((hgrant4=1)) * (hbusreq4=0)))->FALSE);
assign sys_safe_err57 =  ~( ~(reg_stateG10_4 & (controllable_hgrant4 & ~i_hbusreq4)) | 0 );

// G(((stateG10_5=1) * (((hgrant5=1)) * (hbusreq5=0)))->FALSE);
assign sys_safe_err58 =  ~( ~(reg_stateG10_5 & (controllable_hgrant5 & ~i_hbusreq5)) | 0 );

// G(((stateG10_6=1) * (((hgrant6=1)) * (hbusreq6=0)))->FALSE);
assign sys_safe_err59 =  ~( ~(reg_stateG10_6 & (controllable_hgrant6 & ~i_hbusreq6)) | 0 );

// G(((stateG10_7=1) * (((hgrant7=1)) * (hbusreq7=0)))->FALSE);
assign sys_safe_err60 =  ~( ~(reg_stateG10_7 & (controllable_hgrant7 & ~i_hbusreq7)) | 0 );

// default master
// G((decide=1  *  hbusreq0=0  *  hbusreq1=0  *  hbusreq2=0  *  hbusreq3=0  *  hbusreq4=0  *  hbusreq5=0  *  hbusreq6=0  *  hbusreq7=0) -> X(hgrant0=1));
assign sys_safe_err61 =  ~( ~(~reg_controllable_ndecide & (~reg_i_hbusreq0 & ~reg_i_hbusreq1 & ~reg_i_hbusreq2 & ~reg_i_hbusreq3 & ~reg_i_hbusreq4 & ~reg_i_hbusreq5 & ~reg_i_hbusreq6 & ~reg_i_hbusreq7)) | (~controllable_nhgrant0) );

// collecting together the safety error bits:
assign sys_safe_err = sys_safe_err0 |
                      sys_safe_err1 |
                      sys_safe_err2 |
                      sys_safe_err3 |
                      sys_safe_err4 |
                      sys_safe_err5 |
                      sys_safe_err6 |
                      sys_safe_err7 |
                      sys_safe_err8 |
                      sys_safe_err9 |
                      sys_safe_err10 |
                      sys_safe_err11 |
                      sys_safe_err12 |
                      sys_safe_err13 |
                      sys_safe_err14 |
                      sys_safe_err15 |
                      sys_safe_err16 |
                      sys_safe_err17 |
                      sys_safe_err18 |
                      sys_safe_err19 |
                      sys_safe_err20 |
                      sys_safe_err21 |
                      sys_safe_err22 |
                      sys_safe_err23 |
                      sys_safe_err24 |
                      sys_safe_err25 |
                      sys_safe_err26 |
                      sys_safe_err27 |
                      sys_safe_err28 |
                      sys_safe_err29 |
                      sys_safe_err30 |
                      sys_safe_err31 |
                      sys_safe_err32 |
                      sys_safe_err33 |
                      sys_safe_err34 |
                      sys_safe_err35 |
                      sys_safe_err36 |
                      sys_safe_err37 |
                      sys_safe_err38 |
                      sys_safe_err39 |
                      sys_safe_err40 |
                      sys_safe_err41 |
                      sys_safe_err42 |
                      sys_safe_err43 |
                      sys_safe_err44 |
                      sys_safe_err45 |
                      sys_safe_err46 |
                      sys_safe_err47 |
                      sys_safe_err48 |
                      sys_safe_err49 |
                      sys_safe_err50 |
                      sys_safe_err51 |
                      sys_safe_err52 |
                      sys_safe_err53 |
                      sys_safe_err54 |
                      sys_safe_err55 |
                      sys_safe_err56 |
                      sys_safe_err57 |
                      sys_safe_err58 |
                      sys_safe_err59 |
                      sys_safe_err60 |
                      sys_safe_err61;

// =============================================================
//                          ENV_FAIRNESS:
// =============================================================
// Assumption 1: 
// G(F(stateA1=0));
assign env_fair0 =  ~reg_stateA1;

// Assumption 2:
// G(F(hready=1));
assign env_fair1 =  i_hready;


// =============================================================
//                          SYS_FAIRNESS:
// =============================================================
// Guarantee 2:
// G(F(stateG2=0));
assign sys_fair0 = ~reg_stateG2;

// Guarantee 3:
// G(F((stateG3_0=0)  *  (stateG3_1=0)  *  (stateG3_2=0)));
assign sys_fair1 =  (~reg_stateG3_0 & ~reg_stateG3_1 & ~reg_stateG3_2);

// G(F(((hmaster0=0) * (hmaster1=0) * (hmaster2=0))  |  hbusreq0=0));
assign sys_fair2 =  ( ~(controllable_hmaster0) & ~(controllable_hmaster1) & ~(controllable_hmaster2) ) | ~i_hbusreq0;

// G(F(((hmaster0=1) * (hmaster1=0) * (hmaster2=0))  |  hbusreq1=0));
assign sys_fair3 =  ( controllable_hmaster0 & ~(controllable_hmaster1) & ~(controllable_hmaster2) ) | ~i_hbusreq1;

// G(F(((hmaster0=0) * (hmaster1=1) * (hmaster2=0))  |  hbusreq2=0));
assign sys_fair4 =  ( ~(controllable_hmaster0) & controllable_hmaster1 & ~(controllable_hmaster2) ) | ~i_hbusreq2;

// G(F(((hmaster0=1) * (hmaster1=1) * (hmaster2=0))  |  hbusreq3=0));
assign sys_fair5 =  ( controllable_hmaster0 & controllable_hmaster1 & ~(controllable_hmaster2) ) | ~i_hbusreq3;

// G(F(((hmaster0=0) * (hmaster1=0) * (hmaster2=1))  |  hbusreq4=0));
assign sys_fair6 =  ( ~(controllable_hmaster0) & ~(controllable_hmaster1) & controllable_hmaster2 ) | ~i_hbusreq4;

// G(F(((hmaster0=1) * (hmaster1=0) * (hmaster2=1))  |  hbusreq5=0));
assign sys_fair7 =  ( controllable_hmaster0 & ~(controllable_hmaster1) & controllable_hmaster2 ) | ~i_hbusreq5;

// G(F(((hmaster0=0) * (hmaster1=1) * (hmaster2=1))  |  hbusreq6=0));
assign sys_fair8 =  ( ~(controllable_hmaster0) & controllable_hmaster1 & controllable_hmaster2 ) | ~i_hbusreq6;

// G(F(((hmaster0=1) * (hmaster1=1) * (hmaster2=1))  |  hbusreq7=0));
assign sys_fair9 =  ( controllable_hmaster0 & controllable_hmaster1 & controllable_hmaster2 ) | ~i_hbusreq7;

assign fair_err = (fair_cnt >= 6'b101000);

// computing the error output bit:
assign o_err = ~env_safe_err & ~env_safe_err_happened & (sys_safe_err | fair_err);

initial
 begin
  reg_i_hready = 0;
  reg_i_hbusreq0 = 0;
  reg_i_hlock0 = 0;
  reg_i_hbusreq1 = 0;
  reg_i_hlock1 = 0;
  reg_i_hbusreq2 = 0;
  reg_i_hlock2 = 0;
  reg_i_hbusreq3 = 0;
  reg_i_hlock3 = 0;
  reg_i_hbusreq4 = 0;
  reg_i_hlock4 = 0;
  reg_i_hbusreq5 = 0;
  reg_i_hlock5 = 0;
  reg_i_hbusreq6 = 0;
  reg_i_hlock6 = 0;
  reg_i_hbusreq7 = 0;
  reg_i_hlock7 = 0;
  reg_controllable_hmaster0 = 0;
  reg_controllable_hmaster1 = 0;
  reg_controllable_hmaster2 = 0;
  reg_controllable_hmastlock = 0;
  reg_controllable_nstart = 0;
  reg_controllable_ndecide = 0;
  reg_controllable_locked = 0;
  reg_controllable_nhgrant0 = 0;
  reg_controllable_hgrant1 = 0;
  reg_controllable_hgrant2 = 0;
  reg_controllable_hgrant3 = 0;
  reg_controllable_hgrant4 = 0;
  reg_controllable_hgrant5 = 0;
  reg_controllable_hgrant6 = 0;
  reg_controllable_hgrant7 = 0;
  reg_controllable_busreq = 0;
  reg_stateA1 = 0;
  reg_stateG2 = 0;
  reg_stateG3_0 = 0;
  reg_stateG3_1 = 0;
  reg_stateG3_2 = 0;
  reg_stateG10_1 = 0;
  reg_stateG10_2 = 0;
  reg_stateG10_3 = 0;
  reg_stateG10_4 = 0;
  reg_stateG10_5 = 0;
  reg_stateG10_6 = 0;
  reg_stateG10_7 = 0;
  env_safe_err_happened = 0;
  next_env_fair = 0;
  fair_cnt = 0;
  next_sys_fair = 0;
 end


always @(posedge i_clk)
 begin
   // We remember if an environment error occurred:
   env_safe_err_happened = env_safe_err_happened | env_safe_err;

   // Updating the fairness counters: 
   if((next_sys_fair == 0) & sys_fair0)
    begin
      next_sys_fair = 1;
      next_env_fair = 0;
      fair_cnt = 0;
    end
   else if((next_sys_fair == 1) & sys_fair1)
    begin
      next_sys_fair = 2;
      next_env_fair = 0;
      fair_cnt = 0;
    end
   else if((next_sys_fair == 2) & sys_fair2)
    begin
      next_sys_fair = 3;
      next_env_fair = 0;
      fair_cnt = 0;
    end
   else if((next_sys_fair == 3) & sys_fair3)
    begin
      next_sys_fair = 4;
      next_env_fair = 0;
      fair_cnt = 0;
    end
   else if((next_sys_fair == 4) & sys_fair4)
    begin
      next_sys_fair = 5;
      next_env_fair = 0;
      fair_cnt = 0;
    end
   else if((next_sys_fair == 5) & sys_fair5)
    begin
      next_sys_fair = 6;
      next_env_fair = 0;
      fair_cnt = 0;
    end
   else if((next_sys_fair == 6) & sys_fair6)
    begin
      next_sys_fair = 7;
      next_env_fair = 0;
      fair_cnt = 0;
    end
   else if((next_sys_fair == 7) & sys_fair7)
    begin
      next_sys_fair = 8;
      next_env_fair = 0;
      fair_cnt = 0;
    end
   else if((next_sys_fair == 8) & sys_fair8)
    begin
      next_sys_fair = 9;
      next_env_fair = 0;
      fair_cnt = 0;
    end
   else if((next_sys_fair == 9) & sys_fair9)
    begin
      next_sys_fair = 0;
      next_env_fair = 0;
      fair_cnt = 0;
    end
   else if(~next_env_fair & env_fair0)
    begin
      next_env_fair = 1;
    end
   else if(next_env_fair & env_fair1)
    begin
      next_env_fair = 0;
      fair_cnt = fair_cnt + 1;
    end

   // Updating the automata: 
   // Automaton A1: 
   if(~reg_stateA1 & controllable_hmastlock & ~i_hburst0 & ~i_hburst1)
    begin
      reg_stateA1 = 1'b1;
    end
   else if(reg_stateA1 & ~controllable_busreq)
    begin
      reg_stateA1 = 1'b0;
    end

   // Automaton G2: 
   if(~reg_stateG2)
    begin
      if(controllable_hmastlock & ~controllable_nstart & ~i_hburst0 & ~i_hburst1)
       begin
         reg_stateG2 = 1'b1;
       end
    end
   else // if(reg_stateG2)
    begin
      if(~controllable_busreq)
       begin
         reg_stateG2 = 1'b0;
       end
    end

   // Automaton G3: 
   if(~reg_stateG3_0 & ~reg_stateG3_1 & ~reg_stateG3_2 & controllable_hmastlock & ~controllable_nstart &  ~i_hburst0 & i_hburst1 & ~i_hready)
    begin
      reg_stateG3_0 = 1'b1;
      reg_stateG3_1 = 1'b0;
      reg_stateG3_2 = 1'b0;
    end
   else if(~reg_stateG3_0 & ~reg_stateG3_1 & ~reg_stateG3_2 & controllable_hmastlock & ~controllable_nstart &  ~i_hburst0 & i_hburst1 & i_hready)
    begin
      reg_stateG3_0 = 1'b0;
      reg_stateG3_1 = 1'b1;
      reg_stateG3_2 = 1'b0;
    end
   else if(reg_stateG3_0 & ~reg_stateG3_1 & ~reg_stateG3_2 & i_hready)
    begin
      reg_stateG3_0 = 1'b0;
      reg_stateG3_1 = 1'b1;
      reg_stateG3_2 = 1'b0;
    end
   else if(~reg_stateG3_0 & reg_stateG3_1 & ~reg_stateG3_2 & i_hready)
    begin
      reg_stateG3_0 = 1'b1;
      reg_stateG3_1 = 1'b1;
      reg_stateG3_2 = 1'b0;
    end
   else if(reg_stateG3_0 & reg_stateG3_1 & ~reg_stateG3_2 & i_hready)
    begin
      reg_stateG3_0 = 1'b0;
      reg_stateG3_1 = 1'b0;
      reg_stateG3_2 = 1'b1;
    end
   else if(~reg_stateG3_0 & ~reg_stateG3_1 & reg_stateG3_2 & i_hready)
    begin
      reg_stateG3_0 = 1'b0;
      reg_stateG3_1 = 1'b0;
      reg_stateG3_2 = 1'b0;
    end

   // Automaton G10_1: 
   if(~reg_stateG10_1 & ~controllable_hgrant1 & ~i_hbusreq1)
    begin
      reg_stateG10_1 = 1'b1;
    end
   else if(reg_stateG10_1 & i_hbusreq1)
    begin
      reg_stateG10_1 = 1'b0;
    end

   // Automaton G10_2: 
   if(~reg_stateG10_2 & ~controllable_hgrant2 & ~i_hbusreq2)
    begin
      reg_stateG10_2 = 1'b1;
    end
   else if(reg_stateG10_2 & i_hbusreq2)
    begin
      reg_stateG10_2 = 1'b0;
    end

   // Automaton G10_3: 
   if(~reg_stateG10_3 & ~controllable_hgrant3 & ~i_hbusreq3)
    begin
      reg_stateG10_3 = 1'b1;
    end
   else if(reg_stateG10_3 & i_hbusreq3)
    begin
      reg_stateG10_3 = 1'b0;
    end

   // Automaton G10_4: 
   if(~reg_stateG10_4 & ~controllable_hgrant4 & ~i_hbusreq4)
    begin
      reg_stateG10_4 = 1'b1;
    end
   else if(reg_stateG10_4 & i_hbusreq4)
    begin
      reg_stateG10_4 = 1'b0;
    end

   // Automaton G10_5: 
   if(~reg_stateG10_5 & ~controllable_hgrant5 & ~i_hbusreq5)
    begin
      reg_stateG10_5 = 1'b1;
    end
   else if(reg_stateG10_5 & i_hbusreq5)
    begin
      reg_stateG10_5 = 1'b0;
    end

   // Automaton G10_6: 
   if(~reg_stateG10_6 & ~controllable_hgrant6 & ~i_hbusreq6)
    begin
      reg_stateG10_6 = 1'b1;
    end
   else if(reg_stateG10_6 & i_hbusreq6)
    begin
      reg_stateG10_6 = 1'b0;
    end

   // Automaton G10_7: 
   if(~reg_stateG10_7 & ~controllable_hgrant7 & ~i_hbusreq7)
    begin
      reg_stateG10_7 = 1'b1;
    end
   else if(reg_stateG10_7 & i_hbusreq7)
    begin
      reg_stateG10_7 = 1'b0;
    end

   // Latching the previous input:
   reg_i_hready =  i_hready;
   reg_i_hbusreq0 =  i_hbusreq0;
   reg_i_hlock0 =  i_hlock0;
   reg_i_hbusreq1 =  i_hbusreq1;
   reg_i_hlock1 =  i_hlock1;
   reg_i_hbusreq2 =  i_hbusreq2;
   reg_i_hlock2 =  i_hlock2;
   reg_i_hbusreq3 =  i_hbusreq3;
   reg_i_hlock3 =  i_hlock3;
   reg_i_hbusreq4 =  i_hbusreq4;
   reg_i_hlock4 =  i_hlock4;
   reg_i_hbusreq5 =  i_hbusreq5;
   reg_i_hlock5 =  i_hlock5;
   reg_i_hbusreq6 =  i_hbusreq6;
   reg_i_hlock6 =  i_hlock6;
   reg_i_hbusreq7 =  i_hbusreq7;
   reg_i_hlock7 =  i_hlock7;
   reg_controllable_hmaster0 =  controllable_hmaster0;
   reg_controllable_hmaster1 =  controllable_hmaster1;
   reg_controllable_hmaster2 =  controllable_hmaster2;
   reg_controllable_hmastlock =  controllable_hmastlock;
   reg_controllable_nstart =  controllable_nstart;
   reg_controllable_ndecide =  controllable_ndecide;
   reg_controllable_locked =  controllable_locked;
   reg_controllable_nhgrant0 =  controllable_nhgrant0;
   reg_controllable_hgrant1 =  controllable_hgrant1;
   reg_controllable_hgrant2 =  controllable_hgrant2;
   reg_controllable_hgrant3 =  controllable_hgrant3;
   reg_controllable_hgrant4 =  controllable_hgrant4;
   reg_controllable_hgrant5 =  controllable_hgrant5;
   reg_controllable_hgrant6 =  controllable_hgrant6;
   reg_controllable_hgrant7 =  controllable_hgrant7;
   reg_controllable_busreq =  controllable_busreq;

 end
endmodule

-------------------------------
