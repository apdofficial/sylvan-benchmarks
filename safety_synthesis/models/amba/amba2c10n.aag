aag 448 15 29 1 404
2
4
6
8
10
12
14
16
18
20
22
24
26
28
30
32 1
34 515
36 599
38 14
40 623
42 28
44 643
46 2
48 24
50 8
52 4
54 673
56 695
58 30
60 719
62 6
64 757
66 763
68 769
70 22
72 879
74 885
76 891
78 897
80 101
82 18
84 26
86 20
88 16
408
90 18 3
92 22 5
94 93 91
96 81 32
98 97 32
100 99 94
102 25 2
104 24 3
106 105 103
108 107 17
110 25 4
112 24 5
114 113 111
116 115 16
118 117 109
120 85 32
122 84 32
124 121 32
126 125 9
128 127 118
130 55 32
132 54 32
134 131 32
136 132 9
138 137 128
140 37 32
142 36 32
144 141 32
146 41 32
148 40 32
150 147 32
152 151 145
154 45 32
156 44 32
158 155 32
160 159 152
162 161 9
164 163 138
166 59 32
168 58 32
170 167 32
172 168 17
174 171 16
176 175 173
178 177 122
180 179 164
182 87 32
184 86 32
186 183 32
188 187 16
190 184 17
192 191 189
194 193 122
196 195 180
198 39 32
200 38 32
202 199 32
204 200 7
206 203 6
208 207 205
210 209 122
212 211 196
214 89 32
216 88 32
218 215 32
220 216 17
222 219 16
224 223 221
226 225 8
228 227 212
230 228 227
232 63 32
234 62 32
236 233 32
238 237 6
240 234 7
242 241 239
244 243 8
246 245 230
248 43 32
250 42 32
252 249 32
254 83 32
256 82 32
258 255 32
260 256 253
262 260 31
264 262 15
266 265 246
268 259 253
270 268 31
272 270 14
274 273 266
276 71 32
278 70 32
280 277 32
282 278 253
284 282 20
286 284 15
288 287 274
290 281 253
292 290 20
294 292 14
296 295 288
298 171 30
300 168 31
302 301 299
304 303 250
306 305 296
308 184 21
310 187 20
312 311 309
314 313 250
316 315 306
318 200 15
320 203 14
322 321 319
324 323 250
326 325 316
328 57 32
330 56 32
332 329 32
334 20 5
336 334 330
338 337 326
340 47 32
342 341 32
344 53 32
346 345 32
348 347 343
350 348 253
352 350 30
354 353 338
356 79 32
358 78 32
360 357 32
362 77 32
364 76 32
366 363 32
368 75 32
370 74 32
372 369 32
374 73 32
376 72 32
378 375 32
380 373 367
382 380 361
384 383 360
386 384 381
388 372 364
390 389 381
392 381 361
394 380 358
396 395 393
398 377 372
400 398 390
402 400 396
404 403 387
406 404 354
408 407 100
410 65 32
412 64 32
414 411 32
416 67 32
418 66 32
420 417 32
422 68 32
424 419 413
426 424 423
428 426 135
430 419 414
432 430 423
434 432 160
436 420 413
438 436 423
440 16 2
442 441 438
444 420 414
446 444 423
448 17 4
450 449 446
452 35 32
454 34 32
456 453 32
458 61 32
460 60 32
462 459 32
464 463 457
466 454 26
468 434 429
470 469 429
472 435 429
474 472 442
476 475 470
478 472 443
480 478 450
482 481 476
484 478 451
486 484 464
488 487 482
490 484 465
492 490 466
494 493 488
496 467 454
498 496 465
500 499 465
502 501 451
504 502 443
506 504 435
508 506 429
510 508 495
512 494 454
514 513 511
516 160 6
518 516 9
520 518 13
522 520 10
524 522 27
526 522 26
528 151 142
530 528 159
532 530 26
534 148 145
536 534 159
538 536 26
540 148 142
542 540 159
544 542 26
546 156 152
548 546 26
550 526 525
552 551 525
554 527 525
556 554 532
558 557 552
560 554 533
562 560 538
564 563 558
566 560 539
568 566 544
570 569 564
572 566 545
574 572 548
576 575 570
578 549 142
580 578 545
582 580 539
584 583 539
586 585 533
588 586 527
590 588 525
592 591 525
594 593 577
596 576 142
598 597 595
600 549 148
602 600 545
604 602 539
606 605 539
608 607 533
610 609 533
612 611 527
614 613 527
616 615 525
618 616 577
620 576 148
622 621 619
624 549 156
626 624 545
628 627 545
630 629 539
632 630 533
634 632 527
636 634 525
638 636 577
640 576 156
642 641 639
644 9 6
646 644 13
648 646 11
650 648 135
652 132 25
654 653 651
656 649 132
658 657 649
660 132 24
662 659 135
664 660 132
666 665 663
668 667 655
670 654 132
672 671 669
674 333 21
676 674 5
678 330 4
680 678 677
682 681 677
684 679 330
686 684 677
688 687 677
690 689 683
692 682 330
694 693 691
696 463 6
698 696 13
700 698 11
702 460 25
704 702 701
706 705 701
708 703 460
710 708 701
712 711 701
714 713 707
716 706 460
718 717 715
720 451 412
722 720 443
724 723 443
726 725 435
728 726 429
730 729 429
732 451 418
734 732 443
736 735 443
738 737 435
740 739 435
742 741 429
744 451 422
746 744 443
748 746 435
750 748 429
752 731 483
754 482 412
756 755 753
758 742 483
760 482 418
762 761 759
764 750 483
766 482 422
768 767 765
770 493 482
772 466 379
774 467 376
776 775 773
778 464 376
780 777 465
782 781 779
784 783 451
786 784 443
788 786 435
790 788 429
792 376 373
794 377 370
796 795 793
798 797 466
800 467 370
802 801 799
804 464 370
806 803 465
808 807 805
810 809 451
812 810 443
814 812 435
816 814 429
818 376 370
820 818 367
822 819 364
824 823 821
826 825 466
828 467 364
830 829 827
832 464 364
834 831 465
836 835 833
838 837 451
840 838 443
842 840 435
844 842 429
846 818 364
848 846 361
850 847 358
852 851 849
854 853 466
856 467 358
858 857 855
860 464 358
862 859 465
864 863 861
866 865 451
868 866 443
870 868 435
872 870 429
874 790 771
876 770 376
878 877 875
880 816 771
882 770 370
884 883 881
886 844 771
888 770 364
890 889 887
892 872 771
894 770 358
896 895 893
i0 i_hbusreq0
i1 i_hbusreq1
i2 controllable_hmastlock
i3 controllable_nstart
i4 i_hburst1
i5 i_hburst0
i6 controllable_locked
i7 controllable_hmaster0
i8 i_hlock0
i9 controllable_hgrant1
i10 i_hlock1
i11 controllable_busreq
i12 i_hready
i13 controllable_ndecide
i14 controllable_nhgrant0
l0 n33
l1 next_env_fair_out
l2 reg_stateG3_0_out
l3 reg_controllable_locked_out
l4 reg_stateG3_1_out
l5 reg_controllable_ndecide_out
l6 reg_stateG3_2_out
l7 reg_i_hbusreq0_out
l8 reg_controllable_busreq_out
l9 reg_controllable_nstart_out
l10 reg_i_hbusreq1_out
l11 reg_stateG2_out
l12 reg_stateG10_1_out
l13 reg_controllable_nhgrant0_out
l14 reg_stateA1_out
l15 reg_controllable_hmastlock_out
l16 next_sys_fair<0>_out
l17 next_sys_fair<1>_out
l18 next_sys_fair<2>_out
l19 reg_i_hlock1_out
l20 fair_cnt<0>_out
l21 fair_cnt<1>_out
l22 fair_cnt<2>_out
l23 fair_cnt<3>_out
l24 env_safe_err_happened_out
l25 reg_i_hlock0_out
l26 reg_i_hready_out
l27 reg_controllable_hgrant1_out
l28 reg_controllable_hmaster0_out
o0 o_err
c
amba_2_new_10
This file was written by ABC on Tue May  5 16:50:38 2015
For information about AIGER format, refer to http://fmv.jku.at/aiger
-------------------------------
This AIGER file has been created by the following sequence of commands:
> vl2mv amba2c10.v   ---gives--> amba2c10.mv
> abc -c "read_blif_mv amba2c10.mv; write_aiger -s amba2c10n.aig"   ---gives--> amba2c10n.aig
> aigtoaig amba2c10n.aig amba2c10n.aag   ---gives--> amba2c10n.aag (this file)
Content of amba2c10.v:
module amba_2_new_10(
        o_err,
        i_clk,
        i_hready,
        i_hbusreq0,
        i_hlock0,
        i_hbusreq1,
        i_hlock1,
        i_hburst0,
        i_hburst1,
        controllable_hmaster0,
        controllable_hmastlock,
        controllable_nstart,
        controllable_ndecide,
        controllable_locked,
        controllable_nhgrant0,
        controllable_hgrant1,
        controllable_busreq);

input i_clk;
input i_hready;
input i_hbusreq0;
input i_hlock0;
input i_hbusreq1;
input i_hlock1;
input i_hburst0;
input i_hburst1;
input controllable_hmaster0;
input controllable_hmastlock;
input controllable_nstart;
input controllable_ndecide;
input controllable_locked;
input controllable_nhgrant0;
input controllable_hgrant1;
input controllable_busreq;
output o_err;

reg reg_i_hready;
reg reg_i_hbusreq0;
reg reg_i_hlock0;
reg reg_i_hbusreq1;
reg reg_i_hlock1;
reg reg_controllable_hmaster0;
reg reg_controllable_hmastlock;
reg reg_controllable_nstart;
reg reg_controllable_ndecide;
reg reg_controllable_locked;
reg reg_controllable_nhgrant0;
reg reg_controllable_hgrant1;
reg reg_controllable_busreq;
reg reg_stateA1;
reg reg_stateG2;
reg reg_stateG3_0;
reg reg_stateG3_1;
reg reg_stateG3_2;
reg reg_stateG10_1;
reg env_safe_err_happened;
reg next_env_fair;
reg [3:0] fair_cnt;
reg [2:0] next_sys_fair;

wire env_safe_err0;
wire env_safe_err1;
wire env_safe_err;

wire sys_safe_err0;
wire sys_safe_err1;
wire sys_safe_err2;
wire sys_safe_err3;
wire sys_safe_err4;
wire sys_safe_err5;
wire sys_safe_err6;
wire sys_safe_err7;
wire sys_safe_err8;
wire sys_safe_err9;
wire sys_safe_err10;
wire sys_safe_err11;
wire sys_safe_err12;
wire sys_safe_err13;
wire sys_safe_err14;
wire sys_safe_err15;
wire sys_safe_err16;
wire sys_safe_err17;
wire sys_safe_err18;
wire sys_safe_err19;
wire sys_safe_err;

wire env_fair0;
wire env_fair1;

wire sys_fair0;
wire sys_fair1;
wire sys_fair2;
wire sys_fair3;
wire fair_err;
wire o_err;

// =============================================================
//                        ENV_TRANSITION:
// =============================================================
// Assumption 3:
// G( hlock0=1 -> hbusreq0=1 );
assign env_safe_err0 =  ~(~ i_hlock0 | i_hbusreq0);

// Assumption 3:
// G( hlock1=1 -> hbusreq1=1 );
assign env_safe_err1 =  ~(~ i_hlock1 | i_hbusreq1);

// collecting together the safety error bits:
assign env_safe_err = env_safe_err0 |
                      env_safe_err1;

// =============================================================
//                        SYS_TRANSITION:
// =============================================================
// G((hmaster0=0) -> (hbusreq0=0 <-> busreq=0));
assign sys_safe_err0 =  ~( ~( ~(controllable_hmaster0) )|(~i_hbusreq0 ^~ (~controllable_busreq)));

// G((hmaster0=1) -> (hbusreq1=0 <-> busreq=0));
assign sys_safe_err1 =  ~( ~( controllable_hmaster0 )|(~i_hbusreq1 ^~ (~controllable_busreq)));

// Guarantee 1:
// G((hready=0) -> X(start=0));
assign sys_safe_err2 =  ~( reg_i_hready | controllable_nstart );

// G(((stateG2=1) * (start=1)) -> FALSE;
assign sys_safe_err3 =  ~( ~(reg_stateG2 & ~controllable_nstart) | 0 );

// G(((stateG3_0=1) * (stateG3_1=0) * (stateG3_2=0) * ((start=1))) -> FALSE);
// G(((stateG3_0=0) * (stateG3_1=1) * (stateG3_2=0) * ((start=1))) -> FALSE);
// G(((stateG3_0=1) * (stateG3_1=1) * (stateG3_2=0) * ((start=1))) -> FALSE);
// G(((stateG3_0=0) * (stateG3_1=0) * (stateG3_2=1) * ((start=1))) -> FALSE);
// all these rules can be summarized as: only in state 000, start=1 is allowed:
assign sys_safe_err4 =  (reg_stateG3_0 | reg_stateG3_1 | reg_stateG3_2) & ~controllable_nstart;

// G( (hready=1) -> (   (hgrant0=1) <-> (X(hmaster0=0))  ) );
assign sys_safe_err5 =  ~( ~(reg_i_hready) | ( ~reg_controllable_nhgrant0 ^~ ( ~(controllable_hmaster0) ) ) );

// G( (hready=1) -> (   (hgrant1=1) <-> (X(hmaster0=1))  ) );
assign sys_safe_err6 =  ~( ~(reg_i_hready) | ( reg_controllable_hgrant1 ^~ ( controllable_hmaster0 ) ) );

// HMASTLOCK:
// G(  (hready=1) -> (locked=0 <-> X(hmastlock=0) ) );
assign sys_safe_err7 =  ~( ~(reg_i_hready) | (~reg_controllable_locked ^~ ~controllable_hmastlock) );

// Master 0:
// G( X(start=0) -> ( ((hmaster0=0)) <-> (X(hmaster0=0)) ) );
assign sys_safe_err8 =  ~( ~(controllable_nstart) | ( ( ~(reg_controllable_hmaster0) ) ^~ ( ~(controllable_hmaster0) )) );

// Master 1:
// G( X(start=0) -> ( ((hmaster0=1)) <-> (X(hmaster0=1)) ) );
assign sys_safe_err9 =  ~( ~(controllable_nstart) | ( ( reg_controllable_hmaster0 ) ^~ ( controllable_hmaster0 )) );

// Guarantee 6.2:
// G( ((X(start=0))) -> ( (hmastlock=1) <-> X(hmastlock=1)) );
assign sys_safe_err10 =  ~( ~(controllable_nstart) | ( reg_controllable_hmastlock ^~ controllable_hmastlock) );

// G( (decide=1  *  hlock0=1  *  X(hgrant0=1) )->X(locked=1));
assign sys_safe_err11 =  ~( ~(~reg_controllable_ndecide & reg_i_hlock0 & ~controllable_nhgrant0) | (controllable_locked) );

// G((decide=1  *  hlock0=0  *  X(hgrant0=1))->X(locked=0));
assign sys_safe_err12 =  ~( ~(~reg_controllable_ndecide & ~reg_i_hlock0 & ~controllable_nhgrant0) | (~controllable_locked) );

// G( (decide=1  *  hlock1=1  *  X(hgrant1=1) )->X(locked=1));
assign sys_safe_err13 =  ~( ~(~reg_controllable_ndecide & reg_i_hlock1 & controllable_hgrant1) | (controllable_locked) );

// G((decide=1  *  hlock1=0  *  X(hgrant1=1))->X(locked=0));
assign sys_safe_err14 =  ~( ~(~reg_controllable_ndecide & ~reg_i_hlock1 & controllable_hgrant1) | (~controllable_locked) );

// G( (decide=0) -> (  ((hgrant0=0)<->X(hgrant0=0))  ));
assign sys_safe_err15 =  ~( ~(reg_controllable_ndecide) | (reg_controllable_nhgrant0 ^~ controllable_nhgrant0) );

// G( (decide=0) -> (  ((hgrant1=0)<->X(hgrant1=0))  ));
assign sys_safe_err16 =  ~( ~(reg_controllable_ndecide) | (~reg_controllable_hgrant1 ^~ ~controllable_hgrant1) );

// G((decide=0)->(locked=0 <-> X(locked=0)));
assign sys_safe_err17 =  ~( ~(reg_controllable_ndecide) | (~reg_controllable_locked ^~ ~controllable_locked) );

// G(((stateG10_1=1) * (((hgrant1=1)) * (hbusreq1=0)))->FALSE);
assign sys_safe_err18 =  ~( ~(reg_stateG10_1 & (controllable_hgrant1 & ~i_hbusreq1)) | 0 );

// default master
// G((decide=1  *  hbusreq0=0  *  hbusreq1=0) -> X(hgrant0=1));
assign sys_safe_err19 =  ~( ~(~reg_controllable_ndecide & (~reg_i_hbusreq0 & ~reg_i_hbusreq1)) | (~controllable_nhgrant0) );

// collecting together the safety error bits:
assign sys_safe_err = sys_safe_err0 |
                      sys_safe_err1 |
                      sys_safe_err2 |
                      sys_safe_err3 |
                      sys_safe_err4 |
                      sys_safe_err5 |
                      sys_safe_err6 |
                      sys_safe_err7 |
                      sys_safe_err8 |
                      sys_safe_err9 |
                      sys_safe_err10 |
                      sys_safe_err11 |
                      sys_safe_err12 |
                      sys_safe_err13 |
                      sys_safe_err14 |
                      sys_safe_err15 |
                      sys_safe_err16 |
                      sys_safe_err17 |
                      sys_safe_err18 |
                      sys_safe_err19;

// =============================================================
//                          ENV_FAIRNESS:
// =============================================================
// Assumption 1: 
// G(F(stateA1=0));
assign env_fair0 =  ~reg_stateA1;

// Assumption 2:
// G(F(hready=1));
assign env_fair1 =  i_hready;


// =============================================================
//                          SYS_FAIRNESS:
// =============================================================
// Guarantee 2:
// G(F(stateG2=0));
assign sys_fair0 = ~reg_stateG2;

// Guarantee 3:
// G(F((stateG3_0=0)  *  (stateG3_1=0)  *  (stateG3_2=0)));
assign sys_fair1 =  (~reg_stateG3_0 & ~reg_stateG3_1 & ~reg_stateG3_2);

// G(F(((hmaster0=0))  |  hbusreq0=0));
assign sys_fair2 =  ( ~(controllable_hmaster0) ) | ~i_hbusreq0;

// G(F(((hmaster0=1))  |  hbusreq1=0));
assign sys_fair3 =  ( controllable_hmaster0 ) | ~i_hbusreq1;

assign fair_err = (fair_cnt >= 4'b1010);

// computing the error output bit:
assign o_err = ~env_safe_err & ~env_safe_err_happened & (sys_safe_err | fair_err);

initial
 begin
  reg_i_hready = 0;
  reg_i_hbusreq0 = 0;
  reg_i_hlock0 = 0;
  reg_i_hbusreq1 = 0;
  reg_i_hlock1 = 0;
  reg_controllable_hmaster0 = 0;
  reg_controllable_hmastlock = 0;
  reg_controllable_nstart = 0;
  reg_controllable_ndecide = 0;
  reg_controllable_locked = 0;
  reg_controllable_nhgrant0 = 0;
  reg_controllable_hgrant1 = 0;
  reg_controllable_busreq = 0;
  reg_stateA1 = 0;
  reg_stateG2 = 0;
  reg_stateG3_0 = 0;
  reg_stateG3_1 = 0;
  reg_stateG3_2 = 0;
  reg_stateG10_1 = 0;
  env_safe_err_happened = 0;
  next_env_fair = 0;
  fair_cnt = 0;
  next_sys_fair = 0;
 end


always @(posedge i_clk)
 begin
   // We remember if an environment error occurred:
   env_safe_err_happened = env_safe_err_happened | env_safe_err;

   // Updating the fairness counters: 
   if((next_sys_fair == 0) & sys_fair0)
    begin
      next_sys_fair = 1;
      next_env_fair = 0;
      fair_cnt = 0;
    end
   else if((next_sys_fair == 1) & sys_fair1)
    begin
      next_sys_fair = 2;
      next_env_fair = 0;
      fair_cnt = 0;
    end
   else if((next_sys_fair == 2) & sys_fair2)
    begin
      next_sys_fair = 3;
      next_env_fair = 0;
      fair_cnt = 0;
    end
   else if((next_sys_fair == 3) & sys_fair3)
    begin
      next_sys_fair = 0;
      next_env_fair = 0;
      fair_cnt = 0;
    end
   else if(~next_env_fair & env_fair0)
    begin
      next_env_fair = 1;
    end
   else if(next_env_fair & env_fair1)
    begin
      next_env_fair = 0;
      fair_cnt = fair_cnt + 1;
    end

   // Updating the automata: 
   // Automaton A1: 
   if(~reg_stateA1 & controllable_hmastlock & ~i_hburst0 & ~i_hburst1)
    begin
      reg_stateA1 = 1'b1;
    end
   else if(reg_stateA1 & ~controllable_busreq)
    begin
      reg_stateA1 = 1'b0;
    end

   // Automaton G2: 
   if(~reg_stateG2)
    begin
      if(controllable_hmastlock & ~controllable_nstart & ~i_hburst0 & ~i_hburst1)
       begin
         reg_stateG2 = 1'b1;
       end
    end
   else // if(reg_stateG2)
    begin
      if(~controllable_busreq)
       begin
         reg_stateG2 = 1'b0;
       end
    end

   // Automaton G3: 
   if(~reg_stateG3_0 & ~reg_stateG3_1 & ~reg_stateG3_2 & controllable_hmastlock & ~controllable_nstart &  ~i_hburst0 & i_hburst1 & ~i_hready)
    begin
      reg_stateG3_0 = 1'b1;
      reg_stateG3_1 = 1'b0;
      reg_stateG3_2 = 1'b0;
    end
   else if(~reg_stateG3_0 & ~reg_stateG3_1 & ~reg_stateG3_2 & controllable_hmastlock & ~controllable_nstart &  ~i_hburst0 & i_hburst1 & i_hready)
    begin
      reg_stateG3_0 = 1'b0;
      reg_stateG3_1 = 1'b1;
      reg_stateG3_2 = 1'b0;
    end
   else if(reg_stateG3_0 & ~reg_stateG3_1 & ~reg_stateG3_2 & i_hready)
    begin
      reg_stateG3_0 = 1'b0;
      reg_stateG3_1 = 1'b1;
      reg_stateG3_2 = 1'b0;
    end
   else if(~reg_stateG3_0 & reg_stateG3_1 & ~reg_stateG3_2 & i_hready)
    begin
      reg_stateG3_0 = 1'b1;
      reg_stateG3_1 = 1'b1;
      reg_stateG3_2 = 1'b0;
    end
   else if(reg_stateG3_0 & reg_stateG3_1 & ~reg_stateG3_2 & i_hready)
    begin
      reg_stateG3_0 = 1'b0;
      reg_stateG3_1 = 1'b0;
      reg_stateG3_2 = 1'b1;
    end
   else if(~reg_stateG3_0 & ~reg_stateG3_1 & reg_stateG3_2 & i_hready)
    begin
      reg_stateG3_0 = 1'b0;
      reg_stateG3_1 = 1'b0;
      reg_stateG3_2 = 1'b0;
    end

   // Automaton G10_1: 
   if(~reg_stateG10_1 & ~controllable_hgrant1 & ~i_hbusreq1)
    begin
      reg_stateG10_1 = 1'b1;
    end
   else if(reg_stateG10_1 & i_hbusreq1)
    begin
      reg_stateG10_1 = 1'b0;
    end

   // Latching the previous input:
   reg_i_hready =  i_hready;
   reg_i_hbusreq0 =  i_hbusreq0;
   reg_i_hlock0 =  i_hlock0;
   reg_i_hbusreq1 =  i_hbusreq1;
   reg_i_hlock1 =  i_hlock1;
   reg_controllable_hmaster0 =  controllable_hmaster0;
   reg_controllable_hmastlock =  controllable_hmastlock;
   reg_controllable_nstart =  controllable_nstart;
   reg_controllable_ndecide =  controllable_ndecide;
   reg_controllable_locked =  controllable_locked;
   reg_controllable_nhgrant0 =  controllable_nhgrant0;
   reg_controllable_hgrant1 =  controllable_hgrant1;
   reg_controllable_busreq =  controllable_busreq;

 end
endmodule

-------------------------------
#!SYNTCOMP
STATUS : realizable
SOLVED_BY : 3/3 [2015-pre-classification]
SOLVED_IN : 0.195175 [2015-pre-classification]
#.
