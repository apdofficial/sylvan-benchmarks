aag 1794 60 92 1 1642
2
4
6
8
10
12
14
16
18
20
22
24
26
28
30
32
34
36
38
40
42
44
46
48
50
52
54
56
58
60
62
64
66
68
70
72
74
76
78
80
82
84
86
88
90
92
94
96
98
100
102
104
106
108
110
112
114
116
118
120
122 1
124 72
126 18
128 104
130 102
132 68
134 20
136 108
138 98
140 64
142 22
144 94
146 58
148 24
150 90
152 86
154 26
156 116
158 28
160 2071
162 30
164 2093
166 32
168 2177
170 2199
172 2223
174 2245
176 2265
178 10
180 52
182 2295
184 2317
186 8
188 2939
190 2945
192 2951
194 2957
196 2963
198 2985
200 6
202 74
204 3007
206 4
208 3061
210 70
212 3091
214 3113
216 2
218 66
220 3135
222 120
224 60
226 3157
228 36
230 118
232 50
234 34
236 42
238 3179
240 80
242 114
244 48
246 3201
248 112
250 46
252 82
254 3223
256 110
258 44
260 54
262 84
264 3245
266 373
268 40
270 88
272 3267
274 38
276 92
278 78
280 14
282 96
284 76
286 3559
288 3565
290 3571
292 3577
294 3583
296 3589
298 12
300 16
302 100
304 106
2048
306 110 15
308 112 17
310 309 307
312 114 19
314 313 310
316 118 21
318 317 314
320 120 23
322 321 318
324 25 2
326 325 322
328 27 4
330 329 326
332 29 6
334 333 330
336 31 8
338 337 334
340 33 10
342 341 338
344 107 50
346 345 342
348 103 48
350 349 346
352 99 46
354 353 350
356 95 44
358 357 354
360 91 40
362 361 358
364 87 38
366 365 362
368 267 122
370 369 122
372 371 366
374 75 71
376 374 67
378 376 61
380 43 14
382 42 15
384 383 381
386 385 378
388 74 71
390 388 67
392 390 61
394 43 16
396 42 17
398 397 395
400 399 392
402 401 387
404 75 70
406 404 67
408 406 61
410 43 18
412 42 19
414 413 411
416 415 408
418 417 402
420 74 70
422 420 67
424 422 61
426 43 20
428 42 21
430 429 427
432 431 424
434 433 418
436 374 66
438 436 61
440 43 22
442 42 23
444 443 441
446 445 438
448 447 434
450 388 66
452 450 61
454 43 24
456 42 25
458 457 455
460 459 452
462 461 448
464 404 66
466 464 61
468 43 26
470 42 27
472 471 469
474 473 466
476 475 462
478 420 66
480 478 61
482 43 28
484 42 29
486 485 483
488 487 480
490 489 476
492 376 60
494 43 30
496 42 31
498 497 495
500 499 492
502 501 490
504 390 60
506 43 32
508 42 33
510 509 507
512 511 504
514 513 502
516 406 60
518 106 43
520 107 42
522 521 519
524 523 516
526 525 514
528 422 60
530 102 43
532 103 42
534 533 531
536 535 528
538 537 526
540 436 60
542 98 43
544 99 42
546 545 543
548 547 540
550 549 538
552 450 60
554 94 43
556 95 42
558 557 555
560 559 552
562 561 550
564 464 60
566 90 43
568 91 42
570 569 567
572 571 564
574 573 562
576 478 60
578 86 43
580 87 42
582 581 579
584 583 576
586 585 574
588 229 122
590 228 122
592 589 122
594 593 117
596 595 586
598 213 122
600 212 122
602 599 122
604 600 117
606 605 596
608 169 122
610 168 122
612 609 122
614 173 122
616 172 122
618 615 122
620 619 613
622 177 122
624 176 122
626 623 122
628 627 620
630 629 117
632 631 606
634 261 122
636 260 122
638 635 122
640 636 378
642 639 379
644 643 641
646 645 590
648 647 632
650 241 122
652 240 122
654 651 122
656 655 392
658 652 393
660 659 657
662 661 590
664 663 648
666 253 122
668 252 122
670 667 122
672 671 408
674 668 409
676 675 673
678 677 590
680 679 664
682 263 122
684 262 122
686 683 122
688 687 424
690 684 425
692 691 689
694 693 590
696 695 680
698 271 122
700 270 122
702 699 122
704 703 438
706 700 439
708 707 705
710 709 590
712 711 696
714 277 122
716 276 122
718 715 122
720 719 452
722 716 453
724 723 721
726 725 590
728 727 712
730 283 122
732 282 122
734 731 122
736 735 466
738 732 467
740 739 737
742 741 590
744 743 728
746 303 122
748 302 122
750 747 122
752 751 480
754 748 481
756 755 753
758 757 590
760 759 744
762 129 122
764 128 122
766 763 122
768 767 492
770 764 493
772 771 769
774 773 590
776 775 760
778 137 122
780 136 122
782 779 122
784 783 504
786 780 505
788 787 785
790 789 590
792 791 776
794 147 122
796 146 122
798 795 122
800 799 516
802 796 517
804 803 801
806 805 590
808 807 792
810 141 122
812 140 122
814 811 122
816 815 528
818 812 529
820 819 817
822 821 590
824 823 808
826 133 122
828 132 122
830 827 122
832 831 540
834 828 541
836 835 833
838 837 590
840 839 824
842 125 122
844 124 122
846 843 122
848 847 552
850 844 553
852 851 849
854 853 590
856 855 840
858 285 122
860 284 122
862 859 122
864 863 564
866 860 565
868 867 865
870 869 590
872 871 856
874 279 122
876 278 122
878 875 122
880 879 576
882 876 577
884 883 881
886 885 590
888 887 872
890 299 122
892 298 122
894 891 122
896 892 53
898 895 52
900 899 897
902 901 590
904 903 888
906 203 122
908 202 122
910 907 122
912 211 122
914 210 122
916 913 122
918 917 911
920 219 122
922 218 122
924 921 122
926 925 918
928 225 122
930 224 122
932 929 122
934 933 926
936 935 378
938 934 379
940 939 937
942 941 116
944 943 904
946 917 908
948 946 925
950 948 933
952 951 392
954 950 393
956 955 953
958 957 116
960 959 944
962 914 911
964 962 925
966 964 933
968 967 408
970 966 409
972 971 969
974 973 116
976 975 960
978 914 908
980 978 925
982 980 933
984 983 424
986 982 425
988 987 985
990 989 116
992 991 976
994 922 918
996 994 933
998 997 438
1000 996 439
1002 1001 999
1004 1003 116
1006 1005 992
1008 946 922
1010 1008 933
1012 1011 452
1014 1010 453
1016 1015 1013
1018 1017 116
1020 1019 1006
1022 962 922
1024 1022 933
1026 1025 466
1028 1024 467
1030 1029 1027
1032 1031 116
1034 1033 1020
1036 978 922
1038 1036 933
1040 1039 480
1042 1038 481
1044 1043 1041
1046 1045 116
1048 1047 1034
1050 930 926
1052 1051 492
1054 1050 493
1056 1055 1053
1058 1057 116
1060 1059 1048
1062 948 930
1064 1063 504
1066 1062 505
1068 1067 1065
1070 1069 116
1072 1071 1060
1074 964 930
1076 1075 516
1078 1074 517
1080 1079 1077
1082 1081 116
1084 1083 1072
1086 980 930
1088 1087 528
1090 1086 529
1092 1091 1089
1094 1093 116
1096 1095 1084
1098 994 930
1100 1099 540
1102 1098 541
1104 1103 1101
1106 1105 116
1108 1107 1096
1110 1008 930
1112 1111 552
1114 1110 553
1116 1115 1113
1118 1117 116
1120 1119 1108
1122 1022 930
1124 1123 564
1126 1122 565
1128 1127 1125
1130 1129 116
1132 1131 1120
1134 1036 930
1136 1135 576
1138 1134 577
1140 1139 1137
1142 1141 116
1144 1143 1132
1146 181 122
1148 180 122
1150 1147 122
1152 1151 52
1154 1148 53
1156 1155 1153
1158 1157 116
1160 1159 1144
1162 235 122
1164 234 122
1166 1163 122
1168 257 122
1170 256 122
1172 1169 122
1174 1170 1167
1176 1174 55
1178 1176 13
1180 1179 1160
1182 1173 1167
1184 1182 55
1186 1184 12
1188 1187 1180
1190 249 122
1192 248 122
1194 1191 122
1196 1192 1167
1198 1196 80
1200 1198 13
1202 1201 1188
1204 1195 1167
1206 1204 80
1208 1206 12
1210 1209 1202
1212 243 122
1214 242 122
1216 1213 122
1218 1214 1167
1220 1218 82
1222 1220 13
1224 1223 1210
1226 1217 1167
1228 1226 82
1230 1228 12
1232 1231 1224
1234 231 122
1236 230 122
1238 1235 122
1240 1236 1167
1242 1240 84
1244 1242 13
1246 1245 1232
1248 1239 1167
1250 1248 84
1252 1250 12
1254 1253 1246
1256 223 122
1258 222 122
1260 1257 122
1262 1258 1167
1264 1262 88
1266 1264 13
1268 1267 1254
1270 1261 1167
1272 1270 88
1274 1272 12
1276 1275 1268
1278 217 122
1280 216 122
1282 1279 122
1284 1280 1167
1286 1284 92
1288 1286 13
1290 1289 1276
1292 1283 1167
1294 1292 92
1296 1294 12
1298 1297 1290
1300 207 122
1302 206 122
1304 1301 122
1306 1302 1167
1308 1306 96
1310 1308 13
1312 1311 1298
1314 1305 1167
1316 1314 96
1318 1316 12
1320 1319 1312
1322 201 122
1324 200 122
1326 1323 122
1328 1324 1167
1330 1328 100
1332 1330 13
1334 1333 1320
1336 1327 1167
1338 1336 100
1340 1338 12
1342 1341 1334
1344 187 122
1346 186 122
1348 1345 122
1350 1346 1167
1352 1350 104
1354 1352 13
1356 1355 1342
1358 1349 1167
1360 1358 104
1362 1360 12
1364 1363 1356
1366 179 122
1368 178 122
1370 1367 122
1372 1368 1167
1374 1372 108
1376 1374 13
1378 1377 1364
1380 1371 1167
1382 1380 108
1384 1382 12
1386 1385 1378
1388 233 122
1390 232 122
1392 1389 122
1394 1390 1167
1396 1394 58
1398 1396 13
1400 1399 1386
1402 1393 1167
1404 1402 58
1406 1404 12
1408 1407 1400
1410 245 122
1412 244 122
1414 1411 122
1416 1412 1167
1418 1416 64
1420 1418 13
1422 1421 1408
1424 1415 1167
1426 1424 64
1428 1426 12
1430 1429 1422
1432 251 122
1434 250 122
1436 1433 122
1438 1434 1167
1440 1438 68
1442 1440 13
1444 1443 1430
1446 1437 1167
1448 1446 68
1450 1448 12
1452 1451 1444
1454 259 122
1456 258 122
1458 1455 122
1460 1456 1167
1462 1460 72
1464 1462 13
1466 1465 1452
1468 1459 1167
1470 1468 72
1472 1470 12
1474 1473 1466
1476 269 122
1478 268 122
1480 1477 122
1482 1478 1167
1484 1482 76
1486 1484 13
1488 1487 1474
1490 1481 1167
1492 1490 76
1494 1492 12
1496 1495 1488
1498 275 122
1500 274 122
1502 1499 122
1504 1500 1167
1506 1504 78
1508 1506 13
1510 1509 1496
1512 1503 1167
1514 1512 78
1516 1514 12
1518 1517 1510
1520 639 54
1522 636 55
1524 1523 1521
1526 1525 1164
1528 1527 1518
1530 652 81
1532 655 80
1534 1533 1531
1536 1535 1164
1538 1537 1528
1540 668 83
1542 671 82
1544 1543 1541
1546 1545 1164
1548 1547 1538
1550 684 85
1552 687 84
1554 1553 1551
1556 1555 1164
1558 1557 1548
1560 700 89
1562 703 88
1564 1563 1561
1566 1565 1164
1568 1567 1558
1570 716 93
1572 719 92
1574 1573 1571
1576 1575 1164
1578 1577 1568
1580 732 97
1582 735 96
1584 1583 1581
1586 1585 1164
1588 1587 1578
1590 748 101
1592 751 100
1594 1593 1591
1596 1595 1164
1598 1597 1588
1600 764 105
1602 767 104
1604 1603 1601
1606 1605 1164
1608 1607 1598
1610 780 109
1612 783 108
1614 1613 1611
1616 1615 1164
1618 1617 1608
1620 796 59
1622 799 58
1624 1623 1621
1626 1625 1164
1628 1627 1618
1630 812 65
1632 815 64
1634 1633 1631
1636 1635 1164
1638 1637 1628
1640 828 69
1642 831 68
1644 1643 1641
1646 1645 1164
1648 1647 1638
1650 844 73
1652 847 72
1654 1653 1651
1656 1655 1164
1658 1657 1648
1660 860 77
1662 863 76
1664 1663 1661
1666 1665 1164
1668 1667 1658
1670 876 79
1672 879 78
1674 1673 1671
1676 1675 1164
1678 1677 1668
1680 892 13
1682 895 12
1684 1683 1681
1686 1685 1164
1688 1687 1678
1690 205 122
1692 204 122
1694 1691 122
1696 80 17
1698 1696 1692
1700 1699 1688
1702 215 122
1704 214 122
1706 1703 122
1708 82 19
1710 1708 1704
1712 1711 1700
1714 221 122
1716 220 122
1718 1715 122
1720 84 21
1722 1720 1716
1724 1723 1712
1726 227 122
1728 226 122
1730 1727 122
1732 88 23
1734 1732 1728
1736 1735 1724
1738 239 122
1740 238 122
1742 1739 122
1744 92 25
1746 1744 1740
1748 1747 1736
1750 247 122
1752 246 122
1754 1751 122
1756 96 27
1758 1756 1752
1760 1759 1748
1762 255 122
1764 254 122
1766 1763 122
1768 100 29
1770 1768 1764
1772 1771 1760
1774 265 122
1776 264 122
1778 1775 122
1780 104 31
1782 1780 1776
1784 1783 1772
1786 273 122
1788 272 122
1790 1787 122
1792 108 33
1794 1792 1788
1796 1795 1784
1798 199 122
1800 198 122
1802 1799 122
1804 107 58
1806 1804 1800
1808 1807 1796
1810 185 122
1812 184 122
1814 1811 122
1816 103 64
1818 1816 1812
1820 1819 1808
1822 175 122
1824 174 122
1826 1823 122
1828 99 68
1830 1828 1824
1832 1831 1820
1834 171 122
1836 170 122
1838 1835 122
1840 95 72
1842 1840 1836
1844 1843 1832
1846 165 122
1848 164 122
1850 1847 122
1852 91 76
1854 1852 1848
1856 1855 1844
1858 161 122
1860 160 122
1862 1859 122
1864 87 78
1866 1864 1860
1868 1867 1856
1870 281 122
1872 1871 122
1874 301 122
1876 1875 122
1878 1877 1873
1880 127 122
1882 1881 122
1884 1883 1878
1886 135 122
1888 1887 122
1890 1889 1884
1892 143 122
1894 1893 122
1896 1895 1890
1898 149 122
1900 1899 122
1902 1901 1896
1904 155 122
1906 1905 122
1908 1907 1902
1910 159 122
1912 1911 122
1914 1913 1908
1916 163 122
1918 1917 122
1920 1919 1914
1922 167 122
1924 1923 122
1926 1925 1920
1928 305 122
1930 1929 122
1932 1931 1926
1934 131 122
1936 1935 122
1938 1937 1932
1940 139 122
1942 1941 122
1944 1943 1938
1946 145 122
1948 1947 122
1950 1949 1944
1952 151 122
1954 1953 122
1956 1955 1950
1958 153 122
1960 1959 122
1962 1961 1956
1964 1962 1167
1966 1964 54
1968 1967 1868
1970 197 122
1972 196 122
1974 1971 122
1976 195 122
1978 194 122
1980 1977 122
1982 193 122
1984 192 122
1986 1983 122
1988 191 122
1990 190 122
1992 1989 122
1994 189 122
1996 188 122
1998 1995 122
2000 1993 1987
2002 2001 1986
2004 2002 1992
2006 2005 1981
2008 2007 1980
2010 2008 2004
2012 2011 1975
2014 2013 1974
2016 2014 2010
2018 1992 1987
2020 1993 1984
2022 2021 2019
2024 2004 1981
2026 2005 1978
2028 2027 2025
2030 2010 1975
2032 2011 1972
2034 2033 2031
2036 1997 1992
2038 2036 2022
2040 2038 2028
2042 2040 2034
2044 2043 2017
2046 2044 1968
2048 2047 372
2050 1863 79
2052 2050 87
2054 1860 86
2056 2054 2053
2058 2057 2053
2060 2055 1860
2062 2060 2053
2064 2063 2053
2066 2065 2059
2068 2058 1860
2070 2069 2067
2072 1851 77
2074 2072 91
2076 1848 90
2078 2076 2075
2080 2079 2075
2082 2077 1848
2084 2082 2075
2086 2085 2075
2088 2087 2081
2090 2080 1848
2092 2091 2089
2094 628 52
2096 2094 117
2098 2096 63
2100 2098 56
2102 2100 37
2104 2100 36
2106 619 610
2108 2106 627
2110 2108 36
2112 616 613
2114 2112 627
2116 2114 36
2118 616 610
2120 2118 627
2122 2120 36
2124 624 620
2126 2124 36
2128 2104 2103
2130 2129 2103
2132 2105 2103
2134 2132 2110
2136 2135 2130
2138 2132 2111
2140 2138 2116
2142 2141 2136
2144 2138 2117
2146 2144 2122
2148 2147 2142
2150 2144 2123
2152 2150 2126
2154 2153 2148
2156 2127 610
2158 2156 2123
2160 2158 2117
2162 2161 2117
2164 2163 2111
2166 2164 2105
2168 2166 2103
2170 2169 2103
2172 2171 2155
2174 2154 610
2176 2175 2173
2178 1839 73
2180 2178 95
2182 1836 94
2184 2182 2181
2186 2185 2181
2188 2183 1836
2190 2188 2181
2192 2191 2181
2194 2193 2187
2196 2186 1836
2198 2197 2195
2200 2127 616
2202 2200 2123
2204 2202 2117
2206 2205 2117
2208 2207 2111
2210 2209 2111
2212 2211 2105
2214 2213 2105
2216 2215 2103
2218 2216 2155
2220 2154 616
2222 2221 2219
2224 1827 69
2226 2224 99
2228 1824 98
2230 2228 2227
2232 2231 2227
2234 2229 1824
2236 2234 2227
2238 2237 2227
2240 2239 2233
2242 2232 1824
2244 2243 2241
2246 2127 624
2248 2246 2123
2250 2249 2123
2252 2251 2117
2254 2252 2111
2256 2254 2105
2258 2256 2103
2260 2258 2155
2262 2154 624
2264 2263 2261
2266 183 122
2268 182 122
2270 2267 122
2272 2271 52
2274 2272 63
2276 2274 57
2278 2268 43
2280 2278 2277
2282 2281 2277
2284 2279 2268
2286 2284 2277
2288 2287 2277
2290 2289 2283
2292 2282 2268
2294 2293 2291
2296 1815 65
2298 2296 103
2300 1812 102
2302 2300 2299
2304 2303 2299
2306 2301 1812
2308 2306 2299
2310 2309 2299
2312 2311 2305
2314 2304 1812
2316 2315 2313
2318 287 122
2320 286 122
2322 2319 122
2324 289 122
2326 288 122
2328 2325 122
2330 291 122
2332 290 122
2334 2331 122
2336 293 122
2338 292 122
2340 2337 122
2342 295 122
2344 294 122
2346 2343 122
2348 296 122
2350 2327 2321
2352 2350 2333
2354 2352 2339
2356 2354 2345
2358 2356 2349
2360 2358 603
2362 2327 2322
2364 2362 2333
2366 2364 2339
2368 2366 2345
2370 2368 2349
2372 2370 628
2374 2328 2321
2376 2374 2333
2378 2376 2339
2380 2378 2345
2382 2380 2349
2384 379 14
2386 2385 2382
2388 2328 2322
2390 2388 2333
2392 2390 2339
2394 2392 2345
2396 2394 2349
2398 393 16
2400 2399 2396
2402 2350 2334
2404 2402 2339
2406 2404 2345
2408 2406 2349
2410 409 18
2412 2411 2408
2414 2362 2334
2416 2414 2339
2418 2416 2345
2420 2418 2349
2422 425 20
2424 2423 2420
2426 2374 2334
2428 2426 2339
2430 2428 2345
2432 2430 2349
2434 439 22
2436 2435 2432
2438 2388 2334
2440 2438 2339
2442 2440 2345
2444 2442 2349
2446 453 24
2448 2447 2444
2450 2352 2340
2452 2450 2345
2454 2452 2349
2456 467 26
2458 2457 2454
2460 2364 2340
2462 2460 2345
2464 2462 2349
2466 481 28
2468 2467 2464
2470 2376 2340
2472 2470 2345
2474 2472 2349
2476 493 30
2478 2477 2474
2480 2390 2340
2482 2480 2345
2484 2482 2349
2486 505 32
2488 2487 2484
2490 2402 2340
2492 2490 2345
2494 2492 2349
2496 517 106
2498 2497 2494
2500 2414 2340
2502 2500 2345
2504 2502 2349
2506 529 102
2508 2507 2504
2510 2426 2340
2512 2510 2345
2514 2512 2349
2516 541 98
2518 2517 2514
2520 2438 2340
2522 2520 2345
2524 2522 2349
2526 553 94
2528 2527 2524
2530 2354 2346
2532 2530 2349
2534 565 90
2536 2535 2532
2538 2366 2346
2540 2538 2349
2542 577 86
2544 2543 2540
2546 209 122
2548 208 122
2550 2547 122
2552 2551 2271
2554 2548 36
2556 2372 2361
2558 2557 2361
2560 2373 2361
2562 2560 2386
2564 2563 2558
2566 2560 2387
2568 2566 2400
2570 2569 2564
2572 2566 2401
2574 2572 2412
2576 2575 2570
2578 2572 2413
2580 2578 2424
2582 2581 2576
2584 2578 2425
2586 2584 2436
2588 2587 2582
2590 2584 2437
2592 2590 2448
2594 2593 2588
2596 2590 2449
2598 2596 2458
2600 2599 2594
2602 2596 2459
2604 2602 2468
2606 2605 2600
2608 2602 2469
2610 2608 2478
2612 2611 2606
2614 2608 2479
2616 2614 2488
2618 2617 2612
2620 2614 2489
2622 2620 2498
2624 2623 2618
2626 2620 2499
2628 2626 2508
2630 2629 2624
2632 2626 2509
2634 2632 2518
2636 2635 2630
2638 2632 2519
2640 2638 2528
2642 2641 2636
2644 2638 2529
2646 2644 2536
2648 2647 2642
2650 2644 2537
2652 2650 2544
2654 2653 2648
2656 2650 2545
2658 2656 2553
2660 2658 2554
2662 2661 2654
2664 2554 1999
2666 2555 1996
2668 2667 2665
2670 2552 1996
2672 2669 2553
2674 2673 2671
2676 2675 2545
2678 2676 2537
2680 2678 2529
2682 2680 2519
2684 2682 2509
2686 2684 2499
2688 2686 2489
2690 2688 2479
2692 2690 2469
2694 2692 2459
2696 2694 2449
2698 2696 2437
2700 2698 2425
2702 2700 2413
2704 2702 2401
2706 2704 2387
2708 2706 2373
2710 2708 2361
2712 1996 1993
2714 1997 1990
2716 2715 2713
2718 2717 2554
2720 2555 1990
2722 2721 2719
2724 2552 1990
2726 2723 2553
2728 2727 2725
2730 2729 2545
2732 2730 2537
2734 2732 2529
2736 2734 2519
2738 2736 2509
2740 2738 2499
2742 2740 2489
2744 2742 2479
2746 2744 2469
2748 2746 2459
2750 2748 2449
2752 2750 2437
2754 2752 2425
2756 2754 2413
2758 2756 2401
2760 2758 2387
2762 2760 2373
2764 2762 2361
2766 1996 1990
2768 2766 1987
2770 2767 1984
2772 2771 2769
2774 2773 2554
2776 2555 1984
2778 2777 2775
2780 2552 1984
2782 2779 2553
2784 2783 2781
2786 2785 2545
2788 2786 2537
2790 2788 2529
2792 2790 2519
2794 2792 2509
2796 2794 2499
2798 2796 2489
2800 2798 2479
2802 2800 2469
2804 2802 2459
2806 2804 2449
2808 2806 2437
2810 2808 2425
2812 2810 2413
2814 2812 2401
2816 2814 2387
2818 2816 2373
2820 2818 2361
2822 2766 1984
2824 2822 1981
2826 2823 1978
2828 2827 2825
2830 2829 2554
2832 2555 1978
2834 2833 2831
2836 2552 1978
2838 2835 2553
2840 2839 2837
2842 2841 2545
2844 2842 2537
2846 2844 2529
2848 2846 2519
2850 2848 2509
2852 2850 2499
2854 2852 2489
2856 2854 2479
2858 2856 2469
2860 2858 2459
2862 2860 2449
2864 2862 2437
2866 2864 2425
2868 2866 2413
2870 2868 2401
2872 2870 2387
2874 2872 2373
2876 2874 2361
2878 2822 1978
2880 2878 1975
2882 2879 1972
2884 2883 2881
2886 2885 2554
2888 2555 1972
2890 2889 2887
2892 2552 1972
2894 2891 2553
2896 2895 2893
2898 2897 2545
2900 2898 2537
2902 2900 2529
2904 2902 2519
2906 2904 2509
2908 2906 2499
2910 2908 2489
2912 2910 2479
2914 2912 2469
2916 2914 2459
2918 2916 2449
2920 2918 2437
2922 2920 2425
2924 2922 2413
2926 2924 2401
2928 2926 2387
2930 2928 2373
2932 2930 2361
2934 2710 2663
2936 2662 1996
2938 2937 2935
2940 2764 2663
2942 2662 1990
2944 2943 2941
2946 2820 2663
2948 2662 1984
2950 2949 2947
2952 2876 2663
2954 2662 1978
2956 2955 2953
2958 2932 2663
2960 2662 1972
2962 2961 2959
2964 1803 59
2966 2964 107
2968 1800 106
2970 2968 2967
2972 2971 2967
2974 2969 1800
2976 2974 2967
2978 2977 2967
2980 2979 2973
2982 2972 1800
2984 2983 2981
2986 1695 81
2988 2986 17
2990 1692 16
2992 2990 2989
2994 2993 2989
2996 2991 1692
2998 2996 2989
3000 2999 2989
3002 3001 2995
3004 2994 1692
3006 3005 3003
3008 2656 2552
3010 3009 2654
3012 3010 2661
3014 2555 2548
3016 3014 2553
3018 3017 2553
3020 3019 2545
3022 3020 2537
3024 3022 2529
3026 3024 2519
3028 3026 2509
3030 3028 2499
3032 3030 2489
3034 3032 2479
3036 3034 2469
3038 3036 2459
3040 3038 2449
3042 3040 2437
3044 3042 2425
3046 3044 2413
3048 3046 2401
3050 3048 2387
3052 3050 2373
3054 3052 2361
3056 3054 3013
3058 3012 2548
3060 3059 3057
3062 117 52
3064 3062 63
3066 3064 57
3068 3066 603
3070 600 43
3072 3071 3069
3074 3067 600
3076 3075 3067
3078 600 42
3080 3077 603
3082 3078 600
3084 3083 3081
3086 3085 3073
3088 3072 600
3090 3089 3087
3092 1707 83
3094 3092 19
3096 1704 18
3098 3096 3095
3100 3099 3095
3102 3097 1704
3104 3102 3095
3106 3105 3095
3108 3107 3101
3110 3100 1704
3112 3111 3109
3114 1719 85
3116 3114 21
3118 1716 20
3120 3118 3117
3122 3121 3117
3124 3119 1716
3126 3124 3117
3128 3127 3117
3130 3129 3123
3132 3122 1716
3134 3133 3131
3136 1731 89
3138 3136 23
3140 1728 22
3142 3140 3139
3144 3143 3139
3146 3141 1728
3148 3146 3139
3150 3149 3139
3152 3151 3145
3154 3144 1728
3156 3155 3153
3158 1743 93
3160 3158 25
3162 1740 24
3164 3162 3161
3166 3165 3161
3168 3163 1740
3170 3168 3161
3172 3171 3161
3174 3173 3167
3176 3166 1740
3178 3177 3175
3180 1755 97
3182 3180 27
3184 1752 26
3186 3184 3183
3188 3187 3183
3190 3185 1752
3192 3190 3183
3194 3193 3183
3196 3195 3189
3198 3188 1752
3200 3199 3197
3202 1767 101
3204 3202 29
3206 1764 28
3208 3206 3205
3210 3209 3205
3212 3207 1764
3214 3212 3205
3216 3215 3205
3218 3217 3211
3220 3210 1764
3222 3221 3219
3224 1779 105
3226 3224 31
3228 1776 30
3230 3228 3227
3232 3231 3227
3234 3229 1776
3236 3234 3227
3238 3237 3227
3240 3239 3233
3242 3232 1776
3244 3243 3241
3246 1791 109
3248 3246 33
3250 1788 32
3252 3250 3249
3254 3253 3249
3256 3251 1788
3258 3256 3249
3260 3259 3249
3262 3261 3255
3264 3254 1788
3266 3265 3263
3268 2545 2320
3270 3268 2537
3272 3271 2537
3274 3273 2529
3276 3274 2519
3278 3277 2519
3280 3279 2509
3282 3280 2499
3284 3283 2499
3286 3285 2489
3288 3286 2479
3290 3289 2479
3292 3291 2469
3294 3292 2459
3296 3295 2459
3298 3297 2449
3300 3298 2437
3302 3301 2437
3304 3303 2425
3306 3304 2413
3308 3307 2413
3310 3309 2401
3312 3310 2387
3314 3313 2387
3316 3315 2373
3318 3316 2361
3320 3319 2361
3322 2545 2326
3324 3322 2537
3326 3324 2529
3328 3326 2519
3330 3329 2519
3332 3331 2509
3334 3333 2509
3336 3335 2499
3338 3336 2489
3340 3338 2479
3342 3341 2479
3344 3343 2469
3346 3345 2469
3348 3347 2459
3350 3348 2449
3352 3350 2437
3354 3353 2437
3356 3355 2425
3358 3357 2425
3360 3359 2413
3362 3360 2401
3364 3362 2387
3366 3365 2387
3368 3367 2373
3370 3369 2373
3372 3371 2361
3374 2545 2332
3376 3374 2537
3378 3376 2529
3380 3378 2519
3382 3381 2519
3384 3383 2509
3386 3385 2509
3388 3387 2499
3390 3389 2499
3392 3391 2489
3394 3393 2489
3396 3395 2479
3398 3396 2469
3400 3398 2459
3402 3400 2449
3404 3402 2437
3406 3405 2437
3408 3407 2425
3410 3409 2425
3412 3411 2413
3414 3413 2413
3416 3415 2401
3418 3417 2401
3420 3419 2387
3422 3420 2373
3424 3422 2361
3426 2545 2338
3428 3426 2537
3430 3428 2529
3432 3430 2519
3434 3433 2519
3436 3435 2509
3438 3437 2509
3440 3439 2499
3442 3441 2499
3444 3443 2489
3446 3445 2489
3448 3447 2479
3450 3449 2479
3452 3451 2469
3454 3453 2469
3456 3455 2459
3458 3457 2459
3460 3459 2449
3462 3461 2449
3464 3463 2437
3466 3464 2425
3468 3466 2413
3470 3468 2401
3472 3470 2387
3474 3472 2373
3476 3474 2361
3478 2545 2344
3480 3478 2537
3482 3481 2537
3484 3483 2529
3486 3485 2529
3488 3487 2519
3490 3488 2509
3492 3490 2499
3494 3492 2489
3496 3494 2479
3498 3496 2469
3500 3498 2459
3502 3500 2449
3504 3502 2437
3506 3504 2425
3508 3506 2413
3510 3508 2401
3512 3510 2387
3514 3512 2373
3516 3514 2361
3518 2545 2348
3520 3518 2537
3522 3520 2529
3524 3522 2519
3526 3524 2509
3528 3526 2499
3530 3528 2489
3532 3530 2479
3534 3532 2469
3536 3534 2459
3538 3536 2449
3540 3538 2437
3542 3540 2425
3544 3542 2413
3546 3544 2401
3548 3546 2387
3550 3548 2373
3552 3550 2361
3554 3321 2655
3556 2654 2320
3558 3557 3555
3560 3372 2655
3562 2654 2326
3564 3563 3561
3566 3424 2655
3568 2654 2332
3570 3569 3567
3572 3476 2655
3574 2654 2338
3576 3575 3573
3578 3516 2655
3580 2654 2344
3582 3581 3579
3584 3552 2655
3586 2654 2348
3588 3587 3585
i0 i_hlock5
i1 i_hlock6
i2 i_hlock7
i3 i_hlock8
i4 i_hlock9
i5 controllable_locked
i6 i_hbusreq0
i7 i_hbusreq1
i8 i_hbusreq2
i9 i_hbusreq3
i10 i_hbusreq4
i11 i_hbusreq5
i12 i_hbusreq6
i13 i_hbusreq7
i14 i_hbusreq8
i15 i_hbusreq9
i16 controllable_ndecide
i17 i_hready
i18 i_hlock15
i19 i_hlock14
i20 controllable_busreq
i21 i_hlock13
i22 i_hlock12
i23 i_hlock11
i24 i_hlock10
i25 controllable_hmastlock
i26 controllable_nhgrant0
i27 i_hburst1
i28 controllable_hgrant10
i29 controllable_hmaster3
i30 i_hburst0
i31 controllable_hgrant11
i32 controllable_hmaster2
i33 controllable_hgrant12
i34 controllable_hmaster1
i35 controllable_hgrant13
i36 controllable_hmaster0
i37 controllable_hgrant14
i38 controllable_hgrant15
i39 controllable_hgrant1
i40 controllable_hgrant2
i41 controllable_hgrant3
i42 i_hbusreq15
i43 controllable_hgrant4
i44 i_hbusreq14
i45 controllable_hgrant5
i46 i_hbusreq13
i47 controllable_hgrant6
i48 i_hbusreq12
i49 controllable_hgrant7
i50 i_hbusreq11
i51 controllable_hgrant8
i52 i_hbusreq10
i53 controllable_hgrant9
i54 i_hlock0
i55 i_hlock1
i56 i_hlock2
i57 controllable_nstart
i58 i_hlock3
i59 i_hlock4
l0 n123
l1 reg_controllable_hgrant13_out
l2 reg_i_hbusreq2_out
l3 reg_controllable_hgrant8_out
l4 reg_i_hbusreq11_out
l5 reg_controllable_hgrant12_out
l6 reg_i_hbusreq3_out
l7 reg_controllable_hgrant9_out
l8 reg_i_hbusreq12_out
l9 reg_controllable_hgrant11_out
l10 reg_i_hbusreq4_out
l11 reg_i_hbusreq13_out
l12 reg_controllable_hgrant10_out
l13 reg_i_hbusreq5_out
l14 reg_i_hbusreq14_out
l15 reg_i_hbusreq15_out
l16 reg_i_hbusreq6_out
l17 reg_controllable_nstart_out
l18 reg_i_hbusreq7_out
l19 reg_stateG10_15_out
l20 reg_i_hbusreq8_out
l21 reg_stateG10_14_out
l22 reg_i_hbusreq9_out
l23 reg_stateG3_0_out
l24 reg_stateG10_13_out
l25 reg_stateG3_1_out
l26 reg_stateG10_12_out
l27 reg_stateG3_2_out
l28 reg_i_hlock9_out
l29 reg_controllable_hmastlock_out
l30 reg_stateA1_out
l31 reg_stateG10_11_out
l32 reg_i_hlock8_out
l33 fair_cnt<0>_out
l34 fair_cnt<1>_out
l35 fair_cnt<2>_out
l36 fair_cnt<3>_out
l37 fair_cnt<4>_out
l38 reg_stateG10_10_out
l39 reg_i_hlock7_out
l40 reg_controllable_hmaster0_out
l41 reg_stateG10_1_out
l42 reg_i_hlock6_out
l43 next_env_fair_out
l44 reg_controllable_hmaster1_out
l45 reg_stateG2_out
l46 reg_stateG10_2_out
l47 reg_i_hlock5_out
l48 reg_controllable_hmaster2_out
l49 reg_stateG10_3_out
l50 reg_i_hlock4_out
l51 reg_controllable_hmaster3_out
l52 reg_stateG10_4_out
l53 reg_i_hready_out
l54 reg_i_hlock3_out
l55 reg_i_hlock10_out
l56 reg_controllable_ndecide_out
l57 reg_controllable_busreq_out
l58 reg_stateG10_5_out
l59 reg_controllable_hgrant1_out
l60 reg_i_hlock2_out
l61 reg_i_hlock11_out
l62 reg_stateG10_6_out
l63 reg_i_hlock1_out
l64 reg_i_hlock12_out
l65 reg_controllable_hgrant2_out
l66 reg_stateG10_7_out
l67 reg_i_hlock0_out
l68 reg_i_hlock13_out
l69 reg_controllable_nhgrant0_out
l70 reg_controllable_hgrant3_out
l71 reg_stateG10_8_out
l72 env_safe_err_happened_out
l73 reg_i_hlock14_out
l74 reg_controllable_hgrant4_out
l75 reg_stateG10_9_out
l76 reg_i_hlock15_out
l77 reg_controllable_hgrant5_out
l78 reg_controllable_hgrant15_out
l79 reg_i_hbusreq0_out
l80 reg_controllable_hgrant6_out
l81 reg_controllable_hgrant14_out
l82 next_sys_fair<0>_out
l83 next_sys_fair<1>_out
l84 next_sys_fair<2>_out
l85 next_sys_fair<3>_out
l86 next_sys_fair<4>_out
l87 next_sys_fair<5>_out
l88 reg_controllable_locked_out
l89 reg_i_hbusreq1_out
l90 reg_controllable_hgrant7_out
l91 reg_i_hbusreq10_out
o0 o_err
c
amba_16_new_30
This file was written by ABC on Tue May  5 17:01:53 2015
For information about AIGER format, refer to http://fmv.jku.at/aiger
-------------------------------
This AIGER file has been created by the following sequence of commands:
> vl2mv amba16c30.v   ---gives--> amba16c30.mv
> abc -c "read_blif_mv amba16c30.mv; write_aiger -s amba16c30n.aig"   ---gives--> amba16c30n.aig
> aigtoaig amba16c30n.aig amba16c30n.aag   ---gives--> amba16c30n.aag (this file)
Content of amba16c30.v:
module amba_16_new_30(
        o_err,
        i_clk,
        i_hready,
        i_hbusreq0,
        i_hlock0,
        i_hbusreq1,
        i_hlock1,
        i_hbusreq2,
        i_hlock2,
        i_hbusreq3,
        i_hlock3,
        i_hbusreq4,
        i_hlock4,
        i_hbusreq5,
        i_hlock5,
        i_hbusreq6,
        i_hlock6,
        i_hbusreq7,
        i_hlock7,
        i_hbusreq8,
        i_hlock8,
        i_hbusreq9,
        i_hlock9,
        i_hbusreq10,
        i_hlock10,
        i_hbusreq11,
        i_hlock11,
        i_hbusreq12,
        i_hlock12,
        i_hbusreq13,
        i_hlock13,
        i_hbusreq14,
        i_hlock14,
        i_hbusreq15,
        i_hlock15,
        i_hburst0,
        i_hburst1,
        controllable_hmaster0,
        controllable_hmaster1,
        controllable_hmaster2,
        controllable_hmaster3,
        controllable_hmastlock,
        controllable_nstart,
        controllable_ndecide,
        controllable_locked,
        controllable_nhgrant0,
        controllable_hgrant1,
        controllable_hgrant2,
        controllable_hgrant3,
        controllable_hgrant4,
        controllable_hgrant5,
        controllable_hgrant6,
        controllable_hgrant7,
        controllable_hgrant8,
        controllable_hgrant9,
        controllable_hgrant10,
        controllable_hgrant11,
        controllable_hgrant12,
        controllable_hgrant13,
        controllable_hgrant14,
        controllable_hgrant15,
        controllable_busreq);

input i_clk;
input i_hready;
input i_hbusreq0;
input i_hlock0;
input i_hbusreq1;
input i_hlock1;
input i_hbusreq2;
input i_hlock2;
input i_hbusreq3;
input i_hlock3;
input i_hbusreq4;
input i_hlock4;
input i_hbusreq5;
input i_hlock5;
input i_hbusreq6;
input i_hlock6;
input i_hbusreq7;
input i_hlock7;
input i_hbusreq8;
input i_hlock8;
input i_hbusreq9;
input i_hlock9;
input i_hbusreq10;
input i_hlock10;
input i_hbusreq11;
input i_hlock11;
input i_hbusreq12;
input i_hlock12;
input i_hbusreq13;
input i_hlock13;
input i_hbusreq14;
input i_hlock14;
input i_hbusreq15;
input i_hlock15;
input i_hburst0;
input i_hburst1;
input controllable_hmaster0;
input controllable_hmaster1;
input controllable_hmaster2;
input controllable_hmaster3;
input controllable_hmastlock;
input controllable_nstart;
input controllable_ndecide;
input controllable_locked;
input controllable_nhgrant0;
input controllable_hgrant1;
input controllable_hgrant2;
input controllable_hgrant3;
input controllable_hgrant4;
input controllable_hgrant5;
input controllable_hgrant6;
input controllable_hgrant7;
input controllable_hgrant8;
input controllable_hgrant9;
input controllable_hgrant10;
input controllable_hgrant11;
input controllable_hgrant12;
input controllable_hgrant13;
input controllable_hgrant14;
input controllable_hgrant15;
input controllable_busreq;
output o_err;

reg reg_i_hready;
reg reg_i_hbusreq0;
reg reg_i_hlock0;
reg reg_i_hbusreq1;
reg reg_i_hlock1;
reg reg_i_hbusreq2;
reg reg_i_hlock2;
reg reg_i_hbusreq3;
reg reg_i_hlock3;
reg reg_i_hbusreq4;
reg reg_i_hlock4;
reg reg_i_hbusreq5;
reg reg_i_hlock5;
reg reg_i_hbusreq6;
reg reg_i_hlock6;
reg reg_i_hbusreq7;
reg reg_i_hlock7;
reg reg_i_hbusreq8;
reg reg_i_hlock8;
reg reg_i_hbusreq9;
reg reg_i_hlock9;
reg reg_i_hbusreq10;
reg reg_i_hlock10;
reg reg_i_hbusreq11;
reg reg_i_hlock11;
reg reg_i_hbusreq12;
reg reg_i_hlock12;
reg reg_i_hbusreq13;
reg reg_i_hlock13;
reg reg_i_hbusreq14;
reg reg_i_hlock14;
reg reg_i_hbusreq15;
reg reg_i_hlock15;
reg reg_controllable_hmaster0;
reg reg_controllable_hmaster1;
reg reg_controllable_hmaster2;
reg reg_controllable_hmaster3;
reg reg_controllable_hmastlock;
reg reg_controllable_nstart;
reg reg_controllable_ndecide;
reg reg_controllable_locked;
reg reg_controllable_nhgrant0;
reg reg_controllable_hgrant1;
reg reg_controllable_hgrant2;
reg reg_controllable_hgrant3;
reg reg_controllable_hgrant4;
reg reg_controllable_hgrant5;
reg reg_controllable_hgrant6;
reg reg_controllable_hgrant7;
reg reg_controllable_hgrant8;
reg reg_controllable_hgrant9;
reg reg_controllable_hgrant10;
reg reg_controllable_hgrant11;
reg reg_controllable_hgrant12;
reg reg_controllable_hgrant13;
reg reg_controllable_hgrant14;
reg reg_controllable_hgrant15;
reg reg_controllable_busreq;
reg reg_stateA1;
reg reg_stateG2;
reg reg_stateG3_0;
reg reg_stateG3_1;
reg reg_stateG3_2;
reg reg_stateG10_1;
reg reg_stateG10_2;
reg reg_stateG10_3;
reg reg_stateG10_4;
reg reg_stateG10_5;
reg reg_stateG10_6;
reg reg_stateG10_7;
reg reg_stateG10_8;
reg reg_stateG10_9;
reg reg_stateG10_10;
reg reg_stateG10_11;
reg reg_stateG10_12;
reg reg_stateG10_13;
reg reg_stateG10_14;
reg reg_stateG10_15;
reg env_safe_err_happened;
reg next_env_fair;
reg [4:0] fair_cnt;
reg [5:0] next_sys_fair;

wire env_safe_err0;
wire env_safe_err1;
wire env_safe_err2;
wire env_safe_err3;
wire env_safe_err4;
wire env_safe_err5;
wire env_safe_err6;
wire env_safe_err7;
wire env_safe_err8;
wire env_safe_err9;
wire env_safe_err10;
wire env_safe_err11;
wire env_safe_err12;
wire env_safe_err13;
wire env_safe_err14;
wire env_safe_err15;
wire env_safe_err;

wire sys_safe_err0;
wire sys_safe_err1;
wire sys_safe_err2;
wire sys_safe_err3;
wire sys_safe_err4;
wire sys_safe_err5;
wire sys_safe_err6;
wire sys_safe_err7;
wire sys_safe_err8;
wire sys_safe_err9;
wire sys_safe_err10;
wire sys_safe_err11;
wire sys_safe_err12;
wire sys_safe_err13;
wire sys_safe_err14;
wire sys_safe_err15;
wire sys_safe_err16;
wire sys_safe_err17;
wire sys_safe_err18;
wire sys_safe_err19;
wire sys_safe_err20;
wire sys_safe_err21;
wire sys_safe_err22;
wire sys_safe_err23;
wire sys_safe_err24;
wire sys_safe_err25;
wire sys_safe_err26;
wire sys_safe_err27;
wire sys_safe_err28;
wire sys_safe_err29;
wire sys_safe_err30;
wire sys_safe_err31;
wire sys_safe_err32;
wire sys_safe_err33;
wire sys_safe_err34;
wire sys_safe_err35;
wire sys_safe_err36;
wire sys_safe_err37;
wire sys_safe_err38;
wire sys_safe_err39;
wire sys_safe_err40;
wire sys_safe_err41;
wire sys_safe_err42;
wire sys_safe_err43;
wire sys_safe_err44;
wire sys_safe_err45;
wire sys_safe_err46;
wire sys_safe_err47;
wire sys_safe_err48;
wire sys_safe_err49;
wire sys_safe_err50;
wire sys_safe_err51;
wire sys_safe_err52;
wire sys_safe_err53;
wire sys_safe_err54;
wire sys_safe_err55;
wire sys_safe_err56;
wire sys_safe_err57;
wire sys_safe_err58;
wire sys_safe_err59;
wire sys_safe_err60;
wire sys_safe_err61;
wire sys_safe_err62;
wire sys_safe_err63;
wire sys_safe_err64;
wire sys_safe_err65;
wire sys_safe_err66;
wire sys_safe_err67;
wire sys_safe_err68;
wire sys_safe_err69;
wire sys_safe_err70;
wire sys_safe_err71;
wire sys_safe_err72;
wire sys_safe_err73;
wire sys_safe_err74;
wire sys_safe_err75;
wire sys_safe_err76;
wire sys_safe_err77;
wire sys_safe_err78;
wire sys_safe_err79;
wire sys_safe_err80;
wire sys_safe_err81;
wire sys_safe_err82;
wire sys_safe_err83;
wire sys_safe_err84;
wire sys_safe_err85;
wire sys_safe_err86;
wire sys_safe_err87;
wire sys_safe_err88;
wire sys_safe_err89;
wire sys_safe_err90;
wire sys_safe_err91;
wire sys_safe_err92;
wire sys_safe_err93;
wire sys_safe_err94;
wire sys_safe_err95;
wire sys_safe_err96;
wire sys_safe_err97;
wire sys_safe_err98;
wire sys_safe_err99;
wire sys_safe_err100;
wire sys_safe_err101;
wire sys_safe_err102;
wire sys_safe_err103;
wire sys_safe_err104;
wire sys_safe_err105;
wire sys_safe_err106;
wire sys_safe_err107;
wire sys_safe_err108;
wire sys_safe_err109;
wire sys_safe_err110;
wire sys_safe_err111;
wire sys_safe_err112;
wire sys_safe_err113;
wire sys_safe_err114;
wire sys_safe_err115;
wire sys_safe_err116;
wire sys_safe_err117;
wire sys_safe_err;

wire env_fair0;
wire env_fair1;

wire sys_fair0;
wire sys_fair1;
wire sys_fair2;
wire sys_fair3;
wire sys_fair4;
wire sys_fair5;
wire sys_fair6;
wire sys_fair7;
wire sys_fair8;
wire sys_fair9;
wire sys_fair10;
wire sys_fair11;
wire sys_fair12;
wire sys_fair13;
wire sys_fair14;
wire sys_fair15;
wire sys_fair16;
wire sys_fair17;
wire fair_err;
wire o_err;

// =============================================================
//                        ENV_TRANSITION:
// =============================================================
// Assumption 3:
// G( hlock0=1 -> hbusreq0=1 );
assign env_safe_err0 =  ~(~ i_hlock0 | i_hbusreq0);

// Assumption 3:
// G( hlock1=1 -> hbusreq1=1 );
assign env_safe_err1 =  ~(~ i_hlock1 | i_hbusreq1);

// Assumption 3:
// G( hlock2=1 -> hbusreq2=1 );
assign env_safe_err2 =  ~(~ i_hlock2 | i_hbusreq2);

// Assumption 3:
// G( hlock3=1 -> hbusreq3=1 );
assign env_safe_err3 =  ~(~ i_hlock3 | i_hbusreq3);

// Assumption 3:
// G( hlock4=1 -> hbusreq4=1 );
assign env_safe_err4 =  ~(~ i_hlock4 | i_hbusreq4);

// Assumption 3:
// G( hlock5=1 -> hbusreq5=1 );
assign env_safe_err5 =  ~(~ i_hlock5 | i_hbusreq5);

// Assumption 3:
// G( hlock6=1 -> hbusreq6=1 );
assign env_safe_err6 =  ~(~ i_hlock6 | i_hbusreq6);

// Assumption 3:
// G( hlock7=1 -> hbusreq7=1 );
assign env_safe_err7 =  ~(~ i_hlock7 | i_hbusreq7);

// Assumption 3:
// G( hlock8=1 -> hbusreq8=1 );
assign env_safe_err8 =  ~(~ i_hlock8 | i_hbusreq8);

// Assumption 3:
// G( hlock9=1 -> hbusreq9=1 );
assign env_safe_err9 =  ~(~ i_hlock9 | i_hbusreq9);

// Assumption 3:
// G( hlock10=1 -> hbusreq10=1 );
assign env_safe_err10 =  ~(~ i_hlock10 | i_hbusreq10);

// Assumption 3:
// G( hlock11=1 -> hbusreq11=1 );
assign env_safe_err11 =  ~(~ i_hlock11 | i_hbusreq11);

// Assumption 3:
// G( hlock12=1 -> hbusreq12=1 );
assign env_safe_err12 =  ~(~ i_hlock12 | i_hbusreq12);

// Assumption 3:
// G( hlock13=1 -> hbusreq13=1 );
assign env_safe_err13 =  ~(~ i_hlock13 | i_hbusreq13);

// Assumption 3:
// G( hlock14=1 -> hbusreq14=1 );
assign env_safe_err14 =  ~(~ i_hlock14 | i_hbusreq14);

// Assumption 3:
// G( hlock15=1 -> hbusreq15=1 );
assign env_safe_err15 =  ~(~ i_hlock15 | i_hbusreq15);

// collecting together the safety error bits:
assign env_safe_err = env_safe_err0 |
                      env_safe_err1 |
                      env_safe_err2 |
                      env_safe_err3 |
                      env_safe_err4 |
                      env_safe_err5 |
                      env_safe_err6 |
                      env_safe_err7 |
                      env_safe_err8 |
                      env_safe_err9 |
                      env_safe_err10 |
                      env_safe_err11 |
                      env_safe_err12 |
                      env_safe_err13 |
                      env_safe_err14 |
                      env_safe_err15;

// =============================================================
//                        SYS_TRANSITION:
// =============================================================
// G((hmaster0=0) * (hmaster1=0) * (hmaster2=0) * (hmaster3=0) -> (hbusreq0=0 <-> busreq=0));
assign sys_safe_err0 =  ~( ~( ~(controllable_hmaster0) & ~(controllable_hmaster1) & ~(controllable_hmaster2) & ~(controllable_hmaster3) )|(~i_hbusreq0 ^~ (~controllable_busreq)));

// G((hmaster0=1) * (hmaster1=0) * (hmaster2=0) * (hmaster3=0) -> (hbusreq1=0 <-> busreq=0));
assign sys_safe_err1 =  ~( ~( controllable_hmaster0 & ~(controllable_hmaster1) & ~(controllable_hmaster2) & ~(controllable_hmaster3) )|(~i_hbusreq1 ^~ (~controllable_busreq)));

// G((hmaster0=0) * (hmaster1=1) * (hmaster2=0) * (hmaster3=0) -> (hbusreq2=0 <-> busreq=0));
assign sys_safe_err2 =  ~( ~( ~(controllable_hmaster0) & controllable_hmaster1 & ~(controllable_hmaster2) & ~(controllable_hmaster3) )|(~i_hbusreq2 ^~ (~controllable_busreq)));

// G((hmaster0=1) * (hmaster1=1) * (hmaster2=0) * (hmaster3=0) -> (hbusreq3=0 <-> busreq=0));
assign sys_safe_err3 =  ~( ~( controllable_hmaster0 & controllable_hmaster1 & ~(controllable_hmaster2) & ~(controllable_hmaster3) )|(~i_hbusreq3 ^~ (~controllable_busreq)));

// G((hmaster0=0) * (hmaster1=0) * (hmaster2=1) * (hmaster3=0) -> (hbusreq4=0 <-> busreq=0));
assign sys_safe_err4 =  ~( ~( ~(controllable_hmaster0) & ~(controllable_hmaster1) & controllable_hmaster2 & ~(controllable_hmaster3) )|(~i_hbusreq4 ^~ (~controllable_busreq)));

// G((hmaster0=1) * (hmaster1=0) * (hmaster2=1) * (hmaster3=0) -> (hbusreq5=0 <-> busreq=0));
assign sys_safe_err5 =  ~( ~( controllable_hmaster0 & ~(controllable_hmaster1) & controllable_hmaster2 & ~(controllable_hmaster3) )|(~i_hbusreq5 ^~ (~controllable_busreq)));

// G((hmaster0=0) * (hmaster1=1) * (hmaster2=1) * (hmaster3=0) -> (hbusreq6=0 <-> busreq=0));
assign sys_safe_err6 =  ~( ~( ~(controllable_hmaster0) & controllable_hmaster1 & controllable_hmaster2 & ~(controllable_hmaster3) )|(~i_hbusreq6 ^~ (~controllable_busreq)));

// G((hmaster0=1) * (hmaster1=1) * (hmaster2=1) * (hmaster3=0) -> (hbusreq7=0 <-> busreq=0));
assign sys_safe_err7 =  ~( ~( controllable_hmaster0 & controllable_hmaster1 & controllable_hmaster2 & ~(controllable_hmaster3) )|(~i_hbusreq7 ^~ (~controllable_busreq)));

// G((hmaster0=0) * (hmaster1=0) * (hmaster2=0) * (hmaster3=1) -> (hbusreq8=0 <-> busreq=0));
assign sys_safe_err8 =  ~( ~( ~(controllable_hmaster0) & ~(controllable_hmaster1) & ~(controllable_hmaster2) & controllable_hmaster3 )|(~i_hbusreq8 ^~ (~controllable_busreq)));

// G((hmaster0=1) * (hmaster1=0) * (hmaster2=0) * (hmaster3=1) -> (hbusreq9=0 <-> busreq=0));
assign sys_safe_err9 =  ~( ~( controllable_hmaster0 & ~(controllable_hmaster1) & ~(controllable_hmaster2) & controllable_hmaster3 )|(~i_hbusreq9 ^~ (~controllable_busreq)));

// G((hmaster0=0) * (hmaster1=1) * (hmaster2=0) * (hmaster3=1) -> (hbusreq10=0 <-> busreq=0));
assign sys_safe_err10 =  ~( ~( ~(controllable_hmaster0) & controllable_hmaster1 & ~(controllable_hmaster2) & controllable_hmaster3 )|(~i_hbusreq10 ^~ (~controllable_busreq)));

// G((hmaster0=1) * (hmaster1=1) * (hmaster2=0) * (hmaster3=1) -> (hbusreq11=0 <-> busreq=0));
assign sys_safe_err11 =  ~( ~( controllable_hmaster0 & controllable_hmaster1 & ~(controllable_hmaster2) & controllable_hmaster3 )|(~i_hbusreq11 ^~ (~controllable_busreq)));

// G((hmaster0=0) * (hmaster1=0) * (hmaster2=1) * (hmaster3=1) -> (hbusreq12=0 <-> busreq=0));
assign sys_safe_err12 =  ~( ~( ~(controllable_hmaster0) & ~(controllable_hmaster1) & controllable_hmaster2 & controllable_hmaster3 )|(~i_hbusreq12 ^~ (~controllable_busreq)));

// G((hmaster0=1) * (hmaster1=0) * (hmaster2=1) * (hmaster3=1) -> (hbusreq13=0 <-> busreq=0));
assign sys_safe_err13 =  ~( ~( controllable_hmaster0 & ~(controllable_hmaster1) & controllable_hmaster2 & controllable_hmaster3 )|(~i_hbusreq13 ^~ (~controllable_busreq)));

// G((hmaster0=0) * (hmaster1=1) * (hmaster2=1) * (hmaster3=1) -> (hbusreq14=0 <-> busreq=0));
assign sys_safe_err14 =  ~( ~( ~(controllable_hmaster0) & controllable_hmaster1 & controllable_hmaster2 & controllable_hmaster3 )|(~i_hbusreq14 ^~ (~controllable_busreq)));

// G((hmaster0=1) * (hmaster1=1) * (hmaster2=1) * (hmaster3=1) -> (hbusreq15=0 <-> busreq=0));
assign sys_safe_err15 =  ~( ~( controllable_hmaster0 & controllable_hmaster1 & controllable_hmaster2 & controllable_hmaster3 )|(~i_hbusreq15 ^~ (~controllable_busreq)));

// Guarantee 1:
// G((hready=0) -> X(start=0));
assign sys_safe_err16 =  ~( reg_i_hready | controllable_nstart );

// G(((stateG2=1) * (start=1)) -> FALSE;
assign sys_safe_err17 =  ~( ~(reg_stateG2 & ~controllable_nstart) | 0 );

// G(((stateG3_0=1) * (stateG3_1=0) * (stateG3_2=0) * ((start=1))) -> FALSE);
// G(((stateG3_0=0) * (stateG3_1=1) * (stateG3_2=0) * ((start=1))) -> FALSE);
// G(((stateG3_0=1) * (stateG3_1=1) * (stateG3_2=0) * ((start=1))) -> FALSE);
// G(((stateG3_0=0) * (stateG3_1=0) * (stateG3_2=1) * ((start=1))) -> FALSE);
// all these rules can be summarized as: only in state 000, start=1 is allowed:
assign sys_safe_err18 =  (reg_stateG3_0 | reg_stateG3_1 | reg_stateG3_2) & ~controllable_nstart;

// G( (hready=1) -> (   (hgrant0=1) <-> (X(hmaster0=0) * X(hmaster1=0) * X(hmaster2=0) * X(hmaster3=0))  ) );
assign sys_safe_err19 =  ~( ~(reg_i_hready) | ( ~reg_controllable_nhgrant0 ^~ ( ~(controllable_hmaster0) & ~(controllable_hmaster1) & ~(controllable_hmaster2) & ~(controllable_hmaster3) ) ) );

// G( (hready=1) -> (   (hgrant1=1) <-> (X(hmaster0=1) * X(hmaster1=0) * X(hmaster2=0) * X(hmaster3=0))  ) );
assign sys_safe_err20 =  ~( ~(reg_i_hready) | ( reg_controllable_hgrant1 ^~ ( controllable_hmaster0 & ~(controllable_hmaster1) & ~(controllable_hmaster2) & ~(controllable_hmaster3) ) ) );

// G( (hready=1) -> (   (hgrant2=1) <-> (X(hmaster0=0) * X(hmaster1=1) * X(hmaster2=0) * X(hmaster3=0))  ) );
assign sys_safe_err21 =  ~( ~(reg_i_hready) | ( reg_controllable_hgrant2 ^~ ( ~(controllable_hmaster0) & controllable_hmaster1 & ~(controllable_hmaster2) & ~(controllable_hmaster3) ) ) );

// G( (hready=1) -> (   (hgrant3=1) <-> (X(hmaster0=1) * X(hmaster1=1) * X(hmaster2=0) * X(hmaster3=0))  ) );
assign sys_safe_err22 =  ~( ~(reg_i_hready) | ( reg_controllable_hgrant3 ^~ ( controllable_hmaster0 & controllable_hmaster1 & ~(controllable_hmaster2) & ~(controllable_hmaster3) ) ) );

// G( (hready=1) -> (   (hgrant4=1) <-> (X(hmaster0=0) * X(hmaster1=0) * X(hmaster2=1) * X(hmaster3=0))  ) );
assign sys_safe_err23 =  ~( ~(reg_i_hready) | ( reg_controllable_hgrant4 ^~ ( ~(controllable_hmaster0) & ~(controllable_hmaster1) & controllable_hmaster2 & ~(controllable_hmaster3) ) ) );

// G( (hready=1) -> (   (hgrant5=1) <-> (X(hmaster0=1) * X(hmaster1=0) * X(hmaster2=1) * X(hmaster3=0))  ) );
assign sys_safe_err24 =  ~( ~(reg_i_hready) | ( reg_controllable_hgrant5 ^~ ( controllable_hmaster0 & ~(controllable_hmaster1) & controllable_hmaster2 & ~(controllable_hmaster3) ) ) );

// G( (hready=1) -> (   (hgrant6=1) <-> (X(hmaster0=0) * X(hmaster1=1) * X(hmaster2=1) * X(hmaster3=0))  ) );
assign sys_safe_err25 =  ~( ~(reg_i_hready) | ( reg_controllable_hgrant6 ^~ ( ~(controllable_hmaster0) & controllable_hmaster1 & controllable_hmaster2 & ~(controllable_hmaster3) ) ) );

// G( (hready=1) -> (   (hgrant7=1) <-> (X(hmaster0=1) * X(hmaster1=1) * X(hmaster2=1) * X(hmaster3=0))  ) );
assign sys_safe_err26 =  ~( ~(reg_i_hready) | ( reg_controllable_hgrant7 ^~ ( controllable_hmaster0 & controllable_hmaster1 & controllable_hmaster2 & ~(controllable_hmaster3) ) ) );

// G( (hready=1) -> (   (hgrant8=1) <-> (X(hmaster0=0) * X(hmaster1=0) * X(hmaster2=0) * X(hmaster3=1))  ) );
assign sys_safe_err27 =  ~( ~(reg_i_hready) | ( reg_controllable_hgrant8 ^~ ( ~(controllable_hmaster0) & ~(controllable_hmaster1) & ~(controllable_hmaster2) & controllable_hmaster3 ) ) );

// G( (hready=1) -> (   (hgrant9=1) <-> (X(hmaster0=1) * X(hmaster1=0) * X(hmaster2=0) * X(hmaster3=1))  ) );
assign sys_safe_err28 =  ~( ~(reg_i_hready) | ( reg_controllable_hgrant9 ^~ ( controllable_hmaster0 & ~(controllable_hmaster1) & ~(controllable_hmaster2) & controllable_hmaster3 ) ) );

// G( (hready=1) -> (   (hgrant10=1) <-> (X(hmaster0=0) * X(hmaster1=1) * X(hmaster2=0) * X(hmaster3=1))  ) );
assign sys_safe_err29 =  ~( ~(reg_i_hready) | ( reg_controllable_hgrant10 ^~ ( ~(controllable_hmaster0) & controllable_hmaster1 & ~(controllable_hmaster2) & controllable_hmaster3 ) ) );

// G( (hready=1) -> (   (hgrant11=1) <-> (X(hmaster0=1) * X(hmaster1=1) * X(hmaster2=0) * X(hmaster3=1))  ) );
assign sys_safe_err30 =  ~( ~(reg_i_hready) | ( reg_controllable_hgrant11 ^~ ( controllable_hmaster0 & controllable_hmaster1 & ~(controllable_hmaster2) & controllable_hmaster3 ) ) );

// G( (hready=1) -> (   (hgrant12=1) <-> (X(hmaster0=0) * X(hmaster1=0) * X(hmaster2=1) * X(hmaster3=1))  ) );
assign sys_safe_err31 =  ~( ~(reg_i_hready) | ( reg_controllable_hgrant12 ^~ ( ~(controllable_hmaster0) & ~(controllable_hmaster1) & controllable_hmaster2 & controllable_hmaster3 ) ) );

// G( (hready=1) -> (   (hgrant13=1) <-> (X(hmaster0=1) * X(hmaster1=0) * X(hmaster2=1) * X(hmaster3=1))  ) );
assign sys_safe_err32 =  ~( ~(reg_i_hready) | ( reg_controllable_hgrant13 ^~ ( controllable_hmaster0 & ~(controllable_hmaster1) & controllable_hmaster2 & controllable_hmaster3 ) ) );

// G( (hready=1) -> (   (hgrant14=1) <-> (X(hmaster0=0) * X(hmaster1=1) * X(hmaster2=1) * X(hmaster3=1))  ) );
assign sys_safe_err33 =  ~( ~(reg_i_hready) | ( reg_controllable_hgrant14 ^~ ( ~(controllable_hmaster0) & controllable_hmaster1 & controllable_hmaster2 & controllable_hmaster3 ) ) );

// G( (hready=1) -> (   (hgrant15=1) <-> (X(hmaster0=1) * X(hmaster1=1) * X(hmaster2=1) * X(hmaster3=1))  ) );
assign sys_safe_err34 =  ~( ~(reg_i_hready) | ( reg_controllable_hgrant15 ^~ ( controllable_hmaster0 & controllable_hmaster1 & controllable_hmaster2 & controllable_hmaster3 ) ) );

// HMASTLOCK:
// G(  (hready=1) -> (locked=0 <-> X(hmastlock=0) ) );
assign sys_safe_err35 =  ~( ~(reg_i_hready) | (~reg_controllable_locked ^~ ~controllable_hmastlock) );

// Master 0:
// G( X(start=0) -> ( ((hmaster0=0) * (hmaster1=0) * (hmaster2=0) * (hmaster3=0)) <-> (X(hmaster0=0) * X(hmaster1=0) * X(hmaster2=0) * X(hmaster3=0)) ) );
assign sys_safe_err36 =  ~( ~(controllable_nstart) | ( ( ~(reg_controllable_hmaster0) & ~(reg_controllable_hmaster1) & ~(reg_controllable_hmaster2) & ~(reg_controllable_hmaster3) ) ^~ ( ~(controllable_hmaster0) & ~(controllable_hmaster1) & ~(controllable_hmaster2) & ~(controllable_hmaster3) )) );

// Master 1:
// G( X(start=0) -> ( ((hmaster0=1) * (hmaster1=0) * (hmaster2=0) * (hmaster3=0)) <-> (X(hmaster0=1) * X(hmaster1=0) * X(hmaster2=0) * X(hmaster3=0)) ) );
assign sys_safe_err37 =  ~( ~(controllable_nstart) | ( ( reg_controllable_hmaster0 & ~(reg_controllable_hmaster1) & ~(reg_controllable_hmaster2) & ~(reg_controllable_hmaster3) ) ^~ ( controllable_hmaster0 & ~(controllable_hmaster1) & ~(controllable_hmaster2) & ~(controllable_hmaster3) )) );

// Master 2:
// G( X(start=0) -> ( ((hmaster0=0) * (hmaster1=1) * (hmaster2=0) * (hmaster3=0)) <-> (X(hmaster0=0) * X(hmaster1=1) * X(hmaster2=0) * X(hmaster3=0)) ) );
assign sys_safe_err38 =  ~( ~(controllable_nstart) | ( ( ~(reg_controllable_hmaster0) & reg_controllable_hmaster1 & ~(reg_controllable_hmaster2) & ~(reg_controllable_hmaster3) ) ^~ ( ~(controllable_hmaster0) & controllable_hmaster1 & ~(controllable_hmaster2) & ~(controllable_hmaster3) )) );

// Master 3:
// G( X(start=0) -> ( ((hmaster0=1) * (hmaster1=1) * (hmaster2=0) * (hmaster3=0)) <-> (X(hmaster0=1) * X(hmaster1=1) * X(hmaster2=0) * X(hmaster3=0)) ) );
assign sys_safe_err39 =  ~( ~(controllable_nstart) | ( ( reg_controllable_hmaster0 & reg_controllable_hmaster1 & ~(reg_controllable_hmaster2) & ~(reg_controllable_hmaster3) ) ^~ ( controllable_hmaster0 & controllable_hmaster1 & ~(controllable_hmaster2) & ~(controllable_hmaster3) )) );

// Master 4:
// G( X(start=0) -> ( ((hmaster0=0) * (hmaster1=0) * (hmaster2=1) * (hmaster3=0)) <-> (X(hmaster0=0) * X(hmaster1=0) * X(hmaster2=1) * X(hmaster3=0)) ) );
assign sys_safe_err40 =  ~( ~(controllable_nstart) | ( ( ~(reg_controllable_hmaster0) & ~(reg_controllable_hmaster1) & reg_controllable_hmaster2 & ~(reg_controllable_hmaster3) ) ^~ ( ~(controllable_hmaster0) & ~(controllable_hmaster1) & controllable_hmaster2 & ~(controllable_hmaster3) )) );

// Master 5:
// G( X(start=0) -> ( ((hmaster0=1) * (hmaster1=0) * (hmaster2=1) * (hmaster3=0)) <-> (X(hmaster0=1) * X(hmaster1=0) * X(hmaster2=1) * X(hmaster3=0)) ) );
assign sys_safe_err41 =  ~( ~(controllable_nstart) | ( ( reg_controllable_hmaster0 & ~(reg_controllable_hmaster1) & reg_controllable_hmaster2 & ~(reg_controllable_hmaster3) ) ^~ ( controllable_hmaster0 & ~(controllable_hmaster1) & controllable_hmaster2 & ~(controllable_hmaster3) )) );

// Master 6:
// G( X(start=0) -> ( ((hmaster0=0) * (hmaster1=1) * (hmaster2=1) * (hmaster3=0)) <-> (X(hmaster0=0) * X(hmaster1=1) * X(hmaster2=1) * X(hmaster3=0)) ) );
assign sys_safe_err42 =  ~( ~(controllable_nstart) | ( ( ~(reg_controllable_hmaster0) & reg_controllable_hmaster1 & reg_controllable_hmaster2 & ~(reg_controllable_hmaster3) ) ^~ ( ~(controllable_hmaster0) & controllable_hmaster1 & controllable_hmaster2 & ~(controllable_hmaster3) )) );

// Master 7:
// G( X(start=0) -> ( ((hmaster0=1) * (hmaster1=1) * (hmaster2=1) * (hmaster3=0)) <-> (X(hmaster0=1) * X(hmaster1=1) * X(hmaster2=1) * X(hmaster3=0)) ) );
assign sys_safe_err43 =  ~( ~(controllable_nstart) | ( ( reg_controllable_hmaster0 & reg_controllable_hmaster1 & reg_controllable_hmaster2 & ~(reg_controllable_hmaster3) ) ^~ ( controllable_hmaster0 & controllable_hmaster1 & controllable_hmaster2 & ~(controllable_hmaster3) )) );

// Master 8:
// G( X(start=0) -> ( ((hmaster0=0) * (hmaster1=0) * (hmaster2=0) * (hmaster3=1)) <-> (X(hmaster0=0) * X(hmaster1=0) * X(hmaster2=0) * X(hmaster3=1)) ) );
assign sys_safe_err44 =  ~( ~(controllable_nstart) | ( ( ~(reg_controllable_hmaster0) & ~(reg_controllable_hmaster1) & ~(reg_controllable_hmaster2) & reg_controllable_hmaster3 ) ^~ ( ~(controllable_hmaster0) & ~(controllable_hmaster1) & ~(controllable_hmaster2) & controllable_hmaster3 )) );

// Master 9:
// G( X(start=0) -> ( ((hmaster0=1) * (hmaster1=0) * (hmaster2=0) * (hmaster3=1)) <-> (X(hmaster0=1) * X(hmaster1=0) * X(hmaster2=0) * X(hmaster3=1)) ) );
assign sys_safe_err45 =  ~( ~(controllable_nstart) | ( ( reg_controllable_hmaster0 & ~(reg_controllable_hmaster1) & ~(reg_controllable_hmaster2) & reg_controllable_hmaster3 ) ^~ ( controllable_hmaster0 & ~(controllable_hmaster1) & ~(controllable_hmaster2) & controllable_hmaster3 )) );

// Master 10:
// G( X(start=0) -> ( ((hmaster0=0) * (hmaster1=1) * (hmaster2=0) * (hmaster3=1)) <-> (X(hmaster0=0) * X(hmaster1=1) * X(hmaster2=0) * X(hmaster3=1)) ) );
assign sys_safe_err46 =  ~( ~(controllable_nstart) | ( ( ~(reg_controllable_hmaster0) & reg_controllable_hmaster1 & ~(reg_controllable_hmaster2) & reg_controllable_hmaster3 ) ^~ ( ~(controllable_hmaster0) & controllable_hmaster1 & ~(controllable_hmaster2) & controllable_hmaster3 )) );

// Master 11:
// G( X(start=0) -> ( ((hmaster0=1) * (hmaster1=1) * (hmaster2=0) * (hmaster3=1)) <-> (X(hmaster0=1) * X(hmaster1=1) * X(hmaster2=0) * X(hmaster3=1)) ) );
assign sys_safe_err47 =  ~( ~(controllable_nstart) | ( ( reg_controllable_hmaster0 & reg_controllable_hmaster1 & ~(reg_controllable_hmaster2) & reg_controllable_hmaster3 ) ^~ ( controllable_hmaster0 & controllable_hmaster1 & ~(controllable_hmaster2) & controllable_hmaster3 )) );

// Master 12:
// G( X(start=0) -> ( ((hmaster0=0) * (hmaster1=0) * (hmaster2=1) * (hmaster3=1)) <-> (X(hmaster0=0) * X(hmaster1=0) * X(hmaster2=1) * X(hmaster3=1)) ) );
assign sys_safe_err48 =  ~( ~(controllable_nstart) | ( ( ~(reg_controllable_hmaster0) & ~(reg_controllable_hmaster1) & reg_controllable_hmaster2 & reg_controllable_hmaster3 ) ^~ ( ~(controllable_hmaster0) & ~(controllable_hmaster1) & controllable_hmaster2 & controllable_hmaster3 )) );

// Master 13:
// G( X(start=0) -> ( ((hmaster0=1) * (hmaster1=0) * (hmaster2=1) * (hmaster3=1)) <-> (X(hmaster0=1) * X(hmaster1=0) * X(hmaster2=1) * X(hmaster3=1)) ) );
assign sys_safe_err49 =  ~( ~(controllable_nstart) | ( ( reg_controllable_hmaster0 & ~(reg_controllable_hmaster1) & reg_controllable_hmaster2 & reg_controllable_hmaster3 ) ^~ ( controllable_hmaster0 & ~(controllable_hmaster1) & controllable_hmaster2 & controllable_hmaster3 )) );

// Master 14:
// G( X(start=0) -> ( ((hmaster0=0) * (hmaster1=1) * (hmaster2=1) * (hmaster3=1)) <-> (X(hmaster0=0) * X(hmaster1=1) * X(hmaster2=1) * X(hmaster3=1)) ) );
assign sys_safe_err50 =  ~( ~(controllable_nstart) | ( ( ~(reg_controllable_hmaster0) & reg_controllable_hmaster1 & reg_controllable_hmaster2 & reg_controllable_hmaster3 ) ^~ ( ~(controllable_hmaster0) & controllable_hmaster1 & controllable_hmaster2 & controllable_hmaster3 )) );

// Master 15:
// G( X(start=0) -> ( ((hmaster0=1) * (hmaster1=1) * (hmaster2=1) * (hmaster3=1)) <-> (X(hmaster0=1) * X(hmaster1=1) * X(hmaster2=1) * X(hmaster3=1)) ) );
assign sys_safe_err51 =  ~( ~(controllable_nstart) | ( ( reg_controllable_hmaster0 & reg_controllable_hmaster1 & reg_controllable_hmaster2 & reg_controllable_hmaster3 ) ^~ ( controllable_hmaster0 & controllable_hmaster1 & controllable_hmaster2 & controllable_hmaster3 )) );

// Guarantee 6.2:
// G( ((X(start=0))) -> ( (hmastlock=1) <-> X(hmastlock=1)) );
assign sys_safe_err52 =  ~( ~(controllable_nstart) | ( reg_controllable_hmastlock ^~ controllable_hmastlock) );

// G( (decide=1  *  hlock0=1  *  X(hgrant0=1) )->X(locked=1));
assign sys_safe_err53 =  ~( ~(~reg_controllable_ndecide & reg_i_hlock0 & ~controllable_nhgrant0) | (controllable_locked) );

// G((decide=1  *  hlock0=0  *  X(hgrant0=1))->X(locked=0));
assign sys_safe_err54 =  ~( ~(~reg_controllable_ndecide & ~reg_i_hlock0 & ~controllable_nhgrant0) | (~controllable_locked) );

// G( (decide=1  *  hlock1=1  *  X(hgrant1=1) )->X(locked=1));
assign sys_safe_err55 =  ~( ~(~reg_controllable_ndecide & reg_i_hlock1 & controllable_hgrant1) | (controllable_locked) );

// G((decide=1  *  hlock1=0  *  X(hgrant1=1))->X(locked=0));
assign sys_safe_err56 =  ~( ~(~reg_controllable_ndecide & ~reg_i_hlock1 & controllable_hgrant1) | (~controllable_locked) );

// G( (decide=1  *  hlock2=1  *  X(hgrant2=1) )->X(locked=1));
assign sys_safe_err57 =  ~( ~(~reg_controllable_ndecide & reg_i_hlock2 & controllable_hgrant2) | (controllable_locked) );

// G((decide=1  *  hlock2=0  *  X(hgrant2=1))->X(locked=0));
assign sys_safe_err58 =  ~( ~(~reg_controllable_ndecide & ~reg_i_hlock2 & controllable_hgrant2) | (~controllable_locked) );

// G( (decide=1  *  hlock3=1  *  X(hgrant3=1) )->X(locked=1));
assign sys_safe_err59 =  ~( ~(~reg_controllable_ndecide & reg_i_hlock3 & controllable_hgrant3) | (controllable_locked) );

// G((decide=1  *  hlock3=0  *  X(hgrant3=1))->X(locked=0));
assign sys_safe_err60 =  ~( ~(~reg_controllable_ndecide & ~reg_i_hlock3 & controllable_hgrant3) | (~controllable_locked) );

// G( (decide=1  *  hlock4=1  *  X(hgrant4=1) )->X(locked=1));
assign sys_safe_err61 =  ~( ~(~reg_controllable_ndecide & reg_i_hlock4 & controllable_hgrant4) | (controllable_locked) );

// G((decide=1  *  hlock4=0  *  X(hgrant4=1))->X(locked=0));
assign sys_safe_err62 =  ~( ~(~reg_controllable_ndecide & ~reg_i_hlock4 & controllable_hgrant4) | (~controllable_locked) );

// G( (decide=1  *  hlock5=1  *  X(hgrant5=1) )->X(locked=1));
assign sys_safe_err63 =  ~( ~(~reg_controllable_ndecide & reg_i_hlock5 & controllable_hgrant5) | (controllable_locked) );

// G((decide=1  *  hlock5=0  *  X(hgrant5=1))->X(locked=0));
assign sys_safe_err64 =  ~( ~(~reg_controllable_ndecide & ~reg_i_hlock5 & controllable_hgrant5) | (~controllable_locked) );

// G( (decide=1  *  hlock6=1  *  X(hgrant6=1) )->X(locked=1));
assign sys_safe_err65 =  ~( ~(~reg_controllable_ndecide & reg_i_hlock6 & controllable_hgrant6) | (controllable_locked) );

// G((decide=1  *  hlock6=0  *  X(hgrant6=1))->X(locked=0));
assign sys_safe_err66 =  ~( ~(~reg_controllable_ndecide & ~reg_i_hlock6 & controllable_hgrant6) | (~controllable_locked) );

// G( (decide=1  *  hlock7=1  *  X(hgrant7=1) )->X(locked=1));
assign sys_safe_err67 =  ~( ~(~reg_controllable_ndecide & reg_i_hlock7 & controllable_hgrant7) | (controllable_locked) );

// G((decide=1  *  hlock7=0  *  X(hgrant7=1))->X(locked=0));
assign sys_safe_err68 =  ~( ~(~reg_controllable_ndecide & ~reg_i_hlock7 & controllable_hgrant7) | (~controllable_locked) );

// G( (decide=1  *  hlock8=1  *  X(hgrant8=1) )->X(locked=1));
assign sys_safe_err69 =  ~( ~(~reg_controllable_ndecide & reg_i_hlock8 & controllable_hgrant8) | (controllable_locked) );

// G((decide=1  *  hlock8=0  *  X(hgrant8=1))->X(locked=0));
assign sys_safe_err70 =  ~( ~(~reg_controllable_ndecide & ~reg_i_hlock8 & controllable_hgrant8) | (~controllable_locked) );

// G( (decide=1  *  hlock9=1  *  X(hgrant9=1) )->X(locked=1));
assign sys_safe_err71 =  ~( ~(~reg_controllable_ndecide & reg_i_hlock9 & controllable_hgrant9) | (controllable_locked) );

// G((decide=1  *  hlock9=0  *  X(hgrant9=1))->X(locked=0));
assign sys_safe_err72 =  ~( ~(~reg_controllable_ndecide & ~reg_i_hlock9 & controllable_hgrant9) | (~controllable_locked) );

// G( (decide=1  *  hlock10=1  *  X(hgrant10=1) )->X(locked=1));
assign sys_safe_err73 =  ~( ~(~reg_controllable_ndecide & reg_i_hlock10 & controllable_hgrant10) | (controllable_locked) );

// G((decide=1  *  hlock10=0  *  X(hgrant10=1))->X(locked=0));
assign sys_safe_err74 =  ~( ~(~reg_controllable_ndecide & ~reg_i_hlock10 & controllable_hgrant10) | (~controllable_locked) );

// G( (decide=1  *  hlock11=1  *  X(hgrant11=1) )->X(locked=1));
assign sys_safe_err75 =  ~( ~(~reg_controllable_ndecide & reg_i_hlock11 & controllable_hgrant11) | (controllable_locked) );

// G((decide=1  *  hlock11=0  *  X(hgrant11=1))->X(locked=0));
assign sys_safe_err76 =  ~( ~(~reg_controllable_ndecide & ~reg_i_hlock11 & controllable_hgrant11) | (~controllable_locked) );

// G( (decide=1  *  hlock12=1  *  X(hgrant12=1) )->X(locked=1));
assign sys_safe_err77 =  ~( ~(~reg_controllable_ndecide & reg_i_hlock12 & controllable_hgrant12) | (controllable_locked) );

// G((decide=1  *  hlock12=0  *  X(hgrant12=1))->X(locked=0));
assign sys_safe_err78 =  ~( ~(~reg_controllable_ndecide & ~reg_i_hlock12 & controllable_hgrant12) | (~controllable_locked) );

// G( (decide=1  *  hlock13=1  *  X(hgrant13=1) )->X(locked=1));
assign sys_safe_err79 =  ~( ~(~reg_controllable_ndecide & reg_i_hlock13 & controllable_hgrant13) | (controllable_locked) );

// G((decide=1  *  hlock13=0  *  X(hgrant13=1))->X(locked=0));
assign sys_safe_err80 =  ~( ~(~reg_controllable_ndecide & ~reg_i_hlock13 & controllable_hgrant13) | (~controllable_locked) );

// G( (decide=1  *  hlock14=1  *  X(hgrant14=1) )->X(locked=1));
assign sys_safe_err81 =  ~( ~(~reg_controllable_ndecide & reg_i_hlock14 & controllable_hgrant14) | (controllable_locked) );

// G((decide=1  *  hlock14=0  *  X(hgrant14=1))->X(locked=0));
assign sys_safe_err82 =  ~( ~(~reg_controllable_ndecide & ~reg_i_hlock14 & controllable_hgrant14) | (~controllable_locked) );

// G( (decide=1  *  hlock15=1  *  X(hgrant15=1) )->X(locked=1));
assign sys_safe_err83 =  ~( ~(~reg_controllable_ndecide & reg_i_hlock15 & controllable_hgrant15) | (controllable_locked) );

// G((decide=1  *  hlock15=0  *  X(hgrant15=1))->X(locked=0));
assign sys_safe_err84 =  ~( ~(~reg_controllable_ndecide & ~reg_i_hlock15 & controllable_hgrant15) | (~controllable_locked) );

// G( (decide=0) -> (  ((hgrant0=0)<->X(hgrant0=0))  ));
assign sys_safe_err85 =  ~( ~(reg_controllable_ndecide) | (reg_controllable_nhgrant0 ^~ controllable_nhgrant0) );

// G( (decide=0) -> (  ((hgrant1=0)<->X(hgrant1=0))  ));
assign sys_safe_err86 =  ~( ~(reg_controllable_ndecide) | (~reg_controllable_hgrant1 ^~ ~controllable_hgrant1) );

// G( (decide=0) -> (  ((hgrant2=0)<->X(hgrant2=0))  ));
assign sys_safe_err87 =  ~( ~(reg_controllable_ndecide) | (~reg_controllable_hgrant2 ^~ ~controllable_hgrant2) );

// G( (decide=0) -> (  ((hgrant3=0)<->X(hgrant3=0))  ));
assign sys_safe_err88 =  ~( ~(reg_controllable_ndecide) | (~reg_controllable_hgrant3 ^~ ~controllable_hgrant3) );

// G( (decide=0) -> (  ((hgrant4=0)<->X(hgrant4=0))  ));
assign sys_safe_err89 =  ~( ~(reg_controllable_ndecide) | (~reg_controllable_hgrant4 ^~ ~controllable_hgrant4) );

// G( (decide=0) -> (  ((hgrant5=0)<->X(hgrant5=0))  ));
assign sys_safe_err90 =  ~( ~(reg_controllable_ndecide) | (~reg_controllable_hgrant5 ^~ ~controllable_hgrant5) );

// G( (decide=0) -> (  ((hgrant6=0)<->X(hgrant6=0))  ));
assign sys_safe_err91 =  ~( ~(reg_controllable_ndecide) | (~reg_controllable_hgrant6 ^~ ~controllable_hgrant6) );

// G( (decide=0) -> (  ((hgrant7=0)<->X(hgrant7=0))  ));
assign sys_safe_err92 =  ~( ~(reg_controllable_ndecide) | (~reg_controllable_hgrant7 ^~ ~controllable_hgrant7) );

// G( (decide=0) -> (  ((hgrant8=0)<->X(hgrant8=0))  ));
assign sys_safe_err93 =  ~( ~(reg_controllable_ndecide) | (~reg_controllable_hgrant8 ^~ ~controllable_hgrant8) );

// G( (decide=0) -> (  ((hgrant9=0)<->X(hgrant9=0))  ));
assign sys_safe_err94 =  ~( ~(reg_controllable_ndecide) | (~reg_controllable_hgrant9 ^~ ~controllable_hgrant9) );

// G( (decide=0) -> (  ((hgrant10=0)<->X(hgrant10=0))  ));
assign sys_safe_err95 =  ~( ~(reg_controllable_ndecide) | (~reg_controllable_hgrant10 ^~ ~controllable_hgrant10) );

// G( (decide=0) -> (  ((hgrant11=0)<->X(hgrant11=0))  ));
assign sys_safe_err96 =  ~( ~(reg_controllable_ndecide) | (~reg_controllable_hgrant11 ^~ ~controllable_hgrant11) );

// G( (decide=0) -> (  ((hgrant12=0)<->X(hgrant12=0))  ));
assign sys_safe_err97 =  ~( ~(reg_controllable_ndecide) | (~reg_controllable_hgrant12 ^~ ~controllable_hgrant12) );

// G( (decide=0) -> (  ((hgrant13=0)<->X(hgrant13=0))  ));
assign sys_safe_err98 =  ~( ~(reg_controllable_ndecide) | (~reg_controllable_hgrant13 ^~ ~controllable_hgrant13) );

// G( (decide=0) -> (  ((hgrant14=0)<->X(hgrant14=0))  ));
assign sys_safe_err99 =  ~( ~(reg_controllable_ndecide) | (~reg_controllable_hgrant14 ^~ ~controllable_hgrant14) );

// G( (decide=0) -> (  ((hgrant15=0)<->X(hgrant15=0))  ));
assign sys_safe_err100 =  ~( ~(reg_controllable_ndecide) | (~reg_controllable_hgrant15 ^~ ~controllable_hgrant15) );

// G((decide=0)->(locked=0 <-> X(locked=0)));
assign sys_safe_err101 =  ~( ~(reg_controllable_ndecide) | (~reg_controllable_locked ^~ ~controllable_locked) );

// G(((stateG10_1=1) * (((hgrant1=1)) * (hbusreq1=0)))->FALSE);
assign sys_safe_err102 =  ~( ~(reg_stateG10_1 & (controllable_hgrant1 & ~i_hbusreq1)) | 0 );

// G(((stateG10_2=1) * (((hgrant2=1)) * (hbusreq2=0)))->FALSE);
assign sys_safe_err103 =  ~( ~(reg_stateG10_2 & (controllable_hgrant2 & ~i_hbusreq2)) | 0 );

// G(((stateG10_3=1) * (((hgrant3=1)) * (hbusreq3=0)))->FALSE);
assign sys_safe_err104 =  ~( ~(reg_stateG10_3 & (controllable_hgrant3 & ~i_hbusreq3)) | 0 );

// G(((stateG10_4=1) * (((hgrant4=1)) * (hbusreq4=0)))->FALSE);
assign sys_safe_err105 =  ~( ~(reg_stateG10_4 & (controllable_hgrant4 & ~i_hbusreq4)) | 0 );

// G(((stateG10_5=1) * (((hgrant5=1)) * (hbusreq5=0)))->FALSE);
assign sys_safe_err106 =  ~( ~(reg_stateG10_5 & (controllable_hgrant5 & ~i_hbusreq5)) | 0 );

// G(((stateG10_6=1) * (((hgrant6=1)) * (hbusreq6=0)))->FALSE);
assign sys_safe_err107 =  ~( ~(reg_stateG10_6 & (controllable_hgrant6 & ~i_hbusreq6)) | 0 );

// G(((stateG10_7=1) * (((hgrant7=1)) * (hbusreq7=0)))->FALSE);
assign sys_safe_err108 =  ~( ~(reg_stateG10_7 & (controllable_hgrant7 & ~i_hbusreq7)) | 0 );

// G(((stateG10_8=1) * (((hgrant8=1)) * (hbusreq8=0)))->FALSE);
assign sys_safe_err109 =  ~( ~(reg_stateG10_8 & (controllable_hgrant8 & ~i_hbusreq8)) | 0 );

// G(((stateG10_9=1) * (((hgrant9=1)) * (hbusreq9=0)))->FALSE);
assign sys_safe_err110 =  ~( ~(reg_stateG10_9 & (controllable_hgrant9 & ~i_hbusreq9)) | 0 );

// G(((stateG10_10=1) * (((hgrant10=1)) * (hbusreq10=0)))->FALSE);
assign sys_safe_err111 =  ~( ~(reg_stateG10_10 & (controllable_hgrant10 & ~i_hbusreq10)) | 0 );

// G(((stateG10_11=1) * (((hgrant11=1)) * (hbusreq11=0)))->FALSE);
assign sys_safe_err112 =  ~( ~(reg_stateG10_11 & (controllable_hgrant11 & ~i_hbusreq11)) | 0 );

// G(((stateG10_12=1) * (((hgrant12=1)) * (hbusreq12=0)))->FALSE);
assign sys_safe_err113 =  ~( ~(reg_stateG10_12 & (controllable_hgrant12 & ~i_hbusreq12)) | 0 );

// G(((stateG10_13=1) * (((hgrant13=1)) * (hbusreq13=0)))->FALSE);
assign sys_safe_err114 =  ~( ~(reg_stateG10_13 & (controllable_hgrant13 & ~i_hbusreq13)) | 0 );

// G(((stateG10_14=1) * (((hgrant14=1)) * (hbusreq14=0)))->FALSE);
assign sys_safe_err115 =  ~( ~(reg_stateG10_14 & (controllable_hgrant14 & ~i_hbusreq14)) | 0 );

// G(((stateG10_15=1) * (((hgrant15=1)) * (hbusreq15=0)))->FALSE);
assign sys_safe_err116 =  ~( ~(reg_stateG10_15 & (controllable_hgrant15 & ~i_hbusreq15)) | 0 );

// default master
// G((decide=1  *  hbusreq0=0  *  hbusreq1=0  *  hbusreq2=0  *  hbusreq3=0  *  hbusreq4=0  *  hbusreq5=0  *  hbusreq6=0  *  hbusreq7=0  *  hbusreq8=0  *  hbusreq9=0  *  hbusreq10=0  *  hbusreq11=0  *  hbusreq12=0  *  hbusreq13=0  *  hbusreq14=0  *  hbusreq15=0) -> X(hgrant0=1));
assign sys_safe_err117 =  ~( ~(~reg_controllable_ndecide & (~reg_i_hbusreq0 & ~reg_i_hbusreq1 & ~reg_i_hbusreq2 & ~reg_i_hbusreq3 & ~reg_i_hbusreq4 & ~reg_i_hbusreq5 & ~reg_i_hbusreq6 & ~reg_i_hbusreq7 & ~reg_i_hbusreq8 & ~reg_i_hbusreq9 & ~reg_i_hbusreq10 & ~reg_i_hbusreq11 & ~reg_i_hbusreq12 & ~reg_i_hbusreq13 & ~reg_i_hbusreq14 & ~reg_i_hbusreq15)) | (~controllable_nhgrant0) );

// collecting together the safety error bits:
assign sys_safe_err = sys_safe_err0 |
                      sys_safe_err1 |
                      sys_safe_err2 |
                      sys_safe_err3 |
                      sys_safe_err4 |
                      sys_safe_err5 |
                      sys_safe_err6 |
                      sys_safe_err7 |
                      sys_safe_err8 |
                      sys_safe_err9 |
                      sys_safe_err10 |
                      sys_safe_err11 |
                      sys_safe_err12 |
                      sys_safe_err13 |
                      sys_safe_err14 |
                      sys_safe_err15 |
                      sys_safe_err16 |
                      sys_safe_err17 |
                      sys_safe_err18 |
                      sys_safe_err19 |
                      sys_safe_err20 |
                      sys_safe_err21 |
                      sys_safe_err22 |
                      sys_safe_err23 |
                      sys_safe_err24 |
                      sys_safe_err25 |
                      sys_safe_err26 |
                      sys_safe_err27 |
                      sys_safe_err28 |
                      sys_safe_err29 |
                      sys_safe_err30 |
                      sys_safe_err31 |
                      sys_safe_err32 |
                      sys_safe_err33 |
                      sys_safe_err34 |
                      sys_safe_err35 |
                      sys_safe_err36 |
                      sys_safe_err37 |
                      sys_safe_err38 |
                      sys_safe_err39 |
                      sys_safe_err40 |
                      sys_safe_err41 |
                      sys_safe_err42 |
                      sys_safe_err43 |
                      sys_safe_err44 |
                      sys_safe_err45 |
                      sys_safe_err46 |
                      sys_safe_err47 |
                      sys_safe_err48 |
                      sys_safe_err49 |
                      sys_safe_err50 |
                      sys_safe_err51 |
                      sys_safe_err52 |
                      sys_safe_err53 |
                      sys_safe_err54 |
                      sys_safe_err55 |
                      sys_safe_err56 |
                      sys_safe_err57 |
                      sys_safe_err58 |
                      sys_safe_err59 |
                      sys_safe_err60 |
                      sys_safe_err61 |
                      sys_safe_err62 |
                      sys_safe_err63 |
                      sys_safe_err64 |
                      sys_safe_err65 |
                      sys_safe_err66 |
                      sys_safe_err67 |
                      sys_safe_err68 |
                      sys_safe_err69 |
                      sys_safe_err70 |
                      sys_safe_err71 |
                      sys_safe_err72 |
                      sys_safe_err73 |
                      sys_safe_err74 |
                      sys_safe_err75 |
                      sys_safe_err76 |
                      sys_safe_err77 |
                      sys_safe_err78 |
                      sys_safe_err79 |
                      sys_safe_err80 |
                      sys_safe_err81 |
                      sys_safe_err82 |
                      sys_safe_err83 |
                      sys_safe_err84 |
                      sys_safe_err85 |
                      sys_safe_err86 |
                      sys_safe_err87 |
                      sys_safe_err88 |
                      sys_safe_err89 |
                      sys_safe_err90 |
                      sys_safe_err91 |
                      sys_safe_err92 |
                      sys_safe_err93 |
                      sys_safe_err94 |
                      sys_safe_err95 |
                      sys_safe_err96 |
                      sys_safe_err97 |
                      sys_safe_err98 |
                      sys_safe_err99 |
                      sys_safe_err100 |
                      sys_safe_err101 |
                      sys_safe_err102 |
                      sys_safe_err103 |
                      sys_safe_err104 |
                      sys_safe_err105 |
                      sys_safe_err106 |
                      sys_safe_err107 |
                      sys_safe_err108 |
                      sys_safe_err109 |
                      sys_safe_err110 |
                      sys_safe_err111 |
                      sys_safe_err112 |
                      sys_safe_err113 |
                      sys_safe_err114 |
                      sys_safe_err115 |
                      sys_safe_err116 |
                      sys_safe_err117;

// =============================================================
//                          ENV_FAIRNESS:
// =============================================================
// Assumption 1: 
// G(F(stateA1=0));
assign env_fair0 =  ~reg_stateA1;

// Assumption 2:
// G(F(hready=1));
assign env_fair1 =  i_hready;


// =============================================================
//                          SYS_FAIRNESS:
// =============================================================
// Guarantee 2:
// G(F(stateG2=0));
assign sys_fair0 = ~reg_stateG2;

// Guarantee 3:
// G(F((stateG3_0=0)  *  (stateG3_1=0)  *  (stateG3_2=0)));
assign sys_fair1 =  (~reg_stateG3_0 & ~reg_stateG3_1 & ~reg_stateG3_2);

// G(F(((hmaster0=0) * (hmaster1=0) * (hmaster2=0) * (hmaster3=0))  |  hbusreq0=0));
assign sys_fair2 =  ( ~(controllable_hmaster0) & ~(controllable_hmaster1) & ~(controllable_hmaster2) & ~(controllable_hmaster3) ) | ~i_hbusreq0;

// G(F(((hmaster0=1) * (hmaster1=0) * (hmaster2=0) * (hmaster3=0))  |  hbusreq1=0));
assign sys_fair3 =  ( controllable_hmaster0 & ~(controllable_hmaster1) & ~(controllable_hmaster2) & ~(controllable_hmaster3) ) | ~i_hbusreq1;

// G(F(((hmaster0=0) * (hmaster1=1) * (hmaster2=0) * (hmaster3=0))  |  hbusreq2=0));
assign sys_fair4 =  ( ~(controllable_hmaster0) & controllable_hmaster1 & ~(controllable_hmaster2) & ~(controllable_hmaster3) ) | ~i_hbusreq2;

// G(F(((hmaster0=1) * (hmaster1=1) * (hmaster2=0) * (hmaster3=0))  |  hbusreq3=0));
assign sys_fair5 =  ( controllable_hmaster0 & controllable_hmaster1 & ~(controllable_hmaster2) & ~(controllable_hmaster3) ) | ~i_hbusreq3;

// G(F(((hmaster0=0) * (hmaster1=0) * (hmaster2=1) * (hmaster3=0))  |  hbusreq4=0));
assign sys_fair6 =  ( ~(controllable_hmaster0) & ~(controllable_hmaster1) & controllable_hmaster2 & ~(controllable_hmaster3) ) | ~i_hbusreq4;

// G(F(((hmaster0=1) * (hmaster1=0) * (hmaster2=1) * (hmaster3=0))  |  hbusreq5=0));
assign sys_fair7 =  ( controllable_hmaster0 & ~(controllable_hmaster1) & controllable_hmaster2 & ~(controllable_hmaster3) ) | ~i_hbusreq5;

// G(F(((hmaster0=0) * (hmaster1=1) * (hmaster2=1) * (hmaster3=0))  |  hbusreq6=0));
assign sys_fair8 =  ( ~(controllable_hmaster0) & controllable_hmaster1 & controllable_hmaster2 & ~(controllable_hmaster3) ) | ~i_hbusreq6;

// G(F(((hmaster0=1) * (hmaster1=1) * (hmaster2=1) * (hmaster3=0))  |  hbusreq7=0));
assign sys_fair9 =  ( controllable_hmaster0 & controllable_hmaster1 & controllable_hmaster2 & ~(controllable_hmaster3) ) | ~i_hbusreq7;

// G(F(((hmaster0=0) * (hmaster1=0) * (hmaster2=0) * (hmaster3=1))  |  hbusreq8=0));
assign sys_fair10 =  ( ~(controllable_hmaster0) & ~(controllable_hmaster1) & ~(controllable_hmaster2) & controllable_hmaster3 ) | ~i_hbusreq8;

// G(F(((hmaster0=1) * (hmaster1=0) * (hmaster2=0) * (hmaster3=1))  |  hbusreq9=0));
assign sys_fair11 =  ( controllable_hmaster0 & ~(controllable_hmaster1) & ~(controllable_hmaster2) & controllable_hmaster3 ) | ~i_hbusreq9;

// G(F(((hmaster0=0) * (hmaster1=1) * (hmaster2=0) * (hmaster3=1))  |  hbusreq10=0));
assign sys_fair12 =  ( ~(controllable_hmaster0) & controllable_hmaster1 & ~(controllable_hmaster2) & controllable_hmaster3 ) | ~i_hbusreq10;

// G(F(((hmaster0=1) * (hmaster1=1) * (hmaster2=0) * (hmaster3=1))  |  hbusreq11=0));
assign sys_fair13 =  ( controllable_hmaster0 & controllable_hmaster1 & ~(controllable_hmaster2) & controllable_hmaster3 ) | ~i_hbusreq11;

// G(F(((hmaster0=0) * (hmaster1=0) * (hmaster2=1) * (hmaster3=1))  |  hbusreq12=0));
assign sys_fair14 =  ( ~(controllable_hmaster0) & ~(controllable_hmaster1) & controllable_hmaster2 & controllable_hmaster3 ) | ~i_hbusreq12;

// G(F(((hmaster0=1) * (hmaster1=0) * (hmaster2=1) * (hmaster3=1))  |  hbusreq13=0));
assign sys_fair15 =  ( controllable_hmaster0 & ~(controllable_hmaster1) & controllable_hmaster2 & controllable_hmaster3 ) | ~i_hbusreq13;

// G(F(((hmaster0=0) * (hmaster1=1) * (hmaster2=1) * (hmaster3=1))  |  hbusreq14=0));
assign sys_fair16 =  ( ~(controllable_hmaster0) & controllable_hmaster1 & controllable_hmaster2 & controllable_hmaster3 ) | ~i_hbusreq14;

// G(F(((hmaster0=1) * (hmaster1=1) * (hmaster2=1) * (hmaster3=1))  |  hbusreq15=0));
assign sys_fair17 =  ( controllable_hmaster0 & controllable_hmaster1 & controllable_hmaster2 & controllable_hmaster3 ) | ~i_hbusreq15;

assign fair_err = (fair_cnt >= 5'b11110);

// computing the error output bit:
assign o_err = ~env_safe_err & ~env_safe_err_happened & (sys_safe_err | fair_err);

initial
 begin
  reg_i_hready = 0;
  reg_i_hbusreq0 = 0;
  reg_i_hlock0 = 0;
  reg_i_hbusreq1 = 0;
  reg_i_hlock1 = 0;
  reg_i_hbusreq2 = 0;
  reg_i_hlock2 = 0;
  reg_i_hbusreq3 = 0;
  reg_i_hlock3 = 0;
  reg_i_hbusreq4 = 0;
  reg_i_hlock4 = 0;
  reg_i_hbusreq5 = 0;
  reg_i_hlock5 = 0;
  reg_i_hbusreq6 = 0;
  reg_i_hlock6 = 0;
  reg_i_hbusreq7 = 0;
  reg_i_hlock7 = 0;
  reg_i_hbusreq8 = 0;
  reg_i_hlock8 = 0;
  reg_i_hbusreq9 = 0;
  reg_i_hlock9 = 0;
  reg_i_hbusreq10 = 0;
  reg_i_hlock10 = 0;
  reg_i_hbusreq11 = 0;
  reg_i_hlock11 = 0;
  reg_i_hbusreq12 = 0;
  reg_i_hlock12 = 0;
  reg_i_hbusreq13 = 0;
  reg_i_hlock13 = 0;
  reg_i_hbusreq14 = 0;
  reg_i_hlock14 = 0;
  reg_i_hbusreq15 = 0;
  reg_i_hlock15 = 0;
  reg_controllable_hmaster0 = 0;
  reg_controllable_hmaster1 = 0;
  reg_controllable_hmaster2 = 0;
  reg_controllable_hmaster3 = 0;
  reg_controllable_hmastlock = 0;
  reg_controllable_nstart = 0;
  reg_controllable_ndecide = 0;
  reg_controllable_locked = 0;
  reg_controllable_nhgrant0 = 0;
  reg_controllable_hgrant1 = 0;
  reg_controllable_hgrant2 = 0;
  reg_controllable_hgrant3 = 0;
  reg_controllable_hgrant4 = 0;
  reg_controllable_hgrant5 = 0;
  reg_controllable_hgrant6 = 0;
  reg_controllable_hgrant7 = 0;
  reg_controllable_hgrant8 = 0;
  reg_controllable_hgrant9 = 0;
  reg_controllable_hgrant10 = 0;
  reg_controllable_hgrant11 = 0;
  reg_controllable_hgrant12 = 0;
  reg_controllable_hgrant13 = 0;
  reg_controllable_hgrant14 = 0;
  reg_controllable_hgrant15 = 0;
  reg_controllable_busreq = 0;
  reg_stateA1 = 0;
  reg_stateG2 = 0;
  reg_stateG3_0 = 0;
  reg_stateG3_1 = 0;
  reg_stateG3_2 = 0;
  reg_stateG10_1 = 0;
  reg_stateG10_2 = 0;
  reg_stateG10_3 = 0;
  reg_stateG10_4 = 0;
  reg_stateG10_5 = 0;
  reg_stateG10_6 = 0;
  reg_stateG10_7 = 0;
  reg_stateG10_8 = 0;
  reg_stateG10_9 = 0;
  reg_stateG10_10 = 0;
  reg_stateG10_11 = 0;
  reg_stateG10_12 = 0;
  reg_stateG10_13 = 0;
  reg_stateG10_14 = 0;
  reg_stateG10_15 = 0;
  env_safe_err_happened = 0;
  next_env_fair = 0;
  fair_cnt = 0;
  next_sys_fair = 0;
 end


always @(posedge i_clk)
 begin
   // We remember if an environment error occurred:
   env_safe_err_happened = env_safe_err_happened | env_safe_err;

   // Updating the fairness counters: 
   if((next_sys_fair == 0) & sys_fair0)
    begin
      next_sys_fair = 1;
      next_env_fair = 0;
      fair_cnt = 0;
    end
   else if((next_sys_fair == 1) & sys_fair1)
    begin
      next_sys_fair = 2;
      next_env_fair = 0;
      fair_cnt = 0;
    end
   else if((next_sys_fair == 2) & sys_fair2)
    begin
      next_sys_fair = 3;
      next_env_fair = 0;
      fair_cnt = 0;
    end
   else if((next_sys_fair == 3) & sys_fair3)
    begin
      next_sys_fair = 4;
      next_env_fair = 0;
      fair_cnt = 0;
    end
   else if((next_sys_fair == 4) & sys_fair4)
    begin
      next_sys_fair = 5;
      next_env_fair = 0;
      fair_cnt = 0;
    end
   else if((next_sys_fair == 5) & sys_fair5)
    begin
      next_sys_fair = 6;
      next_env_fair = 0;
      fair_cnt = 0;
    end
   else if((next_sys_fair == 6) & sys_fair6)
    begin
      next_sys_fair = 7;
      next_env_fair = 0;
      fair_cnt = 0;
    end
   else if((next_sys_fair == 7) & sys_fair7)
    begin
      next_sys_fair = 8;
      next_env_fair = 0;
      fair_cnt = 0;
    end
   else if((next_sys_fair == 8) & sys_fair8)
    begin
      next_sys_fair = 9;
      next_env_fair = 0;
      fair_cnt = 0;
    end
   else if((next_sys_fair == 9) & sys_fair9)
    begin
      next_sys_fair = 10;
      next_env_fair = 0;
      fair_cnt = 0;
    end
   else if((next_sys_fair == 10) & sys_fair10)
    begin
      next_sys_fair = 11;
      next_env_fair = 0;
      fair_cnt = 0;
    end
   else if((next_sys_fair == 11) & sys_fair11)
    begin
      next_sys_fair = 12;
      next_env_fair = 0;
      fair_cnt = 0;
    end
   else if((next_sys_fair == 12) & sys_fair12)
    begin
      next_sys_fair = 13;
      next_env_fair = 0;
      fair_cnt = 0;
    end
   else if((next_sys_fair == 13) & sys_fair13)
    begin
      next_sys_fair = 14;
      next_env_fair = 0;
      fair_cnt = 0;
    end
   else if((next_sys_fair == 14) & sys_fair14)
    begin
      next_sys_fair = 15;
      next_env_fair = 0;
      fair_cnt = 0;
    end
   else if((next_sys_fair == 15) & sys_fair15)
    begin
      next_sys_fair = 16;
      next_env_fair = 0;
      fair_cnt = 0;
    end
   else if((next_sys_fair == 16) & sys_fair16)
    begin
      next_sys_fair = 17;
      next_env_fair = 0;
      fair_cnt = 0;
    end
   else if((next_sys_fair == 17) & sys_fair17)
    begin
      next_sys_fair = 0;
      next_env_fair = 0;
      fair_cnt = 0;
    end
   else if(~next_env_fair & env_fair0)
    begin
      next_env_fair = 1;
    end
   else if(next_env_fair & env_fair1)
    begin
      next_env_fair = 0;
      fair_cnt = fair_cnt + 1;
    end

   // Updating the automata: 
   // Automaton A1: 
   if(~reg_stateA1 & controllable_hmastlock & ~i_hburst0 & ~i_hburst1)
    begin
      reg_stateA1 = 1'b1;
    end
   else if(reg_stateA1 & ~controllable_busreq)
    begin
      reg_stateA1 = 1'b0;
    end

   // Automaton G2: 
   if(~reg_stateG2)
    begin
      if(controllable_hmastlock & ~controllable_nstart & ~i_hburst0 & ~i_hburst1)
       begin
         reg_stateG2 = 1'b1;
       end
    end
   else // if(reg_stateG2)
    begin
      if(~controllable_busreq)
       begin
         reg_stateG2 = 1'b0;
       end
    end

   // Automaton G3: 
   if(~reg_stateG3_0 & ~reg_stateG3_1 & ~reg_stateG3_2 & controllable_hmastlock & ~controllable_nstart &  ~i_hburst0 & i_hburst1 & ~i_hready)
    begin
      reg_stateG3_0 = 1'b1;
      reg_stateG3_1 = 1'b0;
      reg_stateG3_2 = 1'b0;
    end
   else if(~reg_stateG3_0 & ~reg_stateG3_1 & ~reg_stateG3_2 & controllable_hmastlock & ~controllable_nstart &  ~i_hburst0 & i_hburst1 & i_hready)
    begin
      reg_stateG3_0 = 1'b0;
      reg_stateG3_1 = 1'b1;
      reg_stateG3_2 = 1'b0;
    end
   else if(reg_stateG3_0 & ~reg_stateG3_1 & ~reg_stateG3_2 & i_hready)
    begin
      reg_stateG3_0 = 1'b0;
      reg_stateG3_1 = 1'b1;
      reg_stateG3_2 = 1'b0;
    end
   else if(~reg_stateG3_0 & reg_stateG3_1 & ~reg_stateG3_2 & i_hready)
    begin
      reg_stateG3_0 = 1'b1;
      reg_stateG3_1 = 1'b1;
      reg_stateG3_2 = 1'b0;
    end
   else if(reg_stateG3_0 & reg_stateG3_1 & ~reg_stateG3_2 & i_hready)
    begin
      reg_stateG3_0 = 1'b0;
      reg_stateG3_1 = 1'b0;
      reg_stateG3_2 = 1'b1;
    end
   else if(~reg_stateG3_0 & ~reg_stateG3_1 & reg_stateG3_2 & i_hready)
    begin
      reg_stateG3_0 = 1'b0;
      reg_stateG3_1 = 1'b0;
      reg_stateG3_2 = 1'b0;
    end

   // Automaton G10_1: 
   if(~reg_stateG10_1 & ~controllable_hgrant1 & ~i_hbusreq1)
    begin
      reg_stateG10_1 = 1'b1;
    end
   else if(reg_stateG10_1 & i_hbusreq1)
    begin
      reg_stateG10_1 = 1'b0;
    end

   // Automaton G10_2: 
   if(~reg_stateG10_2 & ~controllable_hgrant2 & ~i_hbusreq2)
    begin
      reg_stateG10_2 = 1'b1;
    end
   else if(reg_stateG10_2 & i_hbusreq2)
    begin
      reg_stateG10_2 = 1'b0;
    end

   // Automaton G10_3: 
   if(~reg_stateG10_3 & ~controllable_hgrant3 & ~i_hbusreq3)
    begin
      reg_stateG10_3 = 1'b1;
    end
   else if(reg_stateG10_3 & i_hbusreq3)
    begin
      reg_stateG10_3 = 1'b0;
    end

   // Automaton G10_4: 
   if(~reg_stateG10_4 & ~controllable_hgrant4 & ~i_hbusreq4)
    begin
      reg_stateG10_4 = 1'b1;
    end
   else if(reg_stateG10_4 & i_hbusreq4)
    begin
      reg_stateG10_4 = 1'b0;
    end

   // Automaton G10_5: 
   if(~reg_stateG10_5 & ~controllable_hgrant5 & ~i_hbusreq5)
    begin
      reg_stateG10_5 = 1'b1;
    end
   else if(reg_stateG10_5 & i_hbusreq5)
    begin
      reg_stateG10_5 = 1'b0;
    end

   // Automaton G10_6: 
   if(~reg_stateG10_6 & ~controllable_hgrant6 & ~i_hbusreq6)
    begin
      reg_stateG10_6 = 1'b1;
    end
   else if(reg_stateG10_6 & i_hbusreq6)
    begin
      reg_stateG10_6 = 1'b0;
    end

   // Automaton G10_7: 
   if(~reg_stateG10_7 & ~controllable_hgrant7 & ~i_hbusreq7)
    begin
      reg_stateG10_7 = 1'b1;
    end
   else if(reg_stateG10_7 & i_hbusreq7)
    begin
      reg_stateG10_7 = 1'b0;
    end

   // Automaton G10_8: 
   if(~reg_stateG10_8 & ~controllable_hgrant8 & ~i_hbusreq8)
    begin
      reg_stateG10_8 = 1'b1;
    end
   else if(reg_stateG10_8 & i_hbusreq8)
    begin
      reg_stateG10_8 = 1'b0;
    end

   // Automaton G10_9: 
   if(~reg_stateG10_9 & ~controllable_hgrant9 & ~i_hbusreq9)
    begin
      reg_stateG10_9 = 1'b1;
    end
   else if(reg_stateG10_9 & i_hbusreq9)
    begin
      reg_stateG10_9 = 1'b0;
    end

   // Automaton G10_10: 
   if(~reg_stateG10_10 & ~controllable_hgrant10 & ~i_hbusreq10)
    begin
      reg_stateG10_10 = 1'b1;
    end
   else if(reg_stateG10_10 & i_hbusreq10)
    begin
      reg_stateG10_10 = 1'b0;
    end

   // Automaton G10_11: 
   if(~reg_stateG10_11 & ~controllable_hgrant11 & ~i_hbusreq11)
    begin
      reg_stateG10_11 = 1'b1;
    end
   else if(reg_stateG10_11 & i_hbusreq11)
    begin
      reg_stateG10_11 = 1'b0;
    end

   // Automaton G10_12: 
   if(~reg_stateG10_12 & ~controllable_hgrant12 & ~i_hbusreq12)
    begin
      reg_stateG10_12 = 1'b1;
    end
   else if(reg_stateG10_12 & i_hbusreq12)
    begin
      reg_stateG10_12 = 1'b0;
    end

   // Automaton G10_13: 
   if(~reg_stateG10_13 & ~controllable_hgrant13 & ~i_hbusreq13)
    begin
      reg_stateG10_13 = 1'b1;
    end
   else if(reg_stateG10_13 & i_hbusreq13)
    begin
      reg_stateG10_13 = 1'b0;
    end

   // Automaton G10_14: 
   if(~reg_stateG10_14 & ~controllable_hgrant14 & ~i_hbusreq14)
    begin
      reg_stateG10_14 = 1'b1;
    end
   else if(reg_stateG10_14 & i_hbusreq14)
    begin
      reg_stateG10_14 = 1'b0;
    end

   // Automaton G10_15: 
   if(~reg_stateG10_15 & ~controllable_hgrant15 & ~i_hbusreq15)
    begin
      reg_stateG10_15 = 1'b1;
    end
   else if(reg_stateG10_15 & i_hbusreq15)
    begin
      reg_stateG10_15 = 1'b0;
    end

   // Latching the previous input:
   reg_i_hready =  i_hready;
   reg_i_hbusreq0 =  i_hbusreq0;
   reg_i_hlock0 =  i_hlock0;
   reg_i_hbusreq1 =  i_hbusreq1;
   reg_i_hlock1 =  i_hlock1;
   reg_i_hbusreq2 =  i_hbusreq2;
   reg_i_hlock2 =  i_hlock2;
   reg_i_hbusreq3 =  i_hbusreq3;
   reg_i_hlock3 =  i_hlock3;
   reg_i_hbusreq4 =  i_hbusreq4;
   reg_i_hlock4 =  i_hlock4;
   reg_i_hbusreq5 =  i_hbusreq5;
   reg_i_hlock5 =  i_hlock5;
   reg_i_hbusreq6 =  i_hbusreq6;
   reg_i_hlock6 =  i_hlock6;
   reg_i_hbusreq7 =  i_hbusreq7;
   reg_i_hlock7 =  i_hlock7;
   reg_i_hbusreq8 =  i_hbusreq8;
   reg_i_hlock8 =  i_hlock8;
   reg_i_hbusreq9 =  i_hbusreq9;
   reg_i_hlock9 =  i_hlock9;
   reg_i_hbusreq10 =  i_hbusreq10;
   reg_i_hlock10 =  i_hlock10;
   reg_i_hbusreq11 =  i_hbusreq11;
   reg_i_hlock11 =  i_hlock11;
   reg_i_hbusreq12 =  i_hbusreq12;
   reg_i_hlock12 =  i_hlock12;
   reg_i_hbusreq13 =  i_hbusreq13;
   reg_i_hlock13 =  i_hlock13;
   reg_i_hbusreq14 =  i_hbusreq14;
   reg_i_hlock14 =  i_hlock14;
   reg_i_hbusreq15 =  i_hbusreq15;
   reg_i_hlock15 =  i_hlock15;
   reg_controllable_hmaster0 =  controllable_hmaster0;
   reg_controllable_hmaster1 =  controllable_hmaster1;
   reg_controllable_hmaster2 =  controllable_hmaster2;
   reg_controllable_hmaster3 =  controllable_hmaster3;
   reg_controllable_hmastlock =  controllable_hmastlock;
   reg_controllable_nstart =  controllable_nstart;
   reg_controllable_ndecide =  controllable_ndecide;
   reg_controllable_locked =  controllable_locked;
   reg_controllable_nhgrant0 =  controllable_nhgrant0;
   reg_controllable_hgrant1 =  controllable_hgrant1;
   reg_controllable_hgrant2 =  controllable_hgrant2;
   reg_controllable_hgrant3 =  controllable_hgrant3;
   reg_controllable_hgrant4 =  controllable_hgrant4;
   reg_controllable_hgrant5 =  controllable_hgrant5;
   reg_controllable_hgrant6 =  controllable_hgrant6;
   reg_controllable_hgrant7 =  controllable_hgrant7;
   reg_controllable_hgrant8 =  controllable_hgrant8;
   reg_controllable_hgrant9 =  controllable_hgrant9;
   reg_controllable_hgrant10 =  controllable_hgrant10;
   reg_controllable_hgrant11 =  controllable_hgrant11;
   reg_controllable_hgrant12 =  controllable_hgrant12;
   reg_controllable_hgrant13 =  controllable_hgrant13;
   reg_controllable_hgrant14 =  controllable_hgrant14;
   reg_controllable_hgrant15 =  controllable_hgrant15;
   reg_controllable_busreq =  controllable_busreq;

 end
endmodule

-------------------------------
#!SYNTCOMP
STATUS : realizable
SOLVED_BY : 3/3 [2015-pre-classification]
SOLVED_IN : 242.126 [2015-pre-classification]
#.
