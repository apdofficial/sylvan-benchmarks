aag 852 32 57 1 763
2
4
6
8
10
12
14
16
18
20
22
24
26
28
30
32
34
36
38
40
42
44
46
48
50
52
54
56
58
60
62
64
66 1
68 1159
70 10
72 1181
74 56
76 60
78 14
80 1195
82 58
84 18
86 1279
88 1325
90 1339
92 32
94 22
96 1363
98 1377
100 6
102 50
104 30
106 1391
108 26
110 1411
112 34
114 28
116 8
118 42
120 24
122 1425
124 1437
126 1467
128 1489
130 44
132 20
134 64
136 1511
138 2
140 1525
142 46
144 1549
146 16
148 1599
150 1605
152 1611
154 1625
156 1647
158 48
160 12
162 36
164 211
166 1669
168 52
170 1683
172 4
174 1705
176 54
178 62
1004
180 43 12
182 45 16
184 183 181
186 47 20
188 187 184
190 49 24
192 191 188
194 53 28
196 195 192
198 55 30
200 199 196
202 57 32
204 203 200
206 165 66
208 207 66
210 209 204
212 63 61
214 212 59
216 42 35
218 43 34
220 219 217
222 221 214
224 62 61
226 224 59
228 44 35
230 45 34
232 231 229
234 233 226
236 235 223
238 63 60
240 238 59
242 46 35
244 47 34
246 245 243
248 247 240
250 249 236
252 62 60
254 252 59
256 48 35
258 49 34
260 259 257
262 261 254
264 263 250
266 212 58
268 52 35
270 53 34
272 271 269
274 273 266
276 275 264
278 224 58
280 54 35
282 55 34
284 283 281
286 285 278
288 287 276
290 238 58
292 56 35
294 57 34
296 295 293
298 297 290
300 299 288
302 163 66
304 162 66
306 303 66
308 307 9
310 309 300
312 127 66
314 126 66
316 313 66
318 314 9
320 319 310
322 87 66
324 86 66
326 323 66
328 97 66
330 96 66
332 329 66
334 333 327
336 111 66
338 110 66
340 337 66
342 341 334
344 343 9
346 345 320
348 139 66
350 138 66
352 349 66
354 350 214
356 353 215
358 357 355
360 359 304
362 361 346
364 173 66
366 172 66
368 365 66
370 369 226
372 366 227
374 373 371
376 375 304
378 377 362
380 71 66
382 70 66
384 381 66
386 385 240
388 382 241
390 389 387
392 391 304
394 393 378
396 79 66
398 78 66
400 397 66
402 401 254
404 398 255
406 405 403
408 407 304
410 409 394
412 85 66
414 84 66
416 413 66
418 417 266
420 414 267
422 421 419
424 423 304
426 425 410
428 95 66
430 94 66
432 429 66
434 433 278
436 430 279
438 437 435
440 439 304
442 441 426
444 109 66
446 108 66
448 445 66
450 449 290
452 446 291
454 453 451
456 455 304
458 457 442
460 101 66
462 100 66
464 461 66
466 462 65
468 465 64
470 469 467
472 471 304
474 473 458
476 179 66
478 178 66
480 477 66
482 77 66
484 76 66
486 483 66
488 487 481
490 83 66
492 82 66
494 491 66
496 495 488
498 497 214
500 496 215
502 501 499
504 503 8
506 505 474
508 487 478
510 508 495
512 511 226
514 510 227
516 515 513
518 517 8
520 519 506
522 484 481
524 522 495
526 525 240
528 524 241
530 529 527
532 531 8
534 533 520
536 484 478
538 536 495
540 539 254
542 538 255
544 543 541
546 545 8
548 547 534
550 492 488
552 551 266
554 550 267
556 555 553
558 557 8
560 559 548
562 508 492
564 563 278
566 562 279
568 567 565
570 569 8
572 571 560
574 522 492
576 575 290
578 574 291
580 579 577
582 581 8
584 583 572
586 135 66
588 134 66
590 587 66
592 591 64
594 588 65
596 595 593
598 597 8
600 599 584
602 103 66
604 102 66
606 603 66
608 161 66
610 160 66
612 609 66
614 610 607
616 614 3
618 616 7
620 619 600
622 613 607
624 622 3
626 624 6
628 627 620
630 147 66
632 146 66
634 631 66
636 632 607
638 636 4
640 638 7
642 641 628
644 635 607
646 644 4
648 646 6
650 649 642
652 133 66
654 132 66
656 653 66
658 654 607
660 658 10
662 660 7
664 663 650
666 657 607
668 666 10
670 668 6
672 671 664
674 121 66
676 120 66
678 675 66
680 676 607
682 680 14
684 682 7
686 685 672
688 679 607
690 688 14
692 690 6
694 693 686
696 115 66
698 114 66
700 697 66
702 698 607
704 702 18
706 704 7
708 707 694
710 701 607
712 710 18
714 712 6
716 715 708
718 105 66
720 104 66
722 719 66
724 720 607
726 724 22
728 726 7
730 729 716
732 723 607
734 732 22
736 734 6
738 737 730
740 93 66
742 92 66
744 741 66
746 742 607
748 746 26
750 748 7
752 751 738
754 745 607
756 754 26
758 756 6
760 759 752
762 353 2
764 350 3
766 765 763
768 767 604
770 769 760
772 366 5
774 369 4
776 775 773
778 777 604
780 779 770
782 382 11
784 385 10
786 785 783
788 787 604
790 789 780
792 398 15
794 401 14
796 795 793
798 797 604
800 799 790
802 414 19
804 417 18
806 805 803
808 807 604
810 809 800
812 430 23
814 433 22
816 815 813
818 817 604
820 819 810
822 446 27
824 449 26
826 825 823
828 827 604
830 829 820
832 462 7
834 465 6
836 835 833
838 837 604
840 839 830
842 129 66
844 128 66
846 843 66
848 45 4
850 848 844
852 851 840
854 137 66
856 136 66
858 855 66
860 47 10
862 860 856
864 863 852
866 157 66
868 156 66
870 867 66
872 49 14
874 872 868
876 875 864
878 167 66
880 166 66
882 879 66
884 53 18
886 884 880
888 887 876
890 175 66
892 174 66
894 891 66
896 55 22
898 896 892
900 899 888
902 73 66
904 72 66
906 903 66
908 57 26
910 908 904
912 911 900
914 119 66
916 915 66
918 131 66
920 919 66
922 921 917
924 143 66
926 925 66
928 927 922
930 159 66
932 931 66
934 933 928
936 169 66
938 937 66
940 939 934
942 177 66
944 943 66
946 945 940
948 75 66
950 949 66
952 951 946
954 952 607
956 954 2
958 957 912
960 153 66
962 152 66
964 961 66
966 151 66
968 150 66
970 967 66
972 149 66
974 148 66
976 973 66
978 977 971
980 978 965
982 981 964
984 982 979
986 976 968
988 987 979
990 979 965
992 978 962
994 993 991
996 988 976
998 996 994
1000 999 985
1002 1000 958
1004 1003 210
1006 91 66
1008 90 66
1010 1007 66
1012 1011 314
1014 123 66
1016 122 66
1018 1015 66
1020 1019 343
1022 1021 1013
1024 171 66
1026 170 66
1028 1025 66
1030 215 42
1032 1030 1029
1034 1033 1022
1036 99 66
1038 98 66
1040 1037 66
1042 227 44
1044 1042 1041
1046 1045 1034
1048 141 66
1050 140 66
1052 1049 66
1054 241 46
1056 1054 1053
1058 1057 1046
1060 69 66
1062 68 66
1064 1061 66
1066 255 48
1068 1066 1065
1070 1069 1058
1072 107 66
1074 106 66
1076 1073 66
1078 267 52
1080 1078 1077
1082 1081 1070
1084 155 66
1086 154 66
1088 1085 66
1090 279 54
1092 1090 1089
1094 1093 1082
1096 81 66
1098 80 66
1100 1097 66
1102 291 56
1104 1102 1101
1106 1105 1094
1108 1011 317
1110 1019 342
1112 1111 1109
1114 1031 1029
1116 1115 1112
1118 1043 1041
1120 1119 1116
1122 1055 1053
1124 1123 1120
1126 1067 1065
1128 1127 1124
1130 1079 1077
1132 1131 1128
1134 1091 1089
1136 1135 1132
1138 1103 1101
1140 1139 1136
1142 1141 1107
1144 1143 1107
1146 1141 1069
1148 1140 1062
1150 1149 1147
1152 1151 1107
1154 1152 1145
1156 1144 1062
1158 1157 1155
1160 907 27
1162 1160 57
1164 904 56
1166 1164 1163
1168 1167 1163
1170 1165 904
1172 1170 1163
1174 1173 1163
1176 1175 1169
1178 1168 904
1180 1179 1177
1182 1141 1105
1184 1140 1098
1186 1185 1183
1188 1187 1107
1190 1188 1145
1192 1144 1098
1194 1193 1191
1196 342 64
1198 1196 9
1200 1198 41
1202 1200 38
1204 1202 37
1206 1202 36
1208 333 324
1210 1208 341
1212 1210 36
1214 330 327
1216 1214 341
1218 1216 36
1220 330 324
1222 1220 341
1224 1222 36
1226 338 334
1228 1226 36
1230 1206 1205
1232 1231 1205
1234 1207 1205
1236 1234 1212
1238 1237 1232
1240 1234 1213
1242 1240 1218
1244 1243 1238
1246 1240 1219
1248 1246 1224
1250 1249 1244
1252 1246 1225
1254 1252 1228
1256 1255 1250
1258 1229 324
1260 1258 1225
1262 1260 1219
1264 1263 1219
1266 1265 1213
1268 1266 1207
1270 1268 1205
1272 1271 1205
1274 1273 1257
1276 1256 324
1278 1277 1275
1280 125 66
1282 124 66
1284 1281 66
1286 145 66
1288 144 66
1290 1287 66
1292 1288 1285
1294 89 66
1296 88 66
1298 1295 66
1300 1299 37
1302 1301 1293
1304 1140 1107
1306 1304 1302
1308 1307 1144
1310 1304 1303
1312 1311 1308
1314 1303 1301
1316 1314 1140
1318 1316 1107
1320 1318 1313
1322 1312 1296
1324 1323 1321
1326 1141 1013
1328 1140 1008
1330 1329 1327
1332 1331 1107
1334 1332 1145
1336 1144 1008
1338 1337 1335
1340 1229 330
1342 1340 1225
1344 1342 1219
1346 1345 1219
1348 1347 1213
1350 1349 1213
1352 1351 1207
1354 1353 1207
1356 1355 1205
1358 1356 1257
1360 1256 330
1362 1361 1359
1364 1141 1045
1366 1140 1038
1368 1367 1365
1370 1369 1107
1372 1370 1145
1374 1144 1038
1376 1375 1373
1378 1141 1081
1380 1140 1074
1382 1381 1379
1384 1383 1107
1386 1384 1145
1388 1144 1074
1390 1389 1387
1392 1229 338
1394 1392 1225
1396 1395 1225
1398 1397 1219
1400 1398 1213
1402 1400 1207
1404 1402 1205
1406 1404 1257
1408 1256 338
1410 1409 1407
1412 1141 1021
1414 1140 1016
1416 1415 1413
1418 1417 1107
1420 1418 1145
1422 1144 1016
1424 1423 1421
1426 1303 1293
1428 1426 1140
1430 1428 1107
1432 1430 1313
1434 1312 1282
1436 1435 1433
1438 64 9
1440 1438 41
1442 1440 39
1444 1442 317
1446 314 35
1448 1447 1445
1450 1443 314
1452 1451 1443
1454 314 34
1456 1453 317
1458 1454 314
1460 1459 1457
1462 1461 1449
1464 1448 314
1466 1465 1463
1468 847 5
1470 1468 45
1472 844 44
1474 1472 1471
1476 1475 1471
1478 1473 844
1480 1478 1471
1482 1481 1471
1484 1483 1477
1486 1476 844
1488 1487 1485
1490 859 11
1492 1490 47
1494 856 46
1496 1494 1493
1498 1497 1493
1500 1495 856
1502 1500 1493
1504 1503 1493
1506 1505 1499
1508 1498 856
1510 1509 1507
1512 1141 1057
1514 1140 1050
1516 1515 1513
1518 1517 1107
1520 1518 1145
1522 1144 1050
1524 1523 1521
1526 1291 64
1528 1526 41
1530 1528 39
1532 1288 35
1534 1532 1531
1536 1535 1531
1538 1533 1288
1540 1538 1531
1542 1541 1531
1544 1543 1537
1546 1536 1288
1548 1547 1545
1550 1302 977
1552 1303 974
1554 1553 1551
1556 1555 1140
1558 1556 1107
1560 974 971
1562 975 968
1564 1563 1561
1566 1565 1302
1568 1303 968
1570 1569 1567
1572 1571 1140
1574 1572 1107
1576 974 968
1578 1576 965
1580 1577 962
1582 1581 1579
1584 1583 1302
1586 1303 962
1588 1587 1585
1590 1589 1140
1592 1590 1107
1594 1558 1309
1596 1308 974
1598 1597 1595
1600 1574 1309
1602 1308 968
1604 1603 1601
1606 1592 1309
1608 1308 962
1610 1609 1607
1612 1141 1093
1614 1140 1086
1616 1615 1613
1618 1617 1107
1620 1618 1145
1622 1144 1086
1624 1623 1621
1626 871 15
1628 1626 49
1630 868 48
1632 1630 1629
1634 1633 1629
1636 1631 868
1638 1636 1629
1640 1639 1629
1642 1641 1635
1644 1634 868
1646 1645 1643
1648 883 19
1650 1648 53
1652 880 52
1654 1652 1651
1656 1655 1651
1658 1653 880
1660 1658 1651
1662 1661 1651
1664 1663 1657
1666 1656 880
1668 1667 1665
1670 1141 1033
1672 1140 1026
1674 1673 1671
1676 1675 1107
1678 1676 1145
1680 1144 1026
1682 1681 1679
1684 895 23
1686 1684 55
1688 892 54
1690 1688 1687
1692 1691 1687
1694 1689 892
1696 1694 1687
1698 1697 1687
1700 1699 1693
1702 1692 892
1704 1703 1701
i0 controllable_nhgrant0
i1 controllable_hgrant1
i2 controllable_locked
i3 controllable_nstart
i4 controllable_hgrant2
i5 i_hlock0
i6 controllable_hgrant3
i7 i_hlock1
i8 controllable_hgrant4
i9 i_hlock2
i10 controllable_hgrant5
i11 i_hlock3
i12 controllable_hgrant6
i13 i_hlock4
i14 i_hlock5
i15 i_hlock6
i16 controllable_busreq
i17 i_hready
i18 i_hburst1
i19 i_hburst0
i20 i_hbusreq0
i21 i_hbusreq1
i22 i_hbusreq2
i23 i_hbusreq3
i24 controllable_ndecide
i25 i_hbusreq4
i26 i_hbusreq5
i27 i_hbusreq6
i28 controllable_hmaster2
i29 controllable_hmaster1
i30 controllable_hmaster0
i31 controllable_hmastlock
l0 n67
l1 sys_fair5done_out
l2 reg_controllable_hgrant2_out
l3 reg_stateG10_6_out
l4 reg_i_hbusreq6_out
l5 reg_controllable_hmaster1_out
l6 reg_controllable_hgrant3_out
l7 sys_fair8done_out
l8 reg_controllable_hmaster2_out
l9 reg_controllable_hgrant4_out
l10 reg_stateG3_0_out
l11 env_fair1done_out
l12 sys_fair0done_out
l13 reg_i_hlock6_out
l14 reg_controllable_hgrant5_out
l15 reg_stateG3_1_out
l16 sys_fair3done_out
l17 reg_controllable_locked_out
l18 reg_controllable_ndecide_out
l19 reg_i_hlock5_out
l20 sys_fair6done_out
l21 reg_controllable_hgrant6_out
l22 reg_stateG3_2_out
l23 reg_controllable_busreq_out
l24 reg_i_hlock4_out
l25 reg_controllable_nstart_out
l26 reg_i_hbusreq0_out
l27 reg_i_hlock3_out
l28 sys_fair1done_out
l29 env_fair0done_out
l30 reg_stateG2_out
l31 reg_stateG10_1_out
l32 reg_i_hbusreq1_out
l33 reg_i_hlock2_out
l34 reg_controllable_hmastlock_out
l35 reg_stateG10_2_out
l36 reg_controllable_nhgrant0_out
l37 sys_fair4done_out
l38 reg_i_hbusreq2_out
l39 reg_stateA1_out
l40 reg_i_hlock1_out
l41 fair_cnt<0>_out
l42 fair_cnt<1>_out
l43 fair_cnt<2>_out
l44 sys_fair7done_out
l45 reg_stateG10_3_out
l46 reg_i_hbusreq3_out
l47 reg_i_hlock0_out
l48 reg_i_hready_out
l49 env_safe_err_happened_out
l50 reg_stateG10_4_out
l51 reg_i_hbusreq4_out
l52 sys_fair2done_out
l53 reg_controllable_hgrant1_out
l54 reg_stateG10_5_out
l55 reg_i_hbusreq5_out
l56 reg_controllable_hmaster0_out
o0 o_err
c
amba_7_new_5
This file was written by ABC on Sat Aug 31 20:24:40 2013
For information about AIGER format, refer to http://fmv.jku.at/aiger
-------------------------------
This AIGER file has been created by the following sequence of commands:
> vl2mv amba7b5.v   ---gives--> amba7b5.mv
> abc -c "read_blif_mv amba7b5.mv; write_aiger -s amba7b5n.aig"   ---gives--> amba7b5n.aig
> aigtoaig amba7b5n.aig amba7b5n.aag   ---gives--> amba7b5n.aag (this file)
Content of amba7b5.v:
module amba_7_new_5(
        o_err,
        i_clk,
        i_hready,
        i_hbusreq0,
        i_hlock0,
        i_hbusreq1,
        i_hlock1,
        i_hbusreq2,
        i_hlock2,
        i_hbusreq3,
        i_hlock3,
        i_hbusreq4,
        i_hlock4,
        i_hbusreq5,
        i_hlock5,
        i_hbusreq6,
        i_hlock6,
        i_hburst0,
        i_hburst1,
        controllable_hmaster0,
        controllable_hmaster1,
        controllable_hmaster2,
        controllable_hmastlock,
        controllable_nstart,
        controllable_ndecide,
        controllable_locked,
        controllable_nhgrant0,
        controllable_hgrant1,
        controllable_hgrant2,
        controllable_hgrant3,
        controllable_hgrant4,
        controllable_hgrant5,
        controllable_hgrant6,
        controllable_busreq);

input i_clk;
input i_hready;
input i_hbusreq0;
input i_hlock0;
input i_hbusreq1;
input i_hlock1;
input i_hbusreq2;
input i_hlock2;
input i_hbusreq3;
input i_hlock3;
input i_hbusreq4;
input i_hlock4;
input i_hbusreq5;
input i_hlock5;
input i_hbusreq6;
input i_hlock6;
input i_hburst0;
input i_hburst1;
input controllable_hmaster0;
input controllable_hmaster1;
input controllable_hmaster2;
input controllable_hmastlock;
input controllable_nstart;
input controllable_ndecide;
input controllable_locked;
input controllable_nhgrant0;
input controllable_hgrant1;
input controllable_hgrant2;
input controllable_hgrant3;
input controllable_hgrant4;
input controllable_hgrant5;
input controllable_hgrant6;
input controllable_busreq;
output o_err;

reg reg_i_hready;
reg reg_i_hbusreq0;
reg reg_i_hlock0;
reg reg_i_hbusreq1;
reg reg_i_hlock1;
reg reg_i_hbusreq2;
reg reg_i_hlock2;
reg reg_i_hbusreq3;
reg reg_i_hlock3;
reg reg_i_hbusreq4;
reg reg_i_hlock4;
reg reg_i_hbusreq5;
reg reg_i_hlock5;
reg reg_i_hbusreq6;
reg reg_i_hlock6;
reg reg_controllable_hmaster0;
reg reg_controllable_hmaster1;
reg reg_controllable_hmaster2;
reg reg_controllable_hmastlock;
reg reg_controllable_nstart;
reg reg_controllable_ndecide;
reg reg_controllable_locked;
reg reg_controllable_nhgrant0;
reg reg_controllable_hgrant1;
reg reg_controllable_hgrant2;
reg reg_controllable_hgrant3;
reg reg_controllable_hgrant4;
reg reg_controllable_hgrant5;
reg reg_controllable_hgrant6;
reg reg_controllable_busreq;
reg reg_stateA1;
reg reg_stateG2;
reg reg_stateG3_0;
reg reg_stateG3_1;
reg reg_stateG3_2;
reg reg_stateG10_1;
reg reg_stateG10_2;
reg reg_stateG10_3;
reg reg_stateG10_4;
reg reg_stateG10_5;
reg reg_stateG10_6;
reg env_safe_err_happened;
reg env_fair0done;
reg env_fair1done;
reg sys_fair0done;
reg sys_fair1done;
reg sys_fair2done;
reg sys_fair3done;
reg sys_fair4done;
reg sys_fair5done;
reg sys_fair6done;
reg sys_fair7done;
reg sys_fair8done;
reg [2:0] fair_cnt;

wire env_safe_err0;
wire env_safe_err1;
wire env_safe_err2;
wire env_safe_err3;
wire env_safe_err4;
wire env_safe_err5;
wire env_safe_err6;
wire env_safe_err;

wire sys_safe_err0;
wire sys_safe_err1;
wire sys_safe_err2;
wire sys_safe_err3;
wire sys_safe_err4;
wire sys_safe_err5;
wire sys_safe_err6;
wire sys_safe_err7;
wire sys_safe_err8;
wire sys_safe_err9;
wire sys_safe_err10;
wire sys_safe_err11;
wire sys_safe_err12;
wire sys_safe_err13;
wire sys_safe_err14;
wire sys_safe_err15;
wire sys_safe_err16;
wire sys_safe_err17;
wire sys_safe_err18;
wire sys_safe_err19;
wire sys_safe_err20;
wire sys_safe_err21;
wire sys_safe_err22;
wire sys_safe_err23;
wire sys_safe_err24;
wire sys_safe_err25;
wire sys_safe_err26;
wire sys_safe_err27;
wire sys_safe_err28;
wire sys_safe_err29;
wire sys_safe_err30;
wire sys_safe_err31;
wire sys_safe_err32;
wire sys_safe_err33;
wire sys_safe_err34;
wire sys_safe_err35;
wire sys_safe_err36;
wire sys_safe_err37;
wire sys_safe_err38;
wire sys_safe_err39;
wire sys_safe_err40;
wire sys_safe_err41;
wire sys_safe_err42;
wire sys_safe_err43;
wire sys_safe_err44;
wire sys_safe_err45;
wire sys_safe_err46;
wire sys_safe_err47;
wire sys_safe_err48;
wire sys_safe_err49;
wire sys_safe_err50;
wire sys_safe_err51;
wire sys_safe_err52;
wire sys_safe_err53;
wire sys_safe_err54;
wire sys_safe_err;

wire env_fair0;
wire env_fair1;

wire sys_fair0;
wire sys_fair1;
wire sys_fair2;
wire sys_fair3;
wire sys_fair4;
wire sys_fair5;
wire sys_fair6;
wire sys_fair7;
wire sys_fair8;
wire progress_in_sys_fair;
wire all_env_fair_fulfilled;
wire all_sys_fair_fulfilled;
wire fair_err;
wire o_err;

// =============================================================
//                        ENV_TRANSITION:
// =============================================================
// Assumption 3:
// G( hlock0=1 -> hbusreq0=1 );
assign env_safe_err0 =  ~(~ i_hlock0 | i_hbusreq0);

// Assumption 3:
// G( hlock1=1 -> hbusreq1=1 );
assign env_safe_err1 =  ~(~ i_hlock1 | i_hbusreq1);

// Assumption 3:
// G( hlock2=1 -> hbusreq2=1 );
assign env_safe_err2 =  ~(~ i_hlock2 | i_hbusreq2);

// Assumption 3:
// G( hlock3=1 -> hbusreq3=1 );
assign env_safe_err3 =  ~(~ i_hlock3 | i_hbusreq3);

// Assumption 3:
// G( hlock4=1 -> hbusreq4=1 );
assign env_safe_err4 =  ~(~ i_hlock4 | i_hbusreq4);

// Assumption 3:
// G( hlock5=1 -> hbusreq5=1 );
assign env_safe_err5 =  ~(~ i_hlock5 | i_hbusreq5);

// Assumption 3:
// G( hlock6=1 -> hbusreq6=1 );
assign env_safe_err6 =  ~(~ i_hlock6 | i_hbusreq6);

// collecting together the safety error bits:
assign env_safe_err = env_safe_err0 |
                      env_safe_err1 |
                      env_safe_err2 |
                      env_safe_err3 |
                      env_safe_err4 |
                      env_safe_err5 |
                      env_safe_err6;

// =============================================================
//                        SYS_TRANSITION:
// =============================================================
// G((hmaster0=0) * (hmaster1=0) * (hmaster2=0) -> (hbusreq0=0 <-> busreq=0));
assign sys_safe_err0 =  ~( ~( ~(controllable_hmaster0) & ~(controllable_hmaster1) & ~(controllable_hmaster2) )|(~i_hbusreq0 ^~ (~controllable_busreq)));

// G((hmaster0=1) * (hmaster1=0) * (hmaster2=0) -> (hbusreq1=0 <-> busreq=0));
assign sys_safe_err1 =  ~( ~( controllable_hmaster0 & ~(controllable_hmaster1) & ~(controllable_hmaster2) )|(~i_hbusreq1 ^~ (~controllable_busreq)));

// G((hmaster0=0) * (hmaster1=1) * (hmaster2=0) -> (hbusreq2=0 <-> busreq=0));
assign sys_safe_err2 =  ~( ~( ~(controllable_hmaster0) & controllable_hmaster1 & ~(controllable_hmaster2) )|(~i_hbusreq2 ^~ (~controllable_busreq)));

// G((hmaster0=1) * (hmaster1=1) * (hmaster2=0) -> (hbusreq3=0 <-> busreq=0));
assign sys_safe_err3 =  ~( ~( controllable_hmaster0 & controllable_hmaster1 & ~(controllable_hmaster2) )|(~i_hbusreq3 ^~ (~controllable_busreq)));

// G((hmaster0=0) * (hmaster1=0) * (hmaster2=1) -> (hbusreq4=0 <-> busreq=0));
assign sys_safe_err4 =  ~( ~( ~(controllable_hmaster0) & ~(controllable_hmaster1) & controllable_hmaster2 )|(~i_hbusreq4 ^~ (~controllable_busreq)));

// G((hmaster0=1) * (hmaster1=0) * (hmaster2=1) -> (hbusreq5=0 <-> busreq=0));
assign sys_safe_err5 =  ~( ~( controllable_hmaster0 & ~(controllable_hmaster1) & controllable_hmaster2 )|(~i_hbusreq5 ^~ (~controllable_busreq)));

// G((hmaster0=0) * (hmaster1=1) * (hmaster2=1) -> (hbusreq6=0 <-> busreq=0));
assign sys_safe_err6 =  ~( ~( ~(controllable_hmaster0) & controllable_hmaster1 & controllable_hmaster2 )|(~i_hbusreq6 ^~ (~controllable_busreq)));

// Guarantee 1:
// G((hready=0) -> X(start=0));
assign sys_safe_err7 =  ~( reg_i_hready | controllable_nstart );

// G(((stateG2=1) * (start=1)) -> FALSE;
assign sys_safe_err8 =  ~( ~(reg_stateG2 & ~controllable_nstart) | 0 );

// G(((stateG3_0=1) * (stateG3_1=0) * (stateG3_2=0) * ((start=1))) -> FALSE);
// G(((stateG3_0=0) * (stateG3_1=1) * (stateG3_2=0) * ((start=1))) -> FALSE);
// G(((stateG3_0=1) * (stateG3_1=1) * (stateG3_2=0) * ((start=1))) -> FALSE);
// G(((stateG3_0=0) * (stateG3_1=0) * (stateG3_2=1) * ((start=1))) -> FALSE);
// all these rules can be summarized as: only in state 000, start=1 is allowed:
assign sys_safe_err9 =  (reg_stateG3_0 | reg_stateG3_1 | reg_stateG3_2) & ~controllable_nstart;

// G( (hready=1) -> (   (hgrant0=1) <-> (X(hmaster0=0) * X(hmaster1=0) * X(hmaster2=0))  ) );
assign sys_safe_err10 =  ~( ~(reg_i_hready) | ( ~reg_controllable_nhgrant0 ^~ ( ~(controllable_hmaster0) & ~(controllable_hmaster1) & ~(controllable_hmaster2) ) ) );

// G( (hready=1) -> (   (hgrant1=1) <-> (X(hmaster0=1) * X(hmaster1=0) * X(hmaster2=0))  ) );
assign sys_safe_err11 =  ~( ~(reg_i_hready) | ( reg_controllable_hgrant1 ^~ ( controllable_hmaster0 & ~(controllable_hmaster1) & ~(controllable_hmaster2) ) ) );

// G( (hready=1) -> (   (hgrant2=1) <-> (X(hmaster0=0) * X(hmaster1=1) * X(hmaster2=0))  ) );
assign sys_safe_err12 =  ~( ~(reg_i_hready) | ( reg_controllable_hgrant2 ^~ ( ~(controllable_hmaster0) & controllable_hmaster1 & ~(controllable_hmaster2) ) ) );

// G( (hready=1) -> (   (hgrant3=1) <-> (X(hmaster0=1) * X(hmaster1=1) * X(hmaster2=0))  ) );
assign sys_safe_err13 =  ~( ~(reg_i_hready) | ( reg_controllable_hgrant3 ^~ ( controllable_hmaster0 & controllable_hmaster1 & ~(controllable_hmaster2) ) ) );

// G( (hready=1) -> (   (hgrant4=1) <-> (X(hmaster0=0) * X(hmaster1=0) * X(hmaster2=1))  ) );
assign sys_safe_err14 =  ~( ~(reg_i_hready) | ( reg_controllable_hgrant4 ^~ ( ~(controllable_hmaster0) & ~(controllable_hmaster1) & controllable_hmaster2 ) ) );

// G( (hready=1) -> (   (hgrant5=1) <-> (X(hmaster0=1) * X(hmaster1=0) * X(hmaster2=1))  ) );
assign sys_safe_err15 =  ~( ~(reg_i_hready) | ( reg_controllable_hgrant5 ^~ ( controllable_hmaster0 & ~(controllable_hmaster1) & controllable_hmaster2 ) ) );

// G( (hready=1) -> (   (hgrant6=1) <-> (X(hmaster0=0) * X(hmaster1=1) * X(hmaster2=1))  ) );
assign sys_safe_err16 =  ~( ~(reg_i_hready) | ( reg_controllable_hgrant6 ^~ ( ~(controllable_hmaster0) & controllable_hmaster1 & controllable_hmaster2 ) ) );

// HMASTLOCK:
// G(  (hready=1) -> (locked=0 <-> X(hmastlock=0) ) );
assign sys_safe_err17 =  ~( ~(reg_i_hready) | (~reg_controllable_locked ^~ ~controllable_hmastlock) );

// Master 0:
// G( X(start=0) -> ( ((hmaster0=0) * (hmaster1=0) * (hmaster2=0)) <-> (X(hmaster0=0) * X(hmaster1=0) * X(hmaster2=0)) ) );
assign sys_safe_err18 =  ~( ~(controllable_nstart) | ( ( ~(reg_controllable_hmaster0) & ~(reg_controllable_hmaster1) & ~(reg_controllable_hmaster2) ) ^~ ( ~(controllable_hmaster0) & ~(controllable_hmaster1) & ~(controllable_hmaster2) )) );

// Master 1:
// G( X(start=0) -> ( ((hmaster0=1) * (hmaster1=0) * (hmaster2=0)) <-> (X(hmaster0=1) * X(hmaster1=0) * X(hmaster2=0)) ) );
assign sys_safe_err19 =  ~( ~(controllable_nstart) | ( ( reg_controllable_hmaster0 & ~(reg_controllable_hmaster1) & ~(reg_controllable_hmaster2) ) ^~ ( controllable_hmaster0 & ~(controllable_hmaster1) & ~(controllable_hmaster2) )) );

// Master 2:
// G( X(start=0) -> ( ((hmaster0=0) * (hmaster1=1) * (hmaster2=0)) <-> (X(hmaster0=0) * X(hmaster1=1) * X(hmaster2=0)) ) );
assign sys_safe_err20 =  ~( ~(controllable_nstart) | ( ( ~(reg_controllable_hmaster0) & reg_controllable_hmaster1 & ~(reg_controllable_hmaster2) ) ^~ ( ~(controllable_hmaster0) & controllable_hmaster1 & ~(controllable_hmaster2) )) );

// Master 3:
// G( X(start=0) -> ( ((hmaster0=1) * (hmaster1=1) * (hmaster2=0)) <-> (X(hmaster0=1) * X(hmaster1=1) * X(hmaster2=0)) ) );
assign sys_safe_err21 =  ~( ~(controllable_nstart) | ( ( reg_controllable_hmaster0 & reg_controllable_hmaster1 & ~(reg_controllable_hmaster2) ) ^~ ( controllable_hmaster0 & controllable_hmaster1 & ~(controllable_hmaster2) )) );

// Master 4:
// G( X(start=0) -> ( ((hmaster0=0) * (hmaster1=0) * (hmaster2=1)) <-> (X(hmaster0=0) * X(hmaster1=0) * X(hmaster2=1)) ) );
assign sys_safe_err22 =  ~( ~(controllable_nstart) | ( ( ~(reg_controllable_hmaster0) & ~(reg_controllable_hmaster1) & reg_controllable_hmaster2 ) ^~ ( ~(controllable_hmaster0) & ~(controllable_hmaster1) & controllable_hmaster2 )) );

// Master 5:
// G( X(start=0) -> ( ((hmaster0=1) * (hmaster1=0) * (hmaster2=1)) <-> (X(hmaster0=1) * X(hmaster1=0) * X(hmaster2=1)) ) );
assign sys_safe_err23 =  ~( ~(controllable_nstart) | ( ( reg_controllable_hmaster0 & ~(reg_controllable_hmaster1) & reg_controllable_hmaster2 ) ^~ ( controllable_hmaster0 & ~(controllable_hmaster1) & controllable_hmaster2 )) );

// Master 6:
// G( X(start=0) -> ( ((hmaster0=0) * (hmaster1=1) * (hmaster2=1)) <-> (X(hmaster0=0) * X(hmaster1=1) * X(hmaster2=1)) ) );
assign sys_safe_err24 =  ~( ~(controllable_nstart) | ( ( ~(reg_controllable_hmaster0) & reg_controllable_hmaster1 & reg_controllable_hmaster2 ) ^~ ( ~(controllable_hmaster0) & controllable_hmaster1 & controllable_hmaster2 )) );

// Guarantee 6.2:
// G( ((X(start=0))) -> ( (hmastlock=1) <-> X(hmastlock=1)) );
assign sys_safe_err25 =  ~( ~(controllable_nstart) | ( reg_controllable_hmastlock ^~ controllable_hmastlock) );

// G( (decide=1  *  hlock0=1  *  X(hgrant0=1) )->X(locked=1));
assign sys_safe_err26 =  ~( ~(~reg_controllable_ndecide & reg_i_hlock0 & ~controllable_nhgrant0) | (controllable_locked) );

// G((decide=1  *  hlock0=0  *  X(hgrant0=1))->X(locked=0));
assign sys_safe_err27 =  ~( ~(~reg_controllable_ndecide & ~reg_i_hlock0 & ~controllable_nhgrant0) | (~controllable_locked) );

// G( (decide=1  *  hlock1=1  *  X(hgrant1=1) )->X(locked=1));
assign sys_safe_err28 =  ~( ~(~reg_controllable_ndecide & reg_i_hlock1 & controllable_hgrant1) | (controllable_locked) );

// G((decide=1  *  hlock1=0  *  X(hgrant1=1))->X(locked=0));
assign sys_safe_err29 =  ~( ~(~reg_controllable_ndecide & ~reg_i_hlock1 & controllable_hgrant1) | (~controllable_locked) );

// G( (decide=1  *  hlock2=1  *  X(hgrant2=1) )->X(locked=1));
assign sys_safe_err30 =  ~( ~(~reg_controllable_ndecide & reg_i_hlock2 & controllable_hgrant2) | (controllable_locked) );

// G((decide=1  *  hlock2=0  *  X(hgrant2=1))->X(locked=0));
assign sys_safe_err31 =  ~( ~(~reg_controllable_ndecide & ~reg_i_hlock2 & controllable_hgrant2) | (~controllable_locked) );

// G( (decide=1  *  hlock3=1  *  X(hgrant3=1) )->X(locked=1));
assign sys_safe_err32 =  ~( ~(~reg_controllable_ndecide & reg_i_hlock3 & controllable_hgrant3) | (controllable_locked) );

// G((decide=1  *  hlock3=0  *  X(hgrant3=1))->X(locked=0));
assign sys_safe_err33 =  ~( ~(~reg_controllable_ndecide & ~reg_i_hlock3 & controllable_hgrant3) | (~controllable_locked) );

// G( (decide=1  *  hlock4=1  *  X(hgrant4=1) )->X(locked=1));
assign sys_safe_err34 =  ~( ~(~reg_controllable_ndecide & reg_i_hlock4 & controllable_hgrant4) | (controllable_locked) );

// G((decide=1  *  hlock4=0  *  X(hgrant4=1))->X(locked=0));
assign sys_safe_err35 =  ~( ~(~reg_controllable_ndecide & ~reg_i_hlock4 & controllable_hgrant4) | (~controllable_locked) );

// G( (decide=1  *  hlock5=1  *  X(hgrant5=1) )->X(locked=1));
assign sys_safe_err36 =  ~( ~(~reg_controllable_ndecide & reg_i_hlock5 & controllable_hgrant5) | (controllable_locked) );

// G((decide=1  *  hlock5=0  *  X(hgrant5=1))->X(locked=0));
assign sys_safe_err37 =  ~( ~(~reg_controllable_ndecide & ~reg_i_hlock5 & controllable_hgrant5) | (~controllable_locked) );

// G( (decide=1  *  hlock6=1  *  X(hgrant6=1) )->X(locked=1));
assign sys_safe_err38 =  ~( ~(~reg_controllable_ndecide & reg_i_hlock6 & controllable_hgrant6) | (controllable_locked) );

// G((decide=1  *  hlock6=0  *  X(hgrant6=1))->X(locked=0));
assign sys_safe_err39 =  ~( ~(~reg_controllable_ndecide & ~reg_i_hlock6 & controllable_hgrant6) | (~controllable_locked) );

// G( (decide=0) -> (  ((hgrant0=0)<->X(hgrant0=0))  ));
assign sys_safe_err40 =  ~( ~(reg_controllable_ndecide) | (reg_controllable_nhgrant0 ^~ controllable_nhgrant0) );

// G( (decide=0) -> (  ((hgrant1=0)<->X(hgrant1=0))  ));
assign sys_safe_err41 =  ~( ~(reg_controllable_ndecide) | (~reg_controllable_hgrant1 ^~ ~controllable_hgrant1) );

// G( (decide=0) -> (  ((hgrant2=0)<->X(hgrant2=0))  ));
assign sys_safe_err42 =  ~( ~(reg_controllable_ndecide) | (~reg_controllable_hgrant2 ^~ ~controllable_hgrant2) );

// G( (decide=0) -> (  ((hgrant3=0)<->X(hgrant3=0))  ));
assign sys_safe_err43 =  ~( ~(reg_controllable_ndecide) | (~reg_controllable_hgrant3 ^~ ~controllable_hgrant3) );

// G( (decide=0) -> (  ((hgrant4=0)<->X(hgrant4=0))  ));
assign sys_safe_err44 =  ~( ~(reg_controllable_ndecide) | (~reg_controllable_hgrant4 ^~ ~controllable_hgrant4) );

// G( (decide=0) -> (  ((hgrant5=0)<->X(hgrant5=0))  ));
assign sys_safe_err45 =  ~( ~(reg_controllable_ndecide) | (~reg_controllable_hgrant5 ^~ ~controllable_hgrant5) );

// G( (decide=0) -> (  ((hgrant6=0)<->X(hgrant6=0))  ));
assign sys_safe_err46 =  ~( ~(reg_controllable_ndecide) | (~reg_controllable_hgrant6 ^~ ~controllable_hgrant6) );

// G((decide=0)->(locked=0 <-> X(locked=0)));
assign sys_safe_err47 =  ~( ~(reg_controllable_ndecide) | (~reg_controllable_locked ^~ ~controllable_locked) );

// G(((stateG10_1=1) * (((hgrant1=1)) * (hbusreq1=0)))->FALSE);
assign sys_safe_err48 =  ~( ~(reg_stateG10_1 & (controllable_hgrant1 & ~i_hbusreq1)) | 0 );

// G(((stateG10_2=1) * (((hgrant2=1)) * (hbusreq2=0)))->FALSE);
assign sys_safe_err49 =  ~( ~(reg_stateG10_2 & (controllable_hgrant2 & ~i_hbusreq2)) | 0 );

// G(((stateG10_3=1) * (((hgrant3=1)) * (hbusreq3=0)))->FALSE);
assign sys_safe_err50 =  ~( ~(reg_stateG10_3 & (controllable_hgrant3 & ~i_hbusreq3)) | 0 );

// G(((stateG10_4=1) * (((hgrant4=1)) * (hbusreq4=0)))->FALSE);
assign sys_safe_err51 =  ~( ~(reg_stateG10_4 & (controllable_hgrant4 & ~i_hbusreq4)) | 0 );

// G(((stateG10_5=1) * (((hgrant5=1)) * (hbusreq5=0)))->FALSE);
assign sys_safe_err52 =  ~( ~(reg_stateG10_5 & (controllable_hgrant5 & ~i_hbusreq5)) | 0 );

// G(((stateG10_6=1) * (((hgrant6=1)) * (hbusreq6=0)))->FALSE);
assign sys_safe_err53 =  ~( ~(reg_stateG10_6 & (controllable_hgrant6 & ~i_hbusreq6)) | 0 );

// default master
// G((decide=1  *  hbusreq0=0  *  hbusreq1=0  *  hbusreq2=0  *  hbusreq3=0  *  hbusreq4=0  *  hbusreq5=0  *  hbusreq6=0) -> X(hgrant0=1));
assign sys_safe_err54 =  ~( ~(~reg_controllable_ndecide & (~reg_i_hbusreq0 & ~reg_i_hbusreq1 & ~reg_i_hbusreq2 & ~reg_i_hbusreq3 & ~reg_i_hbusreq4 & ~reg_i_hbusreq5 & ~reg_i_hbusreq6)) | (~controllable_nhgrant0) );

// collecting together the safety error bits:
assign sys_safe_err = sys_safe_err0 |
                      sys_safe_err1 |
                      sys_safe_err2 |
                      sys_safe_err3 |
                      sys_safe_err4 |
                      sys_safe_err5 |
                      sys_safe_err6 |
                      sys_safe_err7 |
                      sys_safe_err8 |
                      sys_safe_err9 |
                      sys_safe_err10 |
                      sys_safe_err11 |
                      sys_safe_err12 |
                      sys_safe_err13 |
                      sys_safe_err14 |
                      sys_safe_err15 |
                      sys_safe_err16 |
                      sys_safe_err17 |
                      sys_safe_err18 |
                      sys_safe_err19 |
                      sys_safe_err20 |
                      sys_safe_err21 |
                      sys_safe_err22 |
                      sys_safe_err23 |
                      sys_safe_err24 |
                      sys_safe_err25 |
                      sys_safe_err26 |
                      sys_safe_err27 |
                      sys_safe_err28 |
                      sys_safe_err29 |
                      sys_safe_err30 |
                      sys_safe_err31 |
                      sys_safe_err32 |
                      sys_safe_err33 |
                      sys_safe_err34 |
                      sys_safe_err35 |
                      sys_safe_err36 |
                      sys_safe_err37 |
                      sys_safe_err38 |
                      sys_safe_err39 |
                      sys_safe_err40 |
                      sys_safe_err41 |
                      sys_safe_err42 |
                      sys_safe_err43 |
                      sys_safe_err44 |
                      sys_safe_err45 |
                      sys_safe_err46 |
                      sys_safe_err47 |
                      sys_safe_err48 |
                      sys_safe_err49 |
                      sys_safe_err50 |
                      sys_safe_err51 |
                      sys_safe_err52 |
                      sys_safe_err53 |
                      sys_safe_err54;

// =============================================================
//                          ENV_FAIRNESS:
// =============================================================
// Assumption 1: 
// G(F(stateA1=0));
assign env_fair0 =  ~reg_stateA1;

// Assumption 2:
// G(F(hready=1));
assign env_fair1 =  i_hready;

assign all_env_fair_fulfilled = (env_fair0done | env_fair0) &
                                (env_fair1done | env_fair1);

// =============================================================
//                          SYS_FAIRNESS:
// =============================================================
// Guarantee 2:
// G(F(stateG2=0));
assign sys_fair0 = ~reg_stateG2;

// Guarantee 3:
// G(F((stateG3_0=0)  *  (stateG3_1=0)  *  (stateG3_2=0)));
assign sys_fair1 =  (~reg_stateG3_0 & ~reg_stateG3_1 & ~reg_stateG3_2);

// G(F(((hmaster0=0) * (hmaster1=0) * (hmaster2=0))  |  hbusreq0=0));
assign sys_fair2 =  ( ~(controllable_hmaster0) & ~(controllable_hmaster1) & ~(controllable_hmaster2) ) | ~i_hbusreq0;

// G(F(((hmaster0=1) * (hmaster1=0) * (hmaster2=0))  |  hbusreq1=0));
assign sys_fair3 =  ( controllable_hmaster0 & ~(controllable_hmaster1) & ~(controllable_hmaster2) ) | ~i_hbusreq1;

// G(F(((hmaster0=0) * (hmaster1=1) * (hmaster2=0))  |  hbusreq2=0));
assign sys_fair4 =  ( ~(controllable_hmaster0) & controllable_hmaster1 & ~(controllable_hmaster2) ) | ~i_hbusreq2;

// G(F(((hmaster0=1) * (hmaster1=1) * (hmaster2=0))  |  hbusreq3=0));
assign sys_fair5 =  ( controllable_hmaster0 & controllable_hmaster1 & ~(controllable_hmaster2) ) | ~i_hbusreq3;

// G(F(((hmaster0=0) * (hmaster1=0) * (hmaster2=1))  |  hbusreq4=0));
assign sys_fair6 =  ( ~(controllable_hmaster0) & ~(controllable_hmaster1) & controllable_hmaster2 ) | ~i_hbusreq4;

// G(F(((hmaster0=1) * (hmaster1=0) * (hmaster2=1))  |  hbusreq5=0));
assign sys_fair7 =  ( controllable_hmaster0 & ~(controllable_hmaster1) & controllable_hmaster2 ) | ~i_hbusreq5;

// G(F(((hmaster0=0) * (hmaster1=1) * (hmaster2=1))  |  hbusreq6=0));
assign sys_fair8 =  ( ~(controllable_hmaster0) & controllable_hmaster1 & controllable_hmaster2 ) | ~i_hbusreq6;

assign all_sys_fair_fulfilled = (sys_fair0done | sys_fair0) &
                                (sys_fair1done | sys_fair1) &
                                (sys_fair2done | sys_fair2) &
                                (sys_fair3done | sys_fair3) &
                                (sys_fair4done | sys_fair4) &
                                (sys_fair5done | sys_fair5) &
                                (sys_fair6done | sys_fair6) &
                                (sys_fair7done | sys_fair7) &
                                (sys_fair8done | sys_fair8);
assign progress_in_sys_fair = (~sys_fair0done & sys_fair0) |
                                (~sys_fair1done & sys_fair1) |
                                (~sys_fair2done & sys_fair2) |
                                (~sys_fair3done & sys_fair3) |
                                (~sys_fair4done & sys_fair4) |
                                (~sys_fair5done & sys_fair5) |
                                (~sys_fair6done & sys_fair6) |
                                (~sys_fair7done & sys_fair7) |
                                (~sys_fair8done & sys_fair8);
assign fair_err = (fair_cnt >= 3'b101);

// computing the error output bit:
assign o_err = ~env_safe_err & ~env_safe_err_happened & (sys_safe_err | fair_err);

initial
 begin
  reg_i_hready = 0;
  reg_i_hbusreq0 = 0;
  reg_i_hlock0 = 0;
  reg_i_hbusreq1 = 0;
  reg_i_hlock1 = 0;
  reg_i_hbusreq2 = 0;
  reg_i_hlock2 = 0;
  reg_i_hbusreq3 = 0;
  reg_i_hlock3 = 0;
  reg_i_hbusreq4 = 0;
  reg_i_hlock4 = 0;
  reg_i_hbusreq5 = 0;
  reg_i_hlock5 = 0;
  reg_i_hbusreq6 = 0;
  reg_i_hlock6 = 0;
  reg_controllable_hmaster0 = 0;
  reg_controllable_hmaster1 = 0;
  reg_controllable_hmaster2 = 0;
  reg_controllable_hmastlock = 0;
  reg_controllable_nstart = 0;
  reg_controllable_ndecide = 0;
  reg_controllable_locked = 0;
  reg_controllable_nhgrant0 = 0;
  reg_controllable_hgrant1 = 0;
  reg_controllable_hgrant2 = 0;
  reg_controllable_hgrant3 = 0;
  reg_controllable_hgrant4 = 0;
  reg_controllable_hgrant5 = 0;
  reg_controllable_hgrant6 = 0;
  reg_controllable_busreq = 0;
  reg_stateA1 = 0;
  reg_stateG2 = 0;
  reg_stateG3_0 = 0;
  reg_stateG3_1 = 0;
  reg_stateG3_2 = 0;
  reg_stateG10_1 = 0;
  reg_stateG10_2 = 0;
  reg_stateG10_3 = 0;
  reg_stateG10_4 = 0;
  reg_stateG10_5 = 0;
  reg_stateG10_6 = 0;
  env_safe_err_happened = 0;
  env_fair0done = 0;
  env_fair1done = 0;
  sys_fair0done = 0;
  sys_fair1done = 0;
  sys_fair2done = 0;
  sys_fair3done = 0;
  sys_fair4done = 0;
  sys_fair5done = 0;
  sys_fair6done = 0;
  sys_fair7done = 0;
  sys_fair8done = 0;
  fair_cnt = 0;
 end


always @(posedge i_clk)
 begin
   // We remember if an environment error occurred:
   env_safe_err_happened = env_safe_err_happened | env_safe_err;

   // Updating the fairness counters: 
   if(all_sys_fair_fulfilled)
    begin
      env_fair0done = 0;
      env_fair1done = 0;
      sys_fair0done = 0;
      sys_fair1done = 0;
      sys_fair2done = 0;
      sys_fair3done = 0;
      sys_fair4done = 0;
      sys_fair5done = 0;
      sys_fair6done = 0;
      sys_fair7done = 0;
      sys_fair8done = 0;
      fair_cnt = 0;
    end
   else
    begin
      if(progress_in_sys_fair)
       begin
         env_fair0done = 0;
         env_fair1done = 0;
         fair_cnt = 0;
         sys_fair0done = sys_fair0done | sys_fair0;
         sys_fair1done = sys_fair1done | sys_fair1;
         sys_fair2done = sys_fair2done | sys_fair2;
         sys_fair3done = sys_fair3done | sys_fair3;
         sys_fair4done = sys_fair4done | sys_fair4;
         sys_fair5done = sys_fair5done | sys_fair5;
         sys_fair6done = sys_fair6done | sys_fair6;
         sys_fair7done = sys_fair7done | sys_fair7;
         sys_fair8done = sys_fair8done | sys_fair8;
       end
      else
       begin
         if(all_env_fair_fulfilled)
          begin
            env_fair0done = 0;
            env_fair1done = 0;
            fair_cnt = fair_cnt + 1;
          end
         else
          begin
            env_fair0done = env_fair0done | env_fair0;
            env_fair1done = env_fair1done | env_fair1;
          end
       end
    end

   // Updating the automata: 
   // Automaton A1: 
   if(~reg_stateA1 & controllable_hmastlock & ~i_hburst0 & ~i_hburst1)
    begin
      reg_stateA1 = 1'b1;
    end
   else if(reg_stateA1 & ~controllable_busreq)
    begin
      reg_stateA1 = 1'b0;
    end

   // Automaton G2: 
   if(~reg_stateG2)
    begin
      if(controllable_hmastlock & ~controllable_nstart & ~i_hburst0 & ~i_hburst1)
       begin
         reg_stateG2 = 1'b1;
       end
    end
   else // if(reg_stateG2)
    begin
      if(~controllable_busreq)
       begin
         reg_stateG2 = 1'b0;
       end
    end

   // Automaton G3: 
   if(~reg_stateG3_0 & ~reg_stateG3_1 & ~reg_stateG3_2 & controllable_hmastlock & ~controllable_nstart &  ~i_hburst0 & i_hburst1 & ~i_hready)
    begin
      reg_stateG3_0 = 1'b1;
      reg_stateG3_1 = 1'b0;
      reg_stateG3_2 = 1'b0;
    end
   else if(~reg_stateG3_0 & ~reg_stateG3_1 & ~reg_stateG3_2 & controllable_hmastlock & ~controllable_nstart &  ~i_hburst0 & i_hburst1 & i_hready)
    begin
      reg_stateG3_0 = 1'b0;
      reg_stateG3_1 = 1'b1;
      reg_stateG3_2 = 1'b0;
    end
   else if(reg_stateG3_0 & ~reg_stateG3_1 & ~reg_stateG3_2 & i_hready)
    begin
      reg_stateG3_0 = 1'b0;
      reg_stateG3_1 = 1'b1;
      reg_stateG3_2 = 1'b0;
    end
   else if(~reg_stateG3_0 & reg_stateG3_1 & ~reg_stateG3_2 & i_hready)
    begin
      reg_stateG3_0 = 1'b1;
      reg_stateG3_1 = 1'b1;
      reg_stateG3_2 = 1'b0;
    end
   else if(reg_stateG3_0 & reg_stateG3_1 & ~reg_stateG3_2 & i_hready)
    begin
      reg_stateG3_0 = 1'b0;
      reg_stateG3_1 = 1'b0;
      reg_stateG3_2 = 1'b1;
    end
   else if(~reg_stateG3_0 & ~reg_stateG3_1 & reg_stateG3_2 & i_hready)
    begin
      reg_stateG3_0 = 1'b0;
      reg_stateG3_1 = 1'b0;
      reg_stateG3_2 = 1'b0;
    end

   // Automaton G10_1: 
   if(~reg_stateG10_1 & ~controllable_hgrant1 & ~i_hbusreq1)
    begin
      reg_stateG10_1 = 1'b1;
    end
   else if(reg_stateG10_1 & i_hbusreq1)
    begin
      reg_stateG10_1 = 1'b0;
    end

   // Automaton G10_2: 
   if(~reg_stateG10_2 & ~controllable_hgrant2 & ~i_hbusreq2)
    begin
      reg_stateG10_2 = 1'b1;
    end
   else if(reg_stateG10_2 & i_hbusreq2)
    begin
      reg_stateG10_2 = 1'b0;
    end

   // Automaton G10_3: 
   if(~reg_stateG10_3 & ~controllable_hgrant3 & ~i_hbusreq3)
    begin
      reg_stateG10_3 = 1'b1;
    end
   else if(reg_stateG10_3 & i_hbusreq3)
    begin
      reg_stateG10_3 = 1'b0;
    end

   // Automaton G10_4: 
   if(~reg_stateG10_4 & ~controllable_hgrant4 & ~i_hbusreq4)
    begin
      reg_stateG10_4 = 1'b1;
    end
   else if(reg_stateG10_4 & i_hbusreq4)
    begin
      reg_stateG10_4 = 1'b0;
    end

   // Automaton G10_5: 
   if(~reg_stateG10_5 & ~controllable_hgrant5 & ~i_hbusreq5)
    begin
      reg_stateG10_5 = 1'b1;
    end
   else if(reg_stateG10_5 & i_hbusreq5)
    begin
      reg_stateG10_5 = 1'b0;
    end

   // Automaton G10_6: 
   if(~reg_stateG10_6 & ~controllable_hgrant6 & ~i_hbusreq6)
    begin
      reg_stateG10_6 = 1'b1;
    end
   else if(reg_stateG10_6 & i_hbusreq6)
    begin
      reg_stateG10_6 = 1'b0;
    end

   // Latching the previous input:
   reg_i_hready =  i_hready;
   reg_i_hbusreq0 =  i_hbusreq0;
   reg_i_hlock0 =  i_hlock0;
   reg_i_hbusreq1 =  i_hbusreq1;
   reg_i_hlock1 =  i_hlock1;
   reg_i_hbusreq2 =  i_hbusreq2;
   reg_i_hlock2 =  i_hlock2;
   reg_i_hbusreq3 =  i_hbusreq3;
   reg_i_hlock3 =  i_hlock3;
   reg_i_hbusreq4 =  i_hbusreq4;
   reg_i_hlock4 =  i_hlock4;
   reg_i_hbusreq5 =  i_hbusreq5;
   reg_i_hlock5 =  i_hlock5;
   reg_i_hbusreq6 =  i_hbusreq6;
   reg_i_hlock6 =  i_hlock6;
   reg_controllable_hmaster0 =  controllable_hmaster0;
   reg_controllable_hmaster1 =  controllable_hmaster1;
   reg_controllable_hmaster2 =  controllable_hmaster2;
   reg_controllable_hmastlock =  controllable_hmastlock;
   reg_controllable_nstart =  controllable_nstart;
   reg_controllable_ndecide =  controllable_ndecide;
   reg_controllable_locked =  controllable_locked;
   reg_controllable_nhgrant0 =  controllable_nhgrant0;
   reg_controllable_hgrant1 =  controllable_hgrant1;
   reg_controllable_hgrant2 =  controllable_hgrant2;
   reg_controllable_hgrant3 =  controllable_hgrant3;
   reg_controllable_hgrant4 =  controllable_hgrant4;
   reg_controllable_hgrant5 =  controllable_hgrant5;
   reg_controllable_hgrant6 =  controllable_hgrant6;
   reg_controllable_busreq =  controllable_busreq;

 end
endmodule

-------------------------------
#!SYNTCOMP
STATUS : realizable
SOLVED_BY : 7/8 [SYNTCOMP2014-RealSeq]
SOLVED_IN : 3.60823 [SYNTCOMP2014-RealSeq]
#.
