aag 1171 42 65 1 1064
2
4
6
8
10
12
14
16
18
20
22
24
26
28
30
32
34
36
38
40
42
44
46
48
50
52
54
56
58
60
62
64
66
68
70
72
74
76
78
80
82
84
86 1
88 58
90 36
92 60
94 38
96 64
98 66
100 68
102 8
104 70
106 72
108 74
110 1445
112 1469
114 1489
116 46
118 1519
120 84
122 42
124 1871
126 1877
128 1883
130 40
132 82
134 1905
136 34
138 1947
140 1969
142 1999
144 30
146 80
148 2021
150 28
152 78
154 62
156 2043
158 48
160 24
162 76
164 2065
166 4
168 20
170 44
172 16
174 2087
176 10
178 12
180 2
182 2109
184 14
186 259
188 2131
190 18
192 2153
194 22
196 54
198 26
200 2319
202 2325
204 2331
206 2337
208 2343
210 56
212 32
214 6
1360
216 55 12
218 57 16
220 219 217
222 59 20
224 223 220
226 61 24
228 227 224
230 65 28
232 231 228
234 67 30
236 235 232
238 69 34
240 239 236
242 71 40
244 243 240
246 73 42
248 247 244
250 75 46
252 251 248
254 187 86
256 255 86
258 257 252
260 83 81
262 260 79
264 262 77
266 54 45
268 55 44
270 269 267
272 271 264
274 82 81
276 274 79
278 276 77
280 56 45
282 57 44
284 283 281
286 285 278
288 287 273
290 83 80
292 290 79
294 292 77
296 58 45
298 59 44
300 299 297
302 301 294
304 303 288
306 82 80
308 306 79
310 308 77
312 60 45
314 61 44
316 315 313
318 317 310
320 319 304
322 260 78
324 322 77
326 64 45
328 65 44
330 329 327
332 331 324
334 333 320
336 274 78
338 336 77
340 66 45
342 67 44
344 343 341
346 345 338
348 347 334
350 290 78
352 350 77
354 68 45
356 69 44
358 357 355
360 359 352
362 361 348
364 306 78
366 364 77
368 70 45
370 71 44
372 371 369
374 373 366
376 375 362
378 262 76
380 72 45
382 73 44
384 383 381
386 385 378
388 387 376
390 276 76
392 74 45
394 75 44
396 395 393
398 397 390
400 399 388
402 159 86
404 158 86
406 403 86
408 407 9
410 409 400
412 143 86
414 142 86
416 413 86
418 414 9
420 419 410
422 111 86
424 110 86
426 423 86
428 113 86
430 112 86
432 429 86
434 433 427
436 115 86
438 114 86
440 437 86
442 441 434
444 443 9
446 445 420
448 181 86
450 180 86
452 449 86
454 450 264
456 453 265
458 457 455
460 459 404
462 461 446
464 167 86
466 166 86
468 465 86
470 469 278
472 466 279
474 473 471
476 475 404
478 477 462
480 177 86
482 176 86
484 481 86
486 485 294
488 482 295
490 489 487
492 491 404
494 493 478
496 185 86
498 184 86
500 497 86
502 501 310
504 498 311
506 505 503
508 507 404
510 509 494
512 191 86
514 190 86
516 513 86
518 517 324
520 514 325
522 521 519
524 523 404
526 525 510
528 195 86
530 194 86
532 529 86
534 533 338
536 530 339
538 537 535
540 539 404
542 541 526
544 199 86
546 198 86
548 545 86
550 549 352
552 546 353
554 553 551
556 555 404
558 557 542
560 213 86
562 212 86
564 561 86
566 565 366
568 562 367
570 569 567
572 571 404
574 573 558
576 91 86
578 90 86
580 577 86
582 581 378
584 578 379
586 585 583
588 587 404
590 589 574
592 95 86
594 94 86
596 593 86
598 597 390
600 594 391
602 601 599
604 603 404
606 605 590
608 215 86
610 214 86
612 609 86
614 610 85
616 613 84
618 617 615
620 619 404
622 621 606
624 133 86
626 132 86
628 625 86
630 147 86
632 146 86
634 631 86
636 635 629
638 153 86
640 152 86
642 639 86
644 643 636
646 163 86
648 162 86
650 647 86
652 651 644
654 653 264
656 652 265
658 657 655
660 659 8
662 661 622
664 635 626
666 664 643
668 666 651
670 669 278
672 668 279
674 673 671
676 675 8
678 677 662
680 632 629
682 680 643
684 682 651
686 685 294
688 684 295
690 689 687
692 691 8
694 693 678
696 632 626
698 696 643
700 698 651
702 701 310
704 700 311
706 705 703
708 707 8
710 709 694
712 640 636
714 712 651
716 715 324
718 714 325
720 719 717
722 721 8
724 723 710
726 664 640
728 726 651
730 729 338
732 728 339
734 733 731
736 735 8
738 737 724
740 680 640
742 740 651
744 743 352
746 742 353
748 747 745
750 749 8
752 751 738
754 696 640
756 754 651
758 757 366
760 756 367
762 761 759
764 763 8
766 765 752
768 648 644
770 769 378
772 768 379
774 773 771
776 775 8
778 777 766
780 666 648
782 781 390
784 780 391
786 785 783
788 787 8
790 789 778
792 121 86
794 120 86
796 793 86
798 797 84
800 794 85
802 801 799
804 803 8
806 805 790
808 155 86
810 154 86
812 809 86
814 179 86
816 178 86
818 815 86
820 816 813
822 820 3
824 822 7
826 825 806
828 819 813
830 828 3
832 830 6
834 833 826
836 173 86
838 172 86
840 837 86
842 838 813
844 842 4
846 844 7
848 847 834
850 841 813
852 850 4
854 852 6
856 855 848
858 169 86
860 168 86
862 859 86
864 860 813
866 864 10
868 866 7
870 869 856
872 863 813
874 872 10
876 874 6
878 877 870
880 161 86
882 160 86
884 881 86
886 882 813
888 886 14
890 888 7
892 891 878
894 885 813
896 894 14
898 896 6
900 899 892
902 151 86
904 150 86
906 903 86
908 904 813
910 908 18
912 910 7
914 913 900
916 907 813
918 916 18
920 918 6
922 921 914
924 145 86
926 144 86
928 925 86
930 926 813
932 930 22
934 932 7
936 935 922
938 929 813
940 938 22
942 940 6
944 943 936
946 137 86
948 136 86
950 947 86
952 948 813
954 952 26
956 954 7
958 957 944
960 951 813
962 960 26
964 962 6
966 965 958
968 131 86
970 130 86
972 969 86
974 970 813
976 974 32
978 976 7
980 979 966
982 973 813
984 982 32
986 984 6
988 987 980
990 123 86
992 122 86
994 991 86
996 992 813
998 996 36
1000 998 7
1002 1001 988
1004 995 813
1006 1004 36
1008 1006 6
1010 1009 1002
1012 117 86
1014 116 86
1016 1013 86
1018 1014 813
1020 1018 38
1022 1020 7
1024 1023 1010
1026 1017 813
1028 1026 38
1030 1028 6
1032 1031 1024
1034 453 2
1036 450 3
1038 1037 1035
1040 1039 810
1042 1041 1032
1044 466 5
1046 469 4
1048 1047 1045
1050 1049 810
1052 1051 1042
1054 482 11
1056 485 10
1058 1057 1055
1060 1059 810
1062 1061 1052
1064 498 15
1066 501 14
1068 1067 1065
1070 1069 810
1072 1071 1062
1074 514 19
1076 517 18
1078 1077 1075
1080 1079 810
1082 1081 1072
1084 530 23
1086 533 22
1088 1087 1085
1090 1089 810
1092 1091 1082
1094 546 27
1096 549 26
1098 1097 1095
1100 1099 810
1102 1101 1092
1104 562 33
1106 565 32
1108 1107 1105
1110 1109 810
1112 1111 1102
1114 578 37
1116 581 36
1118 1117 1115
1120 1119 810
1122 1121 1112
1124 594 39
1126 597 38
1128 1127 1125
1130 1129 810
1132 1131 1122
1134 610 7
1136 613 6
1138 1137 1135
1140 1139 810
1142 1141 1132
1144 135 86
1146 134 86
1148 1145 86
1150 57 4
1152 1150 1146
1154 1153 1142
1156 141 86
1158 140 86
1160 1157 86
1162 59 10
1164 1162 1158
1166 1165 1154
1168 149 86
1170 148 86
1172 1169 86
1174 61 14
1176 1174 1170
1178 1177 1166
1180 157 86
1182 156 86
1184 1181 86
1186 65 18
1188 1186 1182
1190 1189 1178
1192 165 86
1194 164 86
1196 1193 86
1198 67 22
1200 1198 1194
1202 1201 1190
1204 175 86
1206 174 86
1208 1205 86
1210 69 26
1212 1210 1206
1214 1213 1202
1216 183 86
1218 182 86
1220 1217 86
1222 71 32
1224 1222 1218
1226 1225 1214
1228 189 86
1230 188 86
1232 1229 86
1234 73 36
1236 1234 1230
1238 1237 1226
1240 193 86
1242 192 86
1244 1241 86
1246 75 38
1248 1246 1242
1250 1249 1238
1252 197 86
1254 1253 86
1256 211 86
1258 1257 86
1260 1259 1255
1262 89 86
1264 1263 86
1266 1265 1260
1268 93 86
1270 1269 86
1272 1271 1266
1274 97 86
1276 1275 86
1278 1277 1272
1280 99 86
1282 1281 86
1284 1283 1278
1286 101 86
1288 1287 86
1290 1289 1284
1292 105 86
1294 1293 86
1296 1295 1290
1298 107 86
1300 1299 86
1302 1301 1296
1304 109 86
1306 1305 86
1308 1307 1302
1310 1308 813
1312 1310 2
1314 1313 1250
1316 129 86
1318 128 86
1320 1317 86
1322 127 86
1324 126 86
1326 1323 86
1328 125 86
1330 124 86
1332 1329 86
1334 1333 1327
1336 1334 1321
1338 1337 1320
1340 1338 1335
1342 1332 1324
1344 1343 1335
1346 1335 1321
1348 1334 1318
1350 1349 1347
1352 1344 1332
1354 1352 1350
1356 1355 1341
1358 1356 1314
1360 1359 258
1362 442 84
1364 1362 9
1366 1364 53
1368 1366 50
1370 1368 49
1372 1368 48
1374 433 424
1376 1374 441
1378 1376 48
1380 430 427
1382 1380 441
1384 1382 48
1386 430 424
1388 1386 441
1390 1388 48
1392 438 434
1394 1392 48
1396 1372 1371
1398 1397 1371
1400 1373 1371
1402 1400 1378
1404 1403 1398
1406 1400 1379
1408 1406 1384
1410 1409 1404
1412 1406 1385
1414 1412 1390
1416 1415 1410
1418 1412 1391
1420 1418 1394
1422 1421 1416
1424 1395 424
1426 1424 1391
1428 1426 1385
1430 1429 1385
1432 1431 1379
1434 1432 1373
1436 1434 1371
1438 1437 1371
1440 1439 1423
1442 1422 424
1444 1443 1441
1446 1395 430
1448 1446 1391
1450 1448 1385
1452 1451 1385
1454 1453 1379
1456 1455 1379
1458 1457 1373
1460 1459 1373
1462 1461 1371
1464 1462 1423
1466 1422 430
1468 1467 1465
1470 1395 438
1472 1470 1391
1474 1473 1391
1476 1475 1385
1478 1476 1379
1480 1478 1373
1482 1480 1371
1484 1482 1423
1486 1422 438
1488 1487 1485
1490 119 86
1492 118 86
1494 1491 86
1496 1495 84
1498 1496 53
1500 1498 51
1502 1492 45
1504 1502 1501
1506 1505 1501
1508 1503 1492
1510 1508 1501
1512 1511 1501
1514 1513 1507
1516 1506 1492
1518 1517 1515
1520 201 86
1522 200 86
1524 1521 86
1526 203 86
1528 202 86
1530 1527 86
1532 205 86
1534 204 86
1536 1533 86
1538 207 86
1540 206 86
1542 1539 86
1544 208 86
1546 1529 1523
1548 1546 1535
1550 1548 1541
1552 1550 1545
1554 1552 417
1556 1529 1524
1558 1556 1535
1560 1558 1541
1562 1560 1545
1564 1562 442
1566 1530 1523
1568 1566 1535
1570 1568 1541
1572 1570 1545
1574 265 54
1576 1575 1572
1578 1530 1524
1580 1578 1535
1582 1580 1541
1584 1582 1545
1586 279 56
1588 1587 1584
1590 1546 1536
1592 1590 1541
1594 1592 1545
1596 295 58
1598 1597 1594
1600 1556 1536
1602 1600 1541
1604 1602 1545
1606 311 60
1608 1607 1604
1610 1566 1536
1612 1610 1541
1614 1612 1545
1616 325 64
1618 1617 1614
1620 1578 1536
1622 1620 1541
1624 1622 1545
1626 339 66
1628 1627 1624
1630 1548 1542
1632 1630 1545
1634 353 68
1636 1635 1632
1638 1558 1542
1640 1638 1545
1642 367 70
1644 1643 1640
1646 1568 1542
1648 1646 1545
1650 379 72
1652 1651 1648
1654 1580 1542
1656 1654 1545
1658 391 74
1660 1659 1656
1662 139 86
1664 138 86
1666 1663 86
1668 1667 1495
1670 1664 48
1672 1564 1555
1674 1673 1555
1676 1565 1555
1678 1676 1576
1680 1679 1674
1682 1676 1577
1684 1682 1588
1686 1685 1680
1688 1682 1589
1690 1688 1598
1692 1691 1686
1694 1688 1599
1696 1694 1608
1698 1697 1692
1700 1694 1609
1702 1700 1618
1704 1703 1698
1706 1700 1619
1708 1706 1628
1710 1709 1704
1712 1706 1629
1714 1712 1636
1716 1715 1710
1718 1712 1637
1720 1718 1644
1722 1721 1716
1724 1718 1645
1726 1724 1652
1728 1727 1722
1730 1724 1653
1732 1730 1660
1734 1733 1728
1736 1730 1661
1738 1736 1669
1740 1738 1670
1742 1741 1734
1744 1670 1333
1746 1671 1330
1748 1747 1745
1750 1668 1330
1752 1749 1669
1754 1753 1751
1756 1755 1661
1758 1756 1653
1760 1758 1645
1762 1760 1637
1764 1762 1629
1766 1764 1619
1768 1766 1609
1770 1768 1599
1772 1770 1589
1774 1772 1577
1776 1774 1565
1778 1776 1555
1780 1330 1327
1782 1331 1324
1784 1783 1781
1786 1785 1670
1788 1671 1324
1790 1789 1787
1792 1668 1324
1794 1791 1669
1796 1795 1793
1798 1797 1661
1800 1798 1653
1802 1800 1645
1804 1802 1637
1806 1804 1629
1808 1806 1619
1810 1808 1609
1812 1810 1599
1814 1812 1589
1816 1814 1577
1818 1816 1565
1820 1818 1555
1822 1330 1324
1824 1822 1321
1826 1823 1318
1828 1827 1825
1830 1829 1670
1832 1671 1318
1834 1833 1831
1836 1668 1318
1838 1835 1669
1840 1839 1837
1842 1841 1661
1844 1842 1653
1846 1844 1645
1848 1846 1637
1850 1848 1629
1852 1850 1619
1854 1852 1609
1856 1854 1599
1858 1856 1589
1860 1858 1577
1862 1860 1565
1864 1862 1555
1866 1778 1743
1868 1742 1330
1870 1869 1867
1872 1820 1743
1874 1742 1324
1876 1875 1873
1878 1864 1743
1880 1742 1318
1882 1881 1879
1884 1149 5
1886 1884 57
1888 1146 56
1890 1888 1887
1892 1891 1887
1894 1889 1146
1896 1894 1887
1898 1897 1887
1900 1899 1893
1902 1892 1146
1904 1903 1901
1906 1736 1668
1908 1907 1734
1910 1908 1741
1912 1671 1664
1914 1912 1669
1916 1915 1669
1918 1917 1661
1920 1918 1653
1922 1920 1645
1924 1922 1637
1926 1924 1629
1928 1926 1619
1930 1928 1609
1932 1930 1599
1934 1932 1589
1936 1934 1577
1938 1936 1565
1940 1938 1555
1942 1940 1911
1944 1910 1664
1946 1945 1943
1948 1161 11
1950 1948 59
1952 1158 58
1954 1952 1951
1956 1955 1951
1958 1953 1158
1960 1958 1951
1962 1961 1951
1964 1963 1957
1966 1956 1158
1968 1967 1965
1970 84 9
1972 1970 53
1974 1972 51
1976 1974 417
1978 414 45
1980 1979 1977
1982 1975 414
1984 1983 1975
1986 414 44
1988 1985 417
1990 1986 414
1992 1991 1989
1994 1993 1981
1996 1980 414
1998 1997 1995
2000 1173 15
2002 2000 61
2004 1170 60
2006 2004 2003
2008 2007 2003
2010 2005 1170
2012 2010 2003
2014 2013 2003
2016 2015 2009
2018 2008 1170
2020 2019 2017
2022 1185 19
2024 2022 65
2026 1182 64
2028 2026 2025
2030 2029 2025
2032 2027 1182
2034 2032 2025
2036 2035 2025
2038 2037 2031
2040 2030 1182
2042 2041 2039
2044 1197 23
2046 2044 67
2048 1194 66
2050 2048 2047
2052 2051 2047
2054 2049 1194
2056 2054 2047
2058 2057 2047
2060 2059 2053
2062 2052 1194
2064 2063 2061
2066 1209 27
2068 2066 69
2070 1206 68
2072 2070 2069
2074 2073 2069
2076 2071 1206
2078 2076 2069
2080 2079 2069
2082 2081 2075
2084 2074 1206
2086 2085 2083
2088 1221 33
2090 2088 71
2092 1218 70
2094 2092 2091
2096 2095 2091
2098 2093 1218
2100 2098 2091
2102 2101 2091
2104 2103 2097
2106 2096 1218
2108 2107 2105
2110 1233 37
2112 2110 73
2114 1230 72
2116 2114 2113
2118 2117 2113
2120 2115 1230
2122 2120 2113
2124 2123 2113
2126 2125 2119
2128 2118 1230
2130 2129 2127
2132 1245 39
2134 2132 75
2136 1242 74
2138 2136 2135
2140 2139 2135
2142 2137 1242
2144 2142 2135
2146 2145 2135
2148 2147 2141
2150 2140 1242
2152 2151 2149
2154 1661 1522
2156 2154 1653
2158 2157 1653
2160 2159 1645
2162 2160 1637
2164 2163 1637
2166 2165 1629
2168 2166 1619
2170 2169 1619
2172 2171 1609
2174 2172 1599
2176 2175 1599
2178 2177 1589
2180 2178 1577
2182 2181 1577
2184 2183 1565
2186 2184 1555
2188 2187 1555
2190 1661 1528
2192 2190 1653
2194 2193 1653
2196 2195 1645
2198 2197 1645
2200 2199 1637
2202 2200 1629
2204 2202 1619
2206 2205 1619
2208 2207 1609
2210 2209 1609
2212 2211 1599
2214 2212 1589
2216 2214 1577
2218 2217 1577
2220 2219 1565
2222 2221 1565
2224 2223 1555
2226 1661 1534
2228 2226 1653
2230 2228 1645
2232 2230 1637
2234 2232 1629
2236 2234 1619
2238 2237 1619
2240 2239 1609
2242 2241 1609
2244 2243 1599
2246 2245 1599
2248 2247 1589
2250 2249 1589
2252 2251 1577
2254 2252 1565
2256 2254 1555
2258 1661 1540
2260 2258 1653
2262 2261 1653
2264 2263 1645
2266 2265 1645
2268 2267 1637
2270 2269 1637
2272 2271 1629
2274 2273 1629
2276 2275 1619
2278 2276 1609
2280 2278 1599
2282 2280 1589
2284 2282 1577
2286 2284 1565
2288 2286 1555
2290 1661 1544
2292 2290 1653
2294 2292 1645
2296 2294 1637
2298 2296 1629
2300 2298 1619
2302 2300 1609
2304 2302 1599
2306 2304 1589
2308 2306 1577
2310 2308 1565
2312 2310 1555
2314 2189 1735
2316 1734 1522
2318 2317 2315
2320 2224 1735
2322 1734 1528
2324 2323 2321
2326 2256 1735
2328 1734 1534
2330 2329 2327
2332 2288 1735
2334 1734 1540
2336 2335 2333
2338 2312 1735
2340 1734 1544
2342 2341 2339
i0 controllable_nhgrant0
i1 controllable_hgrant1
i2 controllable_locked
i3 controllable_nstart
i4 controllable_hgrant2
i5 i_hlock0
i6 controllable_hgrant3
i7 i_hlock1
i8 controllable_hgrant4
i9 i_hlock2
i10 controllable_hgrant5
i11 i_hlock3
i12 controllable_hgrant6
i13 i_hlock4
i14 i_hlock5
i15 controllable_hgrant7
i16 i_hlock6
i17 controllable_hgrant8
i18 controllable_hgrant9
i19 i_hlock7
i20 i_hlock8
i21 controllable_busreq
i22 i_hlock9
i23 i_hready
i24 i_hburst1
i25 i_hburst0
i26 i_hbusreq0
i27 i_hbusreq1
i28 i_hbusreq2
i29 i_hbusreq3
i30 controllable_ndecide
i31 i_hbusreq4
i32 i_hbusreq5
i33 i_hbusreq6
i34 i_hbusreq7
i35 i_hbusreq8
i36 i_hbusreq9
i37 controllable_hmaster3
i38 controllable_hmaster2
i39 controllable_hmaster1
i40 controllable_hmaster0
i41 controllable_hmastlock
l0 n87
l1 reg_i_hbusreq2_out
l2 reg_controllable_hgrant8_out
l3 reg_i_hbusreq3_out
l4 reg_controllable_hgrant9_out
l5 reg_i_hbusreq4_out
l6 reg_i_hbusreq5_out
l7 reg_i_hbusreq6_out
l8 reg_controllable_nstart_out
l9 reg_i_hbusreq7_out
l10 reg_i_hbusreq8_out
l11 reg_i_hbusreq9_out
l12 reg_stateG3_0_out
l13 reg_stateG3_1_out
l14 reg_stateG3_2_out
l15 reg_i_hlock9_out
l16 reg_stateA1_out
l17 reg_controllable_hmastlock_out
l18 reg_i_hlock8_out
l19 fair_cnt<0>_out
l20 fair_cnt<1>_out
l21 fair_cnt<2>_out
l22 reg_i_hlock7_out
l23 reg_controllable_hmaster0_out
l24 reg_stateG10_1_out
l25 reg_i_hlock6_out
l26 next_env_fair_out
l27 reg_stateG10_2_out
l28 reg_stateG2_out
l29 reg_i_hlock5_out
l30 reg_controllable_hmaster1_out
l31 reg_stateG10_3_out
l32 reg_i_hlock4_out
l33 reg_controllable_hmaster2_out
l34 reg_controllable_ndecide_out
l35 reg_stateG10_4_out
l36 reg_i_hready_out
l37 reg_i_hlock3_out
l38 reg_controllable_hmaster3_out
l39 reg_stateG10_5_out
l40 reg_controllable_hgrant1_out
l41 reg_i_hlock2_out
l42 reg_controllable_busreq_out
l43 reg_i_hlock1_out
l44 reg_stateG10_6_out
l45 reg_controllable_hgrant2_out
l46 reg_i_hlock0_out
l47 reg_controllable_nhgrant0_out
l48 reg_stateG10_7_out
l49 reg_controllable_hgrant3_out
l50 env_safe_err_happened_out
l51 reg_stateG10_8_out
l52 reg_controllable_hgrant4_out
l53 reg_stateG10_9_out
l54 reg_controllable_hgrant5_out
l55 reg_i_hbusreq0_out
l56 reg_controllable_hgrant6_out
l57 next_sys_fair<0>_out
l58 next_sys_fair<1>_out
l59 next_sys_fair<2>_out
l60 next_sys_fair<3>_out
l61 next_sys_fair<4>_out
l62 reg_i_hbusreq1_out
l63 reg_controllable_hgrant7_out
l64 reg_controllable_locked_out
o0 o_err
c
amba_10_new_5
This file was written by ABC on Sat Aug 31 20:24:45 2013
For information about AIGER format, refer to http://fmv.jku.at/aiger
-------------------------------
This AIGER file has been created by the following sequence of commands:
> vl2mv amba10c5.v   ---gives--> amba10c5.mv
> abc -c "read_blif_mv amba10c5.mv; write_aiger -s amba10c5n.aig"   ---gives--> amba10c5n.aig
> aigtoaig amba10c5n.aig amba10c5n.aag   ---gives--> amba10c5n.aag (this file)
Content of amba10c5.v:
module amba_10_new_5(
        o_err,
        i_clk,
        i_hready,
        i_hbusreq0,
        i_hlock0,
        i_hbusreq1,
        i_hlock1,
        i_hbusreq2,
        i_hlock2,
        i_hbusreq3,
        i_hlock3,
        i_hbusreq4,
        i_hlock4,
        i_hbusreq5,
        i_hlock5,
        i_hbusreq6,
        i_hlock6,
        i_hbusreq7,
        i_hlock7,
        i_hbusreq8,
        i_hlock8,
        i_hbusreq9,
        i_hlock9,
        i_hburst0,
        i_hburst1,
        controllable_hmaster0,
        controllable_hmaster1,
        controllable_hmaster2,
        controllable_hmaster3,
        controllable_hmastlock,
        controllable_nstart,
        controllable_ndecide,
        controllable_locked,
        controllable_nhgrant0,
        controllable_hgrant1,
        controllable_hgrant2,
        controllable_hgrant3,
        controllable_hgrant4,
        controllable_hgrant5,
        controllable_hgrant6,
        controllable_hgrant7,
        controllable_hgrant8,
        controllable_hgrant9,
        controllable_busreq);

input i_clk;
input i_hready;
input i_hbusreq0;
input i_hlock0;
input i_hbusreq1;
input i_hlock1;
input i_hbusreq2;
input i_hlock2;
input i_hbusreq3;
input i_hlock3;
input i_hbusreq4;
input i_hlock4;
input i_hbusreq5;
input i_hlock5;
input i_hbusreq6;
input i_hlock6;
input i_hbusreq7;
input i_hlock7;
input i_hbusreq8;
input i_hlock8;
input i_hbusreq9;
input i_hlock9;
input i_hburst0;
input i_hburst1;
input controllable_hmaster0;
input controllable_hmaster1;
input controllable_hmaster2;
input controllable_hmaster3;
input controllable_hmastlock;
input controllable_nstart;
input controllable_ndecide;
input controllable_locked;
input controllable_nhgrant0;
input controllable_hgrant1;
input controllable_hgrant2;
input controllable_hgrant3;
input controllable_hgrant4;
input controllable_hgrant5;
input controllable_hgrant6;
input controllable_hgrant7;
input controllable_hgrant8;
input controllable_hgrant9;
input controllable_busreq;
output o_err;

reg reg_i_hready;
reg reg_i_hbusreq0;
reg reg_i_hlock0;
reg reg_i_hbusreq1;
reg reg_i_hlock1;
reg reg_i_hbusreq2;
reg reg_i_hlock2;
reg reg_i_hbusreq3;
reg reg_i_hlock3;
reg reg_i_hbusreq4;
reg reg_i_hlock4;
reg reg_i_hbusreq5;
reg reg_i_hlock5;
reg reg_i_hbusreq6;
reg reg_i_hlock6;
reg reg_i_hbusreq7;
reg reg_i_hlock7;
reg reg_i_hbusreq8;
reg reg_i_hlock8;
reg reg_i_hbusreq9;
reg reg_i_hlock9;
reg reg_controllable_hmaster0;
reg reg_controllable_hmaster1;
reg reg_controllable_hmaster2;
reg reg_controllable_hmaster3;
reg reg_controllable_hmastlock;
reg reg_controllable_nstart;
reg reg_controllable_ndecide;
reg reg_controllable_locked;
reg reg_controllable_nhgrant0;
reg reg_controllable_hgrant1;
reg reg_controllable_hgrant2;
reg reg_controllable_hgrant3;
reg reg_controllable_hgrant4;
reg reg_controllable_hgrant5;
reg reg_controllable_hgrant6;
reg reg_controllable_hgrant7;
reg reg_controllable_hgrant8;
reg reg_controllable_hgrant9;
reg reg_controllable_busreq;
reg reg_stateA1;
reg reg_stateG2;
reg reg_stateG3_0;
reg reg_stateG3_1;
reg reg_stateG3_2;
reg reg_stateG10_1;
reg reg_stateG10_2;
reg reg_stateG10_3;
reg reg_stateG10_4;
reg reg_stateG10_5;
reg reg_stateG10_6;
reg reg_stateG10_7;
reg reg_stateG10_8;
reg reg_stateG10_9;
reg env_safe_err_happened;
reg next_env_fair;
reg [2:0] fair_cnt;
reg [4:0] next_sys_fair;

wire env_safe_err0;
wire env_safe_err1;
wire env_safe_err2;
wire env_safe_err3;
wire env_safe_err4;
wire env_safe_err5;
wire env_safe_err6;
wire env_safe_err7;
wire env_safe_err8;
wire env_safe_err9;
wire env_safe_err;

wire sys_safe_err0;
wire sys_safe_err1;
wire sys_safe_err2;
wire sys_safe_err3;
wire sys_safe_err4;
wire sys_safe_err5;
wire sys_safe_err6;
wire sys_safe_err7;
wire sys_safe_err8;
wire sys_safe_err9;
wire sys_safe_err10;
wire sys_safe_err11;
wire sys_safe_err12;
wire sys_safe_err13;
wire sys_safe_err14;
wire sys_safe_err15;
wire sys_safe_err16;
wire sys_safe_err17;
wire sys_safe_err18;
wire sys_safe_err19;
wire sys_safe_err20;
wire sys_safe_err21;
wire sys_safe_err22;
wire sys_safe_err23;
wire sys_safe_err24;
wire sys_safe_err25;
wire sys_safe_err26;
wire sys_safe_err27;
wire sys_safe_err28;
wire sys_safe_err29;
wire sys_safe_err30;
wire sys_safe_err31;
wire sys_safe_err32;
wire sys_safe_err33;
wire sys_safe_err34;
wire sys_safe_err35;
wire sys_safe_err36;
wire sys_safe_err37;
wire sys_safe_err38;
wire sys_safe_err39;
wire sys_safe_err40;
wire sys_safe_err41;
wire sys_safe_err42;
wire sys_safe_err43;
wire sys_safe_err44;
wire sys_safe_err45;
wire sys_safe_err46;
wire sys_safe_err47;
wire sys_safe_err48;
wire sys_safe_err49;
wire sys_safe_err50;
wire sys_safe_err51;
wire sys_safe_err52;
wire sys_safe_err53;
wire sys_safe_err54;
wire sys_safe_err55;
wire sys_safe_err56;
wire sys_safe_err57;
wire sys_safe_err58;
wire sys_safe_err59;
wire sys_safe_err60;
wire sys_safe_err61;
wire sys_safe_err62;
wire sys_safe_err63;
wire sys_safe_err64;
wire sys_safe_err65;
wire sys_safe_err66;
wire sys_safe_err67;
wire sys_safe_err68;
wire sys_safe_err69;
wire sys_safe_err70;
wire sys_safe_err71;
wire sys_safe_err72;
wire sys_safe_err73;
wire sys_safe_err74;
wire sys_safe_err75;
wire sys_safe_err;

wire env_fair0;
wire env_fair1;

wire sys_fair0;
wire sys_fair1;
wire sys_fair2;
wire sys_fair3;
wire sys_fair4;
wire sys_fair5;
wire sys_fair6;
wire sys_fair7;
wire sys_fair8;
wire sys_fair9;
wire sys_fair10;
wire sys_fair11;
wire fair_err;
wire o_err;

// =============================================================
//                        ENV_TRANSITION:
// =============================================================
// Assumption 3:
// G( hlock0=1 -> hbusreq0=1 );
assign env_safe_err0 =  ~(~ i_hlock0 | i_hbusreq0);

// Assumption 3:
// G( hlock1=1 -> hbusreq1=1 );
assign env_safe_err1 =  ~(~ i_hlock1 | i_hbusreq1);

// Assumption 3:
// G( hlock2=1 -> hbusreq2=1 );
assign env_safe_err2 =  ~(~ i_hlock2 | i_hbusreq2);

// Assumption 3:
// G( hlock3=1 -> hbusreq3=1 );
assign env_safe_err3 =  ~(~ i_hlock3 | i_hbusreq3);

// Assumption 3:
// G( hlock4=1 -> hbusreq4=1 );
assign env_safe_err4 =  ~(~ i_hlock4 | i_hbusreq4);

// Assumption 3:
// G( hlock5=1 -> hbusreq5=1 );
assign env_safe_err5 =  ~(~ i_hlock5 | i_hbusreq5);

// Assumption 3:
// G( hlock6=1 -> hbusreq6=1 );
assign env_safe_err6 =  ~(~ i_hlock6 | i_hbusreq6);

// Assumption 3:
// G( hlock7=1 -> hbusreq7=1 );
assign env_safe_err7 =  ~(~ i_hlock7 | i_hbusreq7);

// Assumption 3:
// G( hlock8=1 -> hbusreq8=1 );
assign env_safe_err8 =  ~(~ i_hlock8 | i_hbusreq8);

// Assumption 3:
// G( hlock9=1 -> hbusreq9=1 );
assign env_safe_err9 =  ~(~ i_hlock9 | i_hbusreq9);

// collecting together the safety error bits:
assign env_safe_err = env_safe_err0 |
                      env_safe_err1 |
                      env_safe_err2 |
                      env_safe_err3 |
                      env_safe_err4 |
                      env_safe_err5 |
                      env_safe_err6 |
                      env_safe_err7 |
                      env_safe_err8 |
                      env_safe_err9;

// =============================================================
//                        SYS_TRANSITION:
// =============================================================
// G((hmaster0=0) * (hmaster1=0) * (hmaster2=0) * (hmaster3=0) -> (hbusreq0=0 <-> busreq=0));
assign sys_safe_err0 =  ~( ~( ~(controllable_hmaster0) & ~(controllable_hmaster1) & ~(controllable_hmaster2) & ~(controllable_hmaster3) )|(~i_hbusreq0 ^~ (~controllable_busreq)));

// G((hmaster0=1) * (hmaster1=0) * (hmaster2=0) * (hmaster3=0) -> (hbusreq1=0 <-> busreq=0));
assign sys_safe_err1 =  ~( ~( controllable_hmaster0 & ~(controllable_hmaster1) & ~(controllable_hmaster2) & ~(controllable_hmaster3) )|(~i_hbusreq1 ^~ (~controllable_busreq)));

// G((hmaster0=0) * (hmaster1=1) * (hmaster2=0) * (hmaster3=0) -> (hbusreq2=0 <-> busreq=0));
assign sys_safe_err2 =  ~( ~( ~(controllable_hmaster0) & controllable_hmaster1 & ~(controllable_hmaster2) & ~(controllable_hmaster3) )|(~i_hbusreq2 ^~ (~controllable_busreq)));

// G((hmaster0=1) * (hmaster1=1) * (hmaster2=0) * (hmaster3=0) -> (hbusreq3=0 <-> busreq=0));
assign sys_safe_err3 =  ~( ~( controllable_hmaster0 & controllable_hmaster1 & ~(controllable_hmaster2) & ~(controllable_hmaster3) )|(~i_hbusreq3 ^~ (~controllable_busreq)));

// G((hmaster0=0) * (hmaster1=0) * (hmaster2=1) * (hmaster3=0) -> (hbusreq4=0 <-> busreq=0));
assign sys_safe_err4 =  ~( ~( ~(controllable_hmaster0) & ~(controllable_hmaster1) & controllable_hmaster2 & ~(controllable_hmaster3) )|(~i_hbusreq4 ^~ (~controllable_busreq)));

// G((hmaster0=1) * (hmaster1=0) * (hmaster2=1) * (hmaster3=0) -> (hbusreq5=0 <-> busreq=0));
assign sys_safe_err5 =  ~( ~( controllable_hmaster0 & ~(controllable_hmaster1) & controllable_hmaster2 & ~(controllable_hmaster3) )|(~i_hbusreq5 ^~ (~controllable_busreq)));

// G((hmaster0=0) * (hmaster1=1) * (hmaster2=1) * (hmaster3=0) -> (hbusreq6=0 <-> busreq=0));
assign sys_safe_err6 =  ~( ~( ~(controllable_hmaster0) & controllable_hmaster1 & controllable_hmaster2 & ~(controllable_hmaster3) )|(~i_hbusreq6 ^~ (~controllable_busreq)));

// G((hmaster0=1) * (hmaster1=1) * (hmaster2=1) * (hmaster3=0) -> (hbusreq7=0 <-> busreq=0));
assign sys_safe_err7 =  ~( ~( controllable_hmaster0 & controllable_hmaster1 & controllable_hmaster2 & ~(controllable_hmaster3) )|(~i_hbusreq7 ^~ (~controllable_busreq)));

// G((hmaster0=0) * (hmaster1=0) * (hmaster2=0) * (hmaster3=1) -> (hbusreq8=0 <-> busreq=0));
assign sys_safe_err8 =  ~( ~( ~(controllable_hmaster0) & ~(controllable_hmaster1) & ~(controllable_hmaster2) & controllable_hmaster3 )|(~i_hbusreq8 ^~ (~controllable_busreq)));

// G((hmaster0=1) * (hmaster1=0) * (hmaster2=0) * (hmaster3=1) -> (hbusreq9=0 <-> busreq=0));
assign sys_safe_err9 =  ~( ~( controllable_hmaster0 & ~(controllable_hmaster1) & ~(controllable_hmaster2) & controllable_hmaster3 )|(~i_hbusreq9 ^~ (~controllable_busreq)));

// Guarantee 1:
// G((hready=0) -> X(start=0));
assign sys_safe_err10 =  ~( reg_i_hready | controllable_nstart );

// G(((stateG2=1) * (start=1)) -> FALSE;
assign sys_safe_err11 =  ~( ~(reg_stateG2 & ~controllable_nstart) | 0 );

// G(((stateG3_0=1) * (stateG3_1=0) * (stateG3_2=0) * ((start=1))) -> FALSE);
// G(((stateG3_0=0) * (stateG3_1=1) * (stateG3_2=0) * ((start=1))) -> FALSE);
// G(((stateG3_0=1) * (stateG3_1=1) * (stateG3_2=0) * ((start=1))) -> FALSE);
// G(((stateG3_0=0) * (stateG3_1=0) * (stateG3_2=1) * ((start=1))) -> FALSE);
// all these rules can be summarized as: only in state 000, start=1 is allowed:
assign sys_safe_err12 =  (reg_stateG3_0 | reg_stateG3_1 | reg_stateG3_2) & ~controllable_nstart;

// G( (hready=1) -> (   (hgrant0=1) <-> (X(hmaster0=0) * X(hmaster1=0) * X(hmaster2=0) * X(hmaster3=0))  ) );
assign sys_safe_err13 =  ~( ~(reg_i_hready) | ( ~reg_controllable_nhgrant0 ^~ ( ~(controllable_hmaster0) & ~(controllable_hmaster1) & ~(controllable_hmaster2) & ~(controllable_hmaster3) ) ) );

// G( (hready=1) -> (   (hgrant1=1) <-> (X(hmaster0=1) * X(hmaster1=0) * X(hmaster2=0) * X(hmaster3=0))  ) );
assign sys_safe_err14 =  ~( ~(reg_i_hready) | ( reg_controllable_hgrant1 ^~ ( controllable_hmaster0 & ~(controllable_hmaster1) & ~(controllable_hmaster2) & ~(controllable_hmaster3) ) ) );

// G( (hready=1) -> (   (hgrant2=1) <-> (X(hmaster0=0) * X(hmaster1=1) * X(hmaster2=0) * X(hmaster3=0))  ) );
assign sys_safe_err15 =  ~( ~(reg_i_hready) | ( reg_controllable_hgrant2 ^~ ( ~(controllable_hmaster0) & controllable_hmaster1 & ~(controllable_hmaster2) & ~(controllable_hmaster3) ) ) );

// G( (hready=1) -> (   (hgrant3=1) <-> (X(hmaster0=1) * X(hmaster1=1) * X(hmaster2=0) * X(hmaster3=0))  ) );
assign sys_safe_err16 =  ~( ~(reg_i_hready) | ( reg_controllable_hgrant3 ^~ ( controllable_hmaster0 & controllable_hmaster1 & ~(controllable_hmaster2) & ~(controllable_hmaster3) ) ) );

// G( (hready=1) -> (   (hgrant4=1) <-> (X(hmaster0=0) * X(hmaster1=0) * X(hmaster2=1) * X(hmaster3=0))  ) );
assign sys_safe_err17 =  ~( ~(reg_i_hready) | ( reg_controllable_hgrant4 ^~ ( ~(controllable_hmaster0) & ~(controllable_hmaster1) & controllable_hmaster2 & ~(controllable_hmaster3) ) ) );

// G( (hready=1) -> (   (hgrant5=1) <-> (X(hmaster0=1) * X(hmaster1=0) * X(hmaster2=1) * X(hmaster3=0))  ) );
assign sys_safe_err18 =  ~( ~(reg_i_hready) | ( reg_controllable_hgrant5 ^~ ( controllable_hmaster0 & ~(controllable_hmaster1) & controllable_hmaster2 & ~(controllable_hmaster3) ) ) );

// G( (hready=1) -> (   (hgrant6=1) <-> (X(hmaster0=0) * X(hmaster1=1) * X(hmaster2=1) * X(hmaster3=0))  ) );
assign sys_safe_err19 =  ~( ~(reg_i_hready) | ( reg_controllable_hgrant6 ^~ ( ~(controllable_hmaster0) & controllable_hmaster1 & controllable_hmaster2 & ~(controllable_hmaster3) ) ) );

// G( (hready=1) -> (   (hgrant7=1) <-> (X(hmaster0=1) * X(hmaster1=1) * X(hmaster2=1) * X(hmaster3=0))  ) );
assign sys_safe_err20 =  ~( ~(reg_i_hready) | ( reg_controllable_hgrant7 ^~ ( controllable_hmaster0 & controllable_hmaster1 & controllable_hmaster2 & ~(controllable_hmaster3) ) ) );

// G( (hready=1) -> (   (hgrant8=1) <-> (X(hmaster0=0) * X(hmaster1=0) * X(hmaster2=0) * X(hmaster3=1))  ) );
assign sys_safe_err21 =  ~( ~(reg_i_hready) | ( reg_controllable_hgrant8 ^~ ( ~(controllable_hmaster0) & ~(controllable_hmaster1) & ~(controllable_hmaster2) & controllable_hmaster3 ) ) );

// G( (hready=1) -> (   (hgrant9=1) <-> (X(hmaster0=1) * X(hmaster1=0) * X(hmaster2=0) * X(hmaster3=1))  ) );
assign sys_safe_err22 =  ~( ~(reg_i_hready) | ( reg_controllable_hgrant9 ^~ ( controllable_hmaster0 & ~(controllable_hmaster1) & ~(controllable_hmaster2) & controllable_hmaster3 ) ) );

// HMASTLOCK:
// G(  (hready=1) -> (locked=0 <-> X(hmastlock=0) ) );
assign sys_safe_err23 =  ~( ~(reg_i_hready) | (~reg_controllable_locked ^~ ~controllable_hmastlock) );

// Master 0:
// G( X(start=0) -> ( ((hmaster0=0) * (hmaster1=0) * (hmaster2=0) * (hmaster3=0)) <-> (X(hmaster0=0) * X(hmaster1=0) * X(hmaster2=0) * X(hmaster3=0)) ) );
assign sys_safe_err24 =  ~( ~(controllable_nstart) | ( ( ~(reg_controllable_hmaster0) & ~(reg_controllable_hmaster1) & ~(reg_controllable_hmaster2) & ~(reg_controllable_hmaster3) ) ^~ ( ~(controllable_hmaster0) & ~(controllable_hmaster1) & ~(controllable_hmaster2) & ~(controllable_hmaster3) )) );

// Master 1:
// G( X(start=0) -> ( ((hmaster0=1) * (hmaster1=0) * (hmaster2=0) * (hmaster3=0)) <-> (X(hmaster0=1) * X(hmaster1=0) * X(hmaster2=0) * X(hmaster3=0)) ) );
assign sys_safe_err25 =  ~( ~(controllable_nstart) | ( ( reg_controllable_hmaster0 & ~(reg_controllable_hmaster1) & ~(reg_controllable_hmaster2) & ~(reg_controllable_hmaster3) ) ^~ ( controllable_hmaster0 & ~(controllable_hmaster1) & ~(controllable_hmaster2) & ~(controllable_hmaster3) )) );

// Master 2:
// G( X(start=0) -> ( ((hmaster0=0) * (hmaster1=1) * (hmaster2=0) * (hmaster3=0)) <-> (X(hmaster0=0) * X(hmaster1=1) * X(hmaster2=0) * X(hmaster3=0)) ) );
assign sys_safe_err26 =  ~( ~(controllable_nstart) | ( ( ~(reg_controllable_hmaster0) & reg_controllable_hmaster1 & ~(reg_controllable_hmaster2) & ~(reg_controllable_hmaster3) ) ^~ ( ~(controllable_hmaster0) & controllable_hmaster1 & ~(controllable_hmaster2) & ~(controllable_hmaster3) )) );

// Master 3:
// G( X(start=0) -> ( ((hmaster0=1) * (hmaster1=1) * (hmaster2=0) * (hmaster3=0)) <-> (X(hmaster0=1) * X(hmaster1=1) * X(hmaster2=0) * X(hmaster3=0)) ) );
assign sys_safe_err27 =  ~( ~(controllable_nstart) | ( ( reg_controllable_hmaster0 & reg_controllable_hmaster1 & ~(reg_controllable_hmaster2) & ~(reg_controllable_hmaster3) ) ^~ ( controllable_hmaster0 & controllable_hmaster1 & ~(controllable_hmaster2) & ~(controllable_hmaster3) )) );

// Master 4:
// G( X(start=0) -> ( ((hmaster0=0) * (hmaster1=0) * (hmaster2=1) * (hmaster3=0)) <-> (X(hmaster0=0) * X(hmaster1=0) * X(hmaster2=1) * X(hmaster3=0)) ) );
assign sys_safe_err28 =  ~( ~(controllable_nstart) | ( ( ~(reg_controllable_hmaster0) & ~(reg_controllable_hmaster1) & reg_controllable_hmaster2 & ~(reg_controllable_hmaster3) ) ^~ ( ~(controllable_hmaster0) & ~(controllable_hmaster1) & controllable_hmaster2 & ~(controllable_hmaster3) )) );

// Master 5:
// G( X(start=0) -> ( ((hmaster0=1) * (hmaster1=0) * (hmaster2=1) * (hmaster3=0)) <-> (X(hmaster0=1) * X(hmaster1=0) * X(hmaster2=1) * X(hmaster3=0)) ) );
assign sys_safe_err29 =  ~( ~(controllable_nstart) | ( ( reg_controllable_hmaster0 & ~(reg_controllable_hmaster1) & reg_controllable_hmaster2 & ~(reg_controllable_hmaster3) ) ^~ ( controllable_hmaster0 & ~(controllable_hmaster1) & controllable_hmaster2 & ~(controllable_hmaster3) )) );

// Master 6:
// G( X(start=0) -> ( ((hmaster0=0) * (hmaster1=1) * (hmaster2=1) * (hmaster3=0)) <-> (X(hmaster0=0) * X(hmaster1=1) * X(hmaster2=1) * X(hmaster3=0)) ) );
assign sys_safe_err30 =  ~( ~(controllable_nstart) | ( ( ~(reg_controllable_hmaster0) & reg_controllable_hmaster1 & reg_controllable_hmaster2 & ~(reg_controllable_hmaster3) ) ^~ ( ~(controllable_hmaster0) & controllable_hmaster1 & controllable_hmaster2 & ~(controllable_hmaster3) )) );

// Master 7:
// G( X(start=0) -> ( ((hmaster0=1) * (hmaster1=1) * (hmaster2=1) * (hmaster3=0)) <-> (X(hmaster0=1) * X(hmaster1=1) * X(hmaster2=1) * X(hmaster3=0)) ) );
assign sys_safe_err31 =  ~( ~(controllable_nstart) | ( ( reg_controllable_hmaster0 & reg_controllable_hmaster1 & reg_controllable_hmaster2 & ~(reg_controllable_hmaster3) ) ^~ ( controllable_hmaster0 & controllable_hmaster1 & controllable_hmaster2 & ~(controllable_hmaster3) )) );

// Master 8:
// G( X(start=0) -> ( ((hmaster0=0) * (hmaster1=0) * (hmaster2=0) * (hmaster3=1)) <-> (X(hmaster0=0) * X(hmaster1=0) * X(hmaster2=0) * X(hmaster3=1)) ) );
assign sys_safe_err32 =  ~( ~(controllable_nstart) | ( ( ~(reg_controllable_hmaster0) & ~(reg_controllable_hmaster1) & ~(reg_controllable_hmaster2) & reg_controllable_hmaster3 ) ^~ ( ~(controllable_hmaster0) & ~(controllable_hmaster1) & ~(controllable_hmaster2) & controllable_hmaster3 )) );

// Master 9:
// G( X(start=0) -> ( ((hmaster0=1) * (hmaster1=0) * (hmaster2=0) * (hmaster3=1)) <-> (X(hmaster0=1) * X(hmaster1=0) * X(hmaster2=0) * X(hmaster3=1)) ) );
assign sys_safe_err33 =  ~( ~(controllable_nstart) | ( ( reg_controllable_hmaster0 & ~(reg_controllable_hmaster1) & ~(reg_controllable_hmaster2) & reg_controllable_hmaster3 ) ^~ ( controllable_hmaster0 & ~(controllable_hmaster1) & ~(controllable_hmaster2) & controllable_hmaster3 )) );

// Guarantee 6.2:
// G( ((X(start=0))) -> ( (hmastlock=1) <-> X(hmastlock=1)) );
assign sys_safe_err34 =  ~( ~(controllable_nstart) | ( reg_controllable_hmastlock ^~ controllable_hmastlock) );

// G( (decide=1  *  hlock0=1  *  X(hgrant0=1) )->X(locked=1));
assign sys_safe_err35 =  ~( ~(~reg_controllable_ndecide & reg_i_hlock0 & ~controllable_nhgrant0) | (controllable_locked) );

// G((decide=1  *  hlock0=0  *  X(hgrant0=1))->X(locked=0));
assign sys_safe_err36 =  ~( ~(~reg_controllable_ndecide & ~reg_i_hlock0 & ~controllable_nhgrant0) | (~controllable_locked) );

// G( (decide=1  *  hlock1=1  *  X(hgrant1=1) )->X(locked=1));
assign sys_safe_err37 =  ~( ~(~reg_controllable_ndecide & reg_i_hlock1 & controllable_hgrant1) | (controllable_locked) );

// G((decide=1  *  hlock1=0  *  X(hgrant1=1))->X(locked=0));
assign sys_safe_err38 =  ~( ~(~reg_controllable_ndecide & ~reg_i_hlock1 & controllable_hgrant1) | (~controllable_locked) );

// G( (decide=1  *  hlock2=1  *  X(hgrant2=1) )->X(locked=1));
assign sys_safe_err39 =  ~( ~(~reg_controllable_ndecide & reg_i_hlock2 & controllable_hgrant2) | (controllable_locked) );

// G((decide=1  *  hlock2=0  *  X(hgrant2=1))->X(locked=0));
assign sys_safe_err40 =  ~( ~(~reg_controllable_ndecide & ~reg_i_hlock2 & controllable_hgrant2) | (~controllable_locked) );

// G( (decide=1  *  hlock3=1  *  X(hgrant3=1) )->X(locked=1));
assign sys_safe_err41 =  ~( ~(~reg_controllable_ndecide & reg_i_hlock3 & controllable_hgrant3) | (controllable_locked) );

// G((decide=1  *  hlock3=0  *  X(hgrant3=1))->X(locked=0));
assign sys_safe_err42 =  ~( ~(~reg_controllable_ndecide & ~reg_i_hlock3 & controllable_hgrant3) | (~controllable_locked) );

// G( (decide=1  *  hlock4=1  *  X(hgrant4=1) )->X(locked=1));
assign sys_safe_err43 =  ~( ~(~reg_controllable_ndecide & reg_i_hlock4 & controllable_hgrant4) | (controllable_locked) );

// G((decide=1  *  hlock4=0  *  X(hgrant4=1))->X(locked=0));
assign sys_safe_err44 =  ~( ~(~reg_controllable_ndecide & ~reg_i_hlock4 & controllable_hgrant4) | (~controllable_locked) );

// G( (decide=1  *  hlock5=1  *  X(hgrant5=1) )->X(locked=1));
assign sys_safe_err45 =  ~( ~(~reg_controllable_ndecide & reg_i_hlock5 & controllable_hgrant5) | (controllable_locked) );

// G((decide=1  *  hlock5=0  *  X(hgrant5=1))->X(locked=0));
assign sys_safe_err46 =  ~( ~(~reg_controllable_ndecide & ~reg_i_hlock5 & controllable_hgrant5) | (~controllable_locked) );

// G( (decide=1  *  hlock6=1  *  X(hgrant6=1) )->X(locked=1));
assign sys_safe_err47 =  ~( ~(~reg_controllable_ndecide & reg_i_hlock6 & controllable_hgrant6) | (controllable_locked) );

// G((decide=1  *  hlock6=0  *  X(hgrant6=1))->X(locked=0));
assign sys_safe_err48 =  ~( ~(~reg_controllable_ndecide & ~reg_i_hlock6 & controllable_hgrant6) | (~controllable_locked) );

// G( (decide=1  *  hlock7=1  *  X(hgrant7=1) )->X(locked=1));
assign sys_safe_err49 =  ~( ~(~reg_controllable_ndecide & reg_i_hlock7 & controllable_hgrant7) | (controllable_locked) );

// G((decide=1  *  hlock7=0  *  X(hgrant7=1))->X(locked=0));
assign sys_safe_err50 =  ~( ~(~reg_controllable_ndecide & ~reg_i_hlock7 & controllable_hgrant7) | (~controllable_locked) );

// G( (decide=1  *  hlock8=1  *  X(hgrant8=1) )->X(locked=1));
assign sys_safe_err51 =  ~( ~(~reg_controllable_ndecide & reg_i_hlock8 & controllable_hgrant8) | (controllable_locked) );

// G((decide=1  *  hlock8=0  *  X(hgrant8=1))->X(locked=0));
assign sys_safe_err52 =  ~( ~(~reg_controllable_ndecide & ~reg_i_hlock8 & controllable_hgrant8) | (~controllable_locked) );

// G( (decide=1  *  hlock9=1  *  X(hgrant9=1) )->X(locked=1));
assign sys_safe_err53 =  ~( ~(~reg_controllable_ndecide & reg_i_hlock9 & controllable_hgrant9) | (controllable_locked) );

// G((decide=1  *  hlock9=0  *  X(hgrant9=1))->X(locked=0));
assign sys_safe_err54 =  ~( ~(~reg_controllable_ndecide & ~reg_i_hlock9 & controllable_hgrant9) | (~controllable_locked) );

// G( (decide=0) -> (  ((hgrant0=0)<->X(hgrant0=0))  ));
assign sys_safe_err55 =  ~( ~(reg_controllable_ndecide) | (reg_controllable_nhgrant0 ^~ controllable_nhgrant0) );

// G( (decide=0) -> (  ((hgrant1=0)<->X(hgrant1=0))  ));
assign sys_safe_err56 =  ~( ~(reg_controllable_ndecide) | (~reg_controllable_hgrant1 ^~ ~controllable_hgrant1) );

// G( (decide=0) -> (  ((hgrant2=0)<->X(hgrant2=0))  ));
assign sys_safe_err57 =  ~( ~(reg_controllable_ndecide) | (~reg_controllable_hgrant2 ^~ ~controllable_hgrant2) );

// G( (decide=0) -> (  ((hgrant3=0)<->X(hgrant3=0))  ));
assign sys_safe_err58 =  ~( ~(reg_controllable_ndecide) | (~reg_controllable_hgrant3 ^~ ~controllable_hgrant3) );

// G( (decide=0) -> (  ((hgrant4=0)<->X(hgrant4=0))  ));
assign sys_safe_err59 =  ~( ~(reg_controllable_ndecide) | (~reg_controllable_hgrant4 ^~ ~controllable_hgrant4) );

// G( (decide=0) -> (  ((hgrant5=0)<->X(hgrant5=0))  ));
assign sys_safe_err60 =  ~( ~(reg_controllable_ndecide) | (~reg_controllable_hgrant5 ^~ ~controllable_hgrant5) );

// G( (decide=0) -> (  ((hgrant6=0)<->X(hgrant6=0))  ));
assign sys_safe_err61 =  ~( ~(reg_controllable_ndecide) | (~reg_controllable_hgrant6 ^~ ~controllable_hgrant6) );

// G( (decide=0) -> (  ((hgrant7=0)<->X(hgrant7=0))  ));
assign sys_safe_err62 =  ~( ~(reg_controllable_ndecide) | (~reg_controllable_hgrant7 ^~ ~controllable_hgrant7) );

// G( (decide=0) -> (  ((hgrant8=0)<->X(hgrant8=0))  ));
assign sys_safe_err63 =  ~( ~(reg_controllable_ndecide) | (~reg_controllable_hgrant8 ^~ ~controllable_hgrant8) );

// G( (decide=0) -> (  ((hgrant9=0)<->X(hgrant9=0))  ));
assign sys_safe_err64 =  ~( ~(reg_controllable_ndecide) | (~reg_controllable_hgrant9 ^~ ~controllable_hgrant9) );

// G((decide=0)->(locked=0 <-> X(locked=0)));
assign sys_safe_err65 =  ~( ~(reg_controllable_ndecide) | (~reg_controllable_locked ^~ ~controllable_locked) );

// G(((stateG10_1=1) * (((hgrant1=1)) * (hbusreq1=0)))->FALSE);
assign sys_safe_err66 =  ~( ~(reg_stateG10_1 & (controllable_hgrant1 & ~i_hbusreq1)) | 0 );

// G(((stateG10_2=1) * (((hgrant2=1)) * (hbusreq2=0)))->FALSE);
assign sys_safe_err67 =  ~( ~(reg_stateG10_2 & (controllable_hgrant2 & ~i_hbusreq2)) | 0 );

// G(((stateG10_3=1) * (((hgrant3=1)) * (hbusreq3=0)))->FALSE);
assign sys_safe_err68 =  ~( ~(reg_stateG10_3 & (controllable_hgrant3 & ~i_hbusreq3)) | 0 );

// G(((stateG10_4=1) * (((hgrant4=1)) * (hbusreq4=0)))->FALSE);
assign sys_safe_err69 =  ~( ~(reg_stateG10_4 & (controllable_hgrant4 & ~i_hbusreq4)) | 0 );

// G(((stateG10_5=1) * (((hgrant5=1)) * (hbusreq5=0)))->FALSE);
assign sys_safe_err70 =  ~( ~(reg_stateG10_5 & (controllable_hgrant5 & ~i_hbusreq5)) | 0 );

// G(((stateG10_6=1) * (((hgrant6=1)) * (hbusreq6=0)))->FALSE);
assign sys_safe_err71 =  ~( ~(reg_stateG10_6 & (controllable_hgrant6 & ~i_hbusreq6)) | 0 );

// G(((stateG10_7=1) * (((hgrant7=1)) * (hbusreq7=0)))->FALSE);
assign sys_safe_err72 =  ~( ~(reg_stateG10_7 & (controllable_hgrant7 & ~i_hbusreq7)) | 0 );

// G(((stateG10_8=1) * (((hgrant8=1)) * (hbusreq8=0)))->FALSE);
assign sys_safe_err73 =  ~( ~(reg_stateG10_8 & (controllable_hgrant8 & ~i_hbusreq8)) | 0 );

// G(((stateG10_9=1) * (((hgrant9=1)) * (hbusreq9=0)))->FALSE);
assign sys_safe_err74 =  ~( ~(reg_stateG10_9 & (controllable_hgrant9 & ~i_hbusreq9)) | 0 );

// default master
// G((decide=1  *  hbusreq0=0  *  hbusreq1=0  *  hbusreq2=0  *  hbusreq3=0  *  hbusreq4=0  *  hbusreq5=0  *  hbusreq6=0  *  hbusreq7=0  *  hbusreq8=0  *  hbusreq9=0) -> X(hgrant0=1));
assign sys_safe_err75 =  ~( ~(~reg_controllable_ndecide & (~reg_i_hbusreq0 & ~reg_i_hbusreq1 & ~reg_i_hbusreq2 & ~reg_i_hbusreq3 & ~reg_i_hbusreq4 & ~reg_i_hbusreq5 & ~reg_i_hbusreq6 & ~reg_i_hbusreq7 & ~reg_i_hbusreq8 & ~reg_i_hbusreq9)) | (~controllable_nhgrant0) );

// collecting together the safety error bits:
assign sys_safe_err = sys_safe_err0 |
                      sys_safe_err1 |
                      sys_safe_err2 |
                      sys_safe_err3 |
                      sys_safe_err4 |
                      sys_safe_err5 |
                      sys_safe_err6 |
                      sys_safe_err7 |
                      sys_safe_err8 |
                      sys_safe_err9 |
                      sys_safe_err10 |
                      sys_safe_err11 |
                      sys_safe_err12 |
                      sys_safe_err13 |
                      sys_safe_err14 |
                      sys_safe_err15 |
                      sys_safe_err16 |
                      sys_safe_err17 |
                      sys_safe_err18 |
                      sys_safe_err19 |
                      sys_safe_err20 |
                      sys_safe_err21 |
                      sys_safe_err22 |
                      sys_safe_err23 |
                      sys_safe_err24 |
                      sys_safe_err25 |
                      sys_safe_err26 |
                      sys_safe_err27 |
                      sys_safe_err28 |
                      sys_safe_err29 |
                      sys_safe_err30 |
                      sys_safe_err31 |
                      sys_safe_err32 |
                      sys_safe_err33 |
                      sys_safe_err34 |
                      sys_safe_err35 |
                      sys_safe_err36 |
                      sys_safe_err37 |
                      sys_safe_err38 |
                      sys_safe_err39 |
                      sys_safe_err40 |
                      sys_safe_err41 |
                      sys_safe_err42 |
                      sys_safe_err43 |
                      sys_safe_err44 |
                      sys_safe_err45 |
                      sys_safe_err46 |
                      sys_safe_err47 |
                      sys_safe_err48 |
                      sys_safe_err49 |
                      sys_safe_err50 |
                      sys_safe_err51 |
                      sys_safe_err52 |
                      sys_safe_err53 |
                      sys_safe_err54 |
                      sys_safe_err55 |
                      sys_safe_err56 |
                      sys_safe_err57 |
                      sys_safe_err58 |
                      sys_safe_err59 |
                      sys_safe_err60 |
                      sys_safe_err61 |
                      sys_safe_err62 |
                      sys_safe_err63 |
                      sys_safe_err64 |
                      sys_safe_err65 |
                      sys_safe_err66 |
                      sys_safe_err67 |
                      sys_safe_err68 |
                      sys_safe_err69 |
                      sys_safe_err70 |
                      sys_safe_err71 |
                      sys_safe_err72 |
                      sys_safe_err73 |
                      sys_safe_err74 |
                      sys_safe_err75;

// =============================================================
//                          ENV_FAIRNESS:
// =============================================================
// Assumption 1: 
// G(F(stateA1=0));
assign env_fair0 =  ~reg_stateA1;

// Assumption 2:
// G(F(hready=1));
assign env_fair1 =  i_hready;


// =============================================================
//                          SYS_FAIRNESS:
// =============================================================
// Guarantee 2:
// G(F(stateG2=0));
assign sys_fair0 = ~reg_stateG2;

// Guarantee 3:
// G(F((stateG3_0=0)  *  (stateG3_1=0)  *  (stateG3_2=0)));
assign sys_fair1 =  (~reg_stateG3_0 & ~reg_stateG3_1 & ~reg_stateG3_2);

// G(F(((hmaster0=0) * (hmaster1=0) * (hmaster2=0) * (hmaster3=0))  |  hbusreq0=0));
assign sys_fair2 =  ( ~(controllable_hmaster0) & ~(controllable_hmaster1) & ~(controllable_hmaster2) & ~(controllable_hmaster3) ) | ~i_hbusreq0;

// G(F(((hmaster0=1) * (hmaster1=0) * (hmaster2=0) * (hmaster3=0))  |  hbusreq1=0));
assign sys_fair3 =  ( controllable_hmaster0 & ~(controllable_hmaster1) & ~(controllable_hmaster2) & ~(controllable_hmaster3) ) | ~i_hbusreq1;

// G(F(((hmaster0=0) * (hmaster1=1) * (hmaster2=0) * (hmaster3=0))  |  hbusreq2=0));
assign sys_fair4 =  ( ~(controllable_hmaster0) & controllable_hmaster1 & ~(controllable_hmaster2) & ~(controllable_hmaster3) ) | ~i_hbusreq2;

// G(F(((hmaster0=1) * (hmaster1=1) * (hmaster2=0) * (hmaster3=0))  |  hbusreq3=0));
assign sys_fair5 =  ( controllable_hmaster0 & controllable_hmaster1 & ~(controllable_hmaster2) & ~(controllable_hmaster3) ) | ~i_hbusreq3;

// G(F(((hmaster0=0) * (hmaster1=0) * (hmaster2=1) * (hmaster3=0))  |  hbusreq4=0));
assign sys_fair6 =  ( ~(controllable_hmaster0) & ~(controllable_hmaster1) & controllable_hmaster2 & ~(controllable_hmaster3) ) | ~i_hbusreq4;

// G(F(((hmaster0=1) * (hmaster1=0) * (hmaster2=1) * (hmaster3=0))  |  hbusreq5=0));
assign sys_fair7 =  ( controllable_hmaster0 & ~(controllable_hmaster1) & controllable_hmaster2 & ~(controllable_hmaster3) ) | ~i_hbusreq5;

// G(F(((hmaster0=0) * (hmaster1=1) * (hmaster2=1) * (hmaster3=0))  |  hbusreq6=0));
assign sys_fair8 =  ( ~(controllable_hmaster0) & controllable_hmaster1 & controllable_hmaster2 & ~(controllable_hmaster3) ) | ~i_hbusreq6;

// G(F(((hmaster0=1) * (hmaster1=1) * (hmaster2=1) * (hmaster3=0))  |  hbusreq7=0));
assign sys_fair9 =  ( controllable_hmaster0 & controllable_hmaster1 & controllable_hmaster2 & ~(controllable_hmaster3) ) | ~i_hbusreq7;

// G(F(((hmaster0=0) * (hmaster1=0) * (hmaster2=0) * (hmaster3=1))  |  hbusreq8=0));
assign sys_fair10 =  ( ~(controllable_hmaster0) & ~(controllable_hmaster1) & ~(controllable_hmaster2) & controllable_hmaster3 ) | ~i_hbusreq8;

// G(F(((hmaster0=1) * (hmaster1=0) * (hmaster2=0) * (hmaster3=1))  |  hbusreq9=0));
assign sys_fair11 =  ( controllable_hmaster0 & ~(controllable_hmaster1) & ~(controllable_hmaster2) & controllable_hmaster3 ) | ~i_hbusreq9;

assign fair_err = (fair_cnt >= 3'b101);

// computing the error output bit:
assign o_err = ~env_safe_err & ~env_safe_err_happened & (sys_safe_err | fair_err);

initial
 begin
  reg_i_hready = 0;
  reg_i_hbusreq0 = 0;
  reg_i_hlock0 = 0;
  reg_i_hbusreq1 = 0;
  reg_i_hlock1 = 0;
  reg_i_hbusreq2 = 0;
  reg_i_hlock2 = 0;
  reg_i_hbusreq3 = 0;
  reg_i_hlock3 = 0;
  reg_i_hbusreq4 = 0;
  reg_i_hlock4 = 0;
  reg_i_hbusreq5 = 0;
  reg_i_hlock5 = 0;
  reg_i_hbusreq6 = 0;
  reg_i_hlock6 = 0;
  reg_i_hbusreq7 = 0;
  reg_i_hlock7 = 0;
  reg_i_hbusreq8 = 0;
  reg_i_hlock8 = 0;
  reg_i_hbusreq9 = 0;
  reg_i_hlock9 = 0;
  reg_controllable_hmaster0 = 0;
  reg_controllable_hmaster1 = 0;
  reg_controllable_hmaster2 = 0;
  reg_controllable_hmaster3 = 0;
  reg_controllable_hmastlock = 0;
  reg_controllable_nstart = 0;
  reg_controllable_ndecide = 0;
  reg_controllable_locked = 0;
  reg_controllable_nhgrant0 = 0;
  reg_controllable_hgrant1 = 0;
  reg_controllable_hgrant2 = 0;
  reg_controllable_hgrant3 = 0;
  reg_controllable_hgrant4 = 0;
  reg_controllable_hgrant5 = 0;
  reg_controllable_hgrant6 = 0;
  reg_controllable_hgrant7 = 0;
  reg_controllable_hgrant8 = 0;
  reg_controllable_hgrant9 = 0;
  reg_controllable_busreq = 0;
  reg_stateA1 = 0;
  reg_stateG2 = 0;
  reg_stateG3_0 = 0;
  reg_stateG3_1 = 0;
  reg_stateG3_2 = 0;
  reg_stateG10_1 = 0;
  reg_stateG10_2 = 0;
  reg_stateG10_3 = 0;
  reg_stateG10_4 = 0;
  reg_stateG10_5 = 0;
  reg_stateG10_6 = 0;
  reg_stateG10_7 = 0;
  reg_stateG10_8 = 0;
  reg_stateG10_9 = 0;
  env_safe_err_happened = 0;
  next_env_fair = 0;
  fair_cnt = 0;
  next_sys_fair = 0;
 end


always @(posedge i_clk)
 begin
   // We remember if an environment error occurred:
   env_safe_err_happened = env_safe_err_happened | env_safe_err;

   // Updating the fairness counters: 
   if((next_sys_fair == 0) & sys_fair0)
    begin
      next_sys_fair = 1;
      next_env_fair = 0;
      fair_cnt = 0;
    end
   else if((next_sys_fair == 1) & sys_fair1)
    begin
      next_sys_fair = 2;
      next_env_fair = 0;
      fair_cnt = 0;
    end
   else if((next_sys_fair == 2) & sys_fair2)
    begin
      next_sys_fair = 3;
      next_env_fair = 0;
      fair_cnt = 0;
    end
   else if((next_sys_fair == 3) & sys_fair3)
    begin
      next_sys_fair = 4;
      next_env_fair = 0;
      fair_cnt = 0;
    end
   else if((next_sys_fair == 4) & sys_fair4)
    begin
      next_sys_fair = 5;
      next_env_fair = 0;
      fair_cnt = 0;
    end
   else if((next_sys_fair == 5) & sys_fair5)
    begin
      next_sys_fair = 6;
      next_env_fair = 0;
      fair_cnt = 0;
    end
   else if((next_sys_fair == 6) & sys_fair6)
    begin
      next_sys_fair = 7;
      next_env_fair = 0;
      fair_cnt = 0;
    end
   else if((next_sys_fair == 7) & sys_fair7)
    begin
      next_sys_fair = 8;
      next_env_fair = 0;
      fair_cnt = 0;
    end
   else if((next_sys_fair == 8) & sys_fair8)
    begin
      next_sys_fair = 9;
      next_env_fair = 0;
      fair_cnt = 0;
    end
   else if((next_sys_fair == 9) & sys_fair9)
    begin
      next_sys_fair = 10;
      next_env_fair = 0;
      fair_cnt = 0;
    end
   else if((next_sys_fair == 10) & sys_fair10)
    begin
      next_sys_fair = 11;
      next_env_fair = 0;
      fair_cnt = 0;
    end
   else if((next_sys_fair == 11) & sys_fair11)
    begin
      next_sys_fair = 0;
      next_env_fair = 0;
      fair_cnt = 0;
    end
   else if(~next_env_fair & env_fair0)
    begin
      next_env_fair = 1;
    end
   else if(next_env_fair & env_fair1)
    begin
      next_env_fair = 0;
      fair_cnt = fair_cnt + 1;
    end

   // Updating the automata: 
   // Automaton A1: 
   if(~reg_stateA1 & controllable_hmastlock & ~i_hburst0 & ~i_hburst1)
    begin
      reg_stateA1 = 1'b1;
    end
   else if(reg_stateA1 & ~controllable_busreq)
    begin
      reg_stateA1 = 1'b0;
    end

   // Automaton G2: 
   if(~reg_stateG2)
    begin
      if(controllable_hmastlock & ~controllable_nstart & ~i_hburst0 & ~i_hburst1)
       begin
         reg_stateG2 = 1'b1;
       end
    end
   else // if(reg_stateG2)
    begin
      if(~controllable_busreq)
       begin
         reg_stateG2 = 1'b0;
       end
    end

   // Automaton G3: 
   if(~reg_stateG3_0 & ~reg_stateG3_1 & ~reg_stateG3_2 & controllable_hmastlock & ~controllable_nstart &  ~i_hburst0 & i_hburst1 & ~i_hready)
    begin
      reg_stateG3_0 = 1'b1;
      reg_stateG3_1 = 1'b0;
      reg_stateG3_2 = 1'b0;
    end
   else if(~reg_stateG3_0 & ~reg_stateG3_1 & ~reg_stateG3_2 & controllable_hmastlock & ~controllable_nstart &  ~i_hburst0 & i_hburst1 & i_hready)
    begin
      reg_stateG3_0 = 1'b0;
      reg_stateG3_1 = 1'b1;
      reg_stateG3_2 = 1'b0;
    end
   else if(reg_stateG3_0 & ~reg_stateG3_1 & ~reg_stateG3_2 & i_hready)
    begin
      reg_stateG3_0 = 1'b0;
      reg_stateG3_1 = 1'b1;
      reg_stateG3_2 = 1'b0;
    end
   else if(~reg_stateG3_0 & reg_stateG3_1 & ~reg_stateG3_2 & i_hready)
    begin
      reg_stateG3_0 = 1'b1;
      reg_stateG3_1 = 1'b1;
      reg_stateG3_2 = 1'b0;
    end
   else if(reg_stateG3_0 & reg_stateG3_1 & ~reg_stateG3_2 & i_hready)
    begin
      reg_stateG3_0 = 1'b0;
      reg_stateG3_1 = 1'b0;
      reg_stateG3_2 = 1'b1;
    end
   else if(~reg_stateG3_0 & ~reg_stateG3_1 & reg_stateG3_2 & i_hready)
    begin
      reg_stateG3_0 = 1'b0;
      reg_stateG3_1 = 1'b0;
      reg_stateG3_2 = 1'b0;
    end

   // Automaton G10_1: 
   if(~reg_stateG10_1 & ~controllable_hgrant1 & ~i_hbusreq1)
    begin
      reg_stateG10_1 = 1'b1;
    end
   else if(reg_stateG10_1 & i_hbusreq1)
    begin
      reg_stateG10_1 = 1'b0;
    end

   // Automaton G10_2: 
   if(~reg_stateG10_2 & ~controllable_hgrant2 & ~i_hbusreq2)
    begin
      reg_stateG10_2 = 1'b1;
    end
   else if(reg_stateG10_2 & i_hbusreq2)
    begin
      reg_stateG10_2 = 1'b0;
    end

   // Automaton G10_3: 
   if(~reg_stateG10_3 & ~controllable_hgrant3 & ~i_hbusreq3)
    begin
      reg_stateG10_3 = 1'b1;
    end
   else if(reg_stateG10_3 & i_hbusreq3)
    begin
      reg_stateG10_3 = 1'b0;
    end

   // Automaton G10_4: 
   if(~reg_stateG10_4 & ~controllable_hgrant4 & ~i_hbusreq4)
    begin
      reg_stateG10_4 = 1'b1;
    end
   else if(reg_stateG10_4 & i_hbusreq4)
    begin
      reg_stateG10_4 = 1'b0;
    end

   // Automaton G10_5: 
   if(~reg_stateG10_5 & ~controllable_hgrant5 & ~i_hbusreq5)
    begin
      reg_stateG10_5 = 1'b1;
    end
   else if(reg_stateG10_5 & i_hbusreq5)
    begin
      reg_stateG10_5 = 1'b0;
    end

   // Automaton G10_6: 
   if(~reg_stateG10_6 & ~controllable_hgrant6 & ~i_hbusreq6)
    begin
      reg_stateG10_6 = 1'b1;
    end
   else if(reg_stateG10_6 & i_hbusreq6)
    begin
      reg_stateG10_6 = 1'b0;
    end

   // Automaton G10_7: 
   if(~reg_stateG10_7 & ~controllable_hgrant7 & ~i_hbusreq7)
    begin
      reg_stateG10_7 = 1'b1;
    end
   else if(reg_stateG10_7 & i_hbusreq7)
    begin
      reg_stateG10_7 = 1'b0;
    end

   // Automaton G10_8: 
   if(~reg_stateG10_8 & ~controllable_hgrant8 & ~i_hbusreq8)
    begin
      reg_stateG10_8 = 1'b1;
    end
   else if(reg_stateG10_8 & i_hbusreq8)
    begin
      reg_stateG10_8 = 1'b0;
    end

   // Automaton G10_9: 
   if(~reg_stateG10_9 & ~controllable_hgrant9 & ~i_hbusreq9)
    begin
      reg_stateG10_9 = 1'b1;
    end
   else if(reg_stateG10_9 & i_hbusreq9)
    begin
      reg_stateG10_9 = 1'b0;
    end

   // Latching the previous input:
   reg_i_hready =  i_hready;
   reg_i_hbusreq0 =  i_hbusreq0;
   reg_i_hlock0 =  i_hlock0;
   reg_i_hbusreq1 =  i_hbusreq1;
   reg_i_hlock1 =  i_hlock1;
   reg_i_hbusreq2 =  i_hbusreq2;
   reg_i_hlock2 =  i_hlock2;
   reg_i_hbusreq3 =  i_hbusreq3;
   reg_i_hlock3 =  i_hlock3;
   reg_i_hbusreq4 =  i_hbusreq4;
   reg_i_hlock4 =  i_hlock4;
   reg_i_hbusreq5 =  i_hbusreq5;
   reg_i_hlock5 =  i_hlock5;
   reg_i_hbusreq6 =  i_hbusreq6;
   reg_i_hlock6 =  i_hlock6;
   reg_i_hbusreq7 =  i_hbusreq7;
   reg_i_hlock7 =  i_hlock7;
   reg_i_hbusreq8 =  i_hbusreq8;
   reg_i_hlock8 =  i_hlock8;
   reg_i_hbusreq9 =  i_hbusreq9;
   reg_i_hlock9 =  i_hlock9;
   reg_controllable_hmaster0 =  controllable_hmaster0;
   reg_controllable_hmaster1 =  controllable_hmaster1;
   reg_controllable_hmaster2 =  controllable_hmaster2;
   reg_controllable_hmaster3 =  controllable_hmaster3;
   reg_controllable_hmastlock =  controllable_hmastlock;
   reg_controllable_nstart =  controllable_nstart;
   reg_controllable_ndecide =  controllable_ndecide;
   reg_controllable_locked =  controllable_locked;
   reg_controllable_nhgrant0 =  controllable_nhgrant0;
   reg_controllable_hgrant1 =  controllable_hgrant1;
   reg_controllable_hgrant2 =  controllable_hgrant2;
   reg_controllable_hgrant3 =  controllable_hgrant3;
   reg_controllable_hgrant4 =  controllable_hgrant4;
   reg_controllable_hgrant5 =  controllable_hgrant5;
   reg_controllable_hgrant6 =  controllable_hgrant6;
   reg_controllable_hgrant7 =  controllable_hgrant7;
   reg_controllable_hgrant8 =  controllable_hgrant8;
   reg_controllable_hgrant9 =  controllable_hgrant9;
   reg_controllable_busreq =  controllable_busreq;

 end
endmodule

-------------------------------
#!SYNTCOMP
STATUS : realizable
SOLVED_BY : 3/8 [SYNTCOMP2014-RealSeq]
SOLVED_IN : 39.2625 [SYNTCOMP2014-RealSeq]
#.
