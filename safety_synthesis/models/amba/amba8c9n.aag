aag 1014 35 57 1 922
2
4
6
8
10
12
14
16
18
20
22
24
26
28
30
32
34
36
38
40
42
44
46
48
50
52
54
56
58
60
62
64
66
68
70
72 1
74 10
76 1141
78 60
80 66
82 14
84 1163
86 62
88 1401
90 64
92 36
94 18
96 1485
98 34
100 22
102 1509
104 6
106 54
108 30
110 26
112 1529
114 38
116 28
118 8
120 32
122 46
124 24
126 1559
128 1581
130 48
132 20
134 70
136 1603
138 2
140 50
142 1627
144 16
146 1785
148 1791
150 1797
152 1803
154 1939
156 1945
158 1951
160 1957
162 1963
164 1985
166 52
168 12
170 40
172 221
174 2007
176 56
178 4
180 2029
182 58
184 68
1118
186 47 12
188 49 16
190 189 187
192 51 20
194 193 190
196 53 24
198 197 194
200 57 28
202 201 198
204 59 30
206 205 202
208 61 34
210 209 206
212 63 36
214 213 210
216 173 72
218 217 72
220 219 214
222 69 67
224 222 65
226 46 39
228 47 38
230 229 227
232 231 224
234 68 67
236 234 65
238 48 39
240 49 38
242 241 239
244 243 236
246 245 233
248 69 66
250 248 65
252 50 39
254 51 38
256 255 253
258 257 250
260 259 246
262 68 66
264 262 65
266 52 39
268 53 38
270 269 267
272 271 264
274 273 260
276 222 64
278 56 39
280 57 38
282 281 279
284 283 276
286 285 274
288 234 64
290 58 39
292 59 38
294 293 291
296 295 288
298 297 286
300 248 64
302 60 39
304 61 38
306 305 303
308 307 300
310 309 298
312 262 64
314 62 39
316 63 38
318 317 315
320 319 312
322 321 310
324 171 72
326 170 72
328 325 72
330 329 9
332 331 322
334 127 72
336 126 72
338 335 72
340 336 9
342 341 332
344 97 72
346 96 72
348 345 72
350 103 72
352 102 72
354 351 72
356 355 349
358 113 72
360 112 72
362 359 72
364 363 356
366 365 9
368 367 342
370 139 72
372 138 72
374 371 72
376 372 224
378 375 225
380 379 377
382 381 326
384 383 368
386 179 72
388 178 72
390 387 72
392 391 236
394 388 237
396 395 393
398 397 326
400 399 384
402 75 72
404 74 72
406 403 72
408 407 250
410 404 251
412 411 409
414 413 326
416 415 400
418 83 72
420 82 72
422 419 72
424 423 264
426 420 265
428 427 425
430 429 326
432 431 416
434 95 72
436 94 72
438 435 72
440 439 276
442 436 277
444 443 441
446 445 326
448 447 432
450 101 72
452 100 72
454 451 72
456 455 288
458 452 289
460 459 457
462 461 326
464 463 448
466 111 72
468 110 72
470 467 72
472 471 300
474 468 301
476 475 473
478 477 326
480 479 464
482 121 72
484 120 72
486 483 72
488 487 312
490 484 313
492 491 489
494 493 326
496 495 480
498 105 72
500 104 72
502 499 72
504 500 71
506 503 70
508 507 505
510 509 326
512 511 496
514 185 72
516 184 72
518 515 72
520 81 72
522 80 72
524 521 72
526 525 519
528 91 72
530 90 72
532 529 72
534 533 526
536 535 224
538 534 225
540 539 537
542 541 8
544 543 512
546 525 516
548 546 533
550 549 236
552 548 237
554 553 551
556 555 8
558 557 544
560 522 519
562 560 533
564 563 250
566 562 251
568 567 565
570 569 8
572 571 558
574 522 516
576 574 533
578 577 264
580 576 265
582 581 579
584 583 8
586 585 572
588 530 526
590 589 276
592 588 277
594 593 591
596 595 8
598 597 586
600 546 530
602 601 288
604 600 289
606 605 603
608 607 8
610 609 598
612 560 530
614 613 300
616 612 301
618 617 615
620 619 8
622 621 610
624 574 530
626 625 312
628 624 313
630 629 627
632 631 8
634 633 622
636 135 72
638 134 72
640 637 72
642 641 70
644 638 71
646 645 643
648 647 8
650 649 634
652 107 72
654 106 72
656 653 72
658 169 72
660 168 72
662 659 72
664 660 657
666 664 3
668 666 7
670 669 650
672 663 657
674 672 3
676 674 6
678 677 670
680 145 72
682 144 72
684 681 72
686 682 657
688 686 4
690 688 7
692 691 678
694 685 657
696 694 4
698 696 6
700 699 692
702 133 72
704 132 72
706 703 72
708 704 657
710 708 10
712 710 7
714 713 700
716 707 657
718 716 10
720 718 6
722 721 714
724 125 72
726 124 72
728 725 72
730 726 657
732 730 14
734 732 7
736 735 722
738 729 657
740 738 14
742 740 6
744 743 736
746 117 72
748 116 72
750 747 72
752 748 657
754 752 18
756 754 7
758 757 744
760 751 657
762 760 18
764 762 6
766 765 758
768 109 72
770 108 72
772 769 72
774 770 657
776 774 22
778 776 7
780 779 766
782 773 657
784 782 22
786 784 6
788 787 780
790 99 72
792 98 72
794 791 72
796 792 657
798 796 26
800 798 7
802 801 788
804 795 657
806 804 26
808 806 6
810 809 802
812 93 72
814 92 72
816 813 72
818 814 657
820 818 32
822 820 7
824 823 810
826 817 657
828 826 32
830 828 6
832 831 824
834 375 2
836 372 3
838 837 835
840 839 654
842 841 832
844 388 5
846 391 4
848 847 845
850 849 654
852 851 842
854 404 11
856 407 10
858 857 855
860 859 654
862 861 852
864 420 15
866 423 14
868 867 865
870 869 654
872 871 862
874 436 19
876 439 18
878 877 875
880 879 654
882 881 872
884 452 23
886 455 22
888 887 885
890 889 654
892 891 882
894 468 27
896 471 26
898 897 895
900 899 654
902 901 892
904 484 33
906 487 32
908 907 905
910 909 654
912 911 902
914 500 7
916 503 6
918 917 915
920 919 654
922 921 912
924 129 72
926 128 72
928 925 72
930 49 4
932 930 926
934 933 922
936 137 72
938 136 72
940 937 72
942 51 10
944 942 938
946 945 934
948 165 72
950 164 72
952 949 72
954 53 14
956 954 950
958 957 946
960 175 72
962 174 72
964 961 72
966 57 18
968 966 962
970 969 958
972 181 72
974 180 72
976 973 72
978 59 22
980 978 974
982 981 970
984 77 72
986 76 72
988 985 72
990 61 26
992 990 986
994 993 982
996 85 72
998 84 72
1000 997 72
1002 63 32
1004 1002 998
1006 1005 994
1008 123 72
1010 1009 72
1012 131 72
1014 1013 72
1016 1015 1011
1018 141 72
1020 1019 72
1022 1021 1016
1024 167 72
1026 1025 72
1028 1027 1022
1030 177 72
1032 1031 72
1034 1033 1028
1036 183 72
1038 1037 72
1040 1039 1034
1042 79 72
1044 1043 72
1046 1045 1040
1048 87 72
1050 1049 72
1052 1051 1046
1054 1052 657
1056 1054 2
1058 1057 1006
1060 153 72
1062 152 72
1064 1061 72
1066 151 72
1068 150 72
1070 1067 72
1072 149 72
1074 148 72
1076 1073 72
1078 147 72
1080 146 72
1082 1079 72
1084 1083 1077
1086 1084 1071
1088 1086 1065
1090 1089 1064
1092 1090 1087
1094 1082 1074
1096 1095 1085
1098 1085 1068
1100 1099 1087
1102 1087 1065
1104 1086 1062
1106 1105 1103
1108 1096 1082
1110 1108 1100
1112 1110 1106
1114 1113 1093
1116 1114 1058
1118 1117 220
1120 989 27
1122 1120 61
1124 986 60
1126 1124 1123
1128 1127 1123
1130 1125 986
1132 1130 1123
1134 1133 1123
1136 1135 1129
1138 1128 986
1140 1139 1137
1142 1001 33
1144 1142 63
1146 998 62
1148 1146 1145
1150 1149 1145
1152 1147 998
1154 1152 1145
1156 1155 1145
1158 1157 1151
1160 1150 998
1162 1161 1159
1164 155 72
1166 154 72
1168 1165 72
1170 157 72
1172 156 72
1174 1171 72
1176 159 72
1178 158 72
1180 1177 72
1182 161 72
1184 160 72
1186 1183 72
1188 162 72
1190 1173 1167
1192 1190 1179
1194 1192 1185
1196 1194 1189
1198 1196 339
1200 1173 1168
1202 1200 1179
1204 1202 1185
1206 1204 1189
1208 1206 364
1210 1174 1167
1212 1210 1179
1214 1212 1185
1216 1214 1189
1218 225 46
1220 1219 1216
1222 1174 1168
1224 1222 1179
1226 1224 1185
1228 1226 1189
1230 237 48
1232 1231 1228
1234 1190 1180
1236 1234 1185
1238 1236 1189
1240 251 50
1242 1241 1238
1244 1200 1180
1246 1244 1185
1248 1246 1189
1250 265 52
1252 1251 1248
1254 1210 1180
1256 1254 1185
1258 1256 1189
1260 277 56
1262 1261 1258
1264 1222 1180
1266 1264 1185
1268 1266 1189
1270 289 58
1272 1271 1268
1274 1192 1186
1276 1274 1189
1278 301 60
1280 1279 1276
1282 1202 1186
1284 1282 1189
1286 313 62
1288 1287 1284
1290 89 72
1292 88 72
1294 1291 72
1296 143 72
1298 142 72
1300 1297 72
1302 1301 1295
1304 1292 40
1306 1208 1199
1308 1307 1199
1310 1209 1199
1312 1310 1220
1314 1313 1308
1316 1310 1221
1318 1316 1232
1320 1319 1314
1322 1316 1233
1324 1322 1242
1326 1325 1320
1328 1322 1243
1330 1328 1252
1332 1331 1326
1334 1328 1253
1336 1334 1262
1338 1337 1332
1340 1334 1263
1342 1340 1272
1344 1343 1338
1346 1340 1273
1348 1346 1280
1350 1349 1344
1352 1346 1281
1354 1352 1288
1356 1355 1350
1358 1352 1289
1360 1358 1302
1362 1361 1356
1364 1358 1303
1366 1364 1304
1368 1367 1362
1370 1305 1292
1372 1370 1303
1374 1373 1303
1376 1375 1289
1378 1376 1281
1380 1378 1273
1382 1380 1263
1384 1382 1253
1386 1384 1243
1388 1386 1233
1390 1388 1221
1392 1390 1209
1394 1392 1199
1396 1394 1369
1398 1368 1292
1400 1399 1397
1402 364 70
1404 1402 9
1406 1404 45
1408 1406 42
1410 1408 41
1412 1408 40
1414 355 346
1416 1414 363
1418 1416 40
1420 352 349
1422 1420 363
1424 1422 40
1426 352 346
1428 1426 363
1430 1428 40
1432 360 356
1434 1432 40
1436 1412 1411
1438 1437 1411
1440 1413 1411
1442 1440 1418
1444 1443 1438
1446 1440 1419
1448 1446 1424
1450 1449 1444
1452 1446 1425
1454 1452 1430
1456 1455 1450
1458 1452 1431
1460 1458 1434
1462 1461 1456
1464 1435 346
1466 1464 1431
1468 1466 1425
1470 1469 1425
1472 1471 1419
1474 1472 1413
1476 1474 1411
1478 1477 1411
1480 1479 1463
1482 1462 346
1484 1483 1481
1486 1435 352
1488 1486 1431
1490 1488 1425
1492 1491 1425
1494 1493 1419
1496 1495 1419
1498 1497 1413
1500 1499 1413
1502 1501 1411
1504 1502 1463
1506 1462 352
1508 1507 1505
1510 1435 360
1512 1510 1431
1514 1513 1431
1516 1515 1425
1518 1516 1419
1520 1518 1413
1522 1520 1411
1524 1522 1463
1526 1462 360
1528 1527 1525
1530 70 9
1532 1530 45
1534 1532 43
1536 1534 339
1538 336 39
1540 1539 1537
1542 1535 336
1544 1543 1535
1546 336 38
1548 1545 339
1550 1546 336
1552 1551 1549
1554 1553 1541
1556 1540 336
1558 1557 1555
1560 929 5
1562 1560 49
1564 926 48
1566 1564 1563
1568 1567 1563
1570 1565 926
1572 1570 1563
1574 1573 1563
1576 1575 1569
1578 1568 926
1580 1579 1577
1582 941 11
1584 1582 51
1586 938 50
1588 1586 1585
1590 1589 1585
1592 1587 938
1594 1592 1585
1596 1595 1585
1598 1597 1591
1600 1590 938
1602 1601 1599
1604 1301 70
1606 1604 45
1608 1606 43
1610 1298 39
1612 1610 1609
1614 1613 1609
1616 1611 1298
1618 1616 1609
1620 1619 1609
1622 1621 1615
1624 1614 1298
1626 1625 1623
1628 1367 1356
1630 1304 1083
1632 1305 1080
1634 1633 1631
1636 1302 1080
1638 1635 1303
1640 1639 1637
1642 1641 1289
1644 1642 1281
1646 1644 1273
1648 1646 1263
1650 1648 1253
1652 1650 1243
1654 1652 1233
1656 1654 1221
1658 1656 1209
1660 1658 1199
1662 1080 1077
1664 1081 1074
1666 1665 1663
1668 1667 1304
1670 1305 1074
1672 1671 1669
1674 1302 1074
1676 1673 1303
1678 1677 1675
1680 1679 1289
1682 1680 1281
1684 1682 1273
1686 1684 1263
1688 1686 1253
1690 1688 1243
1692 1690 1233
1694 1692 1221
1696 1694 1209
1698 1696 1199
1700 1080 1074
1702 1700 1071
1704 1701 1068
1706 1705 1703
1708 1707 1304
1710 1305 1068
1712 1711 1709
1714 1302 1068
1716 1713 1303
1718 1717 1715
1720 1719 1289
1722 1720 1281
1724 1722 1273
1726 1724 1263
1728 1726 1253
1730 1728 1243
1732 1730 1233
1734 1732 1221
1736 1734 1209
1738 1736 1199
1740 1700 1068
1742 1740 1065
1744 1741 1062
1746 1745 1743
1748 1747 1304
1750 1305 1062
1752 1751 1749
1754 1302 1062
1756 1753 1303
1758 1757 1755
1760 1759 1289
1762 1760 1281
1764 1762 1273
1766 1764 1263
1768 1766 1253
1770 1768 1243
1772 1770 1233
1774 1772 1221
1776 1774 1209
1778 1776 1199
1780 1660 1629
1782 1628 1080
1784 1783 1781
1786 1698 1629
1788 1628 1074
1790 1789 1787
1792 1738 1629
1794 1628 1068
1796 1795 1793
1798 1778 1629
1800 1628 1062
1802 1801 1799
1804 1289 1166
1806 1804 1281
1808 1807 1281
1810 1809 1273
1812 1810 1263
1814 1813 1263
1816 1815 1253
1818 1816 1243
1820 1819 1243
1822 1821 1233
1824 1822 1221
1826 1825 1221
1828 1827 1209
1830 1828 1199
1832 1831 1199
1834 1289 1172
1836 1834 1281
1838 1836 1273
1840 1838 1263
1842 1841 1263
1844 1843 1253
1846 1845 1253
1848 1847 1243
1850 1848 1233
1852 1850 1221
1854 1853 1221
1856 1855 1209
1858 1857 1209
1860 1859 1199
1862 1289 1178
1864 1862 1281
1866 1864 1273
1868 1866 1263
1870 1869 1263
1872 1871 1253
1874 1873 1253
1876 1875 1243
1878 1877 1243
1880 1879 1233
1882 1881 1233
1884 1883 1221
1886 1884 1209
1888 1886 1199
1890 1289 1184
1892 1890 1281
1894 1893 1281
1896 1895 1273
1898 1897 1273
1900 1899 1263
1902 1900 1253
1904 1902 1243
1906 1904 1233
1908 1906 1221
1910 1908 1209
1912 1910 1199
1914 1289 1188
1916 1914 1281
1918 1916 1273
1920 1918 1263
1922 1920 1253
1924 1922 1243
1926 1924 1233
1928 1926 1221
1930 1928 1209
1932 1930 1199
1934 1833 1357
1936 1356 1166
1938 1937 1935
1940 1860 1357
1942 1356 1172
1944 1943 1941
1946 1888 1357
1948 1356 1178
1950 1949 1947
1952 1912 1357
1954 1356 1184
1956 1955 1953
1958 1932 1357
1960 1356 1188
1962 1961 1959
1964 953 15
1966 1964 53
1968 950 52
1970 1968 1967
1972 1971 1967
1974 1969 950
1976 1974 1967
1978 1977 1967
1980 1979 1973
1982 1972 950
1984 1983 1981
1986 965 19
1988 1986 57
1990 962 56
1992 1990 1989
1994 1993 1989
1996 1991 962
1998 1996 1989
2000 1999 1989
2002 2001 1995
2004 1994 962
2006 2005 2003
2008 977 23
2010 2008 59
2012 974 58
2014 2012 2011
2016 2015 2011
2018 2013 974
2020 2018 2011
2022 2021 2011
2024 2023 2017
2026 2016 974
2028 2027 2025
i0 controllable_nhgrant0
i1 controllable_hgrant1
i2 controllable_locked
i3 controllable_nstart
i4 controllable_hgrant2
i5 i_hlock0
i6 controllable_hgrant3
i7 i_hlock1
i8 controllable_hgrant4
i9 i_hlock2
i10 controllable_hgrant5
i11 i_hlock3
i12 controllable_hgrant6
i13 i_hlock4
i14 i_hlock5
i15 controllable_hgrant7
i16 i_hlock6
i17 i_hlock7
i18 controllable_busreq
i19 i_hready
i20 i_hburst1
i21 i_hburst0
i22 i_hbusreq0
i23 i_hbusreq1
i24 i_hbusreq2
i25 i_hbusreq3
i26 controllable_ndecide
i27 i_hbusreq4
i28 i_hbusreq5
i29 i_hbusreq6
i30 i_hbusreq7
i31 controllable_hmaster2
i32 controllable_hmaster1
i33 controllable_hmaster0
i34 controllable_hmastlock
l0 n73
l1 reg_controllable_hgrant2_out
l2 reg_stateG10_6_out
l3 reg_i_hbusreq6_out
l4 reg_controllable_hmaster1_out
l5 reg_controllable_hgrant3_out
l6 reg_stateG10_7_out
l7 reg_i_hbusreq7_out
l8 next_env_fair_out
l9 reg_controllable_hmaster2_out
l10 reg_i_hlock7_out
l11 reg_controllable_hgrant4_out
l12 reg_stateG3_0_out
l13 reg_i_hlock6_out
l14 reg_controllable_hgrant5_out
l15 reg_stateG3_1_out
l16 reg_controllable_locked_out
l17 reg_controllable_ndecide_out
l18 reg_i_hlock5_out
l19 reg_controllable_hgrant6_out
l20 reg_stateG3_2_out
l21 reg_controllable_busreq_out
l22 reg_i_hlock4_out
l23 reg_controllable_nstart_out
l24 reg_controllable_hgrant7_out
l25 reg_i_hbusreq0_out
l26 reg_i_hlock3_out
l27 reg_stateG2_out
l28 reg_stateG10_1_out
l29 reg_i_hbusreq1_out
l30 reg_i_hlock2_out
l31 reg_controllable_hmastlock_out
l32 reg_stateG10_2_out
l33 reg_controllable_nhgrant0_out
l34 reg_i_hbusreq2_out
l35 reg_stateA1_out
l36 reg_i_hlock1_out
l37 fair_cnt<0>_out
l38 fair_cnt<1>_out
l39 fair_cnt<2>_out
l40 fair_cnt<3>_out
l41 next_sys_fair<0>_out
l42 next_sys_fair<1>_out
l43 next_sys_fair<2>_out
l44 next_sys_fair<3>_out
l45 next_sys_fair<4>_out
l46 reg_stateG10_3_out
l47 reg_i_hbusreq3_out
l48 reg_i_hlock0_out
l49 reg_i_hready_out
l50 env_safe_err_happened_out
l51 reg_stateG10_4_out
l52 reg_i_hbusreq4_out
l53 reg_controllable_hgrant1_out
l54 reg_stateG10_5_out
l55 reg_i_hbusreq5_out
l56 reg_controllable_hmaster0_out
o0 o_err
c
amba_8_new_9
This file was written by ABC on Tue May  5 16:53:34 2015
For information about AIGER format, refer to http://fmv.jku.at/aiger
-------------------------------
This AIGER file has been created by the following sequence of commands:
> vl2mv amba8c9.v   ---gives--> amba8c9.mv
> abc -c "read_blif_mv amba8c9.mv; write_aiger -s amba8c9n.aig"   ---gives--> amba8c9n.aig
> aigtoaig amba8c9n.aig amba8c9n.aag   ---gives--> amba8c9n.aag (this file)
Content of amba8c9.v:
module amba_8_new_9(
        o_err,
        i_clk,
        i_hready,
        i_hbusreq0,
        i_hlock0,
        i_hbusreq1,
        i_hlock1,
        i_hbusreq2,
        i_hlock2,
        i_hbusreq3,
        i_hlock3,
        i_hbusreq4,
        i_hlock4,
        i_hbusreq5,
        i_hlock5,
        i_hbusreq6,
        i_hlock6,
        i_hbusreq7,
        i_hlock7,
        i_hburst0,
        i_hburst1,
        controllable_hmaster0,
        controllable_hmaster1,
        controllable_hmaster2,
        controllable_hmastlock,
        controllable_nstart,
        controllable_ndecide,
        controllable_locked,
        controllable_nhgrant0,
        controllable_hgrant1,
        controllable_hgrant2,
        controllable_hgrant3,
        controllable_hgrant4,
        controllable_hgrant5,
        controllable_hgrant6,
        controllable_hgrant7,
        controllable_busreq);

input i_clk;
input i_hready;
input i_hbusreq0;
input i_hlock0;
input i_hbusreq1;
input i_hlock1;
input i_hbusreq2;
input i_hlock2;
input i_hbusreq3;
input i_hlock3;
input i_hbusreq4;
input i_hlock4;
input i_hbusreq5;
input i_hlock5;
input i_hbusreq6;
input i_hlock6;
input i_hbusreq7;
input i_hlock7;
input i_hburst0;
input i_hburst1;
input controllable_hmaster0;
input controllable_hmaster1;
input controllable_hmaster2;
input controllable_hmastlock;
input controllable_nstart;
input controllable_ndecide;
input controllable_locked;
input controllable_nhgrant0;
input controllable_hgrant1;
input controllable_hgrant2;
input controllable_hgrant3;
input controllable_hgrant4;
input controllable_hgrant5;
input controllable_hgrant6;
input controllable_hgrant7;
input controllable_busreq;
output o_err;

reg reg_i_hready;
reg reg_i_hbusreq0;
reg reg_i_hlock0;
reg reg_i_hbusreq1;
reg reg_i_hlock1;
reg reg_i_hbusreq2;
reg reg_i_hlock2;
reg reg_i_hbusreq3;
reg reg_i_hlock3;
reg reg_i_hbusreq4;
reg reg_i_hlock4;
reg reg_i_hbusreq5;
reg reg_i_hlock5;
reg reg_i_hbusreq6;
reg reg_i_hlock6;
reg reg_i_hbusreq7;
reg reg_i_hlock7;
reg reg_controllable_hmaster0;
reg reg_controllable_hmaster1;
reg reg_controllable_hmaster2;
reg reg_controllable_hmastlock;
reg reg_controllable_nstart;
reg reg_controllable_ndecide;
reg reg_controllable_locked;
reg reg_controllable_nhgrant0;
reg reg_controllable_hgrant1;
reg reg_controllable_hgrant2;
reg reg_controllable_hgrant3;
reg reg_controllable_hgrant4;
reg reg_controllable_hgrant5;
reg reg_controllable_hgrant6;
reg reg_controllable_hgrant7;
reg reg_controllable_busreq;
reg reg_stateA1;
reg reg_stateG2;
reg reg_stateG3_0;
reg reg_stateG3_1;
reg reg_stateG3_2;
reg reg_stateG10_1;
reg reg_stateG10_2;
reg reg_stateG10_3;
reg reg_stateG10_4;
reg reg_stateG10_5;
reg reg_stateG10_6;
reg reg_stateG10_7;
reg env_safe_err_happened;
reg next_env_fair;
reg [3:0] fair_cnt;
reg [4:0] next_sys_fair;

wire env_safe_err0;
wire env_safe_err1;
wire env_safe_err2;
wire env_safe_err3;
wire env_safe_err4;
wire env_safe_err5;
wire env_safe_err6;
wire env_safe_err7;
wire env_safe_err;

wire sys_safe_err0;
wire sys_safe_err1;
wire sys_safe_err2;
wire sys_safe_err3;
wire sys_safe_err4;
wire sys_safe_err5;
wire sys_safe_err6;
wire sys_safe_err7;
wire sys_safe_err8;
wire sys_safe_err9;
wire sys_safe_err10;
wire sys_safe_err11;
wire sys_safe_err12;
wire sys_safe_err13;
wire sys_safe_err14;
wire sys_safe_err15;
wire sys_safe_err16;
wire sys_safe_err17;
wire sys_safe_err18;
wire sys_safe_err19;
wire sys_safe_err20;
wire sys_safe_err21;
wire sys_safe_err22;
wire sys_safe_err23;
wire sys_safe_err24;
wire sys_safe_err25;
wire sys_safe_err26;
wire sys_safe_err27;
wire sys_safe_err28;
wire sys_safe_err29;
wire sys_safe_err30;
wire sys_safe_err31;
wire sys_safe_err32;
wire sys_safe_err33;
wire sys_safe_err34;
wire sys_safe_err35;
wire sys_safe_err36;
wire sys_safe_err37;
wire sys_safe_err38;
wire sys_safe_err39;
wire sys_safe_err40;
wire sys_safe_err41;
wire sys_safe_err42;
wire sys_safe_err43;
wire sys_safe_err44;
wire sys_safe_err45;
wire sys_safe_err46;
wire sys_safe_err47;
wire sys_safe_err48;
wire sys_safe_err49;
wire sys_safe_err50;
wire sys_safe_err51;
wire sys_safe_err52;
wire sys_safe_err53;
wire sys_safe_err54;
wire sys_safe_err55;
wire sys_safe_err56;
wire sys_safe_err57;
wire sys_safe_err58;
wire sys_safe_err59;
wire sys_safe_err60;
wire sys_safe_err61;
wire sys_safe_err;

wire env_fair0;
wire env_fair1;

wire sys_fair0;
wire sys_fair1;
wire sys_fair2;
wire sys_fair3;
wire sys_fair4;
wire sys_fair5;
wire sys_fair6;
wire sys_fair7;
wire sys_fair8;
wire sys_fair9;
wire fair_err;
wire o_err;

// =============================================================
//                        ENV_TRANSITION:
// =============================================================
// Assumption 3:
// G( hlock0=1 -> hbusreq0=1 );
assign env_safe_err0 =  ~(~ i_hlock0 | i_hbusreq0);

// Assumption 3:
// G( hlock1=1 -> hbusreq1=1 );
assign env_safe_err1 =  ~(~ i_hlock1 | i_hbusreq1);

// Assumption 3:
// G( hlock2=1 -> hbusreq2=1 );
assign env_safe_err2 =  ~(~ i_hlock2 | i_hbusreq2);

// Assumption 3:
// G( hlock3=1 -> hbusreq3=1 );
assign env_safe_err3 =  ~(~ i_hlock3 | i_hbusreq3);

// Assumption 3:
// G( hlock4=1 -> hbusreq4=1 );
assign env_safe_err4 =  ~(~ i_hlock4 | i_hbusreq4);

// Assumption 3:
// G( hlock5=1 -> hbusreq5=1 );
assign env_safe_err5 =  ~(~ i_hlock5 | i_hbusreq5);

// Assumption 3:
// G( hlock6=1 -> hbusreq6=1 );
assign env_safe_err6 =  ~(~ i_hlock6 | i_hbusreq6);

// Assumption 3:
// G( hlock7=1 -> hbusreq7=1 );
assign env_safe_err7 =  ~(~ i_hlock7 | i_hbusreq7);

// collecting together the safety error bits:
assign env_safe_err = env_safe_err0 |
                      env_safe_err1 |
                      env_safe_err2 |
                      env_safe_err3 |
                      env_safe_err4 |
                      env_safe_err5 |
                      env_safe_err6 |
                      env_safe_err7;

// =============================================================
//                        SYS_TRANSITION:
// =============================================================
// G((hmaster0=0) * (hmaster1=0) * (hmaster2=0) -> (hbusreq0=0 <-> busreq=0));
assign sys_safe_err0 =  ~( ~( ~(controllable_hmaster0) & ~(controllable_hmaster1) & ~(controllable_hmaster2) )|(~i_hbusreq0 ^~ (~controllable_busreq)));

// G((hmaster0=1) * (hmaster1=0) * (hmaster2=0) -> (hbusreq1=0 <-> busreq=0));
assign sys_safe_err1 =  ~( ~( controllable_hmaster0 & ~(controllable_hmaster1) & ~(controllable_hmaster2) )|(~i_hbusreq1 ^~ (~controllable_busreq)));

// G((hmaster0=0) * (hmaster1=1) * (hmaster2=0) -> (hbusreq2=0 <-> busreq=0));
assign sys_safe_err2 =  ~( ~( ~(controllable_hmaster0) & controllable_hmaster1 & ~(controllable_hmaster2) )|(~i_hbusreq2 ^~ (~controllable_busreq)));

// G((hmaster0=1) * (hmaster1=1) * (hmaster2=0) -> (hbusreq3=0 <-> busreq=0));
assign sys_safe_err3 =  ~( ~( controllable_hmaster0 & controllable_hmaster1 & ~(controllable_hmaster2) )|(~i_hbusreq3 ^~ (~controllable_busreq)));

// G((hmaster0=0) * (hmaster1=0) * (hmaster2=1) -> (hbusreq4=0 <-> busreq=0));
assign sys_safe_err4 =  ~( ~( ~(controllable_hmaster0) & ~(controllable_hmaster1) & controllable_hmaster2 )|(~i_hbusreq4 ^~ (~controllable_busreq)));

// G((hmaster0=1) * (hmaster1=0) * (hmaster2=1) -> (hbusreq5=0 <-> busreq=0));
assign sys_safe_err5 =  ~( ~( controllable_hmaster0 & ~(controllable_hmaster1) & controllable_hmaster2 )|(~i_hbusreq5 ^~ (~controllable_busreq)));

// G((hmaster0=0) * (hmaster1=1) * (hmaster2=1) -> (hbusreq6=0 <-> busreq=0));
assign sys_safe_err6 =  ~( ~( ~(controllable_hmaster0) & controllable_hmaster1 & controllable_hmaster2 )|(~i_hbusreq6 ^~ (~controllable_busreq)));

// G((hmaster0=1) * (hmaster1=1) * (hmaster2=1) -> (hbusreq7=0 <-> busreq=0));
assign sys_safe_err7 =  ~( ~( controllable_hmaster0 & controllable_hmaster1 & controllable_hmaster2 )|(~i_hbusreq7 ^~ (~controllable_busreq)));

// Guarantee 1:
// G((hready=0) -> X(start=0));
assign sys_safe_err8 =  ~( reg_i_hready | controllable_nstart );

// G(((stateG2=1) * (start=1)) -> FALSE;
assign sys_safe_err9 =  ~( ~(reg_stateG2 & ~controllable_nstart) | 0 );

// G(((stateG3_0=1) * (stateG3_1=0) * (stateG3_2=0) * ((start=1))) -> FALSE);
// G(((stateG3_0=0) * (stateG3_1=1) * (stateG3_2=0) * ((start=1))) -> FALSE);
// G(((stateG3_0=1) * (stateG3_1=1) * (stateG3_2=0) * ((start=1))) -> FALSE);
// G(((stateG3_0=0) * (stateG3_1=0) * (stateG3_2=1) * ((start=1))) -> FALSE);
// all these rules can be summarized as: only in state 000, start=1 is allowed:
assign sys_safe_err10 =  (reg_stateG3_0 | reg_stateG3_1 | reg_stateG3_2) & ~controllable_nstart;

// G( (hready=1) -> (   (hgrant0=1) <-> (X(hmaster0=0) * X(hmaster1=0) * X(hmaster2=0))  ) );
assign sys_safe_err11 =  ~( ~(reg_i_hready) | ( ~reg_controllable_nhgrant0 ^~ ( ~(controllable_hmaster0) & ~(controllable_hmaster1) & ~(controllable_hmaster2) ) ) );

// G( (hready=1) -> (   (hgrant1=1) <-> (X(hmaster0=1) * X(hmaster1=0) * X(hmaster2=0))  ) );
assign sys_safe_err12 =  ~( ~(reg_i_hready) | ( reg_controllable_hgrant1 ^~ ( controllable_hmaster0 & ~(controllable_hmaster1) & ~(controllable_hmaster2) ) ) );

// G( (hready=1) -> (   (hgrant2=1) <-> (X(hmaster0=0) * X(hmaster1=1) * X(hmaster2=0))  ) );
assign sys_safe_err13 =  ~( ~(reg_i_hready) | ( reg_controllable_hgrant2 ^~ ( ~(controllable_hmaster0) & controllable_hmaster1 & ~(controllable_hmaster2) ) ) );

// G( (hready=1) -> (   (hgrant3=1) <-> (X(hmaster0=1) * X(hmaster1=1) * X(hmaster2=0))  ) );
assign sys_safe_err14 =  ~( ~(reg_i_hready) | ( reg_controllable_hgrant3 ^~ ( controllable_hmaster0 & controllable_hmaster1 & ~(controllable_hmaster2) ) ) );

// G( (hready=1) -> (   (hgrant4=1) <-> (X(hmaster0=0) * X(hmaster1=0) * X(hmaster2=1))  ) );
assign sys_safe_err15 =  ~( ~(reg_i_hready) | ( reg_controllable_hgrant4 ^~ ( ~(controllable_hmaster0) & ~(controllable_hmaster1) & controllable_hmaster2 ) ) );

// G( (hready=1) -> (   (hgrant5=1) <-> (X(hmaster0=1) * X(hmaster1=0) * X(hmaster2=1))  ) );
assign sys_safe_err16 =  ~( ~(reg_i_hready) | ( reg_controllable_hgrant5 ^~ ( controllable_hmaster0 & ~(controllable_hmaster1) & controllable_hmaster2 ) ) );

// G( (hready=1) -> (   (hgrant6=1) <-> (X(hmaster0=0) * X(hmaster1=1) * X(hmaster2=1))  ) );
assign sys_safe_err17 =  ~( ~(reg_i_hready) | ( reg_controllable_hgrant6 ^~ ( ~(controllable_hmaster0) & controllable_hmaster1 & controllable_hmaster2 ) ) );

// G( (hready=1) -> (   (hgrant7=1) <-> (X(hmaster0=1) * X(hmaster1=1) * X(hmaster2=1))  ) );
assign sys_safe_err18 =  ~( ~(reg_i_hready) | ( reg_controllable_hgrant7 ^~ ( controllable_hmaster0 & controllable_hmaster1 & controllable_hmaster2 ) ) );

// HMASTLOCK:
// G(  (hready=1) -> (locked=0 <-> X(hmastlock=0) ) );
assign sys_safe_err19 =  ~( ~(reg_i_hready) | (~reg_controllable_locked ^~ ~controllable_hmastlock) );

// Master 0:
// G( X(start=0) -> ( ((hmaster0=0) * (hmaster1=0) * (hmaster2=0)) <-> (X(hmaster0=0) * X(hmaster1=0) * X(hmaster2=0)) ) );
assign sys_safe_err20 =  ~( ~(controllable_nstart) | ( ( ~(reg_controllable_hmaster0) & ~(reg_controllable_hmaster1) & ~(reg_controllable_hmaster2) ) ^~ ( ~(controllable_hmaster0) & ~(controllable_hmaster1) & ~(controllable_hmaster2) )) );

// Master 1:
// G( X(start=0) -> ( ((hmaster0=1) * (hmaster1=0) * (hmaster2=0)) <-> (X(hmaster0=1) * X(hmaster1=0) * X(hmaster2=0)) ) );
assign sys_safe_err21 =  ~( ~(controllable_nstart) | ( ( reg_controllable_hmaster0 & ~(reg_controllable_hmaster1) & ~(reg_controllable_hmaster2) ) ^~ ( controllable_hmaster0 & ~(controllable_hmaster1) & ~(controllable_hmaster2) )) );

// Master 2:
// G( X(start=0) -> ( ((hmaster0=0) * (hmaster1=1) * (hmaster2=0)) <-> (X(hmaster0=0) * X(hmaster1=1) * X(hmaster2=0)) ) );
assign sys_safe_err22 =  ~( ~(controllable_nstart) | ( ( ~(reg_controllable_hmaster0) & reg_controllable_hmaster1 & ~(reg_controllable_hmaster2) ) ^~ ( ~(controllable_hmaster0) & controllable_hmaster1 & ~(controllable_hmaster2) )) );

// Master 3:
// G( X(start=0) -> ( ((hmaster0=1) * (hmaster1=1) * (hmaster2=0)) <-> (X(hmaster0=1) * X(hmaster1=1) * X(hmaster2=0)) ) );
assign sys_safe_err23 =  ~( ~(controllable_nstart) | ( ( reg_controllable_hmaster0 & reg_controllable_hmaster1 & ~(reg_controllable_hmaster2) ) ^~ ( controllable_hmaster0 & controllable_hmaster1 & ~(controllable_hmaster2) )) );

// Master 4:
// G( X(start=0) -> ( ((hmaster0=0) * (hmaster1=0) * (hmaster2=1)) <-> (X(hmaster0=0) * X(hmaster1=0) * X(hmaster2=1)) ) );
assign sys_safe_err24 =  ~( ~(controllable_nstart) | ( ( ~(reg_controllable_hmaster0) & ~(reg_controllable_hmaster1) & reg_controllable_hmaster2 ) ^~ ( ~(controllable_hmaster0) & ~(controllable_hmaster1) & controllable_hmaster2 )) );

// Master 5:
// G( X(start=0) -> ( ((hmaster0=1) * (hmaster1=0) * (hmaster2=1)) <-> (X(hmaster0=1) * X(hmaster1=0) * X(hmaster2=1)) ) );
assign sys_safe_err25 =  ~( ~(controllable_nstart) | ( ( reg_controllable_hmaster0 & ~(reg_controllable_hmaster1) & reg_controllable_hmaster2 ) ^~ ( controllable_hmaster0 & ~(controllable_hmaster1) & controllable_hmaster2 )) );

// Master 6:
// G( X(start=0) -> ( ((hmaster0=0) * (hmaster1=1) * (hmaster2=1)) <-> (X(hmaster0=0) * X(hmaster1=1) * X(hmaster2=1)) ) );
assign sys_safe_err26 =  ~( ~(controllable_nstart) | ( ( ~(reg_controllable_hmaster0) & reg_controllable_hmaster1 & reg_controllable_hmaster2 ) ^~ ( ~(controllable_hmaster0) & controllable_hmaster1 & controllable_hmaster2 )) );

// Master 7:
// G( X(start=0) -> ( ((hmaster0=1) * (hmaster1=1) * (hmaster2=1)) <-> (X(hmaster0=1) * X(hmaster1=1) * X(hmaster2=1)) ) );
assign sys_safe_err27 =  ~( ~(controllable_nstart) | ( ( reg_controllable_hmaster0 & reg_controllable_hmaster1 & reg_controllable_hmaster2 ) ^~ ( controllable_hmaster0 & controllable_hmaster1 & controllable_hmaster2 )) );

// Guarantee 6.2:
// G( ((X(start=0))) -> ( (hmastlock=1) <-> X(hmastlock=1)) );
assign sys_safe_err28 =  ~( ~(controllable_nstart) | ( reg_controllable_hmastlock ^~ controllable_hmastlock) );

// G( (decide=1  *  hlock0=1  *  X(hgrant0=1) )->X(locked=1));
assign sys_safe_err29 =  ~( ~(~reg_controllable_ndecide & reg_i_hlock0 & ~controllable_nhgrant0) | (controllable_locked) );

// G((decide=1  *  hlock0=0  *  X(hgrant0=1))->X(locked=0));
assign sys_safe_err30 =  ~( ~(~reg_controllable_ndecide & ~reg_i_hlock0 & ~controllable_nhgrant0) | (~controllable_locked) );

// G( (decide=1  *  hlock1=1  *  X(hgrant1=1) )->X(locked=1));
assign sys_safe_err31 =  ~( ~(~reg_controllable_ndecide & reg_i_hlock1 & controllable_hgrant1) | (controllable_locked) );

// G((decide=1  *  hlock1=0  *  X(hgrant1=1))->X(locked=0));
assign sys_safe_err32 =  ~( ~(~reg_controllable_ndecide & ~reg_i_hlock1 & controllable_hgrant1) | (~controllable_locked) );

// G( (decide=1  *  hlock2=1  *  X(hgrant2=1) )->X(locked=1));
assign sys_safe_err33 =  ~( ~(~reg_controllable_ndecide & reg_i_hlock2 & controllable_hgrant2) | (controllable_locked) );

// G((decide=1  *  hlock2=0  *  X(hgrant2=1))->X(locked=0));
assign sys_safe_err34 =  ~( ~(~reg_controllable_ndecide & ~reg_i_hlock2 & controllable_hgrant2) | (~controllable_locked) );

// G( (decide=1  *  hlock3=1  *  X(hgrant3=1) )->X(locked=1));
assign sys_safe_err35 =  ~( ~(~reg_controllable_ndecide & reg_i_hlock3 & controllable_hgrant3) | (controllable_locked) );

// G((decide=1  *  hlock3=0  *  X(hgrant3=1))->X(locked=0));
assign sys_safe_err36 =  ~( ~(~reg_controllable_ndecide & ~reg_i_hlock3 & controllable_hgrant3) | (~controllable_locked) );

// G( (decide=1  *  hlock4=1  *  X(hgrant4=1) )->X(locked=1));
assign sys_safe_err37 =  ~( ~(~reg_controllable_ndecide & reg_i_hlock4 & controllable_hgrant4) | (controllable_locked) );

// G((decide=1  *  hlock4=0  *  X(hgrant4=1))->X(locked=0));
assign sys_safe_err38 =  ~( ~(~reg_controllable_ndecide & ~reg_i_hlock4 & controllable_hgrant4) | (~controllable_locked) );

// G( (decide=1  *  hlock5=1  *  X(hgrant5=1) )->X(locked=1));
assign sys_safe_err39 =  ~( ~(~reg_controllable_ndecide & reg_i_hlock5 & controllable_hgrant5) | (controllable_locked) );

// G((decide=1  *  hlock5=0  *  X(hgrant5=1))->X(locked=0));
assign sys_safe_err40 =  ~( ~(~reg_controllable_ndecide & ~reg_i_hlock5 & controllable_hgrant5) | (~controllable_locked) );

// G( (decide=1  *  hlock6=1  *  X(hgrant6=1) )->X(locked=1));
assign sys_safe_err41 =  ~( ~(~reg_controllable_ndecide & reg_i_hlock6 & controllable_hgrant6) | (controllable_locked) );

// G((decide=1  *  hlock6=0  *  X(hgrant6=1))->X(locked=0));
assign sys_safe_err42 =  ~( ~(~reg_controllable_ndecide & ~reg_i_hlock6 & controllable_hgrant6) | (~controllable_locked) );

// G( (decide=1  *  hlock7=1  *  X(hgrant7=1) )->X(locked=1));
assign sys_safe_err43 =  ~( ~(~reg_controllable_ndecide & reg_i_hlock7 & controllable_hgrant7) | (controllable_locked) );

// G((decide=1  *  hlock7=0  *  X(hgrant7=1))->X(locked=0));
assign sys_safe_err44 =  ~( ~(~reg_controllable_ndecide & ~reg_i_hlock7 & controllable_hgrant7) | (~controllable_locked) );

// G( (decide=0) -> (  ((hgrant0=0)<->X(hgrant0=0))  ));
assign sys_safe_err45 =  ~( ~(reg_controllable_ndecide) | (reg_controllable_nhgrant0 ^~ controllable_nhgrant0) );

// G( (decide=0) -> (  ((hgrant1=0)<->X(hgrant1=0))  ));
assign sys_safe_err46 =  ~( ~(reg_controllable_ndecide) | (~reg_controllable_hgrant1 ^~ ~controllable_hgrant1) );

// G( (decide=0) -> (  ((hgrant2=0)<->X(hgrant2=0))  ));
assign sys_safe_err47 =  ~( ~(reg_controllable_ndecide) | (~reg_controllable_hgrant2 ^~ ~controllable_hgrant2) );

// G( (decide=0) -> (  ((hgrant3=0)<->X(hgrant3=0))  ));
assign sys_safe_err48 =  ~( ~(reg_controllable_ndecide) | (~reg_controllable_hgrant3 ^~ ~controllable_hgrant3) );

// G( (decide=0) -> (  ((hgrant4=0)<->X(hgrant4=0))  ));
assign sys_safe_err49 =  ~( ~(reg_controllable_ndecide) | (~reg_controllable_hgrant4 ^~ ~controllable_hgrant4) );

// G( (decide=0) -> (  ((hgrant5=0)<->X(hgrant5=0))  ));
assign sys_safe_err50 =  ~( ~(reg_controllable_ndecide) | (~reg_controllable_hgrant5 ^~ ~controllable_hgrant5) );

// G( (decide=0) -> (  ((hgrant6=0)<->X(hgrant6=0))  ));
assign sys_safe_err51 =  ~( ~(reg_controllable_ndecide) | (~reg_controllable_hgrant6 ^~ ~controllable_hgrant6) );

// G( (decide=0) -> (  ((hgrant7=0)<->X(hgrant7=0))  ));
assign sys_safe_err52 =  ~( ~(reg_controllable_ndecide) | (~reg_controllable_hgrant7 ^~ ~controllable_hgrant7) );

// G((decide=0)->(locked=0 <-> X(locked=0)));
assign sys_safe_err53 =  ~( ~(reg_controllable_ndecide) | (~reg_controllable_locked ^~ ~controllable_locked) );

// G(((stateG10_1=1) * (((hgrant1=1)) * (hbusreq1=0)))->FALSE);
assign sys_safe_err54 =  ~( ~(reg_stateG10_1 & (controllable_hgrant1 & ~i_hbusreq1)) | 0 );

// G(((stateG10_2=1) * (((hgrant2=1)) * (hbusreq2=0)))->FALSE);
assign sys_safe_err55 =  ~( ~(reg_stateG10_2 & (controllable_hgrant2 & ~i_hbusreq2)) | 0 );

// G(((stateG10_3=1) * (((hgrant3=1)) * (hbusreq3=0)))->FALSE);
assign sys_safe_err56 =  ~( ~(reg_stateG10_3 & (controllable_hgrant3 & ~i_hbusreq3)) | 0 );

// G(((stateG10_4=1) * (((hgrant4=1)) * (hbusreq4=0)))->FALSE);
assign sys_safe_err57 =  ~( ~(reg_stateG10_4 & (controllable_hgrant4 & ~i_hbusreq4)) | 0 );

// G(((stateG10_5=1) * (((hgrant5=1)) * (hbusreq5=0)))->FALSE);
assign sys_safe_err58 =  ~( ~(reg_stateG10_5 & (controllable_hgrant5 & ~i_hbusreq5)) | 0 );

// G(((stateG10_6=1) * (((hgrant6=1)) * (hbusreq6=0)))->FALSE);
assign sys_safe_err59 =  ~( ~(reg_stateG10_6 & (controllable_hgrant6 & ~i_hbusreq6)) | 0 );

// G(((stateG10_7=1) * (((hgrant7=1)) * (hbusreq7=0)))->FALSE);
assign sys_safe_err60 =  ~( ~(reg_stateG10_7 & (controllable_hgrant7 & ~i_hbusreq7)) | 0 );

// default master
// G((decide=1  *  hbusreq0=0  *  hbusreq1=0  *  hbusreq2=0  *  hbusreq3=0  *  hbusreq4=0  *  hbusreq5=0  *  hbusreq6=0  *  hbusreq7=0) -> X(hgrant0=1));
assign sys_safe_err61 =  ~( ~(~reg_controllable_ndecide & (~reg_i_hbusreq0 & ~reg_i_hbusreq1 & ~reg_i_hbusreq2 & ~reg_i_hbusreq3 & ~reg_i_hbusreq4 & ~reg_i_hbusreq5 & ~reg_i_hbusreq6 & ~reg_i_hbusreq7)) | (~controllable_nhgrant0) );

// collecting together the safety error bits:
assign sys_safe_err = sys_safe_err0 |
                      sys_safe_err1 |
                      sys_safe_err2 |
                      sys_safe_err3 |
                      sys_safe_err4 |
                      sys_safe_err5 |
                      sys_safe_err6 |
                      sys_safe_err7 |
                      sys_safe_err8 |
                      sys_safe_err9 |
                      sys_safe_err10 |
                      sys_safe_err11 |
                      sys_safe_err12 |
                      sys_safe_err13 |
                      sys_safe_err14 |
                      sys_safe_err15 |
                      sys_safe_err16 |
                      sys_safe_err17 |
                      sys_safe_err18 |
                      sys_safe_err19 |
                      sys_safe_err20 |
                      sys_safe_err21 |
                      sys_safe_err22 |
                      sys_safe_err23 |
                      sys_safe_err24 |
                      sys_safe_err25 |
                      sys_safe_err26 |
                      sys_safe_err27 |
                      sys_safe_err28 |
                      sys_safe_err29 |
                      sys_safe_err30 |
                      sys_safe_err31 |
                      sys_safe_err32 |
                      sys_safe_err33 |
                      sys_safe_err34 |
                      sys_safe_err35 |
                      sys_safe_err36 |
                      sys_safe_err37 |
                      sys_safe_err38 |
                      sys_safe_err39 |
                      sys_safe_err40 |
                      sys_safe_err41 |
                      sys_safe_err42 |
                      sys_safe_err43 |
                      sys_safe_err44 |
                      sys_safe_err45 |
                      sys_safe_err46 |
                      sys_safe_err47 |
                      sys_safe_err48 |
                      sys_safe_err49 |
                      sys_safe_err50 |
                      sys_safe_err51 |
                      sys_safe_err52 |
                      sys_safe_err53 |
                      sys_safe_err54 |
                      sys_safe_err55 |
                      sys_safe_err56 |
                      sys_safe_err57 |
                      sys_safe_err58 |
                      sys_safe_err59 |
                      sys_safe_err60 |
                      sys_safe_err61;

// =============================================================
//                          ENV_FAIRNESS:
// =============================================================
// Assumption 1: 
// G(F(stateA1=0));
assign env_fair0 =  ~reg_stateA1;

// Assumption 2:
// G(F(hready=1));
assign env_fair1 =  i_hready;


// =============================================================
//                          SYS_FAIRNESS:
// =============================================================
// Guarantee 2:
// G(F(stateG2=0));
assign sys_fair0 = ~reg_stateG2;

// Guarantee 3:
// G(F((stateG3_0=0)  *  (stateG3_1=0)  *  (stateG3_2=0)));
assign sys_fair1 =  (~reg_stateG3_0 & ~reg_stateG3_1 & ~reg_stateG3_2);

// G(F(((hmaster0=0) * (hmaster1=0) * (hmaster2=0))  |  hbusreq0=0));
assign sys_fair2 =  ( ~(controllable_hmaster0) & ~(controllable_hmaster1) & ~(controllable_hmaster2) ) | ~i_hbusreq0;

// G(F(((hmaster0=1) * (hmaster1=0) * (hmaster2=0))  |  hbusreq1=0));
assign sys_fair3 =  ( controllable_hmaster0 & ~(controllable_hmaster1) & ~(controllable_hmaster2) ) | ~i_hbusreq1;

// G(F(((hmaster0=0) * (hmaster1=1) * (hmaster2=0))  |  hbusreq2=0));
assign sys_fair4 =  ( ~(controllable_hmaster0) & controllable_hmaster1 & ~(controllable_hmaster2) ) | ~i_hbusreq2;

// G(F(((hmaster0=1) * (hmaster1=1) * (hmaster2=0))  |  hbusreq3=0));
assign sys_fair5 =  ( controllable_hmaster0 & controllable_hmaster1 & ~(controllable_hmaster2) ) | ~i_hbusreq3;

// G(F(((hmaster0=0) * (hmaster1=0) * (hmaster2=1))  |  hbusreq4=0));
assign sys_fair6 =  ( ~(controllable_hmaster0) & ~(controllable_hmaster1) & controllable_hmaster2 ) | ~i_hbusreq4;

// G(F(((hmaster0=1) * (hmaster1=0) * (hmaster2=1))  |  hbusreq5=0));
assign sys_fair7 =  ( controllable_hmaster0 & ~(controllable_hmaster1) & controllable_hmaster2 ) | ~i_hbusreq5;

// G(F(((hmaster0=0) * (hmaster1=1) * (hmaster2=1))  |  hbusreq6=0));
assign sys_fair8 =  ( ~(controllable_hmaster0) & controllable_hmaster1 & controllable_hmaster2 ) | ~i_hbusreq6;

// G(F(((hmaster0=1) * (hmaster1=1) * (hmaster2=1))  |  hbusreq7=0));
assign sys_fair9 =  ( controllable_hmaster0 & controllable_hmaster1 & controllable_hmaster2 ) | ~i_hbusreq7;

assign fair_err = (fair_cnt >= 4'b1001);

// computing the error output bit:
assign o_err = ~env_safe_err & ~env_safe_err_happened & (sys_safe_err | fair_err);

initial
 begin
  reg_i_hready = 0;
  reg_i_hbusreq0 = 0;
  reg_i_hlock0 = 0;
  reg_i_hbusreq1 = 0;
  reg_i_hlock1 = 0;
  reg_i_hbusreq2 = 0;
  reg_i_hlock2 = 0;
  reg_i_hbusreq3 = 0;
  reg_i_hlock3 = 0;
  reg_i_hbusreq4 = 0;
  reg_i_hlock4 = 0;
  reg_i_hbusreq5 = 0;
  reg_i_hlock5 = 0;
  reg_i_hbusreq6 = 0;
  reg_i_hlock6 = 0;
  reg_i_hbusreq7 = 0;
  reg_i_hlock7 = 0;
  reg_controllable_hmaster0 = 0;
  reg_controllable_hmaster1 = 0;
  reg_controllable_hmaster2 = 0;
  reg_controllable_hmastlock = 0;
  reg_controllable_nstart = 0;
  reg_controllable_ndecide = 0;
  reg_controllable_locked = 0;
  reg_controllable_nhgrant0 = 0;
  reg_controllable_hgrant1 = 0;
  reg_controllable_hgrant2 = 0;
  reg_controllable_hgrant3 = 0;
  reg_controllable_hgrant4 = 0;
  reg_controllable_hgrant5 = 0;
  reg_controllable_hgrant6 = 0;
  reg_controllable_hgrant7 = 0;
  reg_controllable_busreq = 0;
  reg_stateA1 = 0;
  reg_stateG2 = 0;
  reg_stateG3_0 = 0;
  reg_stateG3_1 = 0;
  reg_stateG3_2 = 0;
  reg_stateG10_1 = 0;
  reg_stateG10_2 = 0;
  reg_stateG10_3 = 0;
  reg_stateG10_4 = 0;
  reg_stateG10_5 = 0;
  reg_stateG10_6 = 0;
  reg_stateG10_7 = 0;
  env_safe_err_happened = 0;
  next_env_fair = 0;
  fair_cnt = 0;
  next_sys_fair = 0;
 end


always @(posedge i_clk)
 begin
   // We remember if an environment error occurred:
   env_safe_err_happened = env_safe_err_happened | env_safe_err;

   // Updating the fairness counters: 
   if((next_sys_fair == 0) & sys_fair0)
    begin
      next_sys_fair = 1;
      next_env_fair = 0;
      fair_cnt = 0;
    end
   else if((next_sys_fair == 1) & sys_fair1)
    begin
      next_sys_fair = 2;
      next_env_fair = 0;
      fair_cnt = 0;
    end
   else if((next_sys_fair == 2) & sys_fair2)
    begin
      next_sys_fair = 3;
      next_env_fair = 0;
      fair_cnt = 0;
    end
   else if((next_sys_fair == 3) & sys_fair3)
    begin
      next_sys_fair = 4;
      next_env_fair = 0;
      fair_cnt = 0;
    end
   else if((next_sys_fair == 4) & sys_fair4)
    begin
      next_sys_fair = 5;
      next_env_fair = 0;
      fair_cnt = 0;
    end
   else if((next_sys_fair == 5) & sys_fair5)
    begin
      next_sys_fair = 6;
      next_env_fair = 0;
      fair_cnt = 0;
    end
   else if((next_sys_fair == 6) & sys_fair6)
    begin
      next_sys_fair = 7;
      next_env_fair = 0;
      fair_cnt = 0;
    end
   else if((next_sys_fair == 7) & sys_fair7)
    begin
      next_sys_fair = 8;
      next_env_fair = 0;
      fair_cnt = 0;
    end
   else if((next_sys_fair == 8) & sys_fair8)
    begin
      next_sys_fair = 9;
      next_env_fair = 0;
      fair_cnt = 0;
    end
   else if((next_sys_fair == 9) & sys_fair9)
    begin
      next_sys_fair = 0;
      next_env_fair = 0;
      fair_cnt = 0;
    end
   else if(~next_env_fair & env_fair0)
    begin
      next_env_fair = 1;
    end
   else if(next_env_fair & env_fair1)
    begin
      next_env_fair = 0;
      fair_cnt = fair_cnt + 1;
    end

   // Updating the automata: 
   // Automaton A1: 
   if(~reg_stateA1 & controllable_hmastlock & ~i_hburst0 & ~i_hburst1)
    begin
      reg_stateA1 = 1'b1;
    end
   else if(reg_stateA1 & ~controllable_busreq)
    begin
      reg_stateA1 = 1'b0;
    end

   // Automaton G2: 
   if(~reg_stateG2)
    begin
      if(controllable_hmastlock & ~controllable_nstart & ~i_hburst0 & ~i_hburst1)
       begin
         reg_stateG2 = 1'b1;
       end
    end
   else // if(reg_stateG2)
    begin
      if(~controllable_busreq)
       begin
         reg_stateG2 = 1'b0;
       end
    end

   // Automaton G3: 
   if(~reg_stateG3_0 & ~reg_stateG3_1 & ~reg_stateG3_2 & controllable_hmastlock & ~controllable_nstart &  ~i_hburst0 & i_hburst1 & ~i_hready)
    begin
      reg_stateG3_0 = 1'b1;
      reg_stateG3_1 = 1'b0;
      reg_stateG3_2 = 1'b0;
    end
   else if(~reg_stateG3_0 & ~reg_stateG3_1 & ~reg_stateG3_2 & controllable_hmastlock & ~controllable_nstart &  ~i_hburst0 & i_hburst1 & i_hready)
    begin
      reg_stateG3_0 = 1'b0;
      reg_stateG3_1 = 1'b1;
      reg_stateG3_2 = 1'b0;
    end
   else if(reg_stateG3_0 & ~reg_stateG3_1 & ~reg_stateG3_2 & i_hready)
    begin
      reg_stateG3_0 = 1'b0;
      reg_stateG3_1 = 1'b1;
      reg_stateG3_2 = 1'b0;
    end
   else if(~reg_stateG3_0 & reg_stateG3_1 & ~reg_stateG3_2 & i_hready)
    begin
      reg_stateG3_0 = 1'b1;
      reg_stateG3_1 = 1'b1;
      reg_stateG3_2 = 1'b0;
    end
   else if(reg_stateG3_0 & reg_stateG3_1 & ~reg_stateG3_2 & i_hready)
    begin
      reg_stateG3_0 = 1'b0;
      reg_stateG3_1 = 1'b0;
      reg_stateG3_2 = 1'b1;
    end
   else if(~reg_stateG3_0 & ~reg_stateG3_1 & reg_stateG3_2 & i_hready)
    begin
      reg_stateG3_0 = 1'b0;
      reg_stateG3_1 = 1'b0;
      reg_stateG3_2 = 1'b0;
    end

   // Automaton G10_1: 
   if(~reg_stateG10_1 & ~controllable_hgrant1 & ~i_hbusreq1)
    begin
      reg_stateG10_1 = 1'b1;
    end
   else if(reg_stateG10_1 & i_hbusreq1)
    begin
      reg_stateG10_1 = 1'b0;
    end

   // Automaton G10_2: 
   if(~reg_stateG10_2 & ~controllable_hgrant2 & ~i_hbusreq2)
    begin
      reg_stateG10_2 = 1'b1;
    end
   else if(reg_stateG10_2 & i_hbusreq2)
    begin
      reg_stateG10_2 = 1'b0;
    end

   // Automaton G10_3: 
   if(~reg_stateG10_3 & ~controllable_hgrant3 & ~i_hbusreq3)
    begin
      reg_stateG10_3 = 1'b1;
    end
   else if(reg_stateG10_3 & i_hbusreq3)
    begin
      reg_stateG10_3 = 1'b0;
    end

   // Automaton G10_4: 
   if(~reg_stateG10_4 & ~controllable_hgrant4 & ~i_hbusreq4)
    begin
      reg_stateG10_4 = 1'b1;
    end
   else if(reg_stateG10_4 & i_hbusreq4)
    begin
      reg_stateG10_4 = 1'b0;
    end

   // Automaton G10_5: 
   if(~reg_stateG10_5 & ~controllable_hgrant5 & ~i_hbusreq5)
    begin
      reg_stateG10_5 = 1'b1;
    end
   else if(reg_stateG10_5 & i_hbusreq5)
    begin
      reg_stateG10_5 = 1'b0;
    end

   // Automaton G10_6: 
   if(~reg_stateG10_6 & ~controllable_hgrant6 & ~i_hbusreq6)
    begin
      reg_stateG10_6 = 1'b1;
    end
   else if(reg_stateG10_6 & i_hbusreq6)
    begin
      reg_stateG10_6 = 1'b0;
    end

   // Automaton G10_7: 
   if(~reg_stateG10_7 & ~controllable_hgrant7 & ~i_hbusreq7)
    begin
      reg_stateG10_7 = 1'b1;
    end
   else if(reg_stateG10_7 & i_hbusreq7)
    begin
      reg_stateG10_7 = 1'b0;
    end

   // Latching the previous input:
   reg_i_hready =  i_hready;
   reg_i_hbusreq0 =  i_hbusreq0;
   reg_i_hlock0 =  i_hlock0;
   reg_i_hbusreq1 =  i_hbusreq1;
   reg_i_hlock1 =  i_hlock1;
   reg_i_hbusreq2 =  i_hbusreq2;
   reg_i_hlock2 =  i_hlock2;
   reg_i_hbusreq3 =  i_hbusreq3;
   reg_i_hlock3 =  i_hlock3;
   reg_i_hbusreq4 =  i_hbusreq4;
   reg_i_hlock4 =  i_hlock4;
   reg_i_hbusreq5 =  i_hbusreq5;
   reg_i_hlock5 =  i_hlock5;
   reg_i_hbusreq6 =  i_hbusreq6;
   reg_i_hlock6 =  i_hlock6;
   reg_i_hbusreq7 =  i_hbusreq7;
   reg_i_hlock7 =  i_hlock7;
   reg_controllable_hmaster0 =  controllable_hmaster0;
   reg_controllable_hmaster1 =  controllable_hmaster1;
   reg_controllable_hmaster2 =  controllable_hmaster2;
   reg_controllable_hmastlock =  controllable_hmastlock;
   reg_controllable_nstart =  controllable_nstart;
   reg_controllable_ndecide =  controllable_ndecide;
   reg_controllable_locked =  controllable_locked;
   reg_controllable_nhgrant0 =  controllable_nhgrant0;
   reg_controllable_hgrant1 =  controllable_hgrant1;
   reg_controllable_hgrant2 =  controllable_hgrant2;
   reg_controllable_hgrant3 =  controllable_hgrant3;
   reg_controllable_hgrant4 =  controllable_hgrant4;
   reg_controllable_hgrant5 =  controllable_hgrant5;
   reg_controllable_hgrant6 =  controllable_hgrant6;
   reg_controllable_hgrant7 =  controllable_hgrant7;
   reg_controllable_busreq =  controllable_busreq;

 end
endmodule

-------------------------------
