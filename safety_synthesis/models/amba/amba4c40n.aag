aag 689 22 41 1 626
2
4
6
8
10
12
14
16
18
20
22
24
26
28
30
32
34
36
38
40
42
44
46 1
48 32
50 18
52 36
54 825
56 909
58 20
60 933
62 42
64 953
66 2
68 30
70 12
72 4
74 38
76 983
78 1005
80 44
82 34
84 1027
86 1051
88 8
90 6
92 1119
94 1125
96 1131
98 1137
100 28
102 1159
104 1349
106 1355
108 1361
110 1367
112 1373
114 1379
116 10
118 147
120 24
122 40
124 26
126 22
672
128 24 3
130 28 5
132 131 129
134 34 7
136 135 132
138 38 11
140 139 136
142 119 46
144 143 46
146 145 140
148 23 19
150 31 2
152 30 3
154 153 151
156 155 148
158 22 19
160 31 4
162 30 5
164 163 161
166 165 158
168 167 157
170 23 18
172 31 6
174 30 7
176 175 173
178 177 170
180 179 168
182 22 18
184 31 10
186 30 11
188 187 185
190 189 182
192 191 180
194 123 46
196 122 46
198 195 46
200 199 13
202 201 192
204 77 46
206 76 46
208 205 46
210 206 13
212 211 202
214 57 46
216 56 46
218 215 46
220 61 46
222 60 46
224 221 46
226 225 219
228 65 46
230 64 46
232 229 46
234 233 226
236 235 13
238 237 212
240 81 46
242 80 46
244 241 46
246 242 148
248 245 149
250 249 247
252 251 196
254 253 238
256 125 46
258 124 46
260 257 46
262 261 158
264 258 159
266 265 263
268 267 196
270 269 254
272 49 46
274 48 46
276 273 46
278 277 170
280 274 171
282 281 279
284 283 196
286 285 270
288 53 46
290 52 46
292 289 46
294 293 182
296 290 183
298 297 295
300 299 196
302 301 286
304 59 46
306 58 46
308 305 46
310 306 9
312 309 8
314 313 311
316 315 196
318 317 302
320 127 46
322 126 46
324 321 46
326 51 46
328 50 46
330 327 46
332 331 325
334 333 148
336 332 149
338 337 335
340 339 12
342 341 318
344 331 322
346 345 158
348 344 159
350 349 347
352 351 12
354 353 342
356 328 325
358 357 170
360 356 171
362 361 359
364 363 12
366 365 354
368 328 322
370 369 182
372 368 183
374 373 371
376 375 12
378 377 366
380 89 46
382 88 46
384 381 46
386 385 8
388 382 9
390 389 387
392 391 12
394 393 378
396 63 46
398 62 46
400 397 46
402 121 46
404 120 46
406 403 46
408 404 401
410 408 45
412 410 21
414 413 394
416 407 401
418 416 45
420 418 20
422 421 414
424 101 46
426 100 46
428 425 46
430 426 401
432 430 26
434 432 21
436 435 422
438 429 401
440 438 26
442 440 20
444 443 436
446 83 46
448 82 46
450 447 46
452 448 401
454 452 32
456 454 21
458 457 444
460 451 401
462 460 32
464 462 20
466 465 458
468 75 46
470 74 46
472 469 46
474 470 401
476 474 36
478 476 21
480 479 466
482 473 401
484 482 36
486 484 20
488 487 480
490 245 44
492 242 45
494 493 491
496 495 398
498 497 488
500 258 27
502 261 26
504 503 501
506 505 398
508 507 498
510 274 33
512 277 32
514 513 511
516 515 398
518 517 508
520 290 37
522 293 36
524 523 521
526 525 398
528 527 518
530 306 21
532 309 20
534 533 531
536 535 398
538 537 528
540 79 46
542 78 46
544 541 46
546 26 5
548 546 542
550 549 538
552 85 46
554 84 46
556 553 46
558 32 7
560 558 554
562 561 550
564 103 46
566 102 46
568 565 46
570 36 11
572 570 566
574 573 562
576 67 46
578 577 46
580 73 46
582 581 46
584 583 579
586 91 46
588 587 46
590 589 584
592 117 46
594 593 46
596 595 590
598 596 401
600 598 44
602 601 574
604 115 46
606 114 46
608 605 46
610 113 46
612 112 46
614 611 46
616 111 46
618 110 46
620 617 46
622 109 46
624 108 46
626 623 46
628 107 46
630 106 46
632 629 46
634 105 46
636 104 46
638 635 46
640 621 615
642 640 609
644 643 608
646 644 641
648 620 612
650 649 641
652 641 609
654 640 606
656 655 653
658 637 631
660 658 625
662 660 620
664 662 650
666 664 656
668 667 647
670 668 602
672 671 146
674 93 46
676 92 46
678 675 46
680 95 46
682 94 46
684 681 46
686 97 46
688 96 46
690 687 46
692 98 46
694 683 677
696 694 689
698 696 693
700 698 209
702 683 678
704 702 689
706 704 693
708 706 234
710 684 677
712 710 689
714 712 693
716 149 2
718 717 714
720 684 678
722 720 689
724 722 693
726 159 4
728 727 724
730 694 690
732 730 693
734 171 6
736 735 732
738 702 690
740 738 693
742 183 10
744 743 740
746 55 46
748 54 46
750 747 46
752 87 46
754 86 46
756 753 46
758 757 751
760 748 40
762 708 701
764 763 701
766 709 701
768 766 718
770 769 764
772 766 719
774 772 728
776 775 770
778 772 729
780 778 736
782 781 776
784 778 737
786 784 744
788 787 782
790 784 745
792 790 758
794 793 788
796 790 759
798 796 760
800 799 794
802 761 748
804 802 759
806 805 759
808 807 745
810 808 737
812 810 729
814 812 719
816 814 709
818 816 701
820 818 801
822 800 748
824 823 821
826 234 8
828 826 13
830 828 17
832 830 14
834 832 41
836 832 40
838 225 216
840 838 233
842 840 40
844 222 219
846 844 233
848 846 40
850 222 216
852 850 233
854 852 40
856 230 226
858 856 40
860 836 835
862 861 835
864 837 835
866 864 842
868 867 862
870 864 843
872 870 848
874 873 868
876 870 849
878 876 854
880 879 874
882 876 855
884 882 858
886 885 880
888 859 216
890 888 855
892 890 849
894 893 849
896 895 843
898 896 837
900 898 835
902 901 835
904 903 887
906 886 216
908 907 905
910 859 222
912 910 855
914 912 849
916 915 849
918 917 843
920 919 843
922 921 837
924 923 837
926 925 835
928 926 887
930 886 222
932 931 929
934 859 230
936 934 855
938 937 855
940 939 849
942 940 843
944 942 837
946 944 835
948 946 887
950 886 230
952 951 949
954 13 8
956 954 17
958 956 15
960 958 209
962 206 31
964 963 961
966 959 206
968 967 959
970 206 30
972 969 209
974 970 206
976 975 973
978 977 965
980 964 206
982 981 979
984 545 27
986 984 5
988 542 4
990 988 987
992 991 987
994 989 542
996 994 987
998 997 987
1000 999 993
1002 992 542
1004 1003 1001
1006 557 33
1008 1006 7
1010 554 6
1012 1010 1009
1014 1013 1009
1016 1011 554
1018 1016 1009
1020 1019 1009
1022 1021 1015
1024 1014 554
1026 1025 1023
1028 757 8
1030 1028 17
1032 1030 15
1034 754 31
1036 1034 1033
1038 1037 1033
1040 1035 754
1042 1040 1033
1044 1043 1033
1046 1045 1039
1048 1038 754
1050 1049 1047
1052 745 676
1054 1052 737
1056 1055 737
1058 1057 729
1060 1058 719
1062 1061 719
1064 1063 709
1066 1064 701
1068 1067 701
1070 745 682
1072 1070 737
1074 1072 729
1076 1074 719
1078 1077 719
1080 1079 709
1082 1081 709
1084 1083 701
1086 745 688
1088 1086 737
1090 1089 737
1092 1091 729
1094 1093 729
1096 1095 719
1098 1096 709
1100 1098 701
1102 745 692
1104 1102 737
1106 1104 729
1108 1106 719
1110 1108 709
1112 1110 701
1114 1069 789
1116 788 676
1118 1117 1115
1120 1084 789
1122 788 682
1124 1123 1121
1126 1100 789
1128 788 688
1130 1129 1127
1132 1112 789
1134 788 692
1136 1135 1133
1138 569 37
1140 1138 11
1142 566 10
1144 1142 1141
1146 1145 1141
1148 1143 566
1150 1148 1141
1152 1151 1141
1154 1153 1147
1156 1146 566
1158 1157 1155
1160 799 788
1162 760 639
1164 761 636
1166 1165 1163
1168 758 636
1170 1167 759
1172 1171 1169
1174 1173 745
1176 1174 737
1178 1176 729
1180 1178 719
1182 1180 709
1184 1182 701
1186 636 633
1188 637 630
1190 1189 1187
1192 1191 760
1194 761 630
1196 1195 1193
1198 758 630
1200 1197 759
1202 1201 1199
1204 1203 745
1206 1204 737
1208 1206 729
1210 1208 719
1212 1210 709
1214 1212 701
1216 636 630
1218 1216 627
1220 1217 624
1222 1221 1219
1224 1223 760
1226 761 624
1228 1227 1225
1230 758 624
1232 1229 759
1234 1233 1231
1236 1235 745
1238 1236 737
1240 1238 729
1242 1240 719
1244 1242 709
1246 1244 701
1248 1216 624
1250 1248 621
1252 1249 618
1254 1253 1251
1256 1255 760
1258 761 618
1260 1259 1257
1262 758 618
1264 1261 759
1266 1265 1263
1268 1267 745
1270 1268 737
1272 1270 729
1274 1272 719
1276 1274 709
1278 1276 701
1280 1248 618
1282 1280 615
1284 1281 612
1286 1285 1283
1288 1287 760
1290 761 612
1292 1291 1289
1294 758 612
1296 1293 759
1298 1297 1295
1300 1299 745
1302 1300 737
1304 1302 729
1306 1304 719
1308 1306 709
1310 1308 701
1312 1280 612
1314 1312 609
1316 1313 606
1318 1317 1315
1320 1319 760
1322 761 606
1324 1323 1321
1326 758 606
1328 1325 759
1330 1329 1327
1332 1331 745
1334 1332 737
1336 1334 729
1338 1336 719
1340 1338 709
1342 1340 701
1344 1184 1161
1346 1160 636
1348 1347 1345
1350 1214 1161
1352 1160 630
1354 1353 1351
1356 1246 1161
1358 1160 624
1360 1359 1357
1362 1278 1161
1364 1160 618
1366 1365 1363
1368 1310 1161
1370 1160 612
1372 1371 1369
1374 1342 1161
1376 1160 606
1378 1377 1375
i0 i_hbusreq0
i1 i_hbusreq1
i2 i_hbusreq2
i3 controllable_hmastlock
i4 i_hbusreq3
i5 controllable_nstart
i6 i_hburst1
i7 i_hburst0
i8 controllable_hmaster1
i9 controllable_locked
i10 controllable_hmaster0
i11 i_hlock0
i12 controllable_hgrant1
i13 i_hlock1
i14 controllable_busreq
i15 controllable_hgrant2
i16 i_hlock2
i17 controllable_hgrant3
i18 i_hlock3
i19 i_hready
i20 controllable_ndecide
i21 controllable_nhgrant0
l0 n47
l1 reg_controllable_hgrant2_out
l2 reg_controllable_hmaster1_out
l3 reg_controllable_hgrant3_out
l4 next_env_fair_out
l5 reg_stateG3_0_out
l6 reg_controllable_locked_out
l7 reg_stateG3_1_out
l8 reg_controllable_ndecide_out
l9 reg_stateG3_2_out
l10 reg_i_hbusreq0_out
l11 reg_controllable_busreq_out
l12 reg_controllable_nstart_out
l13 reg_i_hbusreq1_out
l14 reg_i_hlock3_out
l15 reg_stateG2_out
l16 reg_stateG10_1_out
l17 reg_controllable_nhgrant0_out
l18 reg_i_hlock2_out
l19 reg_stateG10_2_out
l20 reg_stateA1_out
l21 reg_controllable_hmastlock_out
l22 reg_i_hbusreq2_out
l23 next_sys_fair<0>_out
l24 next_sys_fair<1>_out
l25 next_sys_fair<2>_out
l26 next_sys_fair<3>_out
l27 reg_i_hlock1_out
l28 reg_stateG10_3_out
l29 fair_cnt<0>_out
l30 fair_cnt<1>_out
l31 fair_cnt<2>_out
l32 fair_cnt<3>_out
l33 fair_cnt<4>_out
l34 fair_cnt<5>_out
l35 reg_i_hbusreq3_out
l36 env_safe_err_happened_out
l37 reg_i_hlock0_out
l38 reg_i_hready_out
l39 reg_controllable_hgrant1_out
l40 reg_controllable_hmaster0_out
o0 o_err
c
amba_4_new_40
This file was written by ABC on Tue May  5 16:50:37 2015
For information about AIGER format, refer to http://fmv.jku.at/aiger
-------------------------------
This AIGER file has been created by the following sequence of commands:
> vl2mv amba4c40.v   ---gives--> amba4c40.mv
> abc -c "read_blif_mv amba4c40.mv; write_aiger -s amba4c40n.aig"   ---gives--> amba4c40n.aig
> aigtoaig amba4c40n.aig amba4c40n.aag   ---gives--> amba4c40n.aag (this file)
Content of amba4c40.v:
module amba_4_new_40(
        o_err,
        i_clk,
        i_hready,
        i_hbusreq0,
        i_hlock0,
        i_hbusreq1,
        i_hlock1,
        i_hbusreq2,
        i_hlock2,
        i_hbusreq3,
        i_hlock3,
        i_hburst0,
        i_hburst1,
        controllable_hmaster0,
        controllable_hmaster1,
        controllable_hmastlock,
        controllable_nstart,
        controllable_ndecide,
        controllable_locked,
        controllable_nhgrant0,
        controllable_hgrant1,
        controllable_hgrant2,
        controllable_hgrant3,
        controllable_busreq);

input i_clk;
input i_hready;
input i_hbusreq0;
input i_hlock0;
input i_hbusreq1;
input i_hlock1;
input i_hbusreq2;
input i_hlock2;
input i_hbusreq3;
input i_hlock3;
input i_hburst0;
input i_hburst1;
input controllable_hmaster0;
input controllable_hmaster1;
input controllable_hmastlock;
input controllable_nstart;
input controllable_ndecide;
input controllable_locked;
input controllable_nhgrant0;
input controllable_hgrant1;
input controllable_hgrant2;
input controllable_hgrant3;
input controllable_busreq;
output o_err;

reg reg_i_hready;
reg reg_i_hbusreq0;
reg reg_i_hlock0;
reg reg_i_hbusreq1;
reg reg_i_hlock1;
reg reg_i_hbusreq2;
reg reg_i_hlock2;
reg reg_i_hbusreq3;
reg reg_i_hlock3;
reg reg_controllable_hmaster0;
reg reg_controllable_hmaster1;
reg reg_controllable_hmastlock;
reg reg_controllable_nstart;
reg reg_controllable_ndecide;
reg reg_controllable_locked;
reg reg_controllable_nhgrant0;
reg reg_controllable_hgrant1;
reg reg_controllable_hgrant2;
reg reg_controllable_hgrant3;
reg reg_controllable_busreq;
reg reg_stateA1;
reg reg_stateG2;
reg reg_stateG3_0;
reg reg_stateG3_1;
reg reg_stateG3_2;
reg reg_stateG10_1;
reg reg_stateG10_2;
reg reg_stateG10_3;
reg env_safe_err_happened;
reg next_env_fair;
reg [5:0] fair_cnt;
reg [3:0] next_sys_fair;

wire env_safe_err0;
wire env_safe_err1;
wire env_safe_err2;
wire env_safe_err3;
wire env_safe_err;

wire sys_safe_err0;
wire sys_safe_err1;
wire sys_safe_err2;
wire sys_safe_err3;
wire sys_safe_err4;
wire sys_safe_err5;
wire sys_safe_err6;
wire sys_safe_err7;
wire sys_safe_err8;
wire sys_safe_err9;
wire sys_safe_err10;
wire sys_safe_err11;
wire sys_safe_err12;
wire sys_safe_err13;
wire sys_safe_err14;
wire sys_safe_err15;
wire sys_safe_err16;
wire sys_safe_err17;
wire sys_safe_err18;
wire sys_safe_err19;
wire sys_safe_err20;
wire sys_safe_err21;
wire sys_safe_err22;
wire sys_safe_err23;
wire sys_safe_err24;
wire sys_safe_err25;
wire sys_safe_err26;
wire sys_safe_err27;
wire sys_safe_err28;
wire sys_safe_err29;
wire sys_safe_err30;
wire sys_safe_err31;
wire sys_safe_err32;
wire sys_safe_err33;
wire sys_safe_err;

wire env_fair0;
wire env_fair1;

wire sys_fair0;
wire sys_fair1;
wire sys_fair2;
wire sys_fair3;
wire sys_fair4;
wire sys_fair5;
wire fair_err;
wire o_err;

// =============================================================
//                        ENV_TRANSITION:
// =============================================================
// Assumption 3:
// G( hlock0=1 -> hbusreq0=1 );
assign env_safe_err0 =  ~(~ i_hlock0 | i_hbusreq0);

// Assumption 3:
// G( hlock1=1 -> hbusreq1=1 );
assign env_safe_err1 =  ~(~ i_hlock1 | i_hbusreq1);

// Assumption 3:
// G( hlock2=1 -> hbusreq2=1 );
assign env_safe_err2 =  ~(~ i_hlock2 | i_hbusreq2);

// Assumption 3:
// G( hlock3=1 -> hbusreq3=1 );
assign env_safe_err3 =  ~(~ i_hlock3 | i_hbusreq3);

// collecting together the safety error bits:
assign env_safe_err = env_safe_err0 |
                      env_safe_err1 |
                      env_safe_err2 |
                      env_safe_err3;

// =============================================================
//                        SYS_TRANSITION:
// =============================================================
// G((hmaster0=0) * (hmaster1=0) -> (hbusreq0=0 <-> busreq=0));
assign sys_safe_err0 =  ~( ~( ~(controllable_hmaster0) & ~(controllable_hmaster1) )|(~i_hbusreq0 ^~ (~controllable_busreq)));

// G((hmaster0=1) * (hmaster1=0) -> (hbusreq1=0 <-> busreq=0));
assign sys_safe_err1 =  ~( ~( controllable_hmaster0 & ~(controllable_hmaster1) )|(~i_hbusreq1 ^~ (~controllable_busreq)));

// G((hmaster0=0) * (hmaster1=1) -> (hbusreq2=0 <-> busreq=0));
assign sys_safe_err2 =  ~( ~( ~(controllable_hmaster0) & controllable_hmaster1 )|(~i_hbusreq2 ^~ (~controllable_busreq)));

// G((hmaster0=1) * (hmaster1=1) -> (hbusreq3=0 <-> busreq=0));
assign sys_safe_err3 =  ~( ~( controllable_hmaster0 & controllable_hmaster1 )|(~i_hbusreq3 ^~ (~controllable_busreq)));

// Guarantee 1:
// G((hready=0) -> X(start=0));
assign sys_safe_err4 =  ~( reg_i_hready | controllable_nstart );

// G(((stateG2=1) * (start=1)) -> FALSE;
assign sys_safe_err5 =  ~( ~(reg_stateG2 & ~controllable_nstart) | 0 );

// G(((stateG3_0=1) * (stateG3_1=0) * (stateG3_2=0) * ((start=1))) -> FALSE);
// G(((stateG3_0=0) * (stateG3_1=1) * (stateG3_2=0) * ((start=1))) -> FALSE);
// G(((stateG3_0=1) * (stateG3_1=1) * (stateG3_2=0) * ((start=1))) -> FALSE);
// G(((stateG3_0=0) * (stateG3_1=0) * (stateG3_2=1) * ((start=1))) -> FALSE);
// all these rules can be summarized as: only in state 000, start=1 is allowed:
assign sys_safe_err6 =  (reg_stateG3_0 | reg_stateG3_1 | reg_stateG3_2) & ~controllable_nstart;

// G( (hready=1) -> (   (hgrant0=1) <-> (X(hmaster0=0) * X(hmaster1=0))  ) );
assign sys_safe_err7 =  ~( ~(reg_i_hready) | ( ~reg_controllable_nhgrant0 ^~ ( ~(controllable_hmaster0) & ~(controllable_hmaster1) ) ) );

// G( (hready=1) -> (   (hgrant1=1) <-> (X(hmaster0=1) * X(hmaster1=0))  ) );
assign sys_safe_err8 =  ~( ~(reg_i_hready) | ( reg_controllable_hgrant1 ^~ ( controllable_hmaster0 & ~(controllable_hmaster1) ) ) );

// G( (hready=1) -> (   (hgrant2=1) <-> (X(hmaster0=0) * X(hmaster1=1))  ) );
assign sys_safe_err9 =  ~( ~(reg_i_hready) | ( reg_controllable_hgrant2 ^~ ( ~(controllable_hmaster0) & controllable_hmaster1 ) ) );

// G( (hready=1) -> (   (hgrant3=1) <-> (X(hmaster0=1) * X(hmaster1=1))  ) );
assign sys_safe_err10 =  ~( ~(reg_i_hready) | ( reg_controllable_hgrant3 ^~ ( controllable_hmaster0 & controllable_hmaster1 ) ) );

// HMASTLOCK:
// G(  (hready=1) -> (locked=0 <-> X(hmastlock=0) ) );
assign sys_safe_err11 =  ~( ~(reg_i_hready) | (~reg_controllable_locked ^~ ~controllable_hmastlock) );

// Master 0:
// G( X(start=0) -> ( ((hmaster0=0) * (hmaster1=0)) <-> (X(hmaster0=0) * X(hmaster1=0)) ) );
assign sys_safe_err12 =  ~( ~(controllable_nstart) | ( ( ~(reg_controllable_hmaster0) & ~(reg_controllable_hmaster1) ) ^~ ( ~(controllable_hmaster0) & ~(controllable_hmaster1) )) );

// Master 1:
// G( X(start=0) -> ( ((hmaster0=1) * (hmaster1=0)) <-> (X(hmaster0=1) * X(hmaster1=0)) ) );
assign sys_safe_err13 =  ~( ~(controllable_nstart) | ( ( reg_controllable_hmaster0 & ~(reg_controllable_hmaster1) ) ^~ ( controllable_hmaster0 & ~(controllable_hmaster1) )) );

// Master 2:
// G( X(start=0) -> ( ((hmaster0=0) * (hmaster1=1)) <-> (X(hmaster0=0) * X(hmaster1=1)) ) );
assign sys_safe_err14 =  ~( ~(controllable_nstart) | ( ( ~(reg_controllable_hmaster0) & reg_controllable_hmaster1 ) ^~ ( ~(controllable_hmaster0) & controllable_hmaster1 )) );

// Master 3:
// G( X(start=0) -> ( ((hmaster0=1) * (hmaster1=1)) <-> (X(hmaster0=1) * X(hmaster1=1)) ) );
assign sys_safe_err15 =  ~( ~(controllable_nstart) | ( ( reg_controllable_hmaster0 & reg_controllable_hmaster1 ) ^~ ( controllable_hmaster0 & controllable_hmaster1 )) );

// Guarantee 6.2:
// G( ((X(start=0))) -> ( (hmastlock=1) <-> X(hmastlock=1)) );
assign sys_safe_err16 =  ~( ~(controllable_nstart) | ( reg_controllable_hmastlock ^~ controllable_hmastlock) );

// G( (decide=1  *  hlock0=1  *  X(hgrant0=1) )->X(locked=1));
assign sys_safe_err17 =  ~( ~(~reg_controllable_ndecide & reg_i_hlock0 & ~controllable_nhgrant0) | (controllable_locked) );

// G((decide=1  *  hlock0=0  *  X(hgrant0=1))->X(locked=0));
assign sys_safe_err18 =  ~( ~(~reg_controllable_ndecide & ~reg_i_hlock0 & ~controllable_nhgrant0) | (~controllable_locked) );

// G( (decide=1  *  hlock1=1  *  X(hgrant1=1) )->X(locked=1));
assign sys_safe_err19 =  ~( ~(~reg_controllable_ndecide & reg_i_hlock1 & controllable_hgrant1) | (controllable_locked) );

// G((decide=1  *  hlock1=0  *  X(hgrant1=1))->X(locked=0));
assign sys_safe_err20 =  ~( ~(~reg_controllable_ndecide & ~reg_i_hlock1 & controllable_hgrant1) | (~controllable_locked) );

// G( (decide=1  *  hlock2=1  *  X(hgrant2=1) )->X(locked=1));
assign sys_safe_err21 =  ~( ~(~reg_controllable_ndecide & reg_i_hlock2 & controllable_hgrant2) | (controllable_locked) );

// G((decide=1  *  hlock2=0  *  X(hgrant2=1))->X(locked=0));
assign sys_safe_err22 =  ~( ~(~reg_controllable_ndecide & ~reg_i_hlock2 & controllable_hgrant2) | (~controllable_locked) );

// G( (decide=1  *  hlock3=1  *  X(hgrant3=1) )->X(locked=1));
assign sys_safe_err23 =  ~( ~(~reg_controllable_ndecide & reg_i_hlock3 & controllable_hgrant3) | (controllable_locked) );

// G((decide=1  *  hlock3=0  *  X(hgrant3=1))->X(locked=0));
assign sys_safe_err24 =  ~( ~(~reg_controllable_ndecide & ~reg_i_hlock3 & controllable_hgrant3) | (~controllable_locked) );

// G( (decide=0) -> (  ((hgrant0=0)<->X(hgrant0=0))  ));
assign sys_safe_err25 =  ~( ~(reg_controllable_ndecide) | (reg_controllable_nhgrant0 ^~ controllable_nhgrant0) );

// G( (decide=0) -> (  ((hgrant1=0)<->X(hgrant1=0))  ));
assign sys_safe_err26 =  ~( ~(reg_controllable_ndecide) | (~reg_controllable_hgrant1 ^~ ~controllable_hgrant1) );

// G( (decide=0) -> (  ((hgrant2=0)<->X(hgrant2=0))  ));
assign sys_safe_err27 =  ~( ~(reg_controllable_ndecide) | (~reg_controllable_hgrant2 ^~ ~controllable_hgrant2) );

// G( (decide=0) -> (  ((hgrant3=0)<->X(hgrant3=0))  ));
assign sys_safe_err28 =  ~( ~(reg_controllable_ndecide) | (~reg_controllable_hgrant3 ^~ ~controllable_hgrant3) );

// G((decide=0)->(locked=0 <-> X(locked=0)));
assign sys_safe_err29 =  ~( ~(reg_controllable_ndecide) | (~reg_controllable_locked ^~ ~controllable_locked) );

// G(((stateG10_1=1) * (((hgrant1=1)) * (hbusreq1=0)))->FALSE);
assign sys_safe_err30 =  ~( ~(reg_stateG10_1 & (controllable_hgrant1 & ~i_hbusreq1)) | 0 );

// G(((stateG10_2=1) * (((hgrant2=1)) * (hbusreq2=0)))->FALSE);
assign sys_safe_err31 =  ~( ~(reg_stateG10_2 & (controllable_hgrant2 & ~i_hbusreq2)) | 0 );

// G(((stateG10_3=1) * (((hgrant3=1)) * (hbusreq3=0)))->FALSE);
assign sys_safe_err32 =  ~( ~(reg_stateG10_3 & (controllable_hgrant3 & ~i_hbusreq3)) | 0 );

// default master
// G((decide=1  *  hbusreq0=0  *  hbusreq1=0  *  hbusreq2=0  *  hbusreq3=0) -> X(hgrant0=1));
assign sys_safe_err33 =  ~( ~(~reg_controllable_ndecide & (~reg_i_hbusreq0 & ~reg_i_hbusreq1 & ~reg_i_hbusreq2 & ~reg_i_hbusreq3)) | (~controllable_nhgrant0) );

// collecting together the safety error bits:
assign sys_safe_err = sys_safe_err0 |
                      sys_safe_err1 |
                      sys_safe_err2 |
                      sys_safe_err3 |
                      sys_safe_err4 |
                      sys_safe_err5 |
                      sys_safe_err6 |
                      sys_safe_err7 |
                      sys_safe_err8 |
                      sys_safe_err9 |
                      sys_safe_err10 |
                      sys_safe_err11 |
                      sys_safe_err12 |
                      sys_safe_err13 |
                      sys_safe_err14 |
                      sys_safe_err15 |
                      sys_safe_err16 |
                      sys_safe_err17 |
                      sys_safe_err18 |
                      sys_safe_err19 |
                      sys_safe_err20 |
                      sys_safe_err21 |
                      sys_safe_err22 |
                      sys_safe_err23 |
                      sys_safe_err24 |
                      sys_safe_err25 |
                      sys_safe_err26 |
                      sys_safe_err27 |
                      sys_safe_err28 |
                      sys_safe_err29 |
                      sys_safe_err30 |
                      sys_safe_err31 |
                      sys_safe_err32 |
                      sys_safe_err33;

// =============================================================
//                          ENV_FAIRNESS:
// =============================================================
// Assumption 1: 
// G(F(stateA1=0));
assign env_fair0 =  ~reg_stateA1;

// Assumption 2:
// G(F(hready=1));
assign env_fair1 =  i_hready;


// =============================================================
//                          SYS_FAIRNESS:
// =============================================================
// Guarantee 2:
// G(F(stateG2=0));
assign sys_fair0 = ~reg_stateG2;

// Guarantee 3:
// G(F((stateG3_0=0)  *  (stateG3_1=0)  *  (stateG3_2=0)));
assign sys_fair1 =  (~reg_stateG3_0 & ~reg_stateG3_1 & ~reg_stateG3_2);

// G(F(((hmaster0=0) * (hmaster1=0))  |  hbusreq0=0));
assign sys_fair2 =  ( ~(controllable_hmaster0) & ~(controllable_hmaster1) ) | ~i_hbusreq0;

// G(F(((hmaster0=1) * (hmaster1=0))  |  hbusreq1=0));
assign sys_fair3 =  ( controllable_hmaster0 & ~(controllable_hmaster1) ) | ~i_hbusreq1;

// G(F(((hmaster0=0) * (hmaster1=1))  |  hbusreq2=0));
assign sys_fair4 =  ( ~(controllable_hmaster0) & controllable_hmaster1 ) | ~i_hbusreq2;

// G(F(((hmaster0=1) * (hmaster1=1))  |  hbusreq3=0));
assign sys_fair5 =  ( controllable_hmaster0 & controllable_hmaster1 ) | ~i_hbusreq3;

assign fair_err = (fair_cnt >= 6'b101000);

// computing the error output bit:
assign o_err = ~env_safe_err & ~env_safe_err_happened & (sys_safe_err | fair_err);

initial
 begin
  reg_i_hready = 0;
  reg_i_hbusreq0 = 0;
  reg_i_hlock0 = 0;
  reg_i_hbusreq1 = 0;
  reg_i_hlock1 = 0;
  reg_i_hbusreq2 = 0;
  reg_i_hlock2 = 0;
  reg_i_hbusreq3 = 0;
  reg_i_hlock3 = 0;
  reg_controllable_hmaster0 = 0;
  reg_controllable_hmaster1 = 0;
  reg_controllable_hmastlock = 0;
  reg_controllable_nstart = 0;
  reg_controllable_ndecide = 0;
  reg_controllable_locked = 0;
  reg_controllable_nhgrant0 = 0;
  reg_controllable_hgrant1 = 0;
  reg_controllable_hgrant2 = 0;
  reg_controllable_hgrant3 = 0;
  reg_controllable_busreq = 0;
  reg_stateA1 = 0;
  reg_stateG2 = 0;
  reg_stateG3_0 = 0;
  reg_stateG3_1 = 0;
  reg_stateG3_2 = 0;
  reg_stateG10_1 = 0;
  reg_stateG10_2 = 0;
  reg_stateG10_3 = 0;
  env_safe_err_happened = 0;
  next_env_fair = 0;
  fair_cnt = 0;
  next_sys_fair = 0;
 end


always @(posedge i_clk)
 begin
   // We remember if an environment error occurred:
   env_safe_err_happened = env_safe_err_happened | env_safe_err;

   // Updating the fairness counters: 
   if((next_sys_fair == 0) & sys_fair0)
    begin
      next_sys_fair = 1;
      next_env_fair = 0;
      fair_cnt = 0;
    end
   else if((next_sys_fair == 1) & sys_fair1)
    begin
      next_sys_fair = 2;
      next_env_fair = 0;
      fair_cnt = 0;
    end
   else if((next_sys_fair == 2) & sys_fair2)
    begin
      next_sys_fair = 3;
      next_env_fair = 0;
      fair_cnt = 0;
    end
   else if((next_sys_fair == 3) & sys_fair3)
    begin
      next_sys_fair = 4;
      next_env_fair = 0;
      fair_cnt = 0;
    end
   else if((next_sys_fair == 4) & sys_fair4)
    begin
      next_sys_fair = 5;
      next_env_fair = 0;
      fair_cnt = 0;
    end
   else if((next_sys_fair == 5) & sys_fair5)
    begin
      next_sys_fair = 0;
      next_env_fair = 0;
      fair_cnt = 0;
    end
   else if(~next_env_fair & env_fair0)
    begin
      next_env_fair = 1;
    end
   else if(next_env_fair & env_fair1)
    begin
      next_env_fair = 0;
      fair_cnt = fair_cnt + 1;
    end

   // Updating the automata: 
   // Automaton A1: 
   if(~reg_stateA1 & controllable_hmastlock & ~i_hburst0 & ~i_hburst1)
    begin
      reg_stateA1 = 1'b1;
    end
   else if(reg_stateA1 & ~controllable_busreq)
    begin
      reg_stateA1 = 1'b0;
    end

   // Automaton G2: 
   if(~reg_stateG2)
    begin
      if(controllable_hmastlock & ~controllable_nstart & ~i_hburst0 & ~i_hburst1)
       begin
         reg_stateG2 = 1'b1;
       end
    end
   else // if(reg_stateG2)
    begin
      if(~controllable_busreq)
       begin
         reg_stateG2 = 1'b0;
       end
    end

   // Automaton G3: 
   if(~reg_stateG3_0 & ~reg_stateG3_1 & ~reg_stateG3_2 & controllable_hmastlock & ~controllable_nstart &  ~i_hburst0 & i_hburst1 & ~i_hready)
    begin
      reg_stateG3_0 = 1'b1;
      reg_stateG3_1 = 1'b0;
      reg_stateG3_2 = 1'b0;
    end
   else if(~reg_stateG3_0 & ~reg_stateG3_1 & ~reg_stateG3_2 & controllable_hmastlock & ~controllable_nstart &  ~i_hburst0 & i_hburst1 & i_hready)
    begin
      reg_stateG3_0 = 1'b0;
      reg_stateG3_1 = 1'b1;
      reg_stateG3_2 = 1'b0;
    end
   else if(reg_stateG3_0 & ~reg_stateG3_1 & ~reg_stateG3_2 & i_hready)
    begin
      reg_stateG3_0 = 1'b0;
      reg_stateG3_1 = 1'b1;
      reg_stateG3_2 = 1'b0;
    end
   else if(~reg_stateG3_0 & reg_stateG3_1 & ~reg_stateG3_2 & i_hready)
    begin
      reg_stateG3_0 = 1'b1;
      reg_stateG3_1 = 1'b1;
      reg_stateG3_2 = 1'b0;
    end
   else if(reg_stateG3_0 & reg_stateG3_1 & ~reg_stateG3_2 & i_hready)
    begin
      reg_stateG3_0 = 1'b0;
      reg_stateG3_1 = 1'b0;
      reg_stateG3_2 = 1'b1;
    end
   else if(~reg_stateG3_0 & ~reg_stateG3_1 & reg_stateG3_2 & i_hready)
    begin
      reg_stateG3_0 = 1'b0;
      reg_stateG3_1 = 1'b0;
      reg_stateG3_2 = 1'b0;
    end

   // Automaton G10_1: 
   if(~reg_stateG10_1 & ~controllable_hgrant1 & ~i_hbusreq1)
    begin
      reg_stateG10_1 = 1'b1;
    end
   else if(reg_stateG10_1 & i_hbusreq1)
    begin
      reg_stateG10_1 = 1'b0;
    end

   // Automaton G10_2: 
   if(~reg_stateG10_2 & ~controllable_hgrant2 & ~i_hbusreq2)
    begin
      reg_stateG10_2 = 1'b1;
    end
   else if(reg_stateG10_2 & i_hbusreq2)
    begin
      reg_stateG10_2 = 1'b0;
    end

   // Automaton G10_3: 
   if(~reg_stateG10_3 & ~controllable_hgrant3 & ~i_hbusreq3)
    begin
      reg_stateG10_3 = 1'b1;
    end
   else if(reg_stateG10_3 & i_hbusreq3)
    begin
      reg_stateG10_3 = 1'b0;
    end

   // Latching the previous input:
   reg_i_hready =  i_hready;
   reg_i_hbusreq0 =  i_hbusreq0;
   reg_i_hlock0 =  i_hlock0;
   reg_i_hbusreq1 =  i_hbusreq1;
   reg_i_hlock1 =  i_hlock1;
   reg_i_hbusreq2 =  i_hbusreq2;
   reg_i_hlock2 =  i_hlock2;
   reg_i_hbusreq3 =  i_hbusreq3;
   reg_i_hlock3 =  i_hlock3;
   reg_controllable_hmaster0 =  controllable_hmaster0;
   reg_controllable_hmaster1 =  controllable_hmaster1;
   reg_controllable_hmastlock =  controllable_hmastlock;
   reg_controllable_nstart =  controllable_nstart;
   reg_controllable_ndecide =  controllable_ndecide;
   reg_controllable_locked =  controllable_locked;
   reg_controllable_nhgrant0 =  controllable_nhgrant0;
   reg_controllable_hgrant1 =  controllable_hgrant1;
   reg_controllable_hgrant2 =  controllable_hgrant2;
   reg_controllable_hgrant3 =  controllable_hgrant3;
   reg_controllable_busreq =  controllable_busreq;

 end
endmodule

-------------------------------
