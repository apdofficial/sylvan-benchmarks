aag 698 22 41 1 635
2
4
6
8
10
12
14
16
18
20
22
24
26
28
30
32
34
36
38
40
42
44
46 1
48 32
50 18
52 36
54 843
56 927
58 20
60 951
62 42
64 971
66 2
68 30
70 12
72 4
74 38
76 1001
78 1023
80 44
82 34
84 1045
86 1069
88 8
90 6
92 1137
94 1143
96 1149
98 1155
100 28
102 1177
104 1367
106 1373
108 1379
110 1385
112 1391
114 1397
116 10
118 147
120 24
122 40
124 26
126 22
690
128 24 3
130 28 5
132 131 129
134 34 7
136 135 132
138 38 11
140 139 136
142 119 46
144 143 46
146 145 140
148 23 19
150 31 2
152 30 3
154 153 151
156 155 148
158 22 19
160 31 4
162 30 5
164 163 161
166 165 158
168 167 157
170 23 18
172 31 6
174 30 7
176 175 173
178 177 170
180 179 168
182 22 18
184 31 10
186 30 11
188 187 185
190 189 182
192 191 180
194 123 46
196 122 46
198 195 46
200 199 13
202 201 192
204 77 46
206 76 46
208 205 46
210 206 13
212 211 202
214 57 46
216 56 46
218 215 46
220 61 46
222 60 46
224 221 46
226 225 219
228 65 46
230 64 46
232 229 46
234 233 226
236 235 13
238 237 212
240 81 46
242 80 46
244 241 46
246 242 148
248 245 149
250 249 247
252 251 196
254 253 238
256 125 46
258 124 46
260 257 46
262 261 158
264 258 159
266 265 263
268 267 196
270 269 254
272 49 46
274 48 46
276 273 46
278 277 170
280 274 171
282 281 279
284 283 196
286 285 270
288 53 46
290 52 46
292 289 46
294 293 182
296 290 183
298 297 295
300 299 196
302 301 286
304 59 46
306 58 46
308 305 46
310 306 9
312 309 8
314 313 311
316 315 196
318 317 302
320 127 46
322 126 46
324 321 46
326 51 46
328 50 46
330 327 46
332 331 325
334 333 148
336 332 149
338 337 335
340 339 12
342 341 318
344 331 322
346 345 158
348 344 159
350 349 347
352 351 12
354 353 342
356 328 325
358 357 170
360 356 171
362 361 359
364 363 12
366 365 354
368 328 322
370 369 182
372 368 183
374 373 371
376 375 12
378 377 366
380 89 46
382 88 46
384 381 46
386 385 8
388 382 9
390 389 387
392 391 12
394 393 378
396 63 46
398 62 46
400 397 46
402 121 46
404 120 46
406 403 46
408 404 401
410 408 45
412 410 21
414 413 394
416 407 401
418 416 45
420 418 20
422 421 414
424 101 46
426 100 46
428 425 46
430 426 401
432 430 26
434 432 21
436 435 422
438 429 401
440 438 26
442 440 20
444 443 436
446 83 46
448 82 46
450 447 46
452 448 401
454 452 32
456 454 21
458 457 444
460 451 401
462 460 32
464 462 20
466 465 458
468 75 46
470 74 46
472 469 46
474 470 401
476 474 36
478 476 21
480 479 466
482 473 401
484 482 36
486 484 20
488 487 480
490 245 44
492 242 45
494 493 491
496 495 398
498 497 488
500 258 27
502 261 26
504 503 501
506 505 398
508 507 498
510 274 33
512 277 32
514 513 511
516 515 398
518 517 508
520 290 37
522 293 36
524 523 521
526 525 398
528 527 518
530 306 21
532 309 20
534 533 531
536 535 398
538 537 528
540 79 46
542 78 46
544 541 46
546 26 5
548 546 542
550 549 538
552 85 46
554 84 46
556 553 46
558 32 7
560 558 554
562 561 550
564 103 46
566 102 46
568 565 46
570 36 11
572 570 566
574 573 562
576 67 46
578 577 46
580 73 46
582 581 46
584 583 579
586 91 46
588 587 46
590 589 584
592 117 46
594 593 46
596 595 590
598 596 401
600 598 44
602 601 574
604 115 46
606 114 46
608 605 46
610 113 46
612 112 46
614 611 46
616 111 46
618 110 46
620 617 46
622 109 46
624 108 46
626 623 46
628 107 46
630 106 46
632 629 46
634 105 46
636 104 46
638 635 46
640 633 627
642 640 621
644 642 615
646 645 614
648 646 643
650 649 609
652 651 608
654 652 648
656 632 624
658 657 641
660 641 618
662 661 643
664 643 615
666 642 612
668 667 665
670 648 609
672 649 606
674 673 671
676 637 632
678 676 658
680 678 662
682 680 668
684 682 674
686 685 655
688 686 602
690 689 146
692 93 46
694 92 46
696 693 46
698 95 46
700 94 46
702 699 46
704 97 46
706 96 46
708 705 46
710 98 46
712 701 695
714 712 707
716 714 711
718 716 209
720 701 696
722 720 707
724 722 711
726 724 234
728 702 695
730 728 707
732 730 711
734 149 2
736 735 732
738 702 696
740 738 707
742 740 711
744 159 4
746 745 742
748 712 708
750 748 711
752 171 6
754 753 750
756 720 708
758 756 711
760 183 10
762 761 758
764 55 46
766 54 46
768 765 46
770 87 46
772 86 46
774 771 46
776 775 769
778 766 40
780 726 719
782 781 719
784 727 719
786 784 736
788 787 782
790 784 737
792 790 746
794 793 788
796 790 747
798 796 754
800 799 794
802 796 755
804 802 762
806 805 800
808 802 763
810 808 776
812 811 806
814 808 777
816 814 778
818 817 812
820 779 766
822 820 777
824 823 777
826 825 763
828 826 755
830 828 747
832 830 737
834 832 727
836 834 719
838 836 819
840 818 766
842 841 839
844 234 8
846 844 13
848 846 17
850 848 14
852 850 41
854 850 40
856 225 216
858 856 233
860 858 40
862 222 219
864 862 233
866 864 40
868 222 216
870 868 233
872 870 40
874 230 226
876 874 40
878 854 853
880 879 853
882 855 853
884 882 860
886 885 880
888 882 861
890 888 866
892 891 886
894 888 867
896 894 872
898 897 892
900 894 873
902 900 876
904 903 898
906 877 216
908 906 873
910 908 867
912 911 867
914 913 861
916 914 855
918 916 853
920 919 853
922 921 905
924 904 216
926 925 923
928 877 222
930 928 873
932 930 867
934 933 867
936 935 861
938 937 861
940 939 855
942 941 855
944 943 853
946 944 905
948 904 222
950 949 947
952 877 230
954 952 873
956 955 873
958 957 867
960 958 861
962 960 855
964 962 853
966 964 905
968 904 230
970 969 967
972 13 8
974 972 17
976 974 15
978 976 209
980 206 31
982 981 979
984 977 206
986 985 977
988 206 30
990 987 209
992 988 206
994 993 991
996 995 983
998 982 206
1000 999 997
1002 545 27
1004 1002 5
1006 542 4
1008 1006 1005
1010 1009 1005
1012 1007 542
1014 1012 1005
1016 1015 1005
1018 1017 1011
1020 1010 542
1022 1021 1019
1024 557 33
1026 1024 7
1028 554 6
1030 1028 1027
1032 1031 1027
1034 1029 554
1036 1034 1027
1038 1037 1027
1040 1039 1033
1042 1032 554
1044 1043 1041
1046 775 8
1048 1046 17
1050 1048 15
1052 772 31
1054 1052 1051
1056 1055 1051
1058 1053 772
1060 1058 1051
1062 1061 1051
1064 1063 1057
1066 1056 772
1068 1067 1065
1070 763 694
1072 1070 755
1074 1073 755
1076 1075 747
1078 1076 737
1080 1079 737
1082 1081 727
1084 1082 719
1086 1085 719
1088 763 700
1090 1088 755
1092 1090 747
1094 1092 737
1096 1095 737
1098 1097 727
1100 1099 727
1102 1101 719
1104 763 706
1106 1104 755
1108 1107 755
1110 1109 747
1112 1111 747
1114 1113 737
1116 1114 727
1118 1116 719
1120 763 710
1122 1120 755
1124 1122 747
1126 1124 737
1128 1126 727
1130 1128 719
1132 1087 807
1134 806 694
1136 1135 1133
1138 1102 807
1140 806 700
1142 1141 1139
1144 1118 807
1146 806 706
1148 1147 1145
1150 1130 807
1152 806 710
1154 1153 1151
1156 569 37
1158 1156 11
1160 566 10
1162 1160 1159
1164 1163 1159
1166 1161 566
1168 1166 1159
1170 1169 1159
1172 1171 1165
1174 1164 566
1176 1175 1173
1178 817 806
1180 778 639
1182 779 636
1184 1183 1181
1186 776 636
1188 1185 777
1190 1189 1187
1192 1191 763
1194 1192 755
1196 1194 747
1198 1196 737
1200 1198 727
1202 1200 719
1204 636 633
1206 637 630
1208 1207 1205
1210 1209 778
1212 779 630
1214 1213 1211
1216 776 630
1218 1215 777
1220 1219 1217
1222 1221 763
1224 1222 755
1226 1224 747
1228 1226 737
1230 1228 727
1232 1230 719
1234 636 630
1236 1234 627
1238 1235 624
1240 1239 1237
1242 1241 778
1244 779 624
1246 1245 1243
1248 776 624
1250 1247 777
1252 1251 1249
1254 1253 763
1256 1254 755
1258 1256 747
1260 1258 737
1262 1260 727
1264 1262 719
1266 1234 624
1268 1266 621
1270 1267 618
1272 1271 1269
1274 1273 778
1276 779 618
1278 1277 1275
1280 776 618
1282 1279 777
1284 1283 1281
1286 1285 763
1288 1286 755
1290 1288 747
1292 1290 737
1294 1292 727
1296 1294 719
1298 1266 618
1300 1298 615
1302 1299 612
1304 1303 1301
1306 1305 778
1308 779 612
1310 1309 1307
1312 776 612
1314 1311 777
1316 1315 1313
1318 1317 763
1320 1318 755
1322 1320 747
1324 1322 737
1326 1324 727
1328 1326 719
1330 1298 612
1332 1330 609
1334 1331 606
1336 1335 1333
1338 1337 778
1340 779 606
1342 1341 1339
1344 776 606
1346 1343 777
1348 1347 1345
1350 1349 763
1352 1350 755
1354 1352 747
1356 1354 737
1358 1356 727
1360 1358 719
1362 1202 1179
1364 1178 636
1366 1365 1363
1368 1232 1179
1370 1178 630
1372 1371 1369
1374 1264 1179
1376 1178 624
1378 1377 1375
1380 1296 1179
1382 1178 618
1384 1383 1381
1386 1328 1179
1388 1178 612
1390 1389 1387
1392 1360 1179
1394 1178 606
1396 1395 1393
i0 i_hbusreq0
i1 i_hbusreq1
i2 i_hbusreq2
i3 controllable_hmastlock
i4 i_hbusreq3
i5 controllable_nstart
i6 i_hburst1
i7 i_hburst0
i8 controllable_hmaster1
i9 controllable_locked
i10 controllable_hmaster0
i11 i_hlock0
i12 controllable_hgrant1
i13 i_hlock1
i14 controllable_busreq
i15 controllable_hgrant2
i16 i_hlock2
i17 controllable_hgrant3
i18 i_hlock3
i19 i_hready
i20 controllable_ndecide
i21 controllable_nhgrant0
l0 n47
l1 reg_controllable_hgrant2_out
l2 reg_controllable_hmaster1_out
l3 reg_controllable_hgrant3_out
l4 next_env_fair_out
l5 reg_stateG3_0_out
l6 reg_controllable_locked_out
l7 reg_stateG3_1_out
l8 reg_controllable_ndecide_out
l9 reg_stateG3_2_out
l10 reg_i_hbusreq0_out
l11 reg_controllable_busreq_out
l12 reg_controllable_nstart_out
l13 reg_i_hbusreq1_out
l14 reg_i_hlock3_out
l15 reg_stateG2_out
l16 reg_stateG10_1_out
l17 reg_controllable_nhgrant0_out
l18 reg_i_hlock2_out
l19 reg_stateG10_2_out
l20 reg_stateA1_out
l21 reg_controllable_hmastlock_out
l22 reg_i_hbusreq2_out
l23 next_sys_fair<0>_out
l24 next_sys_fair<1>_out
l25 next_sys_fair<2>_out
l26 next_sys_fair<3>_out
l27 reg_i_hlock1_out
l28 reg_stateG10_3_out
l29 fair_cnt<0>_out
l30 fair_cnt<1>_out
l31 fair_cnt<2>_out
l32 fair_cnt<3>_out
l33 fair_cnt<4>_out
l34 fair_cnt<5>_out
l35 reg_i_hbusreq3_out
l36 env_safe_err_happened_out
l37 reg_i_hlock0_out
l38 reg_i_hready_out
l39 reg_controllable_hgrant1_out
l40 reg_controllable_hmaster0_out
o0 o_err
c
amba_4_new_50
This file was written by ABC on Tue May  5 16:50:25 2015
For information about AIGER format, refer to http://fmv.jku.at/aiger
-------------------------------
This AIGER file has been created by the following sequence of commands:
> vl2mv amba4c50.v   ---gives--> amba4c50.mv
> abc -c "read_blif_mv amba4c50.mv; write_aiger -s amba4c50n.aig"   ---gives--> amba4c50n.aig
> aigtoaig amba4c50n.aig amba4c50n.aag   ---gives--> amba4c50n.aag (this file)
Content of amba4c50.v:
module amba_4_new_50(
        o_err,
        i_clk,
        i_hready,
        i_hbusreq0,
        i_hlock0,
        i_hbusreq1,
        i_hlock1,
        i_hbusreq2,
        i_hlock2,
        i_hbusreq3,
        i_hlock3,
        i_hburst0,
        i_hburst1,
        controllable_hmaster0,
        controllable_hmaster1,
        controllable_hmastlock,
        controllable_nstart,
        controllable_ndecide,
        controllable_locked,
        controllable_nhgrant0,
        controllable_hgrant1,
        controllable_hgrant2,
        controllable_hgrant3,
        controllable_busreq);

input i_clk;
input i_hready;
input i_hbusreq0;
input i_hlock0;
input i_hbusreq1;
input i_hlock1;
input i_hbusreq2;
input i_hlock2;
input i_hbusreq3;
input i_hlock3;
input i_hburst0;
input i_hburst1;
input controllable_hmaster0;
input controllable_hmaster1;
input controllable_hmastlock;
input controllable_nstart;
input controllable_ndecide;
input controllable_locked;
input controllable_nhgrant0;
input controllable_hgrant1;
input controllable_hgrant2;
input controllable_hgrant3;
input controllable_busreq;
output o_err;

reg reg_i_hready;
reg reg_i_hbusreq0;
reg reg_i_hlock0;
reg reg_i_hbusreq1;
reg reg_i_hlock1;
reg reg_i_hbusreq2;
reg reg_i_hlock2;
reg reg_i_hbusreq3;
reg reg_i_hlock3;
reg reg_controllable_hmaster0;
reg reg_controllable_hmaster1;
reg reg_controllable_hmastlock;
reg reg_controllable_nstart;
reg reg_controllable_ndecide;
reg reg_controllable_locked;
reg reg_controllable_nhgrant0;
reg reg_controllable_hgrant1;
reg reg_controllable_hgrant2;
reg reg_controllable_hgrant3;
reg reg_controllable_busreq;
reg reg_stateA1;
reg reg_stateG2;
reg reg_stateG3_0;
reg reg_stateG3_1;
reg reg_stateG3_2;
reg reg_stateG10_1;
reg reg_stateG10_2;
reg reg_stateG10_3;
reg env_safe_err_happened;
reg next_env_fair;
reg [5:0] fair_cnt;
reg [3:0] next_sys_fair;

wire env_safe_err0;
wire env_safe_err1;
wire env_safe_err2;
wire env_safe_err3;
wire env_safe_err;

wire sys_safe_err0;
wire sys_safe_err1;
wire sys_safe_err2;
wire sys_safe_err3;
wire sys_safe_err4;
wire sys_safe_err5;
wire sys_safe_err6;
wire sys_safe_err7;
wire sys_safe_err8;
wire sys_safe_err9;
wire sys_safe_err10;
wire sys_safe_err11;
wire sys_safe_err12;
wire sys_safe_err13;
wire sys_safe_err14;
wire sys_safe_err15;
wire sys_safe_err16;
wire sys_safe_err17;
wire sys_safe_err18;
wire sys_safe_err19;
wire sys_safe_err20;
wire sys_safe_err21;
wire sys_safe_err22;
wire sys_safe_err23;
wire sys_safe_err24;
wire sys_safe_err25;
wire sys_safe_err26;
wire sys_safe_err27;
wire sys_safe_err28;
wire sys_safe_err29;
wire sys_safe_err30;
wire sys_safe_err31;
wire sys_safe_err32;
wire sys_safe_err33;
wire sys_safe_err;

wire env_fair0;
wire env_fair1;

wire sys_fair0;
wire sys_fair1;
wire sys_fair2;
wire sys_fair3;
wire sys_fair4;
wire sys_fair5;
wire fair_err;
wire o_err;

// =============================================================
//                        ENV_TRANSITION:
// =============================================================
// Assumption 3:
// G( hlock0=1 -> hbusreq0=1 );
assign env_safe_err0 =  ~(~ i_hlock0 | i_hbusreq0);

// Assumption 3:
// G( hlock1=1 -> hbusreq1=1 );
assign env_safe_err1 =  ~(~ i_hlock1 | i_hbusreq1);

// Assumption 3:
// G( hlock2=1 -> hbusreq2=1 );
assign env_safe_err2 =  ~(~ i_hlock2 | i_hbusreq2);

// Assumption 3:
// G( hlock3=1 -> hbusreq3=1 );
assign env_safe_err3 =  ~(~ i_hlock3 | i_hbusreq3);

// collecting together the safety error bits:
assign env_safe_err = env_safe_err0 |
                      env_safe_err1 |
                      env_safe_err2 |
                      env_safe_err3;

// =============================================================
//                        SYS_TRANSITION:
// =============================================================
// G((hmaster0=0) * (hmaster1=0) -> (hbusreq0=0 <-> busreq=0));
assign sys_safe_err0 =  ~( ~( ~(controllable_hmaster0) & ~(controllable_hmaster1) )|(~i_hbusreq0 ^~ (~controllable_busreq)));

// G((hmaster0=1) * (hmaster1=0) -> (hbusreq1=0 <-> busreq=0));
assign sys_safe_err1 =  ~( ~( controllable_hmaster0 & ~(controllable_hmaster1) )|(~i_hbusreq1 ^~ (~controllable_busreq)));

// G((hmaster0=0) * (hmaster1=1) -> (hbusreq2=0 <-> busreq=0));
assign sys_safe_err2 =  ~( ~( ~(controllable_hmaster0) & controllable_hmaster1 )|(~i_hbusreq2 ^~ (~controllable_busreq)));

// G((hmaster0=1) * (hmaster1=1) -> (hbusreq3=0 <-> busreq=0));
assign sys_safe_err3 =  ~( ~( controllable_hmaster0 & controllable_hmaster1 )|(~i_hbusreq3 ^~ (~controllable_busreq)));

// Guarantee 1:
// G((hready=0) -> X(start=0));
assign sys_safe_err4 =  ~( reg_i_hready | controllable_nstart );

// G(((stateG2=1) * (start=1)) -> FALSE;
assign sys_safe_err5 =  ~( ~(reg_stateG2 & ~controllable_nstart) | 0 );

// G(((stateG3_0=1) * (stateG3_1=0) * (stateG3_2=0) * ((start=1))) -> FALSE);
// G(((stateG3_0=0) * (stateG3_1=1) * (stateG3_2=0) * ((start=1))) -> FALSE);
// G(((stateG3_0=1) * (stateG3_1=1) * (stateG3_2=0) * ((start=1))) -> FALSE);
// G(((stateG3_0=0) * (stateG3_1=0) * (stateG3_2=1) * ((start=1))) -> FALSE);
// all these rules can be summarized as: only in state 000, start=1 is allowed:
assign sys_safe_err6 =  (reg_stateG3_0 | reg_stateG3_1 | reg_stateG3_2) & ~controllable_nstart;

// G( (hready=1) -> (   (hgrant0=1) <-> (X(hmaster0=0) * X(hmaster1=0))  ) );
assign sys_safe_err7 =  ~( ~(reg_i_hready) | ( ~reg_controllable_nhgrant0 ^~ ( ~(controllable_hmaster0) & ~(controllable_hmaster1) ) ) );

// G( (hready=1) -> (   (hgrant1=1) <-> (X(hmaster0=1) * X(hmaster1=0))  ) );
assign sys_safe_err8 =  ~( ~(reg_i_hready) | ( reg_controllable_hgrant1 ^~ ( controllable_hmaster0 & ~(controllable_hmaster1) ) ) );

// G( (hready=1) -> (   (hgrant2=1) <-> (X(hmaster0=0) * X(hmaster1=1))  ) );
assign sys_safe_err9 =  ~( ~(reg_i_hready) | ( reg_controllable_hgrant2 ^~ ( ~(controllable_hmaster0) & controllable_hmaster1 ) ) );

// G( (hready=1) -> (   (hgrant3=1) <-> (X(hmaster0=1) * X(hmaster1=1))  ) );
assign sys_safe_err10 =  ~( ~(reg_i_hready) | ( reg_controllable_hgrant3 ^~ ( controllable_hmaster0 & controllable_hmaster1 ) ) );

// HMASTLOCK:
// G(  (hready=1) -> (locked=0 <-> X(hmastlock=0) ) );
assign sys_safe_err11 =  ~( ~(reg_i_hready) | (~reg_controllable_locked ^~ ~controllable_hmastlock) );

// Master 0:
// G( X(start=0) -> ( ((hmaster0=0) * (hmaster1=0)) <-> (X(hmaster0=0) * X(hmaster1=0)) ) );
assign sys_safe_err12 =  ~( ~(controllable_nstart) | ( ( ~(reg_controllable_hmaster0) & ~(reg_controllable_hmaster1) ) ^~ ( ~(controllable_hmaster0) & ~(controllable_hmaster1) )) );

// Master 1:
// G( X(start=0) -> ( ((hmaster0=1) * (hmaster1=0)) <-> (X(hmaster0=1) * X(hmaster1=0)) ) );
assign sys_safe_err13 =  ~( ~(controllable_nstart) | ( ( reg_controllable_hmaster0 & ~(reg_controllable_hmaster1) ) ^~ ( controllable_hmaster0 & ~(controllable_hmaster1) )) );

// Master 2:
// G( X(start=0) -> ( ((hmaster0=0) * (hmaster1=1)) <-> (X(hmaster0=0) * X(hmaster1=1)) ) );
assign sys_safe_err14 =  ~( ~(controllable_nstart) | ( ( ~(reg_controllable_hmaster0) & reg_controllable_hmaster1 ) ^~ ( ~(controllable_hmaster0) & controllable_hmaster1 )) );

// Master 3:
// G( X(start=0) -> ( ((hmaster0=1) * (hmaster1=1)) <-> (X(hmaster0=1) * X(hmaster1=1)) ) );
assign sys_safe_err15 =  ~( ~(controllable_nstart) | ( ( reg_controllable_hmaster0 & reg_controllable_hmaster1 ) ^~ ( controllable_hmaster0 & controllable_hmaster1 )) );

// Guarantee 6.2:
// G( ((X(start=0))) -> ( (hmastlock=1) <-> X(hmastlock=1)) );
assign sys_safe_err16 =  ~( ~(controllable_nstart) | ( reg_controllable_hmastlock ^~ controllable_hmastlock) );

// G( (decide=1  *  hlock0=1  *  X(hgrant0=1) )->X(locked=1));
assign sys_safe_err17 =  ~( ~(~reg_controllable_ndecide & reg_i_hlock0 & ~controllable_nhgrant0) | (controllable_locked) );

// G((decide=1  *  hlock0=0  *  X(hgrant0=1))->X(locked=0));
assign sys_safe_err18 =  ~( ~(~reg_controllable_ndecide & ~reg_i_hlock0 & ~controllable_nhgrant0) | (~controllable_locked) );

// G( (decide=1  *  hlock1=1  *  X(hgrant1=1) )->X(locked=1));
assign sys_safe_err19 =  ~( ~(~reg_controllable_ndecide & reg_i_hlock1 & controllable_hgrant1) | (controllable_locked) );

// G((decide=1  *  hlock1=0  *  X(hgrant1=1))->X(locked=0));
assign sys_safe_err20 =  ~( ~(~reg_controllable_ndecide & ~reg_i_hlock1 & controllable_hgrant1) | (~controllable_locked) );

// G( (decide=1  *  hlock2=1  *  X(hgrant2=1) )->X(locked=1));
assign sys_safe_err21 =  ~( ~(~reg_controllable_ndecide & reg_i_hlock2 & controllable_hgrant2) | (controllable_locked) );

// G((decide=1  *  hlock2=0  *  X(hgrant2=1))->X(locked=0));
assign sys_safe_err22 =  ~( ~(~reg_controllable_ndecide & ~reg_i_hlock2 & controllable_hgrant2) | (~controllable_locked) );

// G( (decide=1  *  hlock3=1  *  X(hgrant3=1) )->X(locked=1));
assign sys_safe_err23 =  ~( ~(~reg_controllable_ndecide & reg_i_hlock3 & controllable_hgrant3) | (controllable_locked) );

// G((decide=1  *  hlock3=0  *  X(hgrant3=1))->X(locked=0));
assign sys_safe_err24 =  ~( ~(~reg_controllable_ndecide & ~reg_i_hlock3 & controllable_hgrant3) | (~controllable_locked) );

// G( (decide=0) -> (  ((hgrant0=0)<->X(hgrant0=0))  ));
assign sys_safe_err25 =  ~( ~(reg_controllable_ndecide) | (reg_controllable_nhgrant0 ^~ controllable_nhgrant0) );

// G( (decide=0) -> (  ((hgrant1=0)<->X(hgrant1=0))  ));
assign sys_safe_err26 =  ~( ~(reg_controllable_ndecide) | (~reg_controllable_hgrant1 ^~ ~controllable_hgrant1) );

// G( (decide=0) -> (  ((hgrant2=0)<->X(hgrant2=0))  ));
assign sys_safe_err27 =  ~( ~(reg_controllable_ndecide) | (~reg_controllable_hgrant2 ^~ ~controllable_hgrant2) );

// G( (decide=0) -> (  ((hgrant3=0)<->X(hgrant3=0))  ));
assign sys_safe_err28 =  ~( ~(reg_controllable_ndecide) | (~reg_controllable_hgrant3 ^~ ~controllable_hgrant3) );

// G((decide=0)->(locked=0 <-> X(locked=0)));
assign sys_safe_err29 =  ~( ~(reg_controllable_ndecide) | (~reg_controllable_locked ^~ ~controllable_locked) );

// G(((stateG10_1=1) * (((hgrant1=1)) * (hbusreq1=0)))->FALSE);
assign sys_safe_err30 =  ~( ~(reg_stateG10_1 & (controllable_hgrant1 & ~i_hbusreq1)) | 0 );

// G(((stateG10_2=1) * (((hgrant2=1)) * (hbusreq2=0)))->FALSE);
assign sys_safe_err31 =  ~( ~(reg_stateG10_2 & (controllable_hgrant2 & ~i_hbusreq2)) | 0 );

// G(((stateG10_3=1) * (((hgrant3=1)) * (hbusreq3=0)))->FALSE);
assign sys_safe_err32 =  ~( ~(reg_stateG10_3 & (controllable_hgrant3 & ~i_hbusreq3)) | 0 );

// default master
// G((decide=1  *  hbusreq0=0  *  hbusreq1=0  *  hbusreq2=0  *  hbusreq3=0) -> X(hgrant0=1));
assign sys_safe_err33 =  ~( ~(~reg_controllable_ndecide & (~reg_i_hbusreq0 & ~reg_i_hbusreq1 & ~reg_i_hbusreq2 & ~reg_i_hbusreq3)) | (~controllable_nhgrant0) );

// collecting together the safety error bits:
assign sys_safe_err = sys_safe_err0 |
                      sys_safe_err1 |
                      sys_safe_err2 |
                      sys_safe_err3 |
                      sys_safe_err4 |
                      sys_safe_err5 |
                      sys_safe_err6 |
                      sys_safe_err7 |
                      sys_safe_err8 |
                      sys_safe_err9 |
                      sys_safe_err10 |
                      sys_safe_err11 |
                      sys_safe_err12 |
                      sys_safe_err13 |
                      sys_safe_err14 |
                      sys_safe_err15 |
                      sys_safe_err16 |
                      sys_safe_err17 |
                      sys_safe_err18 |
                      sys_safe_err19 |
                      sys_safe_err20 |
                      sys_safe_err21 |
                      sys_safe_err22 |
                      sys_safe_err23 |
                      sys_safe_err24 |
                      sys_safe_err25 |
                      sys_safe_err26 |
                      sys_safe_err27 |
                      sys_safe_err28 |
                      sys_safe_err29 |
                      sys_safe_err30 |
                      sys_safe_err31 |
                      sys_safe_err32 |
                      sys_safe_err33;

// =============================================================
//                          ENV_FAIRNESS:
// =============================================================
// Assumption 1: 
// G(F(stateA1=0));
assign env_fair0 =  ~reg_stateA1;

// Assumption 2:
// G(F(hready=1));
assign env_fair1 =  i_hready;


// =============================================================
//                          SYS_FAIRNESS:
// =============================================================
// Guarantee 2:
// G(F(stateG2=0));
assign sys_fair0 = ~reg_stateG2;

// Guarantee 3:
// G(F((stateG3_0=0)  *  (stateG3_1=0)  *  (stateG3_2=0)));
assign sys_fair1 =  (~reg_stateG3_0 & ~reg_stateG3_1 & ~reg_stateG3_2);

// G(F(((hmaster0=0) * (hmaster1=0))  |  hbusreq0=0));
assign sys_fair2 =  ( ~(controllable_hmaster0) & ~(controllable_hmaster1) ) | ~i_hbusreq0;

// G(F(((hmaster0=1) * (hmaster1=0))  |  hbusreq1=0));
assign sys_fair3 =  ( controllable_hmaster0 & ~(controllable_hmaster1) ) | ~i_hbusreq1;

// G(F(((hmaster0=0) * (hmaster1=1))  |  hbusreq2=0));
assign sys_fair4 =  ( ~(controllable_hmaster0) & controllable_hmaster1 ) | ~i_hbusreq2;

// G(F(((hmaster0=1) * (hmaster1=1))  |  hbusreq3=0));
assign sys_fair5 =  ( controllable_hmaster0 & controllable_hmaster1 ) | ~i_hbusreq3;

assign fair_err = (fair_cnt >= 6'b110010);

// computing the error output bit:
assign o_err = ~env_safe_err & ~env_safe_err_happened & (sys_safe_err | fair_err);

initial
 begin
  reg_i_hready = 0;
  reg_i_hbusreq0 = 0;
  reg_i_hlock0 = 0;
  reg_i_hbusreq1 = 0;
  reg_i_hlock1 = 0;
  reg_i_hbusreq2 = 0;
  reg_i_hlock2 = 0;
  reg_i_hbusreq3 = 0;
  reg_i_hlock3 = 0;
  reg_controllable_hmaster0 = 0;
  reg_controllable_hmaster1 = 0;
  reg_controllable_hmastlock = 0;
  reg_controllable_nstart = 0;
  reg_controllable_ndecide = 0;
  reg_controllable_locked = 0;
  reg_controllable_nhgrant0 = 0;
  reg_controllable_hgrant1 = 0;
  reg_controllable_hgrant2 = 0;
  reg_controllable_hgrant3 = 0;
  reg_controllable_busreq = 0;
  reg_stateA1 = 0;
  reg_stateG2 = 0;
  reg_stateG3_0 = 0;
  reg_stateG3_1 = 0;
  reg_stateG3_2 = 0;
  reg_stateG10_1 = 0;
  reg_stateG10_2 = 0;
  reg_stateG10_3 = 0;
  env_safe_err_happened = 0;
  next_env_fair = 0;
  fair_cnt = 0;
  next_sys_fair = 0;
 end


always @(posedge i_clk)
 begin
   // We remember if an environment error occurred:
   env_safe_err_happened = env_safe_err_happened | env_safe_err;

   // Updating the fairness counters: 
   if((next_sys_fair == 0) & sys_fair0)
    begin
      next_sys_fair = 1;
      next_env_fair = 0;
      fair_cnt = 0;
    end
   else if((next_sys_fair == 1) & sys_fair1)
    begin
      next_sys_fair = 2;
      next_env_fair = 0;
      fair_cnt = 0;
    end
   else if((next_sys_fair == 2) & sys_fair2)
    begin
      next_sys_fair = 3;
      next_env_fair = 0;
      fair_cnt = 0;
    end
   else if((next_sys_fair == 3) & sys_fair3)
    begin
      next_sys_fair = 4;
      next_env_fair = 0;
      fair_cnt = 0;
    end
   else if((next_sys_fair == 4) & sys_fair4)
    begin
      next_sys_fair = 5;
      next_env_fair = 0;
      fair_cnt = 0;
    end
   else if((next_sys_fair == 5) & sys_fair5)
    begin
      next_sys_fair = 0;
      next_env_fair = 0;
      fair_cnt = 0;
    end
   else if(~next_env_fair & env_fair0)
    begin
      next_env_fair = 1;
    end
   else if(next_env_fair & env_fair1)
    begin
      next_env_fair = 0;
      fair_cnt = fair_cnt + 1;
    end

   // Updating the automata: 
   // Automaton A1: 
   if(~reg_stateA1 & controllable_hmastlock & ~i_hburst0 & ~i_hburst1)
    begin
      reg_stateA1 = 1'b1;
    end
   else if(reg_stateA1 & ~controllable_busreq)
    begin
      reg_stateA1 = 1'b0;
    end

   // Automaton G2: 
   if(~reg_stateG2)
    begin
      if(controllable_hmastlock & ~controllable_nstart & ~i_hburst0 & ~i_hburst1)
       begin
         reg_stateG2 = 1'b1;
       end
    end
   else // if(reg_stateG2)
    begin
      if(~controllable_busreq)
       begin
         reg_stateG2 = 1'b0;
       end
    end

   // Automaton G3: 
   if(~reg_stateG3_0 & ~reg_stateG3_1 & ~reg_stateG3_2 & controllable_hmastlock & ~controllable_nstart &  ~i_hburst0 & i_hburst1 & ~i_hready)
    begin
      reg_stateG3_0 = 1'b1;
      reg_stateG3_1 = 1'b0;
      reg_stateG3_2 = 1'b0;
    end
   else if(~reg_stateG3_0 & ~reg_stateG3_1 & ~reg_stateG3_2 & controllable_hmastlock & ~controllable_nstart &  ~i_hburst0 & i_hburst1 & i_hready)
    begin
      reg_stateG3_0 = 1'b0;
      reg_stateG3_1 = 1'b1;
      reg_stateG3_2 = 1'b0;
    end
   else if(reg_stateG3_0 & ~reg_stateG3_1 & ~reg_stateG3_2 & i_hready)
    begin
      reg_stateG3_0 = 1'b0;
      reg_stateG3_1 = 1'b1;
      reg_stateG3_2 = 1'b0;
    end
   else if(~reg_stateG3_0 & reg_stateG3_1 & ~reg_stateG3_2 & i_hready)
    begin
      reg_stateG3_0 = 1'b1;
      reg_stateG3_1 = 1'b1;
      reg_stateG3_2 = 1'b0;
    end
   else if(reg_stateG3_0 & reg_stateG3_1 & ~reg_stateG3_2 & i_hready)
    begin
      reg_stateG3_0 = 1'b0;
      reg_stateG3_1 = 1'b0;
      reg_stateG3_2 = 1'b1;
    end
   else if(~reg_stateG3_0 & ~reg_stateG3_1 & reg_stateG3_2 & i_hready)
    begin
      reg_stateG3_0 = 1'b0;
      reg_stateG3_1 = 1'b0;
      reg_stateG3_2 = 1'b0;
    end

   // Automaton G10_1: 
   if(~reg_stateG10_1 & ~controllable_hgrant1 & ~i_hbusreq1)
    begin
      reg_stateG10_1 = 1'b1;
    end
   else if(reg_stateG10_1 & i_hbusreq1)
    begin
      reg_stateG10_1 = 1'b0;
    end

   // Automaton G10_2: 
   if(~reg_stateG10_2 & ~controllable_hgrant2 & ~i_hbusreq2)
    begin
      reg_stateG10_2 = 1'b1;
    end
   else if(reg_stateG10_2 & i_hbusreq2)
    begin
      reg_stateG10_2 = 1'b0;
    end

   // Automaton G10_3: 
   if(~reg_stateG10_3 & ~controllable_hgrant3 & ~i_hbusreq3)
    begin
      reg_stateG10_3 = 1'b1;
    end
   else if(reg_stateG10_3 & i_hbusreq3)
    begin
      reg_stateG10_3 = 1'b0;
    end

   // Latching the previous input:
   reg_i_hready =  i_hready;
   reg_i_hbusreq0 =  i_hbusreq0;
   reg_i_hlock0 =  i_hlock0;
   reg_i_hbusreq1 =  i_hbusreq1;
   reg_i_hlock1 =  i_hlock1;
   reg_i_hbusreq2 =  i_hbusreq2;
   reg_i_hlock2 =  i_hlock2;
   reg_i_hbusreq3 =  i_hbusreq3;
   reg_i_hlock3 =  i_hlock3;
   reg_controllable_hmaster0 =  controllable_hmaster0;
   reg_controllable_hmaster1 =  controllable_hmaster1;
   reg_controllable_hmastlock =  controllable_hmastlock;
   reg_controllable_nstart =  controllable_nstart;
   reg_controllable_ndecide =  controllable_ndecide;
   reg_controllable_locked =  controllable_locked;
   reg_controllable_nhgrant0 =  controllable_nhgrant0;
   reg_controllable_hgrant1 =  controllable_hgrant1;
   reg_controllable_hgrant2 =  controllable_hgrant2;
   reg_controllable_hgrant3 =  controllable_hgrant3;
   reg_controllable_busreq =  controllable_busreq;

 end
endmodule

-------------------------------
#!SYNTCOMP
STATUS : realizable
SOLVED_BY : 3/3 [2015-pre-classification]
SOLVED_IN : 3.2304 [2015-pre-classification]
#.
