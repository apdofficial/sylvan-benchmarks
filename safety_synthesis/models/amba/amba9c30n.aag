aag 1154 39 63 1 1052
2
4
6
8
10
12
14
16
18
20
22
24
26
28
30
32
34
36
38
40
42
44
46
48
50
52
54
56
58
60
62
64
66
68
70
72
74
76
78
80 1
82 10
84 1313
86 64
88 74
90 40
92 14
94 1335
96 66
98 1589
100 72
102 38
104 18
106 1673
108 1695
110 68
112 70
114 34
116 22
118 1719
120 6
122 58
124 30
126 26
128 1739
130 42
132 28
134 8
136 32
138 50
140 24
142 36
144 1769
146 1791
148 52
150 20
152 78
154 1813
156 2
158 54
160 1837
162 16
164 2045
166 2051
168 2057
170 2063
172 2069
174 2219
176 2225
178 2231
180 2237
182 2243
184 2265
186 56
188 12
190 44
192 245
194 2287
196 60
198 4
200 2309
202 62
204 76
1290
206 51 12
208 53 16
210 209 207
212 55 20
214 213 210
216 57 24
218 217 214
220 61 28
222 221 218
224 63 30
226 225 222
228 65 34
230 229 226
232 67 38
234 233 230
236 69 40
238 237 234
240 193 80
242 241 80
244 243 238
246 77 75
248 246 73
250 248 71
252 50 43
254 51 42
256 255 253
258 257 250
260 76 75
262 260 73
264 262 71
266 52 43
268 53 42
270 269 267
272 271 264
274 273 259
276 77 74
278 276 73
280 278 71
282 54 43
284 55 42
286 285 283
288 287 280
290 289 274
292 76 74
294 292 73
296 294 71
298 56 43
300 57 42
302 301 299
304 303 296
306 305 290
308 246 72
310 308 71
312 60 43
314 61 42
316 315 313
318 317 310
320 319 306
322 260 72
324 322 71
326 62 43
328 63 42
330 329 327
332 331 324
334 333 320
336 276 72
338 336 71
340 64 43
342 65 42
344 343 341
346 345 338
348 347 334
350 292 72
352 350 71
354 66 43
356 67 42
358 357 355
360 359 352
362 361 348
364 248 70
366 68 43
368 69 42
370 369 367
372 371 364
374 373 362
376 191 80
378 190 80
380 377 80
382 381 9
384 383 374
386 145 80
388 144 80
390 387 80
392 388 9
394 393 384
396 107 80
398 106 80
400 397 80
402 119 80
404 118 80
406 403 80
408 407 401
410 129 80
412 128 80
414 411 80
416 415 408
418 417 9
420 419 394
422 157 80
424 156 80
426 423 80
428 424 250
430 427 251
432 431 429
434 433 378
436 435 420
438 199 80
440 198 80
442 439 80
444 443 264
446 440 265
448 447 445
450 449 378
452 451 436
454 83 80
456 82 80
458 455 80
460 459 280
462 456 281
464 463 461
466 465 378
468 467 452
470 93 80
472 92 80
474 471 80
476 475 296
478 472 297
480 479 477
482 481 378
484 483 468
486 105 80
488 104 80
490 487 80
492 491 310
494 488 311
496 495 493
498 497 378
500 499 484
502 117 80
504 116 80
506 503 80
508 507 324
510 504 325
512 511 509
514 513 378
516 515 500
518 127 80
520 126 80
522 519 80
524 523 338
526 520 339
528 527 525
530 529 378
532 531 516
534 137 80
536 136 80
538 535 80
540 539 352
542 536 353
544 543 541
546 545 378
548 547 532
550 143 80
552 142 80
554 551 80
556 555 364
558 552 365
560 559 557
562 561 378
564 563 548
566 121 80
568 120 80
570 567 80
572 568 79
574 571 78
576 575 573
578 577 378
580 579 564
582 205 80
584 204 80
586 583 80
588 89 80
590 88 80
592 589 80
594 593 587
596 101 80
598 100 80
600 597 80
602 601 594
604 113 80
606 112 80
608 605 80
610 609 602
612 611 250
614 610 251
616 615 613
618 617 8
620 619 580
622 593 584
624 622 601
626 624 609
628 627 264
630 626 265
632 631 629
634 633 8
636 635 620
638 590 587
640 638 601
642 640 609
644 643 280
646 642 281
648 647 645
650 649 8
652 651 636
654 590 584
656 654 601
658 656 609
660 659 296
662 658 297
664 663 661
666 665 8
668 667 652
670 598 594
672 670 609
674 673 310
676 672 311
678 677 675
680 679 8
682 681 668
684 622 598
686 684 609
688 687 324
690 686 325
692 691 689
694 693 8
696 695 682
698 638 598
700 698 609
702 701 338
704 700 339
706 705 703
708 707 8
710 709 696
712 654 598
714 712 609
716 715 352
718 714 353
720 719 717
722 721 8
724 723 710
726 606 602
728 727 364
730 726 365
732 731 729
734 733 8
736 735 724
738 153 80
740 152 80
742 739 80
744 743 78
746 740 79
748 747 745
750 749 8
752 751 736
754 123 80
756 122 80
758 755 80
760 189 80
762 188 80
764 761 80
766 762 759
768 766 3
770 768 7
772 771 752
774 765 759
776 774 3
778 776 6
780 779 772
782 163 80
784 162 80
786 783 80
788 784 759
790 788 4
792 790 7
794 793 780
796 787 759
798 796 4
800 798 6
802 801 794
804 151 80
806 150 80
808 805 80
810 806 759
812 810 10
814 812 7
816 815 802
818 809 759
820 818 10
822 820 6
824 823 816
826 141 80
828 140 80
830 827 80
832 828 759
834 832 14
836 834 7
838 837 824
840 831 759
842 840 14
844 842 6
846 845 838
848 133 80
850 132 80
852 849 80
854 850 759
856 854 18
858 856 7
860 859 846
862 853 759
864 862 18
866 864 6
868 867 860
870 125 80
872 124 80
874 871 80
876 872 759
878 876 22
880 878 7
882 881 868
884 875 759
886 884 22
888 886 6
890 889 882
892 115 80
894 114 80
896 893 80
898 894 759
900 898 26
902 900 7
904 903 890
906 897 759
908 906 26
910 908 6
912 911 904
914 103 80
916 102 80
918 915 80
920 916 759
922 920 32
924 922 7
926 925 912
928 919 759
930 928 32
932 930 6
934 933 926
936 91 80
938 90 80
940 937 80
942 938 759
944 942 36
946 944 7
948 947 934
950 941 759
952 950 36
954 952 6
956 955 948
958 427 2
960 424 3
962 961 959
964 963 756
966 965 956
968 440 5
970 443 4
972 971 969
974 973 756
976 975 966
978 456 11
980 459 10
982 981 979
984 983 756
986 985 976
988 472 15
990 475 14
992 991 989
994 993 756
996 995 986
998 488 19
1000 491 18
1002 1001 999
1004 1003 756
1006 1005 996
1008 504 23
1010 507 22
1012 1011 1009
1014 1013 756
1016 1015 1006
1018 520 27
1020 523 26
1022 1021 1019
1024 1023 756
1026 1025 1016
1028 536 33
1030 539 32
1032 1031 1029
1034 1033 756
1036 1035 1026
1038 552 37
1040 555 36
1042 1041 1039
1044 1043 756
1046 1045 1036
1048 568 7
1050 571 6
1052 1051 1049
1054 1053 756
1056 1055 1046
1058 147 80
1060 146 80
1062 1059 80
1064 53 4
1066 1064 1060
1068 1067 1056
1070 155 80
1072 154 80
1074 1071 80
1076 55 10
1078 1076 1072
1080 1079 1068
1082 185 80
1084 184 80
1086 1083 80
1088 57 14
1090 1088 1084
1092 1091 1080
1094 195 80
1096 194 80
1098 1095 80
1100 61 18
1102 1100 1096
1104 1103 1092
1106 201 80
1108 200 80
1110 1107 80
1112 63 22
1114 1112 1108
1116 1115 1104
1118 85 80
1120 84 80
1122 1119 80
1124 65 26
1126 1124 1120
1128 1127 1116
1130 95 80
1132 94 80
1134 1131 80
1136 67 32
1138 1136 1132
1140 1139 1128
1142 109 80
1144 108 80
1146 1143 80
1148 69 36
1150 1148 1144
1152 1151 1140
1154 139 80
1156 1155 80
1158 149 80
1160 1159 80
1162 1161 1157
1164 159 80
1166 1165 80
1168 1167 1162
1170 187 80
1172 1171 80
1174 1173 1168
1176 197 80
1178 1177 80
1180 1179 1174
1182 203 80
1184 1183 80
1186 1185 1180
1188 87 80
1190 1189 80
1192 1191 1186
1194 97 80
1196 1195 80
1198 1197 1192
1200 111 80
1202 1201 80
1204 1203 1198
1206 1204 759
1208 1206 2
1210 1209 1152
1212 173 80
1214 172 80
1216 1213 80
1218 171 80
1220 170 80
1222 1219 80
1224 169 80
1226 168 80
1228 1225 80
1230 167 80
1232 166 80
1234 1231 80
1236 165 80
1238 164 80
1240 1237 80
1242 1235 1229
1244 1243 1228
1246 1244 1234
1248 1247 1223
1250 1249 1222
1252 1250 1246
1254 1253 1217
1256 1255 1216
1258 1256 1252
1260 1234 1229
1262 1235 1226
1264 1263 1261
1266 1246 1223
1268 1247 1220
1270 1269 1267
1272 1252 1217
1274 1253 1214
1276 1275 1273
1278 1239 1234
1280 1278 1264
1282 1280 1270
1284 1282 1276
1286 1285 1259
1288 1286 1210
1290 1289 244
1292 1123 27
1294 1292 65
1296 1120 64
1298 1296 1295
1300 1299 1295
1302 1297 1120
1304 1302 1295
1306 1305 1295
1308 1307 1301
1310 1300 1120
1312 1311 1309
1314 1135 33
1316 1314 67
1318 1132 66
1320 1318 1317
1322 1321 1317
1324 1319 1132
1326 1324 1317
1328 1327 1317
1330 1329 1323
1332 1322 1132
1334 1333 1331
1336 175 80
1338 174 80
1340 1337 80
1342 177 80
1344 176 80
1346 1343 80
1348 179 80
1350 178 80
1352 1349 80
1354 181 80
1356 180 80
1358 1355 80
1360 182 80
1362 1345 1339
1364 1362 1351
1366 1364 1357
1368 1366 1361
1370 1368 391
1372 1345 1340
1374 1372 1351
1376 1374 1357
1378 1376 1361
1380 1378 416
1382 1346 1339
1384 1382 1351
1386 1384 1357
1388 1386 1361
1390 251 50
1392 1391 1388
1394 1346 1340
1396 1394 1351
1398 1396 1357
1400 1398 1361
1402 265 52
1404 1403 1400
1406 1362 1352
1408 1406 1357
1410 1408 1361
1412 281 54
1414 1413 1410
1416 1372 1352
1418 1416 1357
1420 1418 1361
1422 297 56
1424 1423 1420
1426 1382 1352
1428 1426 1357
1430 1428 1361
1432 311 60
1434 1433 1430
1436 1394 1352
1438 1436 1357
1440 1438 1361
1442 325 62
1444 1443 1440
1446 1364 1358
1448 1446 1361
1450 339 64
1452 1451 1448
1454 1374 1358
1456 1454 1361
1458 353 66
1460 1459 1456
1462 1384 1358
1464 1462 1361
1466 365 68
1468 1467 1464
1470 99 80
1472 98 80
1474 1471 80
1476 161 80
1478 160 80
1480 1477 80
1482 1481 1475
1484 1472 44
1486 1380 1371
1488 1487 1371
1490 1381 1371
1492 1490 1392
1494 1493 1488
1496 1490 1393
1498 1496 1404
1500 1499 1494
1502 1496 1405
1504 1502 1414
1506 1505 1500
1508 1502 1415
1510 1508 1424
1512 1511 1506
1514 1508 1425
1516 1514 1434
1518 1517 1512
1520 1514 1435
1522 1520 1444
1524 1523 1518
1526 1520 1445
1528 1526 1452
1530 1529 1524
1532 1526 1453
1534 1532 1460
1536 1535 1530
1538 1532 1461
1540 1538 1468
1542 1541 1536
1544 1538 1469
1546 1544 1482
1548 1547 1542
1550 1544 1483
1552 1550 1484
1554 1553 1548
1556 1485 1472
1558 1556 1483
1560 1559 1483
1562 1561 1469
1564 1562 1461
1566 1564 1453
1568 1566 1445
1570 1568 1435
1572 1570 1425
1574 1572 1415
1576 1574 1405
1578 1576 1393
1580 1578 1381
1582 1580 1371
1584 1582 1555
1586 1554 1472
1588 1587 1585
1590 416 78
1592 1590 9
1594 1592 49
1596 1594 46
1598 1596 45
1600 1596 44
1602 407 398
1604 1602 415
1606 1604 44
1608 404 401
1610 1608 415
1612 1610 44
1614 404 398
1616 1614 415
1618 1616 44
1620 412 408
1622 1620 44
1624 1600 1599
1626 1625 1599
1628 1601 1599
1630 1628 1606
1632 1631 1626
1634 1628 1607
1636 1634 1612
1638 1637 1632
1640 1634 1613
1642 1640 1618
1644 1643 1638
1646 1640 1619
1648 1646 1622
1650 1649 1644
1652 1623 398
1654 1652 1619
1656 1654 1613
1658 1657 1613
1660 1659 1607
1662 1660 1601
1664 1662 1599
1666 1665 1599
1668 1667 1651
1670 1650 398
1672 1671 1669
1674 1147 37
1676 1674 69
1678 1144 68
1680 1678 1677
1682 1681 1677
1684 1679 1144
1686 1684 1677
1688 1687 1677
1690 1689 1683
1692 1682 1144
1694 1693 1691
1696 1623 404
1698 1696 1619
1700 1698 1613
1702 1701 1613
1704 1703 1607
1706 1705 1607
1708 1707 1601
1710 1709 1601
1712 1711 1599
1714 1712 1651
1716 1650 404
1718 1717 1715
1720 1623 412
1722 1720 1619
1724 1723 1619
1726 1725 1613
1728 1726 1607
1730 1728 1601
1732 1730 1599
1734 1732 1651
1736 1650 412
1738 1737 1735
1740 78 9
1742 1740 49
1744 1742 47
1746 1744 391
1748 388 43
1750 1749 1747
1752 1745 388
1754 1753 1745
1756 388 42
1758 1755 391
1760 1756 388
1762 1761 1759
1764 1763 1751
1766 1750 388
1768 1767 1765
1770 1063 5
1772 1770 53
1774 1060 52
1776 1774 1773
1778 1777 1773
1780 1775 1060
1782 1780 1773
1784 1783 1773
1786 1785 1779
1788 1778 1060
1790 1789 1787
1792 1075 11
1794 1792 55
1796 1072 54
1798 1796 1795
1800 1799 1795
1802 1797 1072
1804 1802 1795
1806 1805 1795
1808 1807 1801
1810 1800 1072
1812 1811 1809
1814 1481 78
1816 1814 49
1818 1816 47
1820 1478 43
1822 1820 1819
1824 1823 1819
1826 1821 1478
1828 1826 1819
1830 1829 1819
1832 1831 1825
1834 1824 1478
1836 1835 1833
1838 1553 1542
1840 1484 1241
1842 1485 1238
1844 1843 1841
1846 1482 1238
1848 1845 1483
1850 1849 1847
1852 1851 1469
1854 1852 1461
1856 1854 1453
1858 1856 1445
1860 1858 1435
1862 1860 1425
1864 1862 1415
1866 1864 1405
1868 1866 1393
1870 1868 1381
1872 1870 1371
1874 1238 1235
1876 1239 1232
1878 1877 1875
1880 1879 1484
1882 1485 1232
1884 1883 1881
1886 1482 1232
1888 1885 1483
1890 1889 1887
1892 1891 1469
1894 1892 1461
1896 1894 1453
1898 1896 1445
1900 1898 1435
1902 1900 1425
1904 1902 1415
1906 1904 1405
1908 1906 1393
1910 1908 1381
1912 1910 1371
1914 1238 1232
1916 1914 1229
1918 1915 1226
1920 1919 1917
1922 1921 1484
1924 1485 1226
1926 1925 1923
1928 1482 1226
1930 1927 1483
1932 1931 1929
1934 1933 1469
1936 1934 1461
1938 1936 1453
1940 1938 1445
1942 1940 1435
1944 1942 1425
1946 1944 1415
1948 1946 1405
1950 1948 1393
1952 1950 1381
1954 1952 1371
1956 1914 1226
1958 1956 1223
1960 1957 1220
1962 1961 1959
1964 1963 1484
1966 1485 1220
1968 1967 1965
1970 1482 1220
1972 1969 1483
1974 1973 1971
1976 1975 1469
1978 1976 1461
1980 1978 1453
1982 1980 1445
1984 1982 1435
1986 1984 1425
1988 1986 1415
1990 1988 1405
1992 1990 1393
1994 1992 1381
1996 1994 1371
1998 1956 1220
2000 1998 1217
2002 1999 1214
2004 2003 2001
2006 2005 1484
2008 1485 1214
2010 2009 2007
2012 1482 1214
2014 2011 1483
2016 2015 2013
2018 2017 1469
2020 2018 1461
2022 2020 1453
2024 2022 1445
2026 2024 1435
2028 2026 1425
2030 2028 1415
2032 2030 1405
2034 2032 1393
2036 2034 1381
2038 2036 1371
2040 1872 1839
2042 1838 1238
2044 2043 2041
2046 1912 1839
2048 1838 1232
2050 2049 2047
2052 1954 1839
2054 1838 1226
2056 2055 2053
2058 1996 1839
2060 1838 1220
2062 2061 2059
2064 2038 1839
2066 1838 1214
2068 2067 2065
2070 1469 1338
2072 2070 1461
2074 2072 1453
2076 2075 1453
2078 2077 1445
2080 2078 1435
2082 2081 1435
2084 2083 1425
2086 2084 1415
2088 2087 1415
2090 2089 1405
2092 2090 1393
2094 2093 1393
2096 2095 1381
2098 2096 1371
2100 2099 1371
2102 1469 1344
2104 2102 1461
2106 2105 1461
2108 2107 1453
2110 2108 1445
2112 2110 1435
2114 2113 1435
2116 2115 1425
2118 2117 1425
2120 2119 1415
2122 2120 1405
2124 2122 1393
2126 2125 1393
2128 2127 1381
2130 2129 1381
2132 2131 1371
2134 1469 1350
2136 2134 1461
2138 2136 1453
2140 2138 1445
2142 2140 1435
2144 2143 1435
2146 2145 1425
2148 2147 1425
2150 2149 1415
2152 2151 1415
2154 2153 1405
2156 2155 1405
2158 2157 1393
2160 2158 1381
2162 2160 1371
2164 1469 1356
2166 2164 1461
2168 2167 1461
2170 2169 1453
2172 2171 1453
2174 2173 1445
2176 2175 1445
2178 2177 1435
2180 2178 1425
2182 2180 1415
2184 2182 1405
2186 2184 1393
2188 2186 1381
2190 2188 1371
2192 1469 1360
2194 2192 1461
2196 2194 1453
2198 2196 1445
2200 2198 1435
2202 2200 1425
2204 2202 1415
2206 2204 1405
2208 2206 1393
2210 2208 1381
2212 2210 1371
2214 2101 1543
2216 1542 1338
2218 2217 2215
2220 2132 1543
2222 1542 1344
2224 2223 2221
2226 2162 1543
2228 1542 1350
2230 2229 2227
2232 2190 1543
2234 1542 1356
2236 2235 2233
2238 2212 1543
2240 1542 1360
2242 2241 2239
2244 1087 15
2246 2244 57
2248 1084 56
2250 2248 2247
2252 2251 2247
2254 2249 1084
2256 2254 2247
2258 2257 2247
2260 2259 2253
2262 2252 1084
2264 2263 2261
2266 1099 19
2268 2266 61
2270 1096 60
2272 2270 2269
2274 2273 2269
2276 2271 1096
2278 2276 2269
2280 2279 2269
2282 2281 2275
2284 2274 1096
2286 2285 2283
2288 1111 23
2290 2288 63
2292 1108 62
2294 2292 2291
2296 2295 2291
2298 2293 1108
2300 2298 2291
2302 2301 2291
2304 2303 2297
2306 2296 1108
2308 2307 2305
i0 controllable_nhgrant0
i1 controllable_hgrant1
i2 controllable_locked
i3 controllable_nstart
i4 controllable_hgrant2
i5 i_hlock0
i6 controllable_hgrant3
i7 i_hlock1
i8 controllable_hgrant4
i9 i_hlock2
i10 controllable_hgrant5
i11 i_hlock3
i12 controllable_hgrant6
i13 i_hlock4
i14 i_hlock5
i15 controllable_hgrant7
i16 i_hlock6
i17 controllable_hgrant8
i18 i_hlock7
i19 i_hlock8
i20 controllable_busreq
i21 i_hready
i22 i_hburst1
i23 i_hburst0
i24 i_hbusreq0
i25 i_hbusreq1
i26 i_hbusreq2
i27 i_hbusreq3
i28 controllable_ndecide
i29 i_hbusreq4
i30 i_hbusreq5
i31 i_hbusreq6
i32 i_hbusreq7
i33 i_hbusreq8
i34 controllable_hmaster3
i35 controllable_hmaster2
i36 controllable_hmaster1
i37 controllable_hmaster0
i38 controllable_hmastlock
l0 n81
l1 reg_controllable_hgrant2_out
l2 reg_stateG10_6_out
l3 reg_i_hbusreq6_out
l4 reg_controllable_hmaster1_out
l5 reg_i_hlock8_out
l6 reg_controllable_hgrant3_out
l7 reg_stateG10_7_out
l8 reg_i_hbusreq7_out
l9 next_env_fair_out
l10 reg_controllable_hmaster2_out
l11 reg_i_hlock7_out
l12 reg_controllable_hgrant4_out
l13 reg_stateG3_0_out
l14 reg_stateG10_8_out
l15 reg_i_hbusreq8_out
l16 reg_controllable_hmaster3_out
l17 reg_i_hlock6_out
l18 reg_controllable_hgrant5_out
l19 reg_stateG3_1_out
l20 reg_controllable_locked_out
l21 reg_controllable_ndecide_out
l22 reg_i_hlock5_out
l23 reg_controllable_hgrant6_out
l24 reg_stateG3_2_out
l25 reg_controllable_busreq_out
l26 reg_i_hlock4_out
l27 reg_controllable_nstart_out
l28 reg_controllable_hgrant7_out
l29 reg_i_hbusreq0_out
l30 reg_i_hlock3_out
l31 reg_controllable_hgrant8_out
l32 reg_stateG2_out
l33 reg_stateG10_1_out
l34 reg_i_hbusreq1_out
l35 reg_i_hlock2_out
l36 reg_controllable_hmastlock_out
l37 reg_stateG10_2_out
l38 reg_controllable_nhgrant0_out
l39 reg_i_hbusreq2_out
l40 reg_stateA1_out
l41 reg_i_hlock1_out
l42 fair_cnt<0>_out
l43 fair_cnt<1>_out
l44 fair_cnt<2>_out
l45 fair_cnt<3>_out
l46 fair_cnt<4>_out
l47 next_sys_fair<0>_out
l48 next_sys_fair<1>_out
l49 next_sys_fair<2>_out
l50 next_sys_fair<3>_out
l51 next_sys_fair<4>_out
l52 reg_stateG10_3_out
l53 reg_i_hbusreq3_out
l54 reg_i_hlock0_out
l55 reg_i_hready_out
l56 env_safe_err_happened_out
l57 reg_stateG10_4_out
l58 reg_i_hbusreq4_out
l59 reg_controllable_hgrant1_out
l60 reg_stateG10_5_out
l61 reg_i_hbusreq5_out
l62 reg_controllable_hmaster0_out
o0 o_err
c
amba_9_new_30
This file was written by ABC on Tue May  5 16:54:28 2015
For information about AIGER format, refer to http://fmv.jku.at/aiger
-------------------------------
This AIGER file has been created by the following sequence of commands:
> vl2mv amba9c30.v   ---gives--> amba9c30.mv
> abc -c "read_blif_mv amba9c30.mv; write_aiger -s amba9c30n.aig"   ---gives--> amba9c30n.aig
> aigtoaig amba9c30n.aig amba9c30n.aag   ---gives--> amba9c30n.aag (this file)
Content of amba9c30.v:
module amba_9_new_30(
        o_err,
        i_clk,
        i_hready,
        i_hbusreq0,
        i_hlock0,
        i_hbusreq1,
        i_hlock1,
        i_hbusreq2,
        i_hlock2,
        i_hbusreq3,
        i_hlock3,
        i_hbusreq4,
        i_hlock4,
        i_hbusreq5,
        i_hlock5,
        i_hbusreq6,
        i_hlock6,
        i_hbusreq7,
        i_hlock7,
        i_hbusreq8,
        i_hlock8,
        i_hburst0,
        i_hburst1,
        controllable_hmaster0,
        controllable_hmaster1,
        controllable_hmaster2,
        controllable_hmaster3,
        controllable_hmastlock,
        controllable_nstart,
        controllable_ndecide,
        controllable_locked,
        controllable_nhgrant0,
        controllable_hgrant1,
        controllable_hgrant2,
        controllable_hgrant3,
        controllable_hgrant4,
        controllable_hgrant5,
        controllable_hgrant6,
        controllable_hgrant7,
        controllable_hgrant8,
        controllable_busreq);

input i_clk;
input i_hready;
input i_hbusreq0;
input i_hlock0;
input i_hbusreq1;
input i_hlock1;
input i_hbusreq2;
input i_hlock2;
input i_hbusreq3;
input i_hlock3;
input i_hbusreq4;
input i_hlock4;
input i_hbusreq5;
input i_hlock5;
input i_hbusreq6;
input i_hlock6;
input i_hbusreq7;
input i_hlock7;
input i_hbusreq8;
input i_hlock8;
input i_hburst0;
input i_hburst1;
input controllable_hmaster0;
input controllable_hmaster1;
input controllable_hmaster2;
input controllable_hmaster3;
input controllable_hmastlock;
input controllable_nstart;
input controllable_ndecide;
input controllable_locked;
input controllable_nhgrant0;
input controllable_hgrant1;
input controllable_hgrant2;
input controllable_hgrant3;
input controllable_hgrant4;
input controllable_hgrant5;
input controllable_hgrant6;
input controllable_hgrant7;
input controllable_hgrant8;
input controllable_busreq;
output o_err;

reg reg_i_hready;
reg reg_i_hbusreq0;
reg reg_i_hlock0;
reg reg_i_hbusreq1;
reg reg_i_hlock1;
reg reg_i_hbusreq2;
reg reg_i_hlock2;
reg reg_i_hbusreq3;
reg reg_i_hlock3;
reg reg_i_hbusreq4;
reg reg_i_hlock4;
reg reg_i_hbusreq5;
reg reg_i_hlock5;
reg reg_i_hbusreq6;
reg reg_i_hlock6;
reg reg_i_hbusreq7;
reg reg_i_hlock7;
reg reg_i_hbusreq8;
reg reg_i_hlock8;
reg reg_controllable_hmaster0;
reg reg_controllable_hmaster1;
reg reg_controllable_hmaster2;
reg reg_controllable_hmaster3;
reg reg_controllable_hmastlock;
reg reg_controllable_nstart;
reg reg_controllable_ndecide;
reg reg_controllable_locked;
reg reg_controllable_nhgrant0;
reg reg_controllable_hgrant1;
reg reg_controllable_hgrant2;
reg reg_controllable_hgrant3;
reg reg_controllable_hgrant4;
reg reg_controllable_hgrant5;
reg reg_controllable_hgrant6;
reg reg_controllable_hgrant7;
reg reg_controllable_hgrant8;
reg reg_controllable_busreq;
reg reg_stateA1;
reg reg_stateG2;
reg reg_stateG3_0;
reg reg_stateG3_1;
reg reg_stateG3_2;
reg reg_stateG10_1;
reg reg_stateG10_2;
reg reg_stateG10_3;
reg reg_stateG10_4;
reg reg_stateG10_5;
reg reg_stateG10_6;
reg reg_stateG10_7;
reg reg_stateG10_8;
reg env_safe_err_happened;
reg next_env_fair;
reg [4:0] fair_cnt;
reg [4:0] next_sys_fair;

wire env_safe_err0;
wire env_safe_err1;
wire env_safe_err2;
wire env_safe_err3;
wire env_safe_err4;
wire env_safe_err5;
wire env_safe_err6;
wire env_safe_err7;
wire env_safe_err8;
wire env_safe_err;

wire sys_safe_err0;
wire sys_safe_err1;
wire sys_safe_err2;
wire sys_safe_err3;
wire sys_safe_err4;
wire sys_safe_err5;
wire sys_safe_err6;
wire sys_safe_err7;
wire sys_safe_err8;
wire sys_safe_err9;
wire sys_safe_err10;
wire sys_safe_err11;
wire sys_safe_err12;
wire sys_safe_err13;
wire sys_safe_err14;
wire sys_safe_err15;
wire sys_safe_err16;
wire sys_safe_err17;
wire sys_safe_err18;
wire sys_safe_err19;
wire sys_safe_err20;
wire sys_safe_err21;
wire sys_safe_err22;
wire sys_safe_err23;
wire sys_safe_err24;
wire sys_safe_err25;
wire sys_safe_err26;
wire sys_safe_err27;
wire sys_safe_err28;
wire sys_safe_err29;
wire sys_safe_err30;
wire sys_safe_err31;
wire sys_safe_err32;
wire sys_safe_err33;
wire sys_safe_err34;
wire sys_safe_err35;
wire sys_safe_err36;
wire sys_safe_err37;
wire sys_safe_err38;
wire sys_safe_err39;
wire sys_safe_err40;
wire sys_safe_err41;
wire sys_safe_err42;
wire sys_safe_err43;
wire sys_safe_err44;
wire sys_safe_err45;
wire sys_safe_err46;
wire sys_safe_err47;
wire sys_safe_err48;
wire sys_safe_err49;
wire sys_safe_err50;
wire sys_safe_err51;
wire sys_safe_err52;
wire sys_safe_err53;
wire sys_safe_err54;
wire sys_safe_err55;
wire sys_safe_err56;
wire sys_safe_err57;
wire sys_safe_err58;
wire sys_safe_err59;
wire sys_safe_err60;
wire sys_safe_err61;
wire sys_safe_err62;
wire sys_safe_err63;
wire sys_safe_err64;
wire sys_safe_err65;
wire sys_safe_err66;
wire sys_safe_err67;
wire sys_safe_err68;
wire sys_safe_err;

wire env_fair0;
wire env_fair1;

wire sys_fair0;
wire sys_fair1;
wire sys_fair2;
wire sys_fair3;
wire sys_fair4;
wire sys_fair5;
wire sys_fair6;
wire sys_fair7;
wire sys_fair8;
wire sys_fair9;
wire sys_fair10;
wire fair_err;
wire o_err;

// =============================================================
//                        ENV_TRANSITION:
// =============================================================
// Assumption 3:
// G( hlock0=1 -> hbusreq0=1 );
assign env_safe_err0 =  ~(~ i_hlock0 | i_hbusreq0);

// Assumption 3:
// G( hlock1=1 -> hbusreq1=1 );
assign env_safe_err1 =  ~(~ i_hlock1 | i_hbusreq1);

// Assumption 3:
// G( hlock2=1 -> hbusreq2=1 );
assign env_safe_err2 =  ~(~ i_hlock2 | i_hbusreq2);

// Assumption 3:
// G( hlock3=1 -> hbusreq3=1 );
assign env_safe_err3 =  ~(~ i_hlock3 | i_hbusreq3);

// Assumption 3:
// G( hlock4=1 -> hbusreq4=1 );
assign env_safe_err4 =  ~(~ i_hlock4 | i_hbusreq4);

// Assumption 3:
// G( hlock5=1 -> hbusreq5=1 );
assign env_safe_err5 =  ~(~ i_hlock5 | i_hbusreq5);

// Assumption 3:
// G( hlock6=1 -> hbusreq6=1 );
assign env_safe_err6 =  ~(~ i_hlock6 | i_hbusreq6);

// Assumption 3:
// G( hlock7=1 -> hbusreq7=1 );
assign env_safe_err7 =  ~(~ i_hlock7 | i_hbusreq7);

// Assumption 3:
// G( hlock8=1 -> hbusreq8=1 );
assign env_safe_err8 =  ~(~ i_hlock8 | i_hbusreq8);

// collecting together the safety error bits:
assign env_safe_err = env_safe_err0 |
                      env_safe_err1 |
                      env_safe_err2 |
                      env_safe_err3 |
                      env_safe_err4 |
                      env_safe_err5 |
                      env_safe_err6 |
                      env_safe_err7 |
                      env_safe_err8;

// =============================================================
//                        SYS_TRANSITION:
// =============================================================
// G((hmaster0=0) * (hmaster1=0) * (hmaster2=0) * (hmaster3=0) -> (hbusreq0=0 <-> busreq=0));
assign sys_safe_err0 =  ~( ~( ~(controllable_hmaster0) & ~(controllable_hmaster1) & ~(controllable_hmaster2) & ~(controllable_hmaster3) )|(~i_hbusreq0 ^~ (~controllable_busreq)));

// G((hmaster0=1) * (hmaster1=0) * (hmaster2=0) * (hmaster3=0) -> (hbusreq1=0 <-> busreq=0));
assign sys_safe_err1 =  ~( ~( controllable_hmaster0 & ~(controllable_hmaster1) & ~(controllable_hmaster2) & ~(controllable_hmaster3) )|(~i_hbusreq1 ^~ (~controllable_busreq)));

// G((hmaster0=0) * (hmaster1=1) * (hmaster2=0) * (hmaster3=0) -> (hbusreq2=0 <-> busreq=0));
assign sys_safe_err2 =  ~( ~( ~(controllable_hmaster0) & controllable_hmaster1 & ~(controllable_hmaster2) & ~(controllable_hmaster3) )|(~i_hbusreq2 ^~ (~controllable_busreq)));

// G((hmaster0=1) * (hmaster1=1) * (hmaster2=0) * (hmaster3=0) -> (hbusreq3=0 <-> busreq=0));
assign sys_safe_err3 =  ~( ~( controllable_hmaster0 & controllable_hmaster1 & ~(controllable_hmaster2) & ~(controllable_hmaster3) )|(~i_hbusreq3 ^~ (~controllable_busreq)));

// G((hmaster0=0) * (hmaster1=0) * (hmaster2=1) * (hmaster3=0) -> (hbusreq4=0 <-> busreq=0));
assign sys_safe_err4 =  ~( ~( ~(controllable_hmaster0) & ~(controllable_hmaster1) & controllable_hmaster2 & ~(controllable_hmaster3) )|(~i_hbusreq4 ^~ (~controllable_busreq)));

// G((hmaster0=1) * (hmaster1=0) * (hmaster2=1) * (hmaster3=0) -> (hbusreq5=0 <-> busreq=0));
assign sys_safe_err5 =  ~( ~( controllable_hmaster0 & ~(controllable_hmaster1) & controllable_hmaster2 & ~(controllable_hmaster3) )|(~i_hbusreq5 ^~ (~controllable_busreq)));

// G((hmaster0=0) * (hmaster1=1) * (hmaster2=1) * (hmaster3=0) -> (hbusreq6=0 <-> busreq=0));
assign sys_safe_err6 =  ~( ~( ~(controllable_hmaster0) & controllable_hmaster1 & controllable_hmaster2 & ~(controllable_hmaster3) )|(~i_hbusreq6 ^~ (~controllable_busreq)));

// G((hmaster0=1) * (hmaster1=1) * (hmaster2=1) * (hmaster3=0) -> (hbusreq7=0 <-> busreq=0));
assign sys_safe_err7 =  ~( ~( controllable_hmaster0 & controllable_hmaster1 & controllable_hmaster2 & ~(controllable_hmaster3) )|(~i_hbusreq7 ^~ (~controllable_busreq)));

// G((hmaster0=0) * (hmaster1=0) * (hmaster2=0) * (hmaster3=1) -> (hbusreq8=0 <-> busreq=0));
assign sys_safe_err8 =  ~( ~( ~(controllable_hmaster0) & ~(controllable_hmaster1) & ~(controllable_hmaster2) & controllable_hmaster3 )|(~i_hbusreq8 ^~ (~controllable_busreq)));

// Guarantee 1:
// G((hready=0) -> X(start=0));
assign sys_safe_err9 =  ~( reg_i_hready | controllable_nstart );

// G(((stateG2=1) * (start=1)) -> FALSE;
assign sys_safe_err10 =  ~( ~(reg_stateG2 & ~controllable_nstart) | 0 );

// G(((stateG3_0=1) * (stateG3_1=0) * (stateG3_2=0) * ((start=1))) -> FALSE);
// G(((stateG3_0=0) * (stateG3_1=1) * (stateG3_2=0) * ((start=1))) -> FALSE);
// G(((stateG3_0=1) * (stateG3_1=1) * (stateG3_2=0) * ((start=1))) -> FALSE);
// G(((stateG3_0=0) * (stateG3_1=0) * (stateG3_2=1) * ((start=1))) -> FALSE);
// all these rules can be summarized as: only in state 000, start=1 is allowed:
assign sys_safe_err11 =  (reg_stateG3_0 | reg_stateG3_1 | reg_stateG3_2) & ~controllable_nstart;

// G( (hready=1) -> (   (hgrant0=1) <-> (X(hmaster0=0) * X(hmaster1=0) * X(hmaster2=0) * X(hmaster3=0))  ) );
assign sys_safe_err12 =  ~( ~(reg_i_hready) | ( ~reg_controllable_nhgrant0 ^~ ( ~(controllable_hmaster0) & ~(controllable_hmaster1) & ~(controllable_hmaster2) & ~(controllable_hmaster3) ) ) );

// G( (hready=1) -> (   (hgrant1=1) <-> (X(hmaster0=1) * X(hmaster1=0) * X(hmaster2=0) * X(hmaster3=0))  ) );
assign sys_safe_err13 =  ~( ~(reg_i_hready) | ( reg_controllable_hgrant1 ^~ ( controllable_hmaster0 & ~(controllable_hmaster1) & ~(controllable_hmaster2) & ~(controllable_hmaster3) ) ) );

// G( (hready=1) -> (   (hgrant2=1) <-> (X(hmaster0=0) * X(hmaster1=1) * X(hmaster2=0) * X(hmaster3=0))  ) );
assign sys_safe_err14 =  ~( ~(reg_i_hready) | ( reg_controllable_hgrant2 ^~ ( ~(controllable_hmaster0) & controllable_hmaster1 & ~(controllable_hmaster2) & ~(controllable_hmaster3) ) ) );

// G( (hready=1) -> (   (hgrant3=1) <-> (X(hmaster0=1) * X(hmaster1=1) * X(hmaster2=0) * X(hmaster3=0))  ) );
assign sys_safe_err15 =  ~( ~(reg_i_hready) | ( reg_controllable_hgrant3 ^~ ( controllable_hmaster0 & controllable_hmaster1 & ~(controllable_hmaster2) & ~(controllable_hmaster3) ) ) );

// G( (hready=1) -> (   (hgrant4=1) <-> (X(hmaster0=0) * X(hmaster1=0) * X(hmaster2=1) * X(hmaster3=0))  ) );
assign sys_safe_err16 =  ~( ~(reg_i_hready) | ( reg_controllable_hgrant4 ^~ ( ~(controllable_hmaster0) & ~(controllable_hmaster1) & controllable_hmaster2 & ~(controllable_hmaster3) ) ) );

// G( (hready=1) -> (   (hgrant5=1) <-> (X(hmaster0=1) * X(hmaster1=0) * X(hmaster2=1) * X(hmaster3=0))  ) );
assign sys_safe_err17 =  ~( ~(reg_i_hready) | ( reg_controllable_hgrant5 ^~ ( controllable_hmaster0 & ~(controllable_hmaster1) & controllable_hmaster2 & ~(controllable_hmaster3) ) ) );

// G( (hready=1) -> (   (hgrant6=1) <-> (X(hmaster0=0) * X(hmaster1=1) * X(hmaster2=1) * X(hmaster3=0))  ) );
assign sys_safe_err18 =  ~( ~(reg_i_hready) | ( reg_controllable_hgrant6 ^~ ( ~(controllable_hmaster0) & controllable_hmaster1 & controllable_hmaster2 & ~(controllable_hmaster3) ) ) );

// G( (hready=1) -> (   (hgrant7=1) <-> (X(hmaster0=1) * X(hmaster1=1) * X(hmaster2=1) * X(hmaster3=0))  ) );
assign sys_safe_err19 =  ~( ~(reg_i_hready) | ( reg_controllable_hgrant7 ^~ ( controllable_hmaster0 & controllable_hmaster1 & controllable_hmaster2 & ~(controllable_hmaster3) ) ) );

// G( (hready=1) -> (   (hgrant8=1) <-> (X(hmaster0=0) * X(hmaster1=0) * X(hmaster2=0) * X(hmaster3=1))  ) );
assign sys_safe_err20 =  ~( ~(reg_i_hready) | ( reg_controllable_hgrant8 ^~ ( ~(controllable_hmaster0) & ~(controllable_hmaster1) & ~(controllable_hmaster2) & controllable_hmaster3 ) ) );

// HMASTLOCK:
// G(  (hready=1) -> (locked=0 <-> X(hmastlock=0) ) );
assign sys_safe_err21 =  ~( ~(reg_i_hready) | (~reg_controllable_locked ^~ ~controllable_hmastlock) );

// Master 0:
// G( X(start=0) -> ( ((hmaster0=0) * (hmaster1=0) * (hmaster2=0) * (hmaster3=0)) <-> (X(hmaster0=0) * X(hmaster1=0) * X(hmaster2=0) * X(hmaster3=0)) ) );
assign sys_safe_err22 =  ~( ~(controllable_nstart) | ( ( ~(reg_controllable_hmaster0) & ~(reg_controllable_hmaster1) & ~(reg_controllable_hmaster2) & ~(reg_controllable_hmaster3) ) ^~ ( ~(controllable_hmaster0) & ~(controllable_hmaster1) & ~(controllable_hmaster2) & ~(controllable_hmaster3) )) );

// Master 1:
// G( X(start=0) -> ( ((hmaster0=1) * (hmaster1=0) * (hmaster2=0) * (hmaster3=0)) <-> (X(hmaster0=1) * X(hmaster1=0) * X(hmaster2=0) * X(hmaster3=0)) ) );
assign sys_safe_err23 =  ~( ~(controllable_nstart) | ( ( reg_controllable_hmaster0 & ~(reg_controllable_hmaster1) & ~(reg_controllable_hmaster2) & ~(reg_controllable_hmaster3) ) ^~ ( controllable_hmaster0 & ~(controllable_hmaster1) & ~(controllable_hmaster2) & ~(controllable_hmaster3) )) );

// Master 2:
// G( X(start=0) -> ( ((hmaster0=0) * (hmaster1=1) * (hmaster2=0) * (hmaster3=0)) <-> (X(hmaster0=0) * X(hmaster1=1) * X(hmaster2=0) * X(hmaster3=0)) ) );
assign sys_safe_err24 =  ~( ~(controllable_nstart) | ( ( ~(reg_controllable_hmaster0) & reg_controllable_hmaster1 & ~(reg_controllable_hmaster2) & ~(reg_controllable_hmaster3) ) ^~ ( ~(controllable_hmaster0) & controllable_hmaster1 & ~(controllable_hmaster2) & ~(controllable_hmaster3) )) );

// Master 3:
// G( X(start=0) -> ( ((hmaster0=1) * (hmaster1=1) * (hmaster2=0) * (hmaster3=0)) <-> (X(hmaster0=1) * X(hmaster1=1) * X(hmaster2=0) * X(hmaster3=0)) ) );
assign sys_safe_err25 =  ~( ~(controllable_nstart) | ( ( reg_controllable_hmaster0 & reg_controllable_hmaster1 & ~(reg_controllable_hmaster2) & ~(reg_controllable_hmaster3) ) ^~ ( controllable_hmaster0 & controllable_hmaster1 & ~(controllable_hmaster2) & ~(controllable_hmaster3) )) );

// Master 4:
// G( X(start=0) -> ( ((hmaster0=0) * (hmaster1=0) * (hmaster2=1) * (hmaster3=0)) <-> (X(hmaster0=0) * X(hmaster1=0) * X(hmaster2=1) * X(hmaster3=0)) ) );
assign sys_safe_err26 =  ~( ~(controllable_nstart) | ( ( ~(reg_controllable_hmaster0) & ~(reg_controllable_hmaster1) & reg_controllable_hmaster2 & ~(reg_controllable_hmaster3) ) ^~ ( ~(controllable_hmaster0) & ~(controllable_hmaster1) & controllable_hmaster2 & ~(controllable_hmaster3) )) );

// Master 5:
// G( X(start=0) -> ( ((hmaster0=1) * (hmaster1=0) * (hmaster2=1) * (hmaster3=0)) <-> (X(hmaster0=1) * X(hmaster1=0) * X(hmaster2=1) * X(hmaster3=0)) ) );
assign sys_safe_err27 =  ~( ~(controllable_nstart) | ( ( reg_controllable_hmaster0 & ~(reg_controllable_hmaster1) & reg_controllable_hmaster2 & ~(reg_controllable_hmaster3) ) ^~ ( controllable_hmaster0 & ~(controllable_hmaster1) & controllable_hmaster2 & ~(controllable_hmaster3) )) );

// Master 6:
// G( X(start=0) -> ( ((hmaster0=0) * (hmaster1=1) * (hmaster2=1) * (hmaster3=0)) <-> (X(hmaster0=0) * X(hmaster1=1) * X(hmaster2=1) * X(hmaster3=0)) ) );
assign sys_safe_err28 =  ~( ~(controllable_nstart) | ( ( ~(reg_controllable_hmaster0) & reg_controllable_hmaster1 & reg_controllable_hmaster2 & ~(reg_controllable_hmaster3) ) ^~ ( ~(controllable_hmaster0) & controllable_hmaster1 & controllable_hmaster2 & ~(controllable_hmaster3) )) );

// Master 7:
// G( X(start=0) -> ( ((hmaster0=1) * (hmaster1=1) * (hmaster2=1) * (hmaster3=0)) <-> (X(hmaster0=1) * X(hmaster1=1) * X(hmaster2=1) * X(hmaster3=0)) ) );
assign sys_safe_err29 =  ~( ~(controllable_nstart) | ( ( reg_controllable_hmaster0 & reg_controllable_hmaster1 & reg_controllable_hmaster2 & ~(reg_controllable_hmaster3) ) ^~ ( controllable_hmaster0 & controllable_hmaster1 & controllable_hmaster2 & ~(controllable_hmaster3) )) );

// Master 8:
// G( X(start=0) -> ( ((hmaster0=0) * (hmaster1=0) * (hmaster2=0) * (hmaster3=1)) <-> (X(hmaster0=0) * X(hmaster1=0) * X(hmaster2=0) * X(hmaster3=1)) ) );
assign sys_safe_err30 =  ~( ~(controllable_nstart) | ( ( ~(reg_controllable_hmaster0) & ~(reg_controllable_hmaster1) & ~(reg_controllable_hmaster2) & reg_controllable_hmaster3 ) ^~ ( ~(controllable_hmaster0) & ~(controllable_hmaster1) & ~(controllable_hmaster2) & controllable_hmaster3 )) );

// Guarantee 6.2:
// G( ((X(start=0))) -> ( (hmastlock=1) <-> X(hmastlock=1)) );
assign sys_safe_err31 =  ~( ~(controllable_nstart) | ( reg_controllable_hmastlock ^~ controllable_hmastlock) );

// G( (decide=1  *  hlock0=1  *  X(hgrant0=1) )->X(locked=1));
assign sys_safe_err32 =  ~( ~(~reg_controllable_ndecide & reg_i_hlock0 & ~controllable_nhgrant0) | (controllable_locked) );

// G((decide=1  *  hlock0=0  *  X(hgrant0=1))->X(locked=0));
assign sys_safe_err33 =  ~( ~(~reg_controllable_ndecide & ~reg_i_hlock0 & ~controllable_nhgrant0) | (~controllable_locked) );

// G( (decide=1  *  hlock1=1  *  X(hgrant1=1) )->X(locked=1));
assign sys_safe_err34 =  ~( ~(~reg_controllable_ndecide & reg_i_hlock1 & controllable_hgrant1) | (controllable_locked) );

// G((decide=1  *  hlock1=0  *  X(hgrant1=1))->X(locked=0));
assign sys_safe_err35 =  ~( ~(~reg_controllable_ndecide & ~reg_i_hlock1 & controllable_hgrant1) | (~controllable_locked) );

// G( (decide=1  *  hlock2=1  *  X(hgrant2=1) )->X(locked=1));
assign sys_safe_err36 =  ~( ~(~reg_controllable_ndecide & reg_i_hlock2 & controllable_hgrant2) | (controllable_locked) );

// G((decide=1  *  hlock2=0  *  X(hgrant2=1))->X(locked=0));
assign sys_safe_err37 =  ~( ~(~reg_controllable_ndecide & ~reg_i_hlock2 & controllable_hgrant2) | (~controllable_locked) );

// G( (decide=1  *  hlock3=1  *  X(hgrant3=1) )->X(locked=1));
assign sys_safe_err38 =  ~( ~(~reg_controllable_ndecide & reg_i_hlock3 & controllable_hgrant3) | (controllable_locked) );

// G((decide=1  *  hlock3=0  *  X(hgrant3=1))->X(locked=0));
assign sys_safe_err39 =  ~( ~(~reg_controllable_ndecide & ~reg_i_hlock3 & controllable_hgrant3) | (~controllable_locked) );

// G( (decide=1  *  hlock4=1  *  X(hgrant4=1) )->X(locked=1));
assign sys_safe_err40 =  ~( ~(~reg_controllable_ndecide & reg_i_hlock4 & controllable_hgrant4) | (controllable_locked) );

// G((decide=1  *  hlock4=0  *  X(hgrant4=1))->X(locked=0));
assign sys_safe_err41 =  ~( ~(~reg_controllable_ndecide & ~reg_i_hlock4 & controllable_hgrant4) | (~controllable_locked) );

// G( (decide=1  *  hlock5=1  *  X(hgrant5=1) )->X(locked=1));
assign sys_safe_err42 =  ~( ~(~reg_controllable_ndecide & reg_i_hlock5 & controllable_hgrant5) | (controllable_locked) );

// G((decide=1  *  hlock5=0  *  X(hgrant5=1))->X(locked=0));
assign sys_safe_err43 =  ~( ~(~reg_controllable_ndecide & ~reg_i_hlock5 & controllable_hgrant5) | (~controllable_locked) );

// G( (decide=1  *  hlock6=1  *  X(hgrant6=1) )->X(locked=1));
assign sys_safe_err44 =  ~( ~(~reg_controllable_ndecide & reg_i_hlock6 & controllable_hgrant6) | (controllable_locked) );

// G((decide=1  *  hlock6=0  *  X(hgrant6=1))->X(locked=0));
assign sys_safe_err45 =  ~( ~(~reg_controllable_ndecide & ~reg_i_hlock6 & controllable_hgrant6) | (~controllable_locked) );

// G( (decide=1  *  hlock7=1  *  X(hgrant7=1) )->X(locked=1));
assign sys_safe_err46 =  ~( ~(~reg_controllable_ndecide & reg_i_hlock7 & controllable_hgrant7) | (controllable_locked) );

// G((decide=1  *  hlock7=0  *  X(hgrant7=1))->X(locked=0));
assign sys_safe_err47 =  ~( ~(~reg_controllable_ndecide & ~reg_i_hlock7 & controllable_hgrant7) | (~controllable_locked) );

// G( (decide=1  *  hlock8=1  *  X(hgrant8=1) )->X(locked=1));
assign sys_safe_err48 =  ~( ~(~reg_controllable_ndecide & reg_i_hlock8 & controllable_hgrant8) | (controllable_locked) );

// G((decide=1  *  hlock8=0  *  X(hgrant8=1))->X(locked=0));
assign sys_safe_err49 =  ~( ~(~reg_controllable_ndecide & ~reg_i_hlock8 & controllable_hgrant8) | (~controllable_locked) );

// G( (decide=0) -> (  ((hgrant0=0)<->X(hgrant0=0))  ));
assign sys_safe_err50 =  ~( ~(reg_controllable_ndecide) | (reg_controllable_nhgrant0 ^~ controllable_nhgrant0) );

// G( (decide=0) -> (  ((hgrant1=0)<->X(hgrant1=0))  ));
assign sys_safe_err51 =  ~( ~(reg_controllable_ndecide) | (~reg_controllable_hgrant1 ^~ ~controllable_hgrant1) );

// G( (decide=0) -> (  ((hgrant2=0)<->X(hgrant2=0))  ));
assign sys_safe_err52 =  ~( ~(reg_controllable_ndecide) | (~reg_controllable_hgrant2 ^~ ~controllable_hgrant2) );

// G( (decide=0) -> (  ((hgrant3=0)<->X(hgrant3=0))  ));
assign sys_safe_err53 =  ~( ~(reg_controllable_ndecide) | (~reg_controllable_hgrant3 ^~ ~controllable_hgrant3) );

// G( (decide=0) -> (  ((hgrant4=0)<->X(hgrant4=0))  ));
assign sys_safe_err54 =  ~( ~(reg_controllable_ndecide) | (~reg_controllable_hgrant4 ^~ ~controllable_hgrant4) );

// G( (decide=0) -> (  ((hgrant5=0)<->X(hgrant5=0))  ));
assign sys_safe_err55 =  ~( ~(reg_controllable_ndecide) | (~reg_controllable_hgrant5 ^~ ~controllable_hgrant5) );

// G( (decide=0) -> (  ((hgrant6=0)<->X(hgrant6=0))  ));
assign sys_safe_err56 =  ~( ~(reg_controllable_ndecide) | (~reg_controllable_hgrant6 ^~ ~controllable_hgrant6) );

// G( (decide=0) -> (  ((hgrant7=0)<->X(hgrant7=0))  ));
assign sys_safe_err57 =  ~( ~(reg_controllable_ndecide) | (~reg_controllable_hgrant7 ^~ ~controllable_hgrant7) );

// G( (decide=0) -> (  ((hgrant8=0)<->X(hgrant8=0))  ));
assign sys_safe_err58 =  ~( ~(reg_controllable_ndecide) | (~reg_controllable_hgrant8 ^~ ~controllable_hgrant8) );

// G((decide=0)->(locked=0 <-> X(locked=0)));
assign sys_safe_err59 =  ~( ~(reg_controllable_ndecide) | (~reg_controllable_locked ^~ ~controllable_locked) );

// G(((stateG10_1=1) * (((hgrant1=1)) * (hbusreq1=0)))->FALSE);
assign sys_safe_err60 =  ~( ~(reg_stateG10_1 & (controllable_hgrant1 & ~i_hbusreq1)) | 0 );

// G(((stateG10_2=1) * (((hgrant2=1)) * (hbusreq2=0)))->FALSE);
assign sys_safe_err61 =  ~( ~(reg_stateG10_2 & (controllable_hgrant2 & ~i_hbusreq2)) | 0 );

// G(((stateG10_3=1) * (((hgrant3=1)) * (hbusreq3=0)))->FALSE);
assign sys_safe_err62 =  ~( ~(reg_stateG10_3 & (controllable_hgrant3 & ~i_hbusreq3)) | 0 );

// G(((stateG10_4=1) * (((hgrant4=1)) * (hbusreq4=0)))->FALSE);
assign sys_safe_err63 =  ~( ~(reg_stateG10_4 & (controllable_hgrant4 & ~i_hbusreq4)) | 0 );

// G(((stateG10_5=1) * (((hgrant5=1)) * (hbusreq5=0)))->FALSE);
assign sys_safe_err64 =  ~( ~(reg_stateG10_5 & (controllable_hgrant5 & ~i_hbusreq5)) | 0 );

// G(((stateG10_6=1) * (((hgrant6=1)) * (hbusreq6=0)))->FALSE);
assign sys_safe_err65 =  ~( ~(reg_stateG10_6 & (controllable_hgrant6 & ~i_hbusreq6)) | 0 );

// G(((stateG10_7=1) * (((hgrant7=1)) * (hbusreq7=0)))->FALSE);
assign sys_safe_err66 =  ~( ~(reg_stateG10_7 & (controllable_hgrant7 & ~i_hbusreq7)) | 0 );

// G(((stateG10_8=1) * (((hgrant8=1)) * (hbusreq8=0)))->FALSE);
assign sys_safe_err67 =  ~( ~(reg_stateG10_8 & (controllable_hgrant8 & ~i_hbusreq8)) | 0 );

// default master
// G((decide=1  *  hbusreq0=0  *  hbusreq1=0  *  hbusreq2=0  *  hbusreq3=0  *  hbusreq4=0  *  hbusreq5=0  *  hbusreq6=0  *  hbusreq7=0  *  hbusreq8=0) -> X(hgrant0=1));
assign sys_safe_err68 =  ~( ~(~reg_controllable_ndecide & (~reg_i_hbusreq0 & ~reg_i_hbusreq1 & ~reg_i_hbusreq2 & ~reg_i_hbusreq3 & ~reg_i_hbusreq4 & ~reg_i_hbusreq5 & ~reg_i_hbusreq6 & ~reg_i_hbusreq7 & ~reg_i_hbusreq8)) | (~controllable_nhgrant0) );

// collecting together the safety error bits:
assign sys_safe_err = sys_safe_err0 |
                      sys_safe_err1 |
                      sys_safe_err2 |
                      sys_safe_err3 |
                      sys_safe_err4 |
                      sys_safe_err5 |
                      sys_safe_err6 |
                      sys_safe_err7 |
                      sys_safe_err8 |
                      sys_safe_err9 |
                      sys_safe_err10 |
                      sys_safe_err11 |
                      sys_safe_err12 |
                      sys_safe_err13 |
                      sys_safe_err14 |
                      sys_safe_err15 |
                      sys_safe_err16 |
                      sys_safe_err17 |
                      sys_safe_err18 |
                      sys_safe_err19 |
                      sys_safe_err20 |
                      sys_safe_err21 |
                      sys_safe_err22 |
                      sys_safe_err23 |
                      sys_safe_err24 |
                      sys_safe_err25 |
                      sys_safe_err26 |
                      sys_safe_err27 |
                      sys_safe_err28 |
                      sys_safe_err29 |
                      sys_safe_err30 |
                      sys_safe_err31 |
                      sys_safe_err32 |
                      sys_safe_err33 |
                      sys_safe_err34 |
                      sys_safe_err35 |
                      sys_safe_err36 |
                      sys_safe_err37 |
                      sys_safe_err38 |
                      sys_safe_err39 |
                      sys_safe_err40 |
                      sys_safe_err41 |
                      sys_safe_err42 |
                      sys_safe_err43 |
                      sys_safe_err44 |
                      sys_safe_err45 |
                      sys_safe_err46 |
                      sys_safe_err47 |
                      sys_safe_err48 |
                      sys_safe_err49 |
                      sys_safe_err50 |
                      sys_safe_err51 |
                      sys_safe_err52 |
                      sys_safe_err53 |
                      sys_safe_err54 |
                      sys_safe_err55 |
                      sys_safe_err56 |
                      sys_safe_err57 |
                      sys_safe_err58 |
                      sys_safe_err59 |
                      sys_safe_err60 |
                      sys_safe_err61 |
                      sys_safe_err62 |
                      sys_safe_err63 |
                      sys_safe_err64 |
                      sys_safe_err65 |
                      sys_safe_err66 |
                      sys_safe_err67 |
                      sys_safe_err68;

// =============================================================
//                          ENV_FAIRNESS:
// =============================================================
// Assumption 1: 
// G(F(stateA1=0));
assign env_fair0 =  ~reg_stateA1;

// Assumption 2:
// G(F(hready=1));
assign env_fair1 =  i_hready;


// =============================================================
//                          SYS_FAIRNESS:
// =============================================================
// Guarantee 2:
// G(F(stateG2=0));
assign sys_fair0 = ~reg_stateG2;

// Guarantee 3:
// G(F((stateG3_0=0)  *  (stateG3_1=0)  *  (stateG3_2=0)));
assign sys_fair1 =  (~reg_stateG3_0 & ~reg_stateG3_1 & ~reg_stateG3_2);

// G(F(((hmaster0=0) * (hmaster1=0) * (hmaster2=0) * (hmaster3=0))  |  hbusreq0=0));
assign sys_fair2 =  ( ~(controllable_hmaster0) & ~(controllable_hmaster1) & ~(controllable_hmaster2) & ~(controllable_hmaster3) ) | ~i_hbusreq0;

// G(F(((hmaster0=1) * (hmaster1=0) * (hmaster2=0) * (hmaster3=0))  |  hbusreq1=0));
assign sys_fair3 =  ( controllable_hmaster0 & ~(controllable_hmaster1) & ~(controllable_hmaster2) & ~(controllable_hmaster3) ) | ~i_hbusreq1;

// G(F(((hmaster0=0) * (hmaster1=1) * (hmaster2=0) * (hmaster3=0))  |  hbusreq2=0));
assign sys_fair4 =  ( ~(controllable_hmaster0) & controllable_hmaster1 & ~(controllable_hmaster2) & ~(controllable_hmaster3) ) | ~i_hbusreq2;

// G(F(((hmaster0=1) * (hmaster1=1) * (hmaster2=0) * (hmaster3=0))  |  hbusreq3=0));
assign sys_fair5 =  ( controllable_hmaster0 & controllable_hmaster1 & ~(controllable_hmaster2) & ~(controllable_hmaster3) ) | ~i_hbusreq3;

// G(F(((hmaster0=0) * (hmaster1=0) * (hmaster2=1) * (hmaster3=0))  |  hbusreq4=0));
assign sys_fair6 =  ( ~(controllable_hmaster0) & ~(controllable_hmaster1) & controllable_hmaster2 & ~(controllable_hmaster3) ) | ~i_hbusreq4;

// G(F(((hmaster0=1) * (hmaster1=0) * (hmaster2=1) * (hmaster3=0))  |  hbusreq5=0));
assign sys_fair7 =  ( controllable_hmaster0 & ~(controllable_hmaster1) & controllable_hmaster2 & ~(controllable_hmaster3) ) | ~i_hbusreq5;

// G(F(((hmaster0=0) * (hmaster1=1) * (hmaster2=1) * (hmaster3=0))  |  hbusreq6=0));
assign sys_fair8 =  ( ~(controllable_hmaster0) & controllable_hmaster1 & controllable_hmaster2 & ~(controllable_hmaster3) ) | ~i_hbusreq6;

// G(F(((hmaster0=1) * (hmaster1=1) * (hmaster2=1) * (hmaster3=0))  |  hbusreq7=0));
assign sys_fair9 =  ( controllable_hmaster0 & controllable_hmaster1 & controllable_hmaster2 & ~(controllable_hmaster3) ) | ~i_hbusreq7;

// G(F(((hmaster0=0) * (hmaster1=0) * (hmaster2=0) * (hmaster3=1))  |  hbusreq8=0));
assign sys_fair10 =  ( ~(controllable_hmaster0) & ~(controllable_hmaster1) & ~(controllable_hmaster2) & controllable_hmaster3 ) | ~i_hbusreq8;

assign fair_err = (fair_cnt >= 5'b11110);

// computing the error output bit:
assign o_err = ~env_safe_err & ~env_safe_err_happened & (sys_safe_err | fair_err);

initial
 begin
  reg_i_hready = 0;
  reg_i_hbusreq0 = 0;
  reg_i_hlock0 = 0;
  reg_i_hbusreq1 = 0;
  reg_i_hlock1 = 0;
  reg_i_hbusreq2 = 0;
  reg_i_hlock2 = 0;
  reg_i_hbusreq3 = 0;
  reg_i_hlock3 = 0;
  reg_i_hbusreq4 = 0;
  reg_i_hlock4 = 0;
  reg_i_hbusreq5 = 0;
  reg_i_hlock5 = 0;
  reg_i_hbusreq6 = 0;
  reg_i_hlock6 = 0;
  reg_i_hbusreq7 = 0;
  reg_i_hlock7 = 0;
  reg_i_hbusreq8 = 0;
  reg_i_hlock8 = 0;
  reg_controllable_hmaster0 = 0;
  reg_controllable_hmaster1 = 0;
  reg_controllable_hmaster2 = 0;
  reg_controllable_hmaster3 = 0;
  reg_controllable_hmastlock = 0;
  reg_controllable_nstart = 0;
  reg_controllable_ndecide = 0;
  reg_controllable_locked = 0;
  reg_controllable_nhgrant0 = 0;
  reg_controllable_hgrant1 = 0;
  reg_controllable_hgrant2 = 0;
  reg_controllable_hgrant3 = 0;
  reg_controllable_hgrant4 = 0;
  reg_controllable_hgrant5 = 0;
  reg_controllable_hgrant6 = 0;
  reg_controllable_hgrant7 = 0;
  reg_controllable_hgrant8 = 0;
  reg_controllable_busreq = 0;
  reg_stateA1 = 0;
  reg_stateG2 = 0;
  reg_stateG3_0 = 0;
  reg_stateG3_1 = 0;
  reg_stateG3_2 = 0;
  reg_stateG10_1 = 0;
  reg_stateG10_2 = 0;
  reg_stateG10_3 = 0;
  reg_stateG10_4 = 0;
  reg_stateG10_5 = 0;
  reg_stateG10_6 = 0;
  reg_stateG10_7 = 0;
  reg_stateG10_8 = 0;
  env_safe_err_happened = 0;
  next_env_fair = 0;
  fair_cnt = 0;
  next_sys_fair = 0;
 end


always @(posedge i_clk)
 begin
   // We remember if an environment error occurred:
   env_safe_err_happened = env_safe_err_happened | env_safe_err;

   // Updating the fairness counters: 
   if((next_sys_fair == 0) & sys_fair0)
    begin
      next_sys_fair = 1;
      next_env_fair = 0;
      fair_cnt = 0;
    end
   else if((next_sys_fair == 1) & sys_fair1)
    begin
      next_sys_fair = 2;
      next_env_fair = 0;
      fair_cnt = 0;
    end
   else if((next_sys_fair == 2) & sys_fair2)
    begin
      next_sys_fair = 3;
      next_env_fair = 0;
      fair_cnt = 0;
    end
   else if((next_sys_fair == 3) & sys_fair3)
    begin
      next_sys_fair = 4;
      next_env_fair = 0;
      fair_cnt = 0;
    end
   else if((next_sys_fair == 4) & sys_fair4)
    begin
      next_sys_fair = 5;
      next_env_fair = 0;
      fair_cnt = 0;
    end
   else if((next_sys_fair == 5) & sys_fair5)
    begin
      next_sys_fair = 6;
      next_env_fair = 0;
      fair_cnt = 0;
    end
   else if((next_sys_fair == 6) & sys_fair6)
    begin
      next_sys_fair = 7;
      next_env_fair = 0;
      fair_cnt = 0;
    end
   else if((next_sys_fair == 7) & sys_fair7)
    begin
      next_sys_fair = 8;
      next_env_fair = 0;
      fair_cnt = 0;
    end
   else if((next_sys_fair == 8) & sys_fair8)
    begin
      next_sys_fair = 9;
      next_env_fair = 0;
      fair_cnt = 0;
    end
   else if((next_sys_fair == 9) & sys_fair9)
    begin
      next_sys_fair = 10;
      next_env_fair = 0;
      fair_cnt = 0;
    end
   else if((next_sys_fair == 10) & sys_fair10)
    begin
      next_sys_fair = 0;
      next_env_fair = 0;
      fair_cnt = 0;
    end
   else if(~next_env_fair & env_fair0)
    begin
      next_env_fair = 1;
    end
   else if(next_env_fair & env_fair1)
    begin
      next_env_fair = 0;
      fair_cnt = fair_cnt + 1;
    end

   // Updating the automata: 
   // Automaton A1: 
   if(~reg_stateA1 & controllable_hmastlock & ~i_hburst0 & ~i_hburst1)
    begin
      reg_stateA1 = 1'b1;
    end
   else if(reg_stateA1 & ~controllable_busreq)
    begin
      reg_stateA1 = 1'b0;
    end

   // Automaton G2: 
   if(~reg_stateG2)
    begin
      if(controllable_hmastlock & ~controllable_nstart & ~i_hburst0 & ~i_hburst1)
       begin
         reg_stateG2 = 1'b1;
       end
    end
   else // if(reg_stateG2)
    begin
      if(~controllable_busreq)
       begin
         reg_stateG2 = 1'b0;
       end
    end

   // Automaton G3: 
   if(~reg_stateG3_0 & ~reg_stateG3_1 & ~reg_stateG3_2 & controllable_hmastlock & ~controllable_nstart &  ~i_hburst0 & i_hburst1 & ~i_hready)
    begin
      reg_stateG3_0 = 1'b1;
      reg_stateG3_1 = 1'b0;
      reg_stateG3_2 = 1'b0;
    end
   else if(~reg_stateG3_0 & ~reg_stateG3_1 & ~reg_stateG3_2 & controllable_hmastlock & ~controllable_nstart &  ~i_hburst0 & i_hburst1 & i_hready)
    begin
      reg_stateG3_0 = 1'b0;
      reg_stateG3_1 = 1'b1;
      reg_stateG3_2 = 1'b0;
    end
   else if(reg_stateG3_0 & ~reg_stateG3_1 & ~reg_stateG3_2 & i_hready)
    begin
      reg_stateG3_0 = 1'b0;
      reg_stateG3_1 = 1'b1;
      reg_stateG3_2 = 1'b0;
    end
   else if(~reg_stateG3_0 & reg_stateG3_1 & ~reg_stateG3_2 & i_hready)
    begin
      reg_stateG3_0 = 1'b1;
      reg_stateG3_1 = 1'b1;
      reg_stateG3_2 = 1'b0;
    end
   else if(reg_stateG3_0 & reg_stateG3_1 & ~reg_stateG3_2 & i_hready)
    begin
      reg_stateG3_0 = 1'b0;
      reg_stateG3_1 = 1'b0;
      reg_stateG3_2 = 1'b1;
    end
   else if(~reg_stateG3_0 & ~reg_stateG3_1 & reg_stateG3_2 & i_hready)
    begin
      reg_stateG3_0 = 1'b0;
      reg_stateG3_1 = 1'b0;
      reg_stateG3_2 = 1'b0;
    end

   // Automaton G10_1: 
   if(~reg_stateG10_1 & ~controllable_hgrant1 & ~i_hbusreq1)
    begin
      reg_stateG10_1 = 1'b1;
    end
   else if(reg_stateG10_1 & i_hbusreq1)
    begin
      reg_stateG10_1 = 1'b0;
    end

   // Automaton G10_2: 
   if(~reg_stateG10_2 & ~controllable_hgrant2 & ~i_hbusreq2)
    begin
      reg_stateG10_2 = 1'b1;
    end
   else if(reg_stateG10_2 & i_hbusreq2)
    begin
      reg_stateG10_2 = 1'b0;
    end

   // Automaton G10_3: 
   if(~reg_stateG10_3 & ~controllable_hgrant3 & ~i_hbusreq3)
    begin
      reg_stateG10_3 = 1'b1;
    end
   else if(reg_stateG10_3 & i_hbusreq3)
    begin
      reg_stateG10_3 = 1'b0;
    end

   // Automaton G10_4: 
   if(~reg_stateG10_4 & ~controllable_hgrant4 & ~i_hbusreq4)
    begin
      reg_stateG10_4 = 1'b1;
    end
   else if(reg_stateG10_4 & i_hbusreq4)
    begin
      reg_stateG10_4 = 1'b0;
    end

   // Automaton G10_5: 
   if(~reg_stateG10_5 & ~controllable_hgrant5 & ~i_hbusreq5)
    begin
      reg_stateG10_5 = 1'b1;
    end
   else if(reg_stateG10_5 & i_hbusreq5)
    begin
      reg_stateG10_5 = 1'b0;
    end

   // Automaton G10_6: 
   if(~reg_stateG10_6 & ~controllable_hgrant6 & ~i_hbusreq6)
    begin
      reg_stateG10_6 = 1'b1;
    end
   else if(reg_stateG10_6 & i_hbusreq6)
    begin
      reg_stateG10_6 = 1'b0;
    end

   // Automaton G10_7: 
   if(~reg_stateG10_7 & ~controllable_hgrant7 & ~i_hbusreq7)
    begin
      reg_stateG10_7 = 1'b1;
    end
   else if(reg_stateG10_7 & i_hbusreq7)
    begin
      reg_stateG10_7 = 1'b0;
    end

   // Automaton G10_8: 
   if(~reg_stateG10_8 & ~controllable_hgrant8 & ~i_hbusreq8)
    begin
      reg_stateG10_8 = 1'b1;
    end
   else if(reg_stateG10_8 & i_hbusreq8)
    begin
      reg_stateG10_8 = 1'b0;
    end

   // Latching the previous input:
   reg_i_hready =  i_hready;
   reg_i_hbusreq0 =  i_hbusreq0;
   reg_i_hlock0 =  i_hlock0;
   reg_i_hbusreq1 =  i_hbusreq1;
   reg_i_hlock1 =  i_hlock1;
   reg_i_hbusreq2 =  i_hbusreq2;
   reg_i_hlock2 =  i_hlock2;
   reg_i_hbusreq3 =  i_hbusreq3;
   reg_i_hlock3 =  i_hlock3;
   reg_i_hbusreq4 =  i_hbusreq4;
   reg_i_hlock4 =  i_hlock4;
   reg_i_hbusreq5 =  i_hbusreq5;
   reg_i_hlock5 =  i_hlock5;
   reg_i_hbusreq6 =  i_hbusreq6;
   reg_i_hlock6 =  i_hlock6;
   reg_i_hbusreq7 =  i_hbusreq7;
   reg_i_hlock7 =  i_hlock7;
   reg_i_hbusreq8 =  i_hbusreq8;
   reg_i_hlock8 =  i_hlock8;
   reg_controllable_hmaster0 =  controllable_hmaster0;
   reg_controllable_hmaster1 =  controllable_hmaster1;
   reg_controllable_hmaster2 =  controllable_hmaster2;
   reg_controllable_hmaster3 =  controllable_hmaster3;
   reg_controllable_hmastlock =  controllable_hmastlock;
   reg_controllable_nstart =  controllable_nstart;
   reg_controllable_ndecide =  controllable_ndecide;
   reg_controllable_locked =  controllable_locked;
   reg_controllable_nhgrant0 =  controllable_nhgrant0;
   reg_controllable_hgrant1 =  controllable_hgrant1;
   reg_controllable_hgrant2 =  controllable_hgrant2;
   reg_controllable_hgrant3 =  controllable_hgrant3;
   reg_controllable_hgrant4 =  controllable_hgrant4;
   reg_controllable_hgrant5 =  controllable_hgrant5;
   reg_controllable_hgrant6 =  controllable_hgrant6;
   reg_controllable_hgrant7 =  controllable_hgrant7;
   reg_controllable_hgrant8 =  controllable_hgrant8;
   reg_controllable_busreq =  controllable_busreq;

 end
endmodule

-------------------------------
#!SYNTCOMP
STATUS : realizable
SOLVED_BY : 3/3 [2015-pre-classification]
SOLVED_IN : 34.6047 [2015-pre-classification]
#.
