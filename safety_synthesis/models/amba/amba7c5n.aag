aag 900 32 52 1 816
2
4
6
8
10
12
14
16
18
20
22
24
26
28
30
32
34
36
38
40
42
44
46
48
50
52
54
56
58
60
62
64
66 1
68 10
70 1017
72 56
74 60
76 14
78 1239
80 58
82 18
84 1323
86 32
88 22
90 1347
92 6
94 50
96 30
98 26
100 1367
102 34
104 28
106 8
108 42
110 24
112 1397
114 1419
116 44
118 20
120 64
122 1441
124 2
126 46
128 1465
130 16
132 1577
134 1583
136 1589
138 1711
140 1717
142 1723
144 1729
146 1735
148 1757
150 48
152 12
154 36
156 201
158 1779
160 52
162 4
164 1801
166 54
168 62
994
170 43 12
172 45 16
174 173 171
176 47 20
178 177 174
180 49 24
182 181 178
184 53 28
186 185 182
188 55 30
190 189 186
192 57 32
194 193 190
196 157 66
198 197 66
200 199 194
202 63 61
204 202 59
206 42 35
208 43 34
210 209 207
212 211 204
214 62 61
216 214 59
218 44 35
220 45 34
222 221 219
224 223 216
226 225 213
228 63 60
230 228 59
232 46 35
234 47 34
236 235 233
238 237 230
240 239 226
242 62 60
244 242 59
246 48 35
248 49 34
250 249 247
252 251 244
254 253 240
256 202 58
258 52 35
260 53 34
262 261 259
264 263 256
266 265 254
268 214 58
270 54 35
272 55 34
274 273 271
276 275 268
278 277 266
280 228 58
282 56 35
284 57 34
286 285 283
288 287 280
290 289 278
292 155 66
294 154 66
296 293 66
298 297 9
300 299 290
302 113 66
304 112 66
306 303 66
308 304 9
310 309 300
312 85 66
314 84 66
316 313 66
318 91 66
320 90 66
322 319 66
324 323 317
326 101 66
328 100 66
330 327 66
332 331 324
334 333 9
336 335 310
338 125 66
340 124 66
342 339 66
344 340 204
346 343 205
348 347 345
350 349 294
352 351 336
354 163 66
356 162 66
358 355 66
360 359 216
362 356 217
364 363 361
366 365 294
368 367 352
370 69 66
372 68 66
374 371 66
376 375 230
378 372 231
380 379 377
382 381 294
384 383 368
386 77 66
388 76 66
390 387 66
392 391 244
394 388 245
396 395 393
398 397 294
400 399 384
402 83 66
404 82 66
406 403 66
408 407 256
410 404 257
412 411 409
414 413 294
416 415 400
418 89 66
420 88 66
422 419 66
424 423 268
426 420 269
428 427 425
430 429 294
432 431 416
434 99 66
436 98 66
438 435 66
440 439 280
442 436 281
444 443 441
446 445 294
448 447 432
450 93 66
452 92 66
454 451 66
456 452 65
458 455 64
460 459 457
462 461 294
464 463 448
466 169 66
468 168 66
470 467 66
472 75 66
474 74 66
476 473 66
478 477 471
480 81 66
482 80 66
484 481 66
486 485 478
488 487 204
490 486 205
492 491 489
494 493 8
496 495 464
498 477 468
500 498 485
502 501 216
504 500 217
506 505 503
508 507 8
510 509 496
512 474 471
514 512 485
516 515 230
518 514 231
520 519 517
522 521 8
524 523 510
526 474 468
528 526 485
530 529 244
532 528 245
534 533 531
536 535 8
538 537 524
540 482 478
542 541 256
544 540 257
546 545 543
548 547 8
550 549 538
552 498 482
554 553 268
556 552 269
558 557 555
560 559 8
562 561 550
564 512 482
566 565 280
568 564 281
570 569 567
572 571 8
574 573 562
576 121 66
578 120 66
580 577 66
582 581 64
584 578 65
586 585 583
588 587 8
590 589 574
592 95 66
594 94 66
596 593 66
598 153 66
600 152 66
602 599 66
604 600 597
606 604 3
608 606 7
610 609 590
612 603 597
614 612 3
616 614 6
618 617 610
620 131 66
622 130 66
624 621 66
626 622 597
628 626 4
630 628 7
632 631 618
634 625 597
636 634 4
638 636 6
640 639 632
642 119 66
644 118 66
646 643 66
648 644 597
650 648 10
652 650 7
654 653 640
656 647 597
658 656 10
660 658 6
662 661 654
664 111 66
666 110 66
668 665 66
670 666 597
672 670 14
674 672 7
676 675 662
678 669 597
680 678 14
682 680 6
684 683 676
686 105 66
688 104 66
690 687 66
692 688 597
694 692 18
696 694 7
698 697 684
700 691 597
702 700 18
704 702 6
706 705 698
708 97 66
710 96 66
712 709 66
714 710 597
716 714 22
718 716 7
720 719 706
722 713 597
724 722 22
726 724 6
728 727 720
730 87 66
732 86 66
734 731 66
736 732 597
738 736 26
740 738 7
742 741 728
744 735 597
746 744 26
748 746 6
750 749 742
752 343 2
754 340 3
756 755 753
758 757 594
760 759 750
762 356 5
764 359 4
766 765 763
768 767 594
770 769 760
772 372 11
774 375 10
776 775 773
778 777 594
780 779 770
782 388 15
784 391 14
786 785 783
788 787 594
790 789 780
792 404 19
794 407 18
796 795 793
798 797 594
800 799 790
802 420 23
804 423 22
806 805 803
808 807 594
810 809 800
812 436 27
814 439 26
816 815 813
818 817 594
820 819 810
822 452 7
824 455 6
826 825 823
828 827 594
830 829 820
832 115 66
834 114 66
836 833 66
838 45 4
840 838 834
842 841 830
844 123 66
846 122 66
848 845 66
850 47 10
852 850 846
854 853 842
856 149 66
858 148 66
860 857 66
862 49 14
864 862 858
866 865 854
868 159 66
870 158 66
872 869 66
874 53 18
876 874 870
878 877 866
880 165 66
882 164 66
884 881 66
886 55 22
888 886 882
890 889 878
892 71 66
894 70 66
896 893 66
898 57 26
900 898 894
902 901 890
904 109 66
906 905 66
908 117 66
910 909 66
912 911 907
914 127 66
916 915 66
918 917 912
920 151 66
922 921 66
924 923 918
926 161 66
928 927 66
930 929 924
932 167 66
934 933 66
936 935 930
938 73 66
940 939 66
942 941 936
944 942 597
946 944 2
948 947 902
950 137 66
952 136 66
954 951 66
956 135 66
958 134 66
960 957 66
962 133 66
964 132 66
966 963 66
968 967 961
970 968 955
972 971 954
974 972 969
976 966 958
978 977 969
980 969 955
982 968 952
984 983 981
986 978 966
988 986 984
990 989 975
992 990 948
994 993 200
996 897 27
998 996 57
1000 894 56
1002 1000 999
1004 1003 999
1006 1001 894
1008 1006 999
1010 1009 999
1012 1011 1005
1014 1004 894
1016 1015 1013
1018 139 66
1020 138 66
1022 1019 66
1024 141 66
1026 140 66
1028 1025 66
1030 143 66
1032 142 66
1034 1031 66
1036 145 66
1038 144 66
1040 1037 66
1042 146 66
1044 1027 1021
1046 1044 1033
1048 1046 1039
1050 1048 1043
1052 1050 307
1054 1027 1022
1056 1054 1033
1058 1056 1039
1060 1058 1043
1062 1060 332
1064 1028 1021
1066 1064 1033
1068 1066 1039
1070 1068 1043
1072 205 42
1074 1073 1070
1076 1028 1022
1078 1076 1033
1080 1078 1039
1082 1080 1043
1084 217 44
1086 1085 1082
1088 1044 1034
1090 1088 1039
1092 1090 1043
1094 231 46
1096 1095 1092
1098 1054 1034
1100 1098 1039
1102 1100 1043
1104 245 48
1106 1105 1102
1108 1064 1034
1110 1108 1039
1112 1110 1043
1114 257 52
1116 1115 1112
1118 1076 1034
1120 1118 1039
1122 1120 1043
1124 269 54
1126 1125 1122
1128 1046 1040
1130 1128 1043
1132 281 56
1134 1133 1130
1136 79 66
1138 78 66
1140 1137 66
1142 129 66
1144 128 66
1146 1143 66
1148 1147 1141
1150 1138 36
1152 1062 1053
1154 1153 1053
1156 1063 1053
1158 1156 1074
1160 1159 1154
1162 1156 1075
1164 1162 1086
1166 1165 1160
1168 1162 1087
1170 1168 1096
1172 1171 1166
1174 1168 1097
1176 1174 1106
1178 1177 1172
1180 1174 1107
1182 1180 1116
1184 1183 1178
1186 1180 1117
1188 1186 1126
1190 1189 1184
1192 1186 1127
1194 1192 1134
1196 1195 1190
1198 1192 1135
1200 1198 1148
1202 1201 1196
1204 1198 1149
1206 1204 1150
1208 1207 1202
1210 1151 1138
1212 1210 1149
1214 1213 1149
1216 1215 1135
1218 1216 1127
1220 1218 1117
1222 1220 1107
1224 1222 1097
1226 1224 1087
1228 1226 1075
1230 1228 1063
1232 1230 1053
1234 1232 1209
1236 1208 1138
1238 1237 1235
1240 332 64
1242 1240 9
1244 1242 41
1246 1244 38
1248 1246 37
1250 1246 36
1252 323 314
1254 1252 331
1256 1254 36
1258 320 317
1260 1258 331
1262 1260 36
1264 320 314
1266 1264 331
1268 1266 36
1270 328 324
1272 1270 36
1274 1250 1249
1276 1275 1249
1278 1251 1249
1280 1278 1256
1282 1281 1276
1284 1278 1257
1286 1284 1262
1288 1287 1282
1290 1284 1263
1292 1290 1268
1294 1293 1288
1296 1290 1269
1298 1296 1272
1300 1299 1294
1302 1273 314
1304 1302 1269
1306 1304 1263
1308 1307 1263
1310 1309 1257
1312 1310 1251
1314 1312 1249
1316 1315 1249
1318 1317 1301
1320 1300 314
1322 1321 1319
1324 1273 320
1326 1324 1269
1328 1326 1263
1330 1329 1263
1332 1331 1257
1334 1333 1257
1336 1335 1251
1338 1337 1251
1340 1339 1249
1342 1340 1301
1344 1300 320
1346 1345 1343
1348 1273 328
1350 1348 1269
1352 1351 1269
1354 1353 1263
1356 1354 1257
1358 1356 1251
1360 1358 1249
1362 1360 1301
1364 1300 328
1366 1365 1363
1368 64 9
1370 1368 41
1372 1370 39
1374 1372 307
1376 304 35
1378 1377 1375
1380 1373 304
1382 1381 1373
1384 304 34
1386 1383 307
1388 1384 304
1390 1389 1387
1392 1391 1379
1394 1378 304
1396 1395 1393
1398 837 5
1400 1398 45
1402 834 44
1404 1402 1401
1406 1405 1401
1408 1403 834
1410 1408 1401
1412 1411 1401
1414 1413 1407
1416 1406 834
1418 1417 1415
1420 849 11
1422 1420 47
1424 846 46
1426 1424 1423
1428 1427 1423
1430 1425 846
1432 1430 1423
1434 1433 1423
1436 1435 1429
1438 1428 846
1440 1439 1437
1442 1147 64
1444 1442 41
1446 1444 39
1448 1144 35
1450 1448 1447
1452 1451 1447
1454 1449 1144
1456 1454 1447
1458 1457 1447
1460 1459 1453
1462 1452 1144
1464 1463 1461
1466 1207 1196
1468 1150 967
1470 1151 964
1472 1471 1469
1474 1148 964
1476 1473 1149
1478 1477 1475
1480 1479 1135
1482 1480 1127
1484 1482 1117
1486 1484 1107
1488 1486 1097
1490 1488 1087
1492 1490 1075
1494 1492 1063
1496 1494 1053
1498 964 961
1500 965 958
1502 1501 1499
1504 1503 1150
1506 1151 958
1508 1507 1505
1510 1148 958
1512 1509 1149
1514 1513 1511
1516 1515 1135
1518 1516 1127
1520 1518 1117
1522 1520 1107
1524 1522 1097
1526 1524 1087
1528 1526 1075
1530 1528 1063
1532 1530 1053
1534 964 958
1536 1534 955
1538 1535 952
1540 1539 1537
1542 1541 1150
1544 1151 952
1546 1545 1543
1548 1148 952
1550 1547 1149
1552 1551 1549
1554 1553 1135
1556 1554 1127
1558 1556 1117
1560 1558 1107
1562 1560 1097
1564 1562 1087
1566 1564 1075
1568 1566 1063
1570 1568 1053
1572 1496 1467
1574 1466 964
1576 1575 1573
1578 1532 1467
1580 1466 958
1582 1581 1579
1584 1570 1467
1586 1466 952
1588 1587 1585
1590 1135 1020
1592 1590 1127
1594 1592 1117
1596 1595 1117
1598 1597 1107
1600 1598 1097
1602 1601 1097
1604 1603 1087
1606 1604 1075
1608 1607 1075
1610 1609 1063
1612 1610 1053
1614 1613 1053
1616 1135 1026
1618 1616 1127
1620 1618 1117
1622 1621 1117
1624 1623 1107
1626 1625 1107
1628 1627 1097
1630 1628 1087
1632 1630 1075
1634 1633 1075
1636 1635 1063
1638 1637 1063
1640 1639 1053
1642 1135 1032
1644 1642 1127
1646 1644 1117
1648 1647 1117
1650 1649 1107
1652 1651 1107
1654 1653 1097
1656 1655 1097
1658 1657 1087
1660 1659 1087
1662 1661 1075
1664 1662 1063
1666 1664 1053
1668 1135 1038
1670 1668 1127
1672 1671 1127
1674 1673 1117
1676 1674 1107
1678 1676 1097
1680 1678 1087
1682 1680 1075
1684 1682 1063
1686 1684 1053
1688 1135 1042
1690 1688 1127
1692 1690 1117
1694 1692 1107
1696 1694 1097
1698 1696 1087
1700 1698 1075
1702 1700 1063
1704 1702 1053
1706 1615 1197
1708 1196 1020
1710 1709 1707
1712 1640 1197
1714 1196 1026
1716 1715 1713
1718 1666 1197
1720 1196 1032
1722 1721 1719
1724 1686 1197
1726 1196 1038
1728 1727 1725
1730 1704 1197
1732 1196 1042
1734 1733 1731
1736 861 15
1738 1736 49
1740 858 48
1742 1740 1739
1744 1743 1739
1746 1741 858
1748 1746 1739
1750 1749 1739
1752 1751 1745
1754 1744 858
1756 1755 1753
1758 873 19
1760 1758 53
1762 870 52
1764 1762 1761
1766 1765 1761
1768 1763 870
1770 1768 1761
1772 1771 1761
1774 1773 1767
1776 1766 870
1778 1777 1775
1780 885 23
1782 1780 55
1784 882 54
1786 1784 1783
1788 1787 1783
1790 1785 882
1792 1790 1783
1794 1793 1783
1796 1795 1789
1798 1788 882
1800 1799 1797
i0 controllable_nhgrant0
i1 controllable_hgrant1
i2 controllable_locked
i3 controllable_nstart
i4 controllable_hgrant2
i5 i_hlock0
i6 controllable_hgrant3
i7 i_hlock1
i8 controllable_hgrant4
i9 i_hlock2
i10 controllable_hgrant5
i11 i_hlock3
i12 controllable_hgrant6
i13 i_hlock4
i14 i_hlock5
i15 i_hlock6
i16 controllable_busreq
i17 i_hready
i18 i_hburst1
i19 i_hburst0
i20 i_hbusreq0
i21 i_hbusreq1
i22 i_hbusreq2
i23 i_hbusreq3
i24 controllable_ndecide
i25 i_hbusreq4
i26 i_hbusreq5
i27 i_hbusreq6
i28 controllable_hmaster2
i29 controllable_hmaster1
i30 controllable_hmaster0
i31 controllable_hmastlock
l0 n67
l1 reg_controllable_hgrant2_out
l2 reg_stateG10_6_out
l3 reg_i_hbusreq6_out
l4 reg_controllable_hmaster1_out
l5 reg_controllable_hgrant3_out
l6 next_env_fair_out
l7 reg_controllable_hmaster2_out
l8 reg_controllable_hgrant4_out
l9 reg_stateG3_0_out
l10 reg_i_hlock6_out
l11 reg_controllable_hgrant5_out
l12 reg_stateG3_1_out
l13 reg_controllable_locked_out
l14 reg_controllable_ndecide_out
l15 reg_i_hlock5_out
l16 reg_controllable_hgrant6_out
l17 reg_stateG3_2_out
l18 reg_controllable_busreq_out
l19 reg_i_hlock4_out
l20 reg_controllable_nstart_out
l21 reg_i_hbusreq0_out
l22 reg_i_hlock3_out
l23 reg_stateG2_out
l24 reg_stateG10_1_out
l25 reg_i_hbusreq1_out
l26 reg_i_hlock2_out
l27 reg_controllable_hmastlock_out
l28 reg_stateG10_2_out
l29 reg_controllable_nhgrant0_out
l30 reg_i_hbusreq2_out
l31 reg_stateA1_out
l32 reg_i_hlock1_out
l33 fair_cnt<0>_out
l34 fair_cnt<1>_out
l35 fair_cnt<2>_out
l36 next_sys_fair<0>_out
l37 next_sys_fair<1>_out
l38 next_sys_fair<2>_out
l39 next_sys_fair<3>_out
l40 next_sys_fair<4>_out
l41 reg_stateG10_3_out
l42 reg_i_hbusreq3_out
l43 reg_i_hlock0_out
l44 reg_i_hready_out
l45 env_safe_err_happened_out
l46 reg_stateG10_4_out
l47 reg_i_hbusreq4_out
l48 reg_controllable_hgrant1_out
l49 reg_stateG10_5_out
l50 reg_i_hbusreq5_out
l51 reg_controllable_hmaster0_out
o0 o_err
c
amba_7_new_5
This file was written by ABC on Sat Aug 31 20:24:56 2013
For information about AIGER format, refer to http://fmv.jku.at/aiger
-------------------------------
This AIGER file has been created by the following sequence of commands:
> vl2mv amba7c5.v   ---gives--> amba7c5.mv
> abc -c "read_blif_mv amba7c5.mv; write_aiger -s amba7c5n.aig"   ---gives--> amba7c5n.aig
> aigtoaig amba7c5n.aig amba7c5n.aag   ---gives--> amba7c5n.aag (this file)
Content of amba7c5.v:
module amba_7_new_5(
        o_err,
        i_clk,
        i_hready,
        i_hbusreq0,
        i_hlock0,
        i_hbusreq1,
        i_hlock1,
        i_hbusreq2,
        i_hlock2,
        i_hbusreq3,
        i_hlock3,
        i_hbusreq4,
        i_hlock4,
        i_hbusreq5,
        i_hlock5,
        i_hbusreq6,
        i_hlock6,
        i_hburst0,
        i_hburst1,
        controllable_hmaster0,
        controllable_hmaster1,
        controllable_hmaster2,
        controllable_hmastlock,
        controllable_nstart,
        controllable_ndecide,
        controllable_locked,
        controllable_nhgrant0,
        controllable_hgrant1,
        controllable_hgrant2,
        controllable_hgrant3,
        controllable_hgrant4,
        controllable_hgrant5,
        controllable_hgrant6,
        controllable_busreq);

input i_clk;
input i_hready;
input i_hbusreq0;
input i_hlock0;
input i_hbusreq1;
input i_hlock1;
input i_hbusreq2;
input i_hlock2;
input i_hbusreq3;
input i_hlock3;
input i_hbusreq4;
input i_hlock4;
input i_hbusreq5;
input i_hlock5;
input i_hbusreq6;
input i_hlock6;
input i_hburst0;
input i_hburst1;
input controllable_hmaster0;
input controllable_hmaster1;
input controllable_hmaster2;
input controllable_hmastlock;
input controllable_nstart;
input controllable_ndecide;
input controllable_locked;
input controllable_nhgrant0;
input controllable_hgrant1;
input controllable_hgrant2;
input controllable_hgrant3;
input controllable_hgrant4;
input controllable_hgrant5;
input controllable_hgrant6;
input controllable_busreq;
output o_err;

reg reg_i_hready;
reg reg_i_hbusreq0;
reg reg_i_hlock0;
reg reg_i_hbusreq1;
reg reg_i_hlock1;
reg reg_i_hbusreq2;
reg reg_i_hlock2;
reg reg_i_hbusreq3;
reg reg_i_hlock3;
reg reg_i_hbusreq4;
reg reg_i_hlock4;
reg reg_i_hbusreq5;
reg reg_i_hlock5;
reg reg_i_hbusreq6;
reg reg_i_hlock6;
reg reg_controllable_hmaster0;
reg reg_controllable_hmaster1;
reg reg_controllable_hmaster2;
reg reg_controllable_hmastlock;
reg reg_controllable_nstart;
reg reg_controllable_ndecide;
reg reg_controllable_locked;
reg reg_controllable_nhgrant0;
reg reg_controllable_hgrant1;
reg reg_controllable_hgrant2;
reg reg_controllable_hgrant3;
reg reg_controllable_hgrant4;
reg reg_controllable_hgrant5;
reg reg_controllable_hgrant6;
reg reg_controllable_busreq;
reg reg_stateA1;
reg reg_stateG2;
reg reg_stateG3_0;
reg reg_stateG3_1;
reg reg_stateG3_2;
reg reg_stateG10_1;
reg reg_stateG10_2;
reg reg_stateG10_3;
reg reg_stateG10_4;
reg reg_stateG10_5;
reg reg_stateG10_6;
reg env_safe_err_happened;
reg next_env_fair;
reg [2:0] fair_cnt;
reg [4:0] next_sys_fair;

wire env_safe_err0;
wire env_safe_err1;
wire env_safe_err2;
wire env_safe_err3;
wire env_safe_err4;
wire env_safe_err5;
wire env_safe_err6;
wire env_safe_err;

wire sys_safe_err0;
wire sys_safe_err1;
wire sys_safe_err2;
wire sys_safe_err3;
wire sys_safe_err4;
wire sys_safe_err5;
wire sys_safe_err6;
wire sys_safe_err7;
wire sys_safe_err8;
wire sys_safe_err9;
wire sys_safe_err10;
wire sys_safe_err11;
wire sys_safe_err12;
wire sys_safe_err13;
wire sys_safe_err14;
wire sys_safe_err15;
wire sys_safe_err16;
wire sys_safe_err17;
wire sys_safe_err18;
wire sys_safe_err19;
wire sys_safe_err20;
wire sys_safe_err21;
wire sys_safe_err22;
wire sys_safe_err23;
wire sys_safe_err24;
wire sys_safe_err25;
wire sys_safe_err26;
wire sys_safe_err27;
wire sys_safe_err28;
wire sys_safe_err29;
wire sys_safe_err30;
wire sys_safe_err31;
wire sys_safe_err32;
wire sys_safe_err33;
wire sys_safe_err34;
wire sys_safe_err35;
wire sys_safe_err36;
wire sys_safe_err37;
wire sys_safe_err38;
wire sys_safe_err39;
wire sys_safe_err40;
wire sys_safe_err41;
wire sys_safe_err42;
wire sys_safe_err43;
wire sys_safe_err44;
wire sys_safe_err45;
wire sys_safe_err46;
wire sys_safe_err47;
wire sys_safe_err48;
wire sys_safe_err49;
wire sys_safe_err50;
wire sys_safe_err51;
wire sys_safe_err52;
wire sys_safe_err53;
wire sys_safe_err54;
wire sys_safe_err;

wire env_fair0;
wire env_fair1;

wire sys_fair0;
wire sys_fair1;
wire sys_fair2;
wire sys_fair3;
wire sys_fair4;
wire sys_fair5;
wire sys_fair6;
wire sys_fair7;
wire sys_fair8;
wire fair_err;
wire o_err;

// =============================================================
//                        ENV_TRANSITION:
// =============================================================
// Assumption 3:
// G( hlock0=1 -> hbusreq0=1 );
assign env_safe_err0 =  ~(~ i_hlock0 | i_hbusreq0);

// Assumption 3:
// G( hlock1=1 -> hbusreq1=1 );
assign env_safe_err1 =  ~(~ i_hlock1 | i_hbusreq1);

// Assumption 3:
// G( hlock2=1 -> hbusreq2=1 );
assign env_safe_err2 =  ~(~ i_hlock2 | i_hbusreq2);

// Assumption 3:
// G( hlock3=1 -> hbusreq3=1 );
assign env_safe_err3 =  ~(~ i_hlock3 | i_hbusreq3);

// Assumption 3:
// G( hlock4=1 -> hbusreq4=1 );
assign env_safe_err4 =  ~(~ i_hlock4 | i_hbusreq4);

// Assumption 3:
// G( hlock5=1 -> hbusreq5=1 );
assign env_safe_err5 =  ~(~ i_hlock5 | i_hbusreq5);

// Assumption 3:
// G( hlock6=1 -> hbusreq6=1 );
assign env_safe_err6 =  ~(~ i_hlock6 | i_hbusreq6);

// collecting together the safety error bits:
assign env_safe_err = env_safe_err0 |
                      env_safe_err1 |
                      env_safe_err2 |
                      env_safe_err3 |
                      env_safe_err4 |
                      env_safe_err5 |
                      env_safe_err6;

// =============================================================
//                        SYS_TRANSITION:
// =============================================================
// G((hmaster0=0) * (hmaster1=0) * (hmaster2=0) -> (hbusreq0=0 <-> busreq=0));
assign sys_safe_err0 =  ~( ~( ~(controllable_hmaster0) & ~(controllable_hmaster1) & ~(controllable_hmaster2) )|(~i_hbusreq0 ^~ (~controllable_busreq)));

// G((hmaster0=1) * (hmaster1=0) * (hmaster2=0) -> (hbusreq1=0 <-> busreq=0));
assign sys_safe_err1 =  ~( ~( controllable_hmaster0 & ~(controllable_hmaster1) & ~(controllable_hmaster2) )|(~i_hbusreq1 ^~ (~controllable_busreq)));

// G((hmaster0=0) * (hmaster1=1) * (hmaster2=0) -> (hbusreq2=0 <-> busreq=0));
assign sys_safe_err2 =  ~( ~( ~(controllable_hmaster0) & controllable_hmaster1 & ~(controllable_hmaster2) )|(~i_hbusreq2 ^~ (~controllable_busreq)));

// G((hmaster0=1) * (hmaster1=1) * (hmaster2=0) -> (hbusreq3=0 <-> busreq=0));
assign sys_safe_err3 =  ~( ~( controllable_hmaster0 & controllable_hmaster1 & ~(controllable_hmaster2) )|(~i_hbusreq3 ^~ (~controllable_busreq)));

// G((hmaster0=0) * (hmaster1=0) * (hmaster2=1) -> (hbusreq4=0 <-> busreq=0));
assign sys_safe_err4 =  ~( ~( ~(controllable_hmaster0) & ~(controllable_hmaster1) & controllable_hmaster2 )|(~i_hbusreq4 ^~ (~controllable_busreq)));

// G((hmaster0=1) * (hmaster1=0) * (hmaster2=1) -> (hbusreq5=0 <-> busreq=0));
assign sys_safe_err5 =  ~( ~( controllable_hmaster0 & ~(controllable_hmaster1) & controllable_hmaster2 )|(~i_hbusreq5 ^~ (~controllable_busreq)));

// G((hmaster0=0) * (hmaster1=1) * (hmaster2=1) -> (hbusreq6=0 <-> busreq=0));
assign sys_safe_err6 =  ~( ~( ~(controllable_hmaster0) & controllable_hmaster1 & controllable_hmaster2 )|(~i_hbusreq6 ^~ (~controllable_busreq)));

// Guarantee 1:
// G((hready=0) -> X(start=0));
assign sys_safe_err7 =  ~( reg_i_hready | controllable_nstart );

// G(((stateG2=1) * (start=1)) -> FALSE;
assign sys_safe_err8 =  ~( ~(reg_stateG2 & ~controllable_nstart) | 0 );

// G(((stateG3_0=1) * (stateG3_1=0) * (stateG3_2=0) * ((start=1))) -> FALSE);
// G(((stateG3_0=0) * (stateG3_1=1) * (stateG3_2=0) * ((start=1))) -> FALSE);
// G(((stateG3_0=1) * (stateG3_1=1) * (stateG3_2=0) * ((start=1))) -> FALSE);
// G(((stateG3_0=0) * (stateG3_1=0) * (stateG3_2=1) * ((start=1))) -> FALSE);
// all these rules can be summarized as: only in state 000, start=1 is allowed:
assign sys_safe_err9 =  (reg_stateG3_0 | reg_stateG3_1 | reg_stateG3_2) & ~controllable_nstart;

// G( (hready=1) -> (   (hgrant0=1) <-> (X(hmaster0=0) * X(hmaster1=0) * X(hmaster2=0))  ) );
assign sys_safe_err10 =  ~( ~(reg_i_hready) | ( ~reg_controllable_nhgrant0 ^~ ( ~(controllable_hmaster0) & ~(controllable_hmaster1) & ~(controllable_hmaster2) ) ) );

// G( (hready=1) -> (   (hgrant1=1) <-> (X(hmaster0=1) * X(hmaster1=0) * X(hmaster2=0))  ) );
assign sys_safe_err11 =  ~( ~(reg_i_hready) | ( reg_controllable_hgrant1 ^~ ( controllable_hmaster0 & ~(controllable_hmaster1) & ~(controllable_hmaster2) ) ) );

// G( (hready=1) -> (   (hgrant2=1) <-> (X(hmaster0=0) * X(hmaster1=1) * X(hmaster2=0))  ) );
assign sys_safe_err12 =  ~( ~(reg_i_hready) | ( reg_controllable_hgrant2 ^~ ( ~(controllable_hmaster0) & controllable_hmaster1 & ~(controllable_hmaster2) ) ) );

// G( (hready=1) -> (   (hgrant3=1) <-> (X(hmaster0=1) * X(hmaster1=1) * X(hmaster2=0))  ) );
assign sys_safe_err13 =  ~( ~(reg_i_hready) | ( reg_controllable_hgrant3 ^~ ( controllable_hmaster0 & controllable_hmaster1 & ~(controllable_hmaster2) ) ) );

// G( (hready=1) -> (   (hgrant4=1) <-> (X(hmaster0=0) * X(hmaster1=0) * X(hmaster2=1))  ) );
assign sys_safe_err14 =  ~( ~(reg_i_hready) | ( reg_controllable_hgrant4 ^~ ( ~(controllable_hmaster0) & ~(controllable_hmaster1) & controllable_hmaster2 ) ) );

// G( (hready=1) -> (   (hgrant5=1) <-> (X(hmaster0=1) * X(hmaster1=0) * X(hmaster2=1))  ) );
assign sys_safe_err15 =  ~( ~(reg_i_hready) | ( reg_controllable_hgrant5 ^~ ( controllable_hmaster0 & ~(controllable_hmaster1) & controllable_hmaster2 ) ) );

// G( (hready=1) -> (   (hgrant6=1) <-> (X(hmaster0=0) * X(hmaster1=1) * X(hmaster2=1))  ) );
assign sys_safe_err16 =  ~( ~(reg_i_hready) | ( reg_controllable_hgrant6 ^~ ( ~(controllable_hmaster0) & controllable_hmaster1 & controllable_hmaster2 ) ) );

// HMASTLOCK:
// G(  (hready=1) -> (locked=0 <-> X(hmastlock=0) ) );
assign sys_safe_err17 =  ~( ~(reg_i_hready) | (~reg_controllable_locked ^~ ~controllable_hmastlock) );

// Master 0:
// G( X(start=0) -> ( ((hmaster0=0) * (hmaster1=0) * (hmaster2=0)) <-> (X(hmaster0=0) * X(hmaster1=0) * X(hmaster2=0)) ) );
assign sys_safe_err18 =  ~( ~(controllable_nstart) | ( ( ~(reg_controllable_hmaster0) & ~(reg_controllable_hmaster1) & ~(reg_controllable_hmaster2) ) ^~ ( ~(controllable_hmaster0) & ~(controllable_hmaster1) & ~(controllable_hmaster2) )) );

// Master 1:
// G( X(start=0) -> ( ((hmaster0=1) * (hmaster1=0) * (hmaster2=0)) <-> (X(hmaster0=1) * X(hmaster1=0) * X(hmaster2=0)) ) );
assign sys_safe_err19 =  ~( ~(controllable_nstart) | ( ( reg_controllable_hmaster0 & ~(reg_controllable_hmaster1) & ~(reg_controllable_hmaster2) ) ^~ ( controllable_hmaster0 & ~(controllable_hmaster1) & ~(controllable_hmaster2) )) );

// Master 2:
// G( X(start=0) -> ( ((hmaster0=0) * (hmaster1=1) * (hmaster2=0)) <-> (X(hmaster0=0) * X(hmaster1=1) * X(hmaster2=0)) ) );
assign sys_safe_err20 =  ~( ~(controllable_nstart) | ( ( ~(reg_controllable_hmaster0) & reg_controllable_hmaster1 & ~(reg_controllable_hmaster2) ) ^~ ( ~(controllable_hmaster0) & controllable_hmaster1 & ~(controllable_hmaster2) )) );

// Master 3:
// G( X(start=0) -> ( ((hmaster0=1) * (hmaster1=1) * (hmaster2=0)) <-> (X(hmaster0=1) * X(hmaster1=1) * X(hmaster2=0)) ) );
assign sys_safe_err21 =  ~( ~(controllable_nstart) | ( ( reg_controllable_hmaster0 & reg_controllable_hmaster1 & ~(reg_controllable_hmaster2) ) ^~ ( controllable_hmaster0 & controllable_hmaster1 & ~(controllable_hmaster2) )) );

// Master 4:
// G( X(start=0) -> ( ((hmaster0=0) * (hmaster1=0) * (hmaster2=1)) <-> (X(hmaster0=0) * X(hmaster1=0) * X(hmaster2=1)) ) );
assign sys_safe_err22 =  ~( ~(controllable_nstart) | ( ( ~(reg_controllable_hmaster0) & ~(reg_controllable_hmaster1) & reg_controllable_hmaster2 ) ^~ ( ~(controllable_hmaster0) & ~(controllable_hmaster1) & controllable_hmaster2 )) );

// Master 5:
// G( X(start=0) -> ( ((hmaster0=1) * (hmaster1=0) * (hmaster2=1)) <-> (X(hmaster0=1) * X(hmaster1=0) * X(hmaster2=1)) ) );
assign sys_safe_err23 =  ~( ~(controllable_nstart) | ( ( reg_controllable_hmaster0 & ~(reg_controllable_hmaster1) & reg_controllable_hmaster2 ) ^~ ( controllable_hmaster0 & ~(controllable_hmaster1) & controllable_hmaster2 )) );

// Master 6:
// G( X(start=0) -> ( ((hmaster0=0) * (hmaster1=1) * (hmaster2=1)) <-> (X(hmaster0=0) * X(hmaster1=1) * X(hmaster2=1)) ) );
assign sys_safe_err24 =  ~( ~(controllable_nstart) | ( ( ~(reg_controllable_hmaster0) & reg_controllable_hmaster1 & reg_controllable_hmaster2 ) ^~ ( ~(controllable_hmaster0) & controllable_hmaster1 & controllable_hmaster2 )) );

// Guarantee 6.2:
// G( ((X(start=0))) -> ( (hmastlock=1) <-> X(hmastlock=1)) );
assign sys_safe_err25 =  ~( ~(controllable_nstart) | ( reg_controllable_hmastlock ^~ controllable_hmastlock) );

// G( (decide=1  *  hlock0=1  *  X(hgrant0=1) )->X(locked=1));
assign sys_safe_err26 =  ~( ~(~reg_controllable_ndecide & reg_i_hlock0 & ~controllable_nhgrant0) | (controllable_locked) );

// G((decide=1  *  hlock0=0  *  X(hgrant0=1))->X(locked=0));
assign sys_safe_err27 =  ~( ~(~reg_controllable_ndecide & ~reg_i_hlock0 & ~controllable_nhgrant0) | (~controllable_locked) );

// G( (decide=1  *  hlock1=1  *  X(hgrant1=1) )->X(locked=1));
assign sys_safe_err28 =  ~( ~(~reg_controllable_ndecide & reg_i_hlock1 & controllable_hgrant1) | (controllable_locked) );

// G((decide=1  *  hlock1=0  *  X(hgrant1=1))->X(locked=0));
assign sys_safe_err29 =  ~( ~(~reg_controllable_ndecide & ~reg_i_hlock1 & controllable_hgrant1) | (~controllable_locked) );

// G( (decide=1  *  hlock2=1  *  X(hgrant2=1) )->X(locked=1));
assign sys_safe_err30 =  ~( ~(~reg_controllable_ndecide & reg_i_hlock2 & controllable_hgrant2) | (controllable_locked) );

// G((decide=1  *  hlock2=0  *  X(hgrant2=1))->X(locked=0));
assign sys_safe_err31 =  ~( ~(~reg_controllable_ndecide & ~reg_i_hlock2 & controllable_hgrant2) | (~controllable_locked) );

// G( (decide=1  *  hlock3=1  *  X(hgrant3=1) )->X(locked=1));
assign sys_safe_err32 =  ~( ~(~reg_controllable_ndecide & reg_i_hlock3 & controllable_hgrant3) | (controllable_locked) );

// G((decide=1  *  hlock3=0  *  X(hgrant3=1))->X(locked=0));
assign sys_safe_err33 =  ~( ~(~reg_controllable_ndecide & ~reg_i_hlock3 & controllable_hgrant3) | (~controllable_locked) );

// G( (decide=1  *  hlock4=1  *  X(hgrant4=1) )->X(locked=1));
assign sys_safe_err34 =  ~( ~(~reg_controllable_ndecide & reg_i_hlock4 & controllable_hgrant4) | (controllable_locked) );

// G((decide=1  *  hlock4=0  *  X(hgrant4=1))->X(locked=0));
assign sys_safe_err35 =  ~( ~(~reg_controllable_ndecide & ~reg_i_hlock4 & controllable_hgrant4) | (~controllable_locked) );

// G( (decide=1  *  hlock5=1  *  X(hgrant5=1) )->X(locked=1));
assign sys_safe_err36 =  ~( ~(~reg_controllable_ndecide & reg_i_hlock5 & controllable_hgrant5) | (controllable_locked) );

// G((decide=1  *  hlock5=0  *  X(hgrant5=1))->X(locked=0));
assign sys_safe_err37 =  ~( ~(~reg_controllable_ndecide & ~reg_i_hlock5 & controllable_hgrant5) | (~controllable_locked) );

// G( (decide=1  *  hlock6=1  *  X(hgrant6=1) )->X(locked=1));
assign sys_safe_err38 =  ~( ~(~reg_controllable_ndecide & reg_i_hlock6 & controllable_hgrant6) | (controllable_locked) );

// G((decide=1  *  hlock6=0  *  X(hgrant6=1))->X(locked=0));
assign sys_safe_err39 =  ~( ~(~reg_controllable_ndecide & ~reg_i_hlock6 & controllable_hgrant6) | (~controllable_locked) );

// G( (decide=0) -> (  ((hgrant0=0)<->X(hgrant0=0))  ));
assign sys_safe_err40 =  ~( ~(reg_controllable_ndecide) | (reg_controllable_nhgrant0 ^~ controllable_nhgrant0) );

// G( (decide=0) -> (  ((hgrant1=0)<->X(hgrant1=0))  ));
assign sys_safe_err41 =  ~( ~(reg_controllable_ndecide) | (~reg_controllable_hgrant1 ^~ ~controllable_hgrant1) );

// G( (decide=0) -> (  ((hgrant2=0)<->X(hgrant2=0))  ));
assign sys_safe_err42 =  ~( ~(reg_controllable_ndecide) | (~reg_controllable_hgrant2 ^~ ~controllable_hgrant2) );

// G( (decide=0) -> (  ((hgrant3=0)<->X(hgrant3=0))  ));
assign sys_safe_err43 =  ~( ~(reg_controllable_ndecide) | (~reg_controllable_hgrant3 ^~ ~controllable_hgrant3) );

// G( (decide=0) -> (  ((hgrant4=0)<->X(hgrant4=0))  ));
assign sys_safe_err44 =  ~( ~(reg_controllable_ndecide) | (~reg_controllable_hgrant4 ^~ ~controllable_hgrant4) );

// G( (decide=0) -> (  ((hgrant5=0)<->X(hgrant5=0))  ));
assign sys_safe_err45 =  ~( ~(reg_controllable_ndecide) | (~reg_controllable_hgrant5 ^~ ~controllable_hgrant5) );

// G( (decide=0) -> (  ((hgrant6=0)<->X(hgrant6=0))  ));
assign sys_safe_err46 =  ~( ~(reg_controllable_ndecide) | (~reg_controllable_hgrant6 ^~ ~controllable_hgrant6) );

// G((decide=0)->(locked=0 <-> X(locked=0)));
assign sys_safe_err47 =  ~( ~(reg_controllable_ndecide) | (~reg_controllable_locked ^~ ~controllable_locked) );

// G(((stateG10_1=1) * (((hgrant1=1)) * (hbusreq1=0)))->FALSE);
assign sys_safe_err48 =  ~( ~(reg_stateG10_1 & (controllable_hgrant1 & ~i_hbusreq1)) | 0 );

// G(((stateG10_2=1) * (((hgrant2=1)) * (hbusreq2=0)))->FALSE);
assign sys_safe_err49 =  ~( ~(reg_stateG10_2 & (controllable_hgrant2 & ~i_hbusreq2)) | 0 );

// G(((stateG10_3=1) * (((hgrant3=1)) * (hbusreq3=0)))->FALSE);
assign sys_safe_err50 =  ~( ~(reg_stateG10_3 & (controllable_hgrant3 & ~i_hbusreq3)) | 0 );

// G(((stateG10_4=1) * (((hgrant4=1)) * (hbusreq4=0)))->FALSE);
assign sys_safe_err51 =  ~( ~(reg_stateG10_4 & (controllable_hgrant4 & ~i_hbusreq4)) | 0 );

// G(((stateG10_5=1) * (((hgrant5=1)) * (hbusreq5=0)))->FALSE);
assign sys_safe_err52 =  ~( ~(reg_stateG10_5 & (controllable_hgrant5 & ~i_hbusreq5)) | 0 );

// G(((stateG10_6=1) * (((hgrant6=1)) * (hbusreq6=0)))->FALSE);
assign sys_safe_err53 =  ~( ~(reg_stateG10_6 & (controllable_hgrant6 & ~i_hbusreq6)) | 0 );

// default master
// G((decide=1  *  hbusreq0=0  *  hbusreq1=0  *  hbusreq2=0  *  hbusreq3=0  *  hbusreq4=0  *  hbusreq5=0  *  hbusreq6=0) -> X(hgrant0=1));
assign sys_safe_err54 =  ~( ~(~reg_controllable_ndecide & (~reg_i_hbusreq0 & ~reg_i_hbusreq1 & ~reg_i_hbusreq2 & ~reg_i_hbusreq3 & ~reg_i_hbusreq4 & ~reg_i_hbusreq5 & ~reg_i_hbusreq6)) | (~controllable_nhgrant0) );

// collecting together the safety error bits:
assign sys_safe_err = sys_safe_err0 |
                      sys_safe_err1 |
                      sys_safe_err2 |
                      sys_safe_err3 |
                      sys_safe_err4 |
                      sys_safe_err5 |
                      sys_safe_err6 |
                      sys_safe_err7 |
                      sys_safe_err8 |
                      sys_safe_err9 |
                      sys_safe_err10 |
                      sys_safe_err11 |
                      sys_safe_err12 |
                      sys_safe_err13 |
                      sys_safe_err14 |
                      sys_safe_err15 |
                      sys_safe_err16 |
                      sys_safe_err17 |
                      sys_safe_err18 |
                      sys_safe_err19 |
                      sys_safe_err20 |
                      sys_safe_err21 |
                      sys_safe_err22 |
                      sys_safe_err23 |
                      sys_safe_err24 |
                      sys_safe_err25 |
                      sys_safe_err26 |
                      sys_safe_err27 |
                      sys_safe_err28 |
                      sys_safe_err29 |
                      sys_safe_err30 |
                      sys_safe_err31 |
                      sys_safe_err32 |
                      sys_safe_err33 |
                      sys_safe_err34 |
                      sys_safe_err35 |
                      sys_safe_err36 |
                      sys_safe_err37 |
                      sys_safe_err38 |
                      sys_safe_err39 |
                      sys_safe_err40 |
                      sys_safe_err41 |
                      sys_safe_err42 |
                      sys_safe_err43 |
                      sys_safe_err44 |
                      sys_safe_err45 |
                      sys_safe_err46 |
                      sys_safe_err47 |
                      sys_safe_err48 |
                      sys_safe_err49 |
                      sys_safe_err50 |
                      sys_safe_err51 |
                      sys_safe_err52 |
                      sys_safe_err53 |
                      sys_safe_err54;

// =============================================================
//                          ENV_FAIRNESS:
// =============================================================
// Assumption 1: 
// G(F(stateA1=0));
assign env_fair0 =  ~reg_stateA1;

// Assumption 2:
// G(F(hready=1));
assign env_fair1 =  i_hready;


// =============================================================
//                          SYS_FAIRNESS:
// =============================================================
// Guarantee 2:
// G(F(stateG2=0));
assign sys_fair0 = ~reg_stateG2;

// Guarantee 3:
// G(F((stateG3_0=0)  *  (stateG3_1=0)  *  (stateG3_2=0)));
assign sys_fair1 =  (~reg_stateG3_0 & ~reg_stateG3_1 & ~reg_stateG3_2);

// G(F(((hmaster0=0) * (hmaster1=0) * (hmaster2=0))  |  hbusreq0=0));
assign sys_fair2 =  ( ~(controllable_hmaster0) & ~(controllable_hmaster1) & ~(controllable_hmaster2) ) | ~i_hbusreq0;

// G(F(((hmaster0=1) * (hmaster1=0) * (hmaster2=0))  |  hbusreq1=0));
assign sys_fair3 =  ( controllable_hmaster0 & ~(controllable_hmaster1) & ~(controllable_hmaster2) ) | ~i_hbusreq1;

// G(F(((hmaster0=0) * (hmaster1=1) * (hmaster2=0))  |  hbusreq2=0));
assign sys_fair4 =  ( ~(controllable_hmaster0) & controllable_hmaster1 & ~(controllable_hmaster2) ) | ~i_hbusreq2;

// G(F(((hmaster0=1) * (hmaster1=1) * (hmaster2=0))  |  hbusreq3=0));
assign sys_fair5 =  ( controllable_hmaster0 & controllable_hmaster1 & ~(controllable_hmaster2) ) | ~i_hbusreq3;

// G(F(((hmaster0=0) * (hmaster1=0) * (hmaster2=1))  |  hbusreq4=0));
assign sys_fair6 =  ( ~(controllable_hmaster0) & ~(controllable_hmaster1) & controllable_hmaster2 ) | ~i_hbusreq4;

// G(F(((hmaster0=1) * (hmaster1=0) * (hmaster2=1))  |  hbusreq5=0));
assign sys_fair7 =  ( controllable_hmaster0 & ~(controllable_hmaster1) & controllable_hmaster2 ) | ~i_hbusreq5;

// G(F(((hmaster0=0) * (hmaster1=1) * (hmaster2=1))  |  hbusreq6=0));
assign sys_fair8 =  ( ~(controllable_hmaster0) & controllable_hmaster1 & controllable_hmaster2 ) | ~i_hbusreq6;

assign fair_err = (fair_cnt >= 3'b101);

// computing the error output bit:
assign o_err = ~env_safe_err & ~env_safe_err_happened & (sys_safe_err | fair_err);

initial
 begin
  reg_i_hready = 0;
  reg_i_hbusreq0 = 0;
  reg_i_hlock0 = 0;
  reg_i_hbusreq1 = 0;
  reg_i_hlock1 = 0;
  reg_i_hbusreq2 = 0;
  reg_i_hlock2 = 0;
  reg_i_hbusreq3 = 0;
  reg_i_hlock3 = 0;
  reg_i_hbusreq4 = 0;
  reg_i_hlock4 = 0;
  reg_i_hbusreq5 = 0;
  reg_i_hlock5 = 0;
  reg_i_hbusreq6 = 0;
  reg_i_hlock6 = 0;
  reg_controllable_hmaster0 = 0;
  reg_controllable_hmaster1 = 0;
  reg_controllable_hmaster2 = 0;
  reg_controllable_hmastlock = 0;
  reg_controllable_nstart = 0;
  reg_controllable_ndecide = 0;
  reg_controllable_locked = 0;
  reg_controllable_nhgrant0 = 0;
  reg_controllable_hgrant1 = 0;
  reg_controllable_hgrant2 = 0;
  reg_controllable_hgrant3 = 0;
  reg_controllable_hgrant4 = 0;
  reg_controllable_hgrant5 = 0;
  reg_controllable_hgrant6 = 0;
  reg_controllable_busreq = 0;
  reg_stateA1 = 0;
  reg_stateG2 = 0;
  reg_stateG3_0 = 0;
  reg_stateG3_1 = 0;
  reg_stateG3_2 = 0;
  reg_stateG10_1 = 0;
  reg_stateG10_2 = 0;
  reg_stateG10_3 = 0;
  reg_stateG10_4 = 0;
  reg_stateG10_5 = 0;
  reg_stateG10_6 = 0;
  env_safe_err_happened = 0;
  next_env_fair = 0;
  fair_cnt = 0;
  next_sys_fair = 0;
 end


always @(posedge i_clk)
 begin
   // We remember if an environment error occurred:
   env_safe_err_happened = env_safe_err_happened | env_safe_err;

   // Updating the fairness counters: 
   if((next_sys_fair == 0) & sys_fair0)
    begin
      next_sys_fair = 1;
      next_env_fair = 0;
      fair_cnt = 0;
    end
   else if((next_sys_fair == 1) & sys_fair1)
    begin
      next_sys_fair = 2;
      next_env_fair = 0;
      fair_cnt = 0;
    end
   else if((next_sys_fair == 2) & sys_fair2)
    begin
      next_sys_fair = 3;
      next_env_fair = 0;
      fair_cnt = 0;
    end
   else if((next_sys_fair == 3) & sys_fair3)
    begin
      next_sys_fair = 4;
      next_env_fair = 0;
      fair_cnt = 0;
    end
   else if((next_sys_fair == 4) & sys_fair4)
    begin
      next_sys_fair = 5;
      next_env_fair = 0;
      fair_cnt = 0;
    end
   else if((next_sys_fair == 5) & sys_fair5)
    begin
      next_sys_fair = 6;
      next_env_fair = 0;
      fair_cnt = 0;
    end
   else if((next_sys_fair == 6) & sys_fair6)
    begin
      next_sys_fair = 7;
      next_env_fair = 0;
      fair_cnt = 0;
    end
   else if((next_sys_fair == 7) & sys_fair7)
    begin
      next_sys_fair = 8;
      next_env_fair = 0;
      fair_cnt = 0;
    end
   else if((next_sys_fair == 8) & sys_fair8)
    begin
      next_sys_fair = 0;
      next_env_fair = 0;
      fair_cnt = 0;
    end
   else if(~next_env_fair & env_fair0)
    begin
      next_env_fair = 1;
    end
   else if(next_env_fair & env_fair1)
    begin
      next_env_fair = 0;
      fair_cnt = fair_cnt + 1;
    end

   // Updating the automata: 
   // Automaton A1: 
   if(~reg_stateA1 & controllable_hmastlock & ~i_hburst0 & ~i_hburst1)
    begin
      reg_stateA1 = 1'b1;
    end
   else if(reg_stateA1 & ~controllable_busreq)
    begin
      reg_stateA1 = 1'b0;
    end

   // Automaton G2: 
   if(~reg_stateG2)
    begin
      if(controllable_hmastlock & ~controllable_nstart & ~i_hburst0 & ~i_hburst1)
       begin
         reg_stateG2 = 1'b1;
       end
    end
   else // if(reg_stateG2)
    begin
      if(~controllable_busreq)
       begin
         reg_stateG2 = 1'b0;
       end
    end

   // Automaton G3: 
   if(~reg_stateG3_0 & ~reg_stateG3_1 & ~reg_stateG3_2 & controllable_hmastlock & ~controllable_nstart &  ~i_hburst0 & i_hburst1 & ~i_hready)
    begin
      reg_stateG3_0 = 1'b1;
      reg_stateG3_1 = 1'b0;
      reg_stateG3_2 = 1'b0;
    end
   else if(~reg_stateG3_0 & ~reg_stateG3_1 & ~reg_stateG3_2 & controllable_hmastlock & ~controllable_nstart &  ~i_hburst0 & i_hburst1 & i_hready)
    begin
      reg_stateG3_0 = 1'b0;
      reg_stateG3_1 = 1'b1;
      reg_stateG3_2 = 1'b0;
    end
   else if(reg_stateG3_0 & ~reg_stateG3_1 & ~reg_stateG3_2 & i_hready)
    begin
      reg_stateG3_0 = 1'b0;
      reg_stateG3_1 = 1'b1;
      reg_stateG3_2 = 1'b0;
    end
   else if(~reg_stateG3_0 & reg_stateG3_1 & ~reg_stateG3_2 & i_hready)
    begin
      reg_stateG3_0 = 1'b1;
      reg_stateG3_1 = 1'b1;
      reg_stateG3_2 = 1'b0;
    end
   else if(reg_stateG3_0 & reg_stateG3_1 & ~reg_stateG3_2 & i_hready)
    begin
      reg_stateG3_0 = 1'b0;
      reg_stateG3_1 = 1'b0;
      reg_stateG3_2 = 1'b1;
    end
   else if(~reg_stateG3_0 & ~reg_stateG3_1 & reg_stateG3_2 & i_hready)
    begin
      reg_stateG3_0 = 1'b0;
      reg_stateG3_1 = 1'b0;
      reg_stateG3_2 = 1'b0;
    end

   // Automaton G10_1: 
   if(~reg_stateG10_1 & ~controllable_hgrant1 & ~i_hbusreq1)
    begin
      reg_stateG10_1 = 1'b1;
    end
   else if(reg_stateG10_1 & i_hbusreq1)
    begin
      reg_stateG10_1 = 1'b0;
    end

   // Automaton G10_2: 
   if(~reg_stateG10_2 & ~controllable_hgrant2 & ~i_hbusreq2)
    begin
      reg_stateG10_2 = 1'b1;
    end
   else if(reg_stateG10_2 & i_hbusreq2)
    begin
      reg_stateG10_2 = 1'b0;
    end

   // Automaton G10_3: 
   if(~reg_stateG10_3 & ~controllable_hgrant3 & ~i_hbusreq3)
    begin
      reg_stateG10_3 = 1'b1;
    end
   else if(reg_stateG10_3 & i_hbusreq3)
    begin
      reg_stateG10_3 = 1'b0;
    end

   // Automaton G10_4: 
   if(~reg_stateG10_4 & ~controllable_hgrant4 & ~i_hbusreq4)
    begin
      reg_stateG10_4 = 1'b1;
    end
   else if(reg_stateG10_4 & i_hbusreq4)
    begin
      reg_stateG10_4 = 1'b0;
    end

   // Automaton G10_5: 
   if(~reg_stateG10_5 & ~controllable_hgrant5 & ~i_hbusreq5)
    begin
      reg_stateG10_5 = 1'b1;
    end
   else if(reg_stateG10_5 & i_hbusreq5)
    begin
      reg_stateG10_5 = 1'b0;
    end

   // Automaton G10_6: 
   if(~reg_stateG10_6 & ~controllable_hgrant6 & ~i_hbusreq6)
    begin
      reg_stateG10_6 = 1'b1;
    end
   else if(reg_stateG10_6 & i_hbusreq6)
    begin
      reg_stateG10_6 = 1'b0;
    end

   // Latching the previous input:
   reg_i_hready =  i_hready;
   reg_i_hbusreq0 =  i_hbusreq0;
   reg_i_hlock0 =  i_hlock0;
   reg_i_hbusreq1 =  i_hbusreq1;
   reg_i_hlock1 =  i_hlock1;
   reg_i_hbusreq2 =  i_hbusreq2;
   reg_i_hlock2 =  i_hlock2;
   reg_i_hbusreq3 =  i_hbusreq3;
   reg_i_hlock3 =  i_hlock3;
   reg_i_hbusreq4 =  i_hbusreq4;
   reg_i_hlock4 =  i_hlock4;
   reg_i_hbusreq5 =  i_hbusreq5;
   reg_i_hlock5 =  i_hlock5;
   reg_i_hbusreq6 =  i_hbusreq6;
   reg_i_hlock6 =  i_hlock6;
   reg_controllable_hmaster0 =  controllable_hmaster0;
   reg_controllable_hmaster1 =  controllable_hmaster1;
   reg_controllable_hmaster2 =  controllable_hmaster2;
   reg_controllable_hmastlock =  controllable_hmastlock;
   reg_controllable_nstart =  controllable_nstart;
   reg_controllable_ndecide =  controllable_ndecide;
   reg_controllable_locked =  controllable_locked;
   reg_controllable_nhgrant0 =  controllable_nhgrant0;
   reg_controllable_hgrant1 =  controllable_hgrant1;
   reg_controllable_hgrant2 =  controllable_hgrant2;
   reg_controllable_hgrant3 =  controllable_hgrant3;
   reg_controllable_hgrant4 =  controllable_hgrant4;
   reg_controllable_hgrant5 =  controllable_hgrant5;
   reg_controllable_hgrant6 =  controllable_hgrant6;
   reg_controllable_busreq =  controllable_busreq;

 end
endmodule

-------------------------------
#!SYNTCOMP
STATUS : realizable
SOLVED_BY : 7/8 [SYNTCOMP2014-RealSeq]
SOLVED_IN : 5.76436 [SYNTCOMP2014-RealSeq]
#.
