aag 1174 39 64 1 1071
2
4
6
8
10
12
14
16
18
20
22
24
26
28
30
32
34
36
38
40
42
44
46
48
50
52
54
56
58
60
62
64
66
68
70
72
74
76
78
80 1
82 10
84 1305
86 64
88 74
90 40
92 14
94 1327
96 66
98 1581
100 72
102 38
104 18
106 1665
108 1687
110 68
112 70
114 34
116 22
118 1711
120 6
122 58
124 30
126 26
128 1731
130 42
132 28
134 8
136 32
138 50
140 24
142 36
144 1761
146 1783
148 52
150 20
152 78
154 1805
156 2
158 54
160 1829
162 16
164 2079
166 2085
168 2091
170 2097
172 2103
174 2109
176 2259
178 2265
180 2271
182 2277
184 2283
186 2305
188 56
190 12
192 44
194 247
196 2327
198 60
200 4
202 2349
204 62
206 76
1282
208 51 12
210 53 16
212 211 209
214 55 20
216 215 212
218 57 24
220 219 216
222 61 28
224 223 220
226 63 30
228 227 224
230 65 34
232 231 228
234 67 38
236 235 232
238 69 40
240 239 236
242 195 80
244 243 80
246 245 240
248 77 75
250 248 73
252 250 71
254 50 43
256 51 42
258 257 255
260 259 252
262 76 75
264 262 73
266 264 71
268 52 43
270 53 42
272 271 269
274 273 266
276 275 261
278 77 74
280 278 73
282 280 71
284 54 43
286 55 42
288 287 285
290 289 282
292 291 276
294 76 74
296 294 73
298 296 71
300 56 43
302 57 42
304 303 301
306 305 298
308 307 292
310 248 72
312 310 71
314 60 43
316 61 42
318 317 315
320 319 312
322 321 308
324 262 72
326 324 71
328 62 43
330 63 42
332 331 329
334 333 326
336 335 322
338 278 72
340 338 71
342 64 43
344 65 42
346 345 343
348 347 340
350 349 336
352 294 72
354 352 71
356 66 43
358 67 42
360 359 357
362 361 354
364 363 350
366 250 70
368 68 43
370 69 42
372 371 369
374 373 366
376 375 364
378 193 80
380 192 80
382 379 80
384 383 9
386 385 376
388 145 80
390 144 80
392 389 80
394 390 9
396 395 386
398 107 80
400 106 80
402 399 80
404 119 80
406 118 80
408 405 80
410 409 403
412 129 80
414 128 80
416 413 80
418 417 410
420 419 9
422 421 396
424 157 80
426 156 80
428 425 80
430 426 252
432 429 253
434 433 431
436 435 380
438 437 422
440 201 80
442 200 80
444 441 80
446 445 266
448 442 267
450 449 447
452 451 380
454 453 438
456 83 80
458 82 80
460 457 80
462 461 282
464 458 283
466 465 463
468 467 380
470 469 454
472 93 80
474 92 80
476 473 80
478 477 298
480 474 299
482 481 479
484 483 380
486 485 470
488 105 80
490 104 80
492 489 80
494 493 312
496 490 313
498 497 495
500 499 380
502 501 486
504 117 80
506 116 80
508 505 80
510 509 326
512 506 327
514 513 511
516 515 380
518 517 502
520 127 80
522 126 80
524 521 80
526 525 340
528 522 341
530 529 527
532 531 380
534 533 518
536 137 80
538 136 80
540 537 80
542 541 354
544 538 355
546 545 543
548 547 380
550 549 534
552 143 80
554 142 80
556 553 80
558 557 366
560 554 367
562 561 559
564 563 380
566 565 550
568 121 80
570 120 80
572 569 80
574 570 79
576 573 78
578 577 575
580 579 380
582 581 566
584 207 80
586 206 80
588 585 80
590 89 80
592 88 80
594 591 80
596 595 589
598 101 80
600 100 80
602 599 80
604 603 596
606 113 80
608 112 80
610 607 80
612 611 604
614 613 252
616 612 253
618 617 615
620 619 8
622 621 582
624 595 586
626 624 603
628 626 611
630 629 266
632 628 267
634 633 631
636 635 8
638 637 622
640 592 589
642 640 603
644 642 611
646 645 282
648 644 283
650 649 647
652 651 8
654 653 638
656 592 586
658 656 603
660 658 611
662 661 298
664 660 299
666 665 663
668 667 8
670 669 654
672 600 596
674 672 611
676 675 312
678 674 313
680 679 677
682 681 8
684 683 670
686 624 600
688 686 611
690 689 326
692 688 327
694 693 691
696 695 8
698 697 684
700 640 600
702 700 611
704 703 340
706 702 341
708 707 705
710 709 8
712 711 698
714 656 600
716 714 611
718 717 354
720 716 355
722 721 719
724 723 8
726 725 712
728 608 604
730 729 366
732 728 367
734 733 731
736 735 8
738 737 726
740 153 80
742 152 80
744 741 80
746 745 78
748 742 79
750 749 747
752 751 8
754 753 738
756 123 80
758 122 80
760 757 80
762 191 80
764 190 80
766 763 80
768 764 761
770 768 3
772 770 7
774 773 754
776 767 761
778 776 3
780 778 6
782 781 774
784 163 80
786 162 80
788 785 80
790 786 761
792 790 4
794 792 7
796 795 782
798 789 761
800 798 4
802 800 6
804 803 796
806 151 80
808 150 80
810 807 80
812 808 761
814 812 10
816 814 7
818 817 804
820 811 761
822 820 10
824 822 6
826 825 818
828 141 80
830 140 80
832 829 80
834 830 761
836 834 14
838 836 7
840 839 826
842 833 761
844 842 14
846 844 6
848 847 840
850 133 80
852 132 80
854 851 80
856 852 761
858 856 18
860 858 7
862 861 848
864 855 761
866 864 18
868 866 6
870 869 862
872 125 80
874 124 80
876 873 80
878 874 761
880 878 22
882 880 7
884 883 870
886 877 761
888 886 22
890 888 6
892 891 884
894 115 80
896 114 80
898 895 80
900 896 761
902 900 26
904 902 7
906 905 892
908 899 761
910 908 26
912 910 6
914 913 906
916 103 80
918 102 80
920 917 80
922 918 761
924 922 32
926 924 7
928 927 914
930 921 761
932 930 32
934 932 6
936 935 928
938 91 80
940 90 80
942 939 80
944 940 761
946 944 36
948 946 7
950 949 936
952 943 761
954 952 36
956 954 6
958 957 950
960 429 2
962 426 3
964 963 961
966 965 758
968 967 958
970 442 5
972 445 4
974 973 971
976 975 758
978 977 968
980 458 11
982 461 10
984 983 981
986 985 758
988 987 978
990 474 15
992 477 14
994 993 991
996 995 758
998 997 988
1000 490 19
1002 493 18
1004 1003 1001
1006 1005 758
1008 1007 998
1010 506 23
1012 509 22
1014 1013 1011
1016 1015 758
1018 1017 1008
1020 522 27
1022 525 26
1024 1023 1021
1026 1025 758
1028 1027 1018
1030 538 33
1032 541 32
1034 1033 1031
1036 1035 758
1038 1037 1028
1040 554 37
1042 557 36
1044 1043 1041
1046 1045 758
1048 1047 1038
1050 570 7
1052 573 6
1054 1053 1051
1056 1055 758
1058 1057 1048
1060 147 80
1062 146 80
1064 1061 80
1066 53 4
1068 1066 1062
1070 1069 1058
1072 155 80
1074 154 80
1076 1073 80
1078 55 10
1080 1078 1074
1082 1081 1070
1084 187 80
1086 186 80
1088 1085 80
1090 57 14
1092 1090 1086
1094 1093 1082
1096 197 80
1098 196 80
1100 1097 80
1102 61 18
1104 1102 1098
1106 1105 1094
1108 203 80
1110 202 80
1112 1109 80
1114 63 22
1116 1114 1110
1118 1117 1106
1120 85 80
1122 84 80
1124 1121 80
1126 65 26
1128 1126 1122
1130 1129 1118
1132 95 80
1134 94 80
1136 1133 80
1138 67 32
1140 1138 1134
1142 1141 1130
1144 109 80
1146 108 80
1148 1145 80
1150 69 36
1152 1150 1146
1154 1153 1142
1156 139 80
1158 1157 80
1160 149 80
1162 1161 80
1164 1163 1159
1166 159 80
1168 1167 80
1170 1169 1164
1172 189 80
1174 1173 80
1176 1175 1170
1178 199 80
1180 1179 80
1182 1181 1176
1184 205 80
1186 1185 80
1188 1187 1182
1190 87 80
1192 1191 80
1194 1193 1188
1196 97 80
1198 1197 80
1200 1199 1194
1202 111 80
1204 1203 80
1206 1205 1200
1208 1206 761
1210 1208 2
1212 1211 1154
1214 175 80
1216 174 80
1218 1215 80
1220 173 80
1222 172 80
1224 1221 80
1226 171 80
1228 170 80
1230 1227 80
1232 169 80
1234 168 80
1236 1233 80
1238 167 80
1240 166 80
1242 1239 80
1244 165 80
1246 164 80
1248 1245 80
1250 1231 1225
1252 1250 1219
1254 1253 1218
1256 1254 1251
1258 1230 1222
1260 1259 1251
1262 1251 1219
1264 1250 1216
1266 1265 1263
1268 1247 1241
1270 1268 1235
1272 1270 1230
1274 1272 1260
1276 1274 1266
1278 1277 1257
1280 1278 1212
1282 1281 246
1284 1125 27
1286 1284 65
1288 1122 64
1290 1288 1287
1292 1291 1287
1294 1289 1122
1296 1294 1287
1298 1297 1287
1300 1299 1293
1302 1292 1122
1304 1303 1301
1306 1137 33
1308 1306 67
1310 1134 66
1312 1310 1309
1314 1313 1309
1316 1311 1134
1318 1316 1309
1320 1319 1309
1322 1321 1315
1324 1314 1134
1326 1325 1323
1328 177 80
1330 176 80
1332 1329 80
1334 179 80
1336 178 80
1338 1335 80
1340 181 80
1342 180 80
1344 1341 80
1346 183 80
1348 182 80
1350 1347 80
1352 184 80
1354 1337 1331
1356 1354 1343
1358 1356 1349
1360 1358 1353
1362 1360 393
1364 1337 1332
1366 1364 1343
1368 1366 1349
1370 1368 1353
1372 1370 418
1374 1338 1331
1376 1374 1343
1378 1376 1349
1380 1378 1353
1382 253 50
1384 1383 1380
1386 1338 1332
1388 1386 1343
1390 1388 1349
1392 1390 1353
1394 267 52
1396 1395 1392
1398 1354 1344
1400 1398 1349
1402 1400 1353
1404 283 54
1406 1405 1402
1408 1364 1344
1410 1408 1349
1412 1410 1353
1414 299 56
1416 1415 1412
1418 1374 1344
1420 1418 1349
1422 1420 1353
1424 313 60
1426 1425 1422
1428 1386 1344
1430 1428 1349
1432 1430 1353
1434 327 62
1436 1435 1432
1438 1356 1350
1440 1438 1353
1442 341 64
1444 1443 1440
1446 1366 1350
1448 1446 1353
1450 355 66
1452 1451 1448
1454 1376 1350
1456 1454 1353
1458 367 68
1460 1459 1456
1462 99 80
1464 98 80
1466 1463 80
1468 161 80
1470 160 80
1472 1469 80
1474 1473 1467
1476 1464 44
1478 1372 1363
1480 1479 1363
1482 1373 1363
1484 1482 1384
1486 1485 1480
1488 1482 1385
1490 1488 1396
1492 1491 1486
1494 1488 1397
1496 1494 1406
1498 1497 1492
1500 1494 1407
1502 1500 1416
1504 1503 1498
1506 1500 1417
1508 1506 1426
1510 1509 1504
1512 1506 1427
1514 1512 1436
1516 1515 1510
1518 1512 1437
1520 1518 1444
1522 1521 1516
1524 1518 1445
1526 1524 1452
1528 1527 1522
1530 1524 1453
1532 1530 1460
1534 1533 1528
1536 1530 1461
1538 1536 1474
1540 1539 1534
1542 1536 1475
1544 1542 1476
1546 1545 1540
1548 1477 1464
1550 1548 1475
1552 1551 1475
1554 1553 1461
1556 1554 1453
1558 1556 1445
1560 1558 1437
1562 1560 1427
1564 1562 1417
1566 1564 1407
1568 1566 1397
1570 1568 1385
1572 1570 1373
1574 1572 1363
1576 1574 1547
1578 1546 1464
1580 1579 1577
1582 418 78
1584 1582 9
1586 1584 49
1588 1586 46
1590 1588 45
1592 1588 44
1594 409 400
1596 1594 417
1598 1596 44
1600 406 403
1602 1600 417
1604 1602 44
1606 406 400
1608 1606 417
1610 1608 44
1612 414 410
1614 1612 44
1616 1592 1591
1618 1617 1591
1620 1593 1591
1622 1620 1598
1624 1623 1618
1626 1620 1599
1628 1626 1604
1630 1629 1624
1632 1626 1605
1634 1632 1610
1636 1635 1630
1638 1632 1611
1640 1638 1614
1642 1641 1636
1644 1615 400
1646 1644 1611
1648 1646 1605
1650 1649 1605
1652 1651 1599
1654 1652 1593
1656 1654 1591
1658 1657 1591
1660 1659 1643
1662 1642 400
1664 1663 1661
1666 1149 37
1668 1666 69
1670 1146 68
1672 1670 1669
1674 1673 1669
1676 1671 1146
1678 1676 1669
1680 1679 1669
1682 1681 1675
1684 1674 1146
1686 1685 1683
1688 1615 406
1690 1688 1611
1692 1690 1605
1694 1693 1605
1696 1695 1599
1698 1697 1599
1700 1699 1593
1702 1701 1593
1704 1703 1591
1706 1704 1643
1708 1642 406
1710 1709 1707
1712 1615 414
1714 1712 1611
1716 1715 1611
1718 1717 1605
1720 1718 1599
1722 1720 1593
1724 1722 1591
1726 1724 1643
1728 1642 414
1730 1729 1727
1732 78 9
1734 1732 49
1736 1734 47
1738 1736 393
1740 390 43
1742 1741 1739
1744 1737 390
1746 1745 1737
1748 390 42
1750 1747 393
1752 1748 390
1754 1753 1751
1756 1755 1743
1758 1742 390
1760 1759 1757
1762 1065 5
1764 1762 53
1766 1062 52
1768 1766 1765
1770 1769 1765
1772 1767 1062
1774 1772 1765
1776 1775 1765
1778 1777 1771
1780 1770 1062
1782 1781 1779
1784 1077 11
1786 1784 55
1788 1074 54
1790 1788 1787
1792 1791 1787
1794 1789 1074
1796 1794 1787
1798 1797 1787
1800 1799 1793
1802 1792 1074
1804 1803 1801
1806 1473 78
1808 1806 49
1810 1808 47
1812 1470 43
1814 1812 1811
1816 1815 1811
1818 1813 1470
1820 1818 1811
1822 1821 1811
1824 1823 1817
1826 1816 1470
1828 1827 1825
1830 1545 1534
1832 1476 1249
1834 1477 1246
1836 1835 1833
1838 1474 1246
1840 1837 1475
1842 1841 1839
1844 1843 1461
1846 1844 1453
1848 1846 1445
1850 1848 1437
1852 1850 1427
1854 1852 1417
1856 1854 1407
1858 1856 1397
1860 1858 1385
1862 1860 1373
1864 1862 1363
1866 1246 1243
1868 1247 1240
1870 1869 1867
1872 1871 1476
1874 1477 1240
1876 1875 1873
1878 1474 1240
1880 1877 1475
1882 1881 1879
1884 1883 1461
1886 1884 1453
1888 1886 1445
1890 1888 1437
1892 1890 1427
1894 1892 1417
1896 1894 1407
1898 1896 1397
1900 1898 1385
1902 1900 1373
1904 1902 1363
1906 1246 1240
1908 1906 1237
1910 1907 1234
1912 1911 1909
1914 1913 1476
1916 1477 1234
1918 1917 1915
1920 1474 1234
1922 1919 1475
1924 1923 1921
1926 1925 1461
1928 1926 1453
1930 1928 1445
1932 1930 1437
1934 1932 1427
1936 1934 1417
1938 1936 1407
1940 1938 1397
1942 1940 1385
1944 1942 1373
1946 1944 1363
1948 1906 1234
1950 1948 1231
1952 1949 1228
1954 1953 1951
1956 1955 1476
1958 1477 1228
1960 1959 1957
1962 1474 1228
1964 1961 1475
1966 1965 1963
1968 1967 1461
1970 1968 1453
1972 1970 1445
1974 1972 1437
1976 1974 1427
1978 1976 1417
1980 1978 1407
1982 1980 1397
1984 1982 1385
1986 1984 1373
1988 1986 1363
1990 1948 1228
1992 1990 1225
1994 1991 1222
1996 1995 1993
1998 1997 1476
2000 1477 1222
2002 2001 1999
2004 1474 1222
2006 2003 1475
2008 2007 2005
2010 2009 1461
2012 2010 1453
2014 2012 1445
2016 2014 1437
2018 2016 1427
2020 2018 1417
2022 2020 1407
2024 2022 1397
2026 2024 1385
2028 2026 1373
2030 2028 1363
2032 1990 1222
2034 2032 1219
2036 2033 1216
2038 2037 2035
2040 2039 1476
2042 1477 1216
2044 2043 2041
2046 1474 1216
2048 2045 1475
2050 2049 2047
2052 2051 1461
2054 2052 1453
2056 2054 1445
2058 2056 1437
2060 2058 1427
2062 2060 1417
2064 2062 1407
2066 2064 1397
2068 2066 1385
2070 2068 1373
2072 2070 1363
2074 1864 1831
2076 1830 1246
2078 2077 2075
2080 1904 1831
2082 1830 1240
2084 2083 2081
2086 1946 1831
2088 1830 1234
2090 2089 2087
2092 1988 1831
2094 1830 1228
2096 2095 2093
2098 2030 1831
2100 1830 1222
2102 2101 2099
2104 2072 1831
2106 1830 1216
2108 2107 2105
2110 1461 1330
2112 2110 1453
2114 2112 1445
2116 2115 1445
2118 2117 1437
2120 2118 1427
2122 2121 1427
2124 2123 1417
2126 2124 1407
2128 2127 1407
2130 2129 1397
2132 2130 1385
2134 2133 1385
2136 2135 1373
2138 2136 1363
2140 2139 1363
2142 1461 1336
2144 2142 1453
2146 2145 1453
2148 2147 1445
2150 2148 1437
2152 2150 1427
2154 2153 1427
2156 2155 1417
2158 2157 1417
2160 2159 1407
2162 2160 1397
2164 2162 1385
2166 2165 1385
2168 2167 1373
2170 2169 1373
2172 2171 1363
2174 1461 1342
2176 2174 1453
2178 2176 1445
2180 2178 1437
2182 2180 1427
2184 2183 1427
2186 2185 1417
2188 2187 1417
2190 2189 1407
2192 2191 1407
2194 2193 1397
2196 2195 1397
2198 2197 1385
2200 2198 1373
2202 2200 1363
2204 1461 1348
2206 2204 1453
2208 2207 1453
2210 2209 1445
2212 2211 1445
2214 2213 1437
2216 2215 1437
2218 2217 1427
2220 2218 1417
2222 2220 1407
2224 2222 1397
2226 2224 1385
2228 2226 1373
2230 2228 1363
2232 1461 1352
2234 2232 1453
2236 2234 1445
2238 2236 1437
2240 2238 1427
2242 2240 1417
2244 2242 1407
2246 2244 1397
2248 2246 1385
2250 2248 1373
2252 2250 1363
2254 2141 1535
2256 1534 1330
2258 2257 2255
2260 2172 1535
2262 1534 1336
2264 2263 2261
2266 2202 1535
2268 1534 1342
2270 2269 2267
2272 2230 1535
2274 1534 1348
2276 2275 2273
2278 2252 1535
2280 1534 1352
2282 2281 2279
2284 1089 15
2286 2284 57
2288 1086 56
2290 2288 2287
2292 2291 2287
2294 2289 1086
2296 2294 2287
2298 2297 2287
2300 2299 2293
2302 2292 1086
2304 2303 2301
2306 1101 19
2308 2306 61
2310 1098 60
2312 2310 2309
2314 2313 2309
2316 2311 1098
2318 2316 2309
2320 2319 2309
2322 2321 2315
2324 2314 1098
2326 2325 2323
2328 1113 23
2330 2328 63
2332 1110 62
2334 2332 2331
2336 2335 2331
2338 2333 1110
2340 2338 2331
2342 2341 2331
2344 2343 2337
2346 2336 1110
2348 2347 2345
i0 controllable_nhgrant0
i1 controllable_hgrant1
i2 controllable_locked
i3 controllable_nstart
i4 controllable_hgrant2
i5 i_hlock0
i6 controllable_hgrant3
i7 i_hlock1
i8 controllable_hgrant4
i9 i_hlock2
i10 controllable_hgrant5
i11 i_hlock3
i12 controllable_hgrant6
i13 i_hlock4
i14 i_hlock5
i15 controllable_hgrant7
i16 i_hlock6
i17 controllable_hgrant8
i18 i_hlock7
i19 i_hlock8
i20 controllable_busreq
i21 i_hready
i22 i_hburst1
i23 i_hburst0
i24 i_hbusreq0
i25 i_hbusreq1
i26 i_hbusreq2
i27 i_hbusreq3
i28 controllable_ndecide
i29 i_hbusreq4
i30 i_hbusreq5
i31 i_hbusreq6
i32 i_hbusreq7
i33 i_hbusreq8
i34 controllable_hmaster3
i35 controllable_hmaster2
i36 controllable_hmaster1
i37 controllable_hmaster0
i38 controllable_hmastlock
l0 n81
l1 reg_controllable_hgrant2_out
l2 reg_stateG10_6_out
l3 reg_i_hbusreq6_out
l4 reg_controllable_hmaster1_out
l5 reg_i_hlock8_out
l6 reg_controllable_hgrant3_out
l7 reg_stateG10_7_out
l8 reg_i_hbusreq7_out
l9 next_env_fair_out
l10 reg_controllable_hmaster2_out
l11 reg_i_hlock7_out
l12 reg_controllable_hgrant4_out
l13 reg_stateG3_0_out
l14 reg_stateG10_8_out
l15 reg_i_hbusreq8_out
l16 reg_controllable_hmaster3_out
l17 reg_i_hlock6_out
l18 reg_controllable_hgrant5_out
l19 reg_stateG3_1_out
l20 reg_controllable_locked_out
l21 reg_controllable_ndecide_out
l22 reg_i_hlock5_out
l23 reg_controllable_hgrant6_out
l24 reg_stateG3_2_out
l25 reg_controllable_busreq_out
l26 reg_i_hlock4_out
l27 reg_controllable_nstart_out
l28 reg_controllable_hgrant7_out
l29 reg_i_hbusreq0_out
l30 reg_i_hlock3_out
l31 reg_controllable_hgrant8_out
l32 reg_stateG2_out
l33 reg_stateG10_1_out
l34 reg_i_hbusreq1_out
l35 reg_i_hlock2_out
l36 reg_controllable_hmastlock_out
l37 reg_stateG10_2_out
l38 reg_controllable_nhgrant0_out
l39 reg_i_hbusreq2_out
l40 reg_stateA1_out
l41 reg_i_hlock1_out
l42 fair_cnt<0>_out
l43 fair_cnt<1>_out
l44 fair_cnt<2>_out
l45 fair_cnt<3>_out
l46 fair_cnt<4>_out
l47 fair_cnt<5>_out
l48 next_sys_fair<0>_out
l49 next_sys_fair<1>_out
l50 next_sys_fair<2>_out
l51 next_sys_fair<3>_out
l52 next_sys_fair<4>_out
l53 reg_stateG10_3_out
l54 reg_i_hbusreq3_out
l55 reg_i_hlock0_out
l56 reg_i_hready_out
l57 env_safe_err_happened_out
l58 reg_stateG10_4_out
l59 reg_i_hbusreq4_out
l60 reg_controllable_hgrant1_out
l61 reg_stateG10_5_out
l62 reg_i_hbusreq5_out
l63 reg_controllable_hmaster0_out
o0 o_err
c
amba_9_new_40
This file was written by ABC on Tue May  5 16:54:28 2015
For information about AIGER format, refer to http://fmv.jku.at/aiger
-------------------------------
This AIGER file has been created by the following sequence of commands:
> vl2mv amba9c40.v   ---gives--> amba9c40.mv
> abc -c "read_blif_mv amba9c40.mv; write_aiger -s amba9c40n.aig"   ---gives--> amba9c40n.aig
> aigtoaig amba9c40n.aig amba9c40n.aag   ---gives--> amba9c40n.aag (this file)
Content of amba9c40.v:
module amba_9_new_40(
        o_err,
        i_clk,
        i_hready,
        i_hbusreq0,
        i_hlock0,
        i_hbusreq1,
        i_hlock1,
        i_hbusreq2,
        i_hlock2,
        i_hbusreq3,
        i_hlock3,
        i_hbusreq4,
        i_hlock4,
        i_hbusreq5,
        i_hlock5,
        i_hbusreq6,
        i_hlock6,
        i_hbusreq7,
        i_hlock7,
        i_hbusreq8,
        i_hlock8,
        i_hburst0,
        i_hburst1,
        controllable_hmaster0,
        controllable_hmaster1,
        controllable_hmaster2,
        controllable_hmaster3,
        controllable_hmastlock,
        controllable_nstart,
        controllable_ndecide,
        controllable_locked,
        controllable_nhgrant0,
        controllable_hgrant1,
        controllable_hgrant2,
        controllable_hgrant3,
        controllable_hgrant4,
        controllable_hgrant5,
        controllable_hgrant6,
        controllable_hgrant7,
        controllable_hgrant8,
        controllable_busreq);

input i_clk;
input i_hready;
input i_hbusreq0;
input i_hlock0;
input i_hbusreq1;
input i_hlock1;
input i_hbusreq2;
input i_hlock2;
input i_hbusreq3;
input i_hlock3;
input i_hbusreq4;
input i_hlock4;
input i_hbusreq5;
input i_hlock5;
input i_hbusreq6;
input i_hlock6;
input i_hbusreq7;
input i_hlock7;
input i_hbusreq8;
input i_hlock8;
input i_hburst0;
input i_hburst1;
input controllable_hmaster0;
input controllable_hmaster1;
input controllable_hmaster2;
input controllable_hmaster3;
input controllable_hmastlock;
input controllable_nstart;
input controllable_ndecide;
input controllable_locked;
input controllable_nhgrant0;
input controllable_hgrant1;
input controllable_hgrant2;
input controllable_hgrant3;
input controllable_hgrant4;
input controllable_hgrant5;
input controllable_hgrant6;
input controllable_hgrant7;
input controllable_hgrant8;
input controllable_busreq;
output o_err;

reg reg_i_hready;
reg reg_i_hbusreq0;
reg reg_i_hlock0;
reg reg_i_hbusreq1;
reg reg_i_hlock1;
reg reg_i_hbusreq2;
reg reg_i_hlock2;
reg reg_i_hbusreq3;
reg reg_i_hlock3;
reg reg_i_hbusreq4;
reg reg_i_hlock4;
reg reg_i_hbusreq5;
reg reg_i_hlock5;
reg reg_i_hbusreq6;
reg reg_i_hlock6;
reg reg_i_hbusreq7;
reg reg_i_hlock7;
reg reg_i_hbusreq8;
reg reg_i_hlock8;
reg reg_controllable_hmaster0;
reg reg_controllable_hmaster1;
reg reg_controllable_hmaster2;
reg reg_controllable_hmaster3;
reg reg_controllable_hmastlock;
reg reg_controllable_nstart;
reg reg_controllable_ndecide;
reg reg_controllable_locked;
reg reg_controllable_nhgrant0;
reg reg_controllable_hgrant1;
reg reg_controllable_hgrant2;
reg reg_controllable_hgrant3;
reg reg_controllable_hgrant4;
reg reg_controllable_hgrant5;
reg reg_controllable_hgrant6;
reg reg_controllable_hgrant7;
reg reg_controllable_hgrant8;
reg reg_controllable_busreq;
reg reg_stateA1;
reg reg_stateG2;
reg reg_stateG3_0;
reg reg_stateG3_1;
reg reg_stateG3_2;
reg reg_stateG10_1;
reg reg_stateG10_2;
reg reg_stateG10_3;
reg reg_stateG10_4;
reg reg_stateG10_5;
reg reg_stateG10_6;
reg reg_stateG10_7;
reg reg_stateG10_8;
reg env_safe_err_happened;
reg next_env_fair;
reg [5:0] fair_cnt;
reg [4:0] next_sys_fair;

wire env_safe_err0;
wire env_safe_err1;
wire env_safe_err2;
wire env_safe_err3;
wire env_safe_err4;
wire env_safe_err5;
wire env_safe_err6;
wire env_safe_err7;
wire env_safe_err8;
wire env_safe_err;

wire sys_safe_err0;
wire sys_safe_err1;
wire sys_safe_err2;
wire sys_safe_err3;
wire sys_safe_err4;
wire sys_safe_err5;
wire sys_safe_err6;
wire sys_safe_err7;
wire sys_safe_err8;
wire sys_safe_err9;
wire sys_safe_err10;
wire sys_safe_err11;
wire sys_safe_err12;
wire sys_safe_err13;
wire sys_safe_err14;
wire sys_safe_err15;
wire sys_safe_err16;
wire sys_safe_err17;
wire sys_safe_err18;
wire sys_safe_err19;
wire sys_safe_err20;
wire sys_safe_err21;
wire sys_safe_err22;
wire sys_safe_err23;
wire sys_safe_err24;
wire sys_safe_err25;
wire sys_safe_err26;
wire sys_safe_err27;
wire sys_safe_err28;
wire sys_safe_err29;
wire sys_safe_err30;
wire sys_safe_err31;
wire sys_safe_err32;
wire sys_safe_err33;
wire sys_safe_err34;
wire sys_safe_err35;
wire sys_safe_err36;
wire sys_safe_err37;
wire sys_safe_err38;
wire sys_safe_err39;
wire sys_safe_err40;
wire sys_safe_err41;
wire sys_safe_err42;
wire sys_safe_err43;
wire sys_safe_err44;
wire sys_safe_err45;
wire sys_safe_err46;
wire sys_safe_err47;
wire sys_safe_err48;
wire sys_safe_err49;
wire sys_safe_err50;
wire sys_safe_err51;
wire sys_safe_err52;
wire sys_safe_err53;
wire sys_safe_err54;
wire sys_safe_err55;
wire sys_safe_err56;
wire sys_safe_err57;
wire sys_safe_err58;
wire sys_safe_err59;
wire sys_safe_err60;
wire sys_safe_err61;
wire sys_safe_err62;
wire sys_safe_err63;
wire sys_safe_err64;
wire sys_safe_err65;
wire sys_safe_err66;
wire sys_safe_err67;
wire sys_safe_err68;
wire sys_safe_err;

wire env_fair0;
wire env_fair1;

wire sys_fair0;
wire sys_fair1;
wire sys_fair2;
wire sys_fair3;
wire sys_fair4;
wire sys_fair5;
wire sys_fair6;
wire sys_fair7;
wire sys_fair8;
wire sys_fair9;
wire sys_fair10;
wire fair_err;
wire o_err;

// =============================================================
//                        ENV_TRANSITION:
// =============================================================
// Assumption 3:
// G( hlock0=1 -> hbusreq0=1 );
assign env_safe_err0 =  ~(~ i_hlock0 | i_hbusreq0);

// Assumption 3:
// G( hlock1=1 -> hbusreq1=1 );
assign env_safe_err1 =  ~(~ i_hlock1 | i_hbusreq1);

// Assumption 3:
// G( hlock2=1 -> hbusreq2=1 );
assign env_safe_err2 =  ~(~ i_hlock2 | i_hbusreq2);

// Assumption 3:
// G( hlock3=1 -> hbusreq3=1 );
assign env_safe_err3 =  ~(~ i_hlock3 | i_hbusreq3);

// Assumption 3:
// G( hlock4=1 -> hbusreq4=1 );
assign env_safe_err4 =  ~(~ i_hlock4 | i_hbusreq4);

// Assumption 3:
// G( hlock5=1 -> hbusreq5=1 );
assign env_safe_err5 =  ~(~ i_hlock5 | i_hbusreq5);

// Assumption 3:
// G( hlock6=1 -> hbusreq6=1 );
assign env_safe_err6 =  ~(~ i_hlock6 | i_hbusreq6);

// Assumption 3:
// G( hlock7=1 -> hbusreq7=1 );
assign env_safe_err7 =  ~(~ i_hlock7 | i_hbusreq7);

// Assumption 3:
// G( hlock8=1 -> hbusreq8=1 );
assign env_safe_err8 =  ~(~ i_hlock8 | i_hbusreq8);

// collecting together the safety error bits:
assign env_safe_err = env_safe_err0 |
                      env_safe_err1 |
                      env_safe_err2 |
                      env_safe_err3 |
                      env_safe_err4 |
                      env_safe_err5 |
                      env_safe_err6 |
                      env_safe_err7 |
                      env_safe_err8;

// =============================================================
//                        SYS_TRANSITION:
// =============================================================
// G((hmaster0=0) * (hmaster1=0) * (hmaster2=0) * (hmaster3=0) -> (hbusreq0=0 <-> busreq=0));
assign sys_safe_err0 =  ~( ~( ~(controllable_hmaster0) & ~(controllable_hmaster1) & ~(controllable_hmaster2) & ~(controllable_hmaster3) )|(~i_hbusreq0 ^~ (~controllable_busreq)));

// G((hmaster0=1) * (hmaster1=0) * (hmaster2=0) * (hmaster3=0) -> (hbusreq1=0 <-> busreq=0));
assign sys_safe_err1 =  ~( ~( controllable_hmaster0 & ~(controllable_hmaster1) & ~(controllable_hmaster2) & ~(controllable_hmaster3) )|(~i_hbusreq1 ^~ (~controllable_busreq)));

// G((hmaster0=0) * (hmaster1=1) * (hmaster2=0) * (hmaster3=0) -> (hbusreq2=0 <-> busreq=0));
assign sys_safe_err2 =  ~( ~( ~(controllable_hmaster0) & controllable_hmaster1 & ~(controllable_hmaster2) & ~(controllable_hmaster3) )|(~i_hbusreq2 ^~ (~controllable_busreq)));

// G((hmaster0=1) * (hmaster1=1) * (hmaster2=0) * (hmaster3=0) -> (hbusreq3=0 <-> busreq=0));
assign sys_safe_err3 =  ~( ~( controllable_hmaster0 & controllable_hmaster1 & ~(controllable_hmaster2) & ~(controllable_hmaster3) )|(~i_hbusreq3 ^~ (~controllable_busreq)));

// G((hmaster0=0) * (hmaster1=0) * (hmaster2=1) * (hmaster3=0) -> (hbusreq4=0 <-> busreq=0));
assign sys_safe_err4 =  ~( ~( ~(controllable_hmaster0) & ~(controllable_hmaster1) & controllable_hmaster2 & ~(controllable_hmaster3) )|(~i_hbusreq4 ^~ (~controllable_busreq)));

// G((hmaster0=1) * (hmaster1=0) * (hmaster2=1) * (hmaster3=0) -> (hbusreq5=0 <-> busreq=0));
assign sys_safe_err5 =  ~( ~( controllable_hmaster0 & ~(controllable_hmaster1) & controllable_hmaster2 & ~(controllable_hmaster3) )|(~i_hbusreq5 ^~ (~controllable_busreq)));

// G((hmaster0=0) * (hmaster1=1) * (hmaster2=1) * (hmaster3=0) -> (hbusreq6=0 <-> busreq=0));
assign sys_safe_err6 =  ~( ~( ~(controllable_hmaster0) & controllable_hmaster1 & controllable_hmaster2 & ~(controllable_hmaster3) )|(~i_hbusreq6 ^~ (~controllable_busreq)));

// G((hmaster0=1) * (hmaster1=1) * (hmaster2=1) * (hmaster3=0) -> (hbusreq7=0 <-> busreq=0));
assign sys_safe_err7 =  ~( ~( controllable_hmaster0 & controllable_hmaster1 & controllable_hmaster2 & ~(controllable_hmaster3) )|(~i_hbusreq7 ^~ (~controllable_busreq)));

// G((hmaster0=0) * (hmaster1=0) * (hmaster2=0) * (hmaster3=1) -> (hbusreq8=0 <-> busreq=0));
assign sys_safe_err8 =  ~( ~( ~(controllable_hmaster0) & ~(controllable_hmaster1) & ~(controllable_hmaster2) & controllable_hmaster3 )|(~i_hbusreq8 ^~ (~controllable_busreq)));

// Guarantee 1:
// G((hready=0) -> X(start=0));
assign sys_safe_err9 =  ~( reg_i_hready | controllable_nstart );

// G(((stateG2=1) * (start=1)) -> FALSE;
assign sys_safe_err10 =  ~( ~(reg_stateG2 & ~controllable_nstart) | 0 );

// G(((stateG3_0=1) * (stateG3_1=0) * (stateG3_2=0) * ((start=1))) -> FALSE);
// G(((stateG3_0=0) * (stateG3_1=1) * (stateG3_2=0) * ((start=1))) -> FALSE);
// G(((stateG3_0=1) * (stateG3_1=1) * (stateG3_2=0) * ((start=1))) -> FALSE);
// G(((stateG3_0=0) * (stateG3_1=0) * (stateG3_2=1) * ((start=1))) -> FALSE);
// all these rules can be summarized as: only in state 000, start=1 is allowed:
assign sys_safe_err11 =  (reg_stateG3_0 | reg_stateG3_1 | reg_stateG3_2) & ~controllable_nstart;

// G( (hready=1) -> (   (hgrant0=1) <-> (X(hmaster0=0) * X(hmaster1=0) * X(hmaster2=0) * X(hmaster3=0))  ) );
assign sys_safe_err12 =  ~( ~(reg_i_hready) | ( ~reg_controllable_nhgrant0 ^~ ( ~(controllable_hmaster0) & ~(controllable_hmaster1) & ~(controllable_hmaster2) & ~(controllable_hmaster3) ) ) );

// G( (hready=1) -> (   (hgrant1=1) <-> (X(hmaster0=1) * X(hmaster1=0) * X(hmaster2=0) * X(hmaster3=0))  ) );
assign sys_safe_err13 =  ~( ~(reg_i_hready) | ( reg_controllable_hgrant1 ^~ ( controllable_hmaster0 & ~(controllable_hmaster1) & ~(controllable_hmaster2) & ~(controllable_hmaster3) ) ) );

// G( (hready=1) -> (   (hgrant2=1) <-> (X(hmaster0=0) * X(hmaster1=1) * X(hmaster2=0) * X(hmaster3=0))  ) );
assign sys_safe_err14 =  ~( ~(reg_i_hready) | ( reg_controllable_hgrant2 ^~ ( ~(controllable_hmaster0) & controllable_hmaster1 & ~(controllable_hmaster2) & ~(controllable_hmaster3) ) ) );

// G( (hready=1) -> (   (hgrant3=1) <-> (X(hmaster0=1) * X(hmaster1=1) * X(hmaster2=0) * X(hmaster3=0))  ) );
assign sys_safe_err15 =  ~( ~(reg_i_hready) | ( reg_controllable_hgrant3 ^~ ( controllable_hmaster0 & controllable_hmaster1 & ~(controllable_hmaster2) & ~(controllable_hmaster3) ) ) );

// G( (hready=1) -> (   (hgrant4=1) <-> (X(hmaster0=0) * X(hmaster1=0) * X(hmaster2=1) * X(hmaster3=0))  ) );
assign sys_safe_err16 =  ~( ~(reg_i_hready) | ( reg_controllable_hgrant4 ^~ ( ~(controllable_hmaster0) & ~(controllable_hmaster1) & controllable_hmaster2 & ~(controllable_hmaster3) ) ) );

// G( (hready=1) -> (   (hgrant5=1) <-> (X(hmaster0=1) * X(hmaster1=0) * X(hmaster2=1) * X(hmaster3=0))  ) );
assign sys_safe_err17 =  ~( ~(reg_i_hready) | ( reg_controllable_hgrant5 ^~ ( controllable_hmaster0 & ~(controllable_hmaster1) & controllable_hmaster2 & ~(controllable_hmaster3) ) ) );

// G( (hready=1) -> (   (hgrant6=1) <-> (X(hmaster0=0) * X(hmaster1=1) * X(hmaster2=1) * X(hmaster3=0))  ) );
assign sys_safe_err18 =  ~( ~(reg_i_hready) | ( reg_controllable_hgrant6 ^~ ( ~(controllable_hmaster0) & controllable_hmaster1 & controllable_hmaster2 & ~(controllable_hmaster3) ) ) );

// G( (hready=1) -> (   (hgrant7=1) <-> (X(hmaster0=1) * X(hmaster1=1) * X(hmaster2=1) * X(hmaster3=0))  ) );
assign sys_safe_err19 =  ~( ~(reg_i_hready) | ( reg_controllable_hgrant7 ^~ ( controllable_hmaster0 & controllable_hmaster1 & controllable_hmaster2 & ~(controllable_hmaster3) ) ) );

// G( (hready=1) -> (   (hgrant8=1) <-> (X(hmaster0=0) * X(hmaster1=0) * X(hmaster2=0) * X(hmaster3=1))  ) );
assign sys_safe_err20 =  ~( ~(reg_i_hready) | ( reg_controllable_hgrant8 ^~ ( ~(controllable_hmaster0) & ~(controllable_hmaster1) & ~(controllable_hmaster2) & controllable_hmaster3 ) ) );

// HMASTLOCK:
// G(  (hready=1) -> (locked=0 <-> X(hmastlock=0) ) );
assign sys_safe_err21 =  ~( ~(reg_i_hready) | (~reg_controllable_locked ^~ ~controllable_hmastlock) );

// Master 0:
// G( X(start=0) -> ( ((hmaster0=0) * (hmaster1=0) * (hmaster2=0) * (hmaster3=0)) <-> (X(hmaster0=0) * X(hmaster1=0) * X(hmaster2=0) * X(hmaster3=0)) ) );
assign sys_safe_err22 =  ~( ~(controllable_nstart) | ( ( ~(reg_controllable_hmaster0) & ~(reg_controllable_hmaster1) & ~(reg_controllable_hmaster2) & ~(reg_controllable_hmaster3) ) ^~ ( ~(controllable_hmaster0) & ~(controllable_hmaster1) & ~(controllable_hmaster2) & ~(controllable_hmaster3) )) );

// Master 1:
// G( X(start=0) -> ( ((hmaster0=1) * (hmaster1=0) * (hmaster2=0) * (hmaster3=0)) <-> (X(hmaster0=1) * X(hmaster1=0) * X(hmaster2=0) * X(hmaster3=0)) ) );
assign sys_safe_err23 =  ~( ~(controllable_nstart) | ( ( reg_controllable_hmaster0 & ~(reg_controllable_hmaster1) & ~(reg_controllable_hmaster2) & ~(reg_controllable_hmaster3) ) ^~ ( controllable_hmaster0 & ~(controllable_hmaster1) & ~(controllable_hmaster2) & ~(controllable_hmaster3) )) );

// Master 2:
// G( X(start=0) -> ( ((hmaster0=0) * (hmaster1=1) * (hmaster2=0) * (hmaster3=0)) <-> (X(hmaster0=0) * X(hmaster1=1) * X(hmaster2=0) * X(hmaster3=0)) ) );
assign sys_safe_err24 =  ~( ~(controllable_nstart) | ( ( ~(reg_controllable_hmaster0) & reg_controllable_hmaster1 & ~(reg_controllable_hmaster2) & ~(reg_controllable_hmaster3) ) ^~ ( ~(controllable_hmaster0) & controllable_hmaster1 & ~(controllable_hmaster2) & ~(controllable_hmaster3) )) );

// Master 3:
// G( X(start=0) -> ( ((hmaster0=1) * (hmaster1=1) * (hmaster2=0) * (hmaster3=0)) <-> (X(hmaster0=1) * X(hmaster1=1) * X(hmaster2=0) * X(hmaster3=0)) ) );
assign sys_safe_err25 =  ~( ~(controllable_nstart) | ( ( reg_controllable_hmaster0 & reg_controllable_hmaster1 & ~(reg_controllable_hmaster2) & ~(reg_controllable_hmaster3) ) ^~ ( controllable_hmaster0 & controllable_hmaster1 & ~(controllable_hmaster2) & ~(controllable_hmaster3) )) );

// Master 4:
// G( X(start=0) -> ( ((hmaster0=0) * (hmaster1=0) * (hmaster2=1) * (hmaster3=0)) <-> (X(hmaster0=0) * X(hmaster1=0) * X(hmaster2=1) * X(hmaster3=0)) ) );
assign sys_safe_err26 =  ~( ~(controllable_nstart) | ( ( ~(reg_controllable_hmaster0) & ~(reg_controllable_hmaster1) & reg_controllable_hmaster2 & ~(reg_controllable_hmaster3) ) ^~ ( ~(controllable_hmaster0) & ~(controllable_hmaster1) & controllable_hmaster2 & ~(controllable_hmaster3) )) );

// Master 5:
// G( X(start=0) -> ( ((hmaster0=1) * (hmaster1=0) * (hmaster2=1) * (hmaster3=0)) <-> (X(hmaster0=1) * X(hmaster1=0) * X(hmaster2=1) * X(hmaster3=0)) ) );
assign sys_safe_err27 =  ~( ~(controllable_nstart) | ( ( reg_controllable_hmaster0 & ~(reg_controllable_hmaster1) & reg_controllable_hmaster2 & ~(reg_controllable_hmaster3) ) ^~ ( controllable_hmaster0 & ~(controllable_hmaster1) & controllable_hmaster2 & ~(controllable_hmaster3) )) );

// Master 6:
// G( X(start=0) -> ( ((hmaster0=0) * (hmaster1=1) * (hmaster2=1) * (hmaster3=0)) <-> (X(hmaster0=0) * X(hmaster1=1) * X(hmaster2=1) * X(hmaster3=0)) ) );
assign sys_safe_err28 =  ~( ~(controllable_nstart) | ( ( ~(reg_controllable_hmaster0) & reg_controllable_hmaster1 & reg_controllable_hmaster2 & ~(reg_controllable_hmaster3) ) ^~ ( ~(controllable_hmaster0) & controllable_hmaster1 & controllable_hmaster2 & ~(controllable_hmaster3) )) );

// Master 7:
// G( X(start=0) -> ( ((hmaster0=1) * (hmaster1=1) * (hmaster2=1) * (hmaster3=0)) <-> (X(hmaster0=1) * X(hmaster1=1) * X(hmaster2=1) * X(hmaster3=0)) ) );
assign sys_safe_err29 =  ~( ~(controllable_nstart) | ( ( reg_controllable_hmaster0 & reg_controllable_hmaster1 & reg_controllable_hmaster2 & ~(reg_controllable_hmaster3) ) ^~ ( controllable_hmaster0 & controllable_hmaster1 & controllable_hmaster2 & ~(controllable_hmaster3) )) );

// Master 8:
// G( X(start=0) -> ( ((hmaster0=0) * (hmaster1=0) * (hmaster2=0) * (hmaster3=1)) <-> (X(hmaster0=0) * X(hmaster1=0) * X(hmaster2=0) * X(hmaster3=1)) ) );
assign sys_safe_err30 =  ~( ~(controllable_nstart) | ( ( ~(reg_controllable_hmaster0) & ~(reg_controllable_hmaster1) & ~(reg_controllable_hmaster2) & reg_controllable_hmaster3 ) ^~ ( ~(controllable_hmaster0) & ~(controllable_hmaster1) & ~(controllable_hmaster2) & controllable_hmaster3 )) );

// Guarantee 6.2:
// G( ((X(start=0))) -> ( (hmastlock=1) <-> X(hmastlock=1)) );
assign sys_safe_err31 =  ~( ~(controllable_nstart) | ( reg_controllable_hmastlock ^~ controllable_hmastlock) );

// G( (decide=1  *  hlock0=1  *  X(hgrant0=1) )->X(locked=1));
assign sys_safe_err32 =  ~( ~(~reg_controllable_ndecide & reg_i_hlock0 & ~controllable_nhgrant0) | (controllable_locked) );

// G((decide=1  *  hlock0=0  *  X(hgrant0=1))->X(locked=0));
assign sys_safe_err33 =  ~( ~(~reg_controllable_ndecide & ~reg_i_hlock0 & ~controllable_nhgrant0) | (~controllable_locked) );

// G( (decide=1  *  hlock1=1  *  X(hgrant1=1) )->X(locked=1));
assign sys_safe_err34 =  ~( ~(~reg_controllable_ndecide & reg_i_hlock1 & controllable_hgrant1) | (controllable_locked) );

// G((decide=1  *  hlock1=0  *  X(hgrant1=1))->X(locked=0));
assign sys_safe_err35 =  ~( ~(~reg_controllable_ndecide & ~reg_i_hlock1 & controllable_hgrant1) | (~controllable_locked) );

// G( (decide=1  *  hlock2=1  *  X(hgrant2=1) )->X(locked=1));
assign sys_safe_err36 =  ~( ~(~reg_controllable_ndecide & reg_i_hlock2 & controllable_hgrant2) | (controllable_locked) );

// G((decide=1  *  hlock2=0  *  X(hgrant2=1))->X(locked=0));
assign sys_safe_err37 =  ~( ~(~reg_controllable_ndecide & ~reg_i_hlock2 & controllable_hgrant2) | (~controllable_locked) );

// G( (decide=1  *  hlock3=1  *  X(hgrant3=1) )->X(locked=1));
assign sys_safe_err38 =  ~( ~(~reg_controllable_ndecide & reg_i_hlock3 & controllable_hgrant3) | (controllable_locked) );

// G((decide=1  *  hlock3=0  *  X(hgrant3=1))->X(locked=0));
assign sys_safe_err39 =  ~( ~(~reg_controllable_ndecide & ~reg_i_hlock3 & controllable_hgrant3) | (~controllable_locked) );

// G( (decide=1  *  hlock4=1  *  X(hgrant4=1) )->X(locked=1));
assign sys_safe_err40 =  ~( ~(~reg_controllable_ndecide & reg_i_hlock4 & controllable_hgrant4) | (controllable_locked) );

// G((decide=1  *  hlock4=0  *  X(hgrant4=1))->X(locked=0));
assign sys_safe_err41 =  ~( ~(~reg_controllable_ndecide & ~reg_i_hlock4 & controllable_hgrant4) | (~controllable_locked) );

// G( (decide=1  *  hlock5=1  *  X(hgrant5=1) )->X(locked=1));
assign sys_safe_err42 =  ~( ~(~reg_controllable_ndecide & reg_i_hlock5 & controllable_hgrant5) | (controllable_locked) );

// G((decide=1  *  hlock5=0  *  X(hgrant5=1))->X(locked=0));
assign sys_safe_err43 =  ~( ~(~reg_controllable_ndecide & ~reg_i_hlock5 & controllable_hgrant5) | (~controllable_locked) );

// G( (decide=1  *  hlock6=1  *  X(hgrant6=1) )->X(locked=1));
assign sys_safe_err44 =  ~( ~(~reg_controllable_ndecide & reg_i_hlock6 & controllable_hgrant6) | (controllable_locked) );

// G((decide=1  *  hlock6=0  *  X(hgrant6=1))->X(locked=0));
assign sys_safe_err45 =  ~( ~(~reg_controllable_ndecide & ~reg_i_hlock6 & controllable_hgrant6) | (~controllable_locked) );

// G( (decide=1  *  hlock7=1  *  X(hgrant7=1) )->X(locked=1));
assign sys_safe_err46 =  ~( ~(~reg_controllable_ndecide & reg_i_hlock7 & controllable_hgrant7) | (controllable_locked) );

// G((decide=1  *  hlock7=0  *  X(hgrant7=1))->X(locked=0));
assign sys_safe_err47 =  ~( ~(~reg_controllable_ndecide & ~reg_i_hlock7 & controllable_hgrant7) | (~controllable_locked) );

// G( (decide=1  *  hlock8=1  *  X(hgrant8=1) )->X(locked=1));
assign sys_safe_err48 =  ~( ~(~reg_controllable_ndecide & reg_i_hlock8 & controllable_hgrant8) | (controllable_locked) );

// G((decide=1  *  hlock8=0  *  X(hgrant8=1))->X(locked=0));
assign sys_safe_err49 =  ~( ~(~reg_controllable_ndecide & ~reg_i_hlock8 & controllable_hgrant8) | (~controllable_locked) );

// G( (decide=0) -> (  ((hgrant0=0)<->X(hgrant0=0))  ));
assign sys_safe_err50 =  ~( ~(reg_controllable_ndecide) | (reg_controllable_nhgrant0 ^~ controllable_nhgrant0) );

// G( (decide=0) -> (  ((hgrant1=0)<->X(hgrant1=0))  ));
assign sys_safe_err51 =  ~( ~(reg_controllable_ndecide) | (~reg_controllable_hgrant1 ^~ ~controllable_hgrant1) );

// G( (decide=0) -> (  ((hgrant2=0)<->X(hgrant2=0))  ));
assign sys_safe_err52 =  ~( ~(reg_controllable_ndecide) | (~reg_controllable_hgrant2 ^~ ~controllable_hgrant2) );

// G( (decide=0) -> (  ((hgrant3=0)<->X(hgrant3=0))  ));
assign sys_safe_err53 =  ~( ~(reg_controllable_ndecide) | (~reg_controllable_hgrant3 ^~ ~controllable_hgrant3) );

// G( (decide=0) -> (  ((hgrant4=0)<->X(hgrant4=0))  ));
assign sys_safe_err54 =  ~( ~(reg_controllable_ndecide) | (~reg_controllable_hgrant4 ^~ ~controllable_hgrant4) );

// G( (decide=0) -> (  ((hgrant5=0)<->X(hgrant5=0))  ));
assign sys_safe_err55 =  ~( ~(reg_controllable_ndecide) | (~reg_controllable_hgrant5 ^~ ~controllable_hgrant5) );

// G( (decide=0) -> (  ((hgrant6=0)<->X(hgrant6=0))  ));
assign sys_safe_err56 =  ~( ~(reg_controllable_ndecide) | (~reg_controllable_hgrant6 ^~ ~controllable_hgrant6) );

// G( (decide=0) -> (  ((hgrant7=0)<->X(hgrant7=0))  ));
assign sys_safe_err57 =  ~( ~(reg_controllable_ndecide) | (~reg_controllable_hgrant7 ^~ ~controllable_hgrant7) );

// G( (decide=0) -> (  ((hgrant8=0)<->X(hgrant8=0))  ));
assign sys_safe_err58 =  ~( ~(reg_controllable_ndecide) | (~reg_controllable_hgrant8 ^~ ~controllable_hgrant8) );

// G((decide=0)->(locked=0 <-> X(locked=0)));
assign sys_safe_err59 =  ~( ~(reg_controllable_ndecide) | (~reg_controllable_locked ^~ ~controllable_locked) );

// G(((stateG10_1=1) * (((hgrant1=1)) * (hbusreq1=0)))->FALSE);
assign sys_safe_err60 =  ~( ~(reg_stateG10_1 & (controllable_hgrant1 & ~i_hbusreq1)) | 0 );

// G(((stateG10_2=1) * (((hgrant2=1)) * (hbusreq2=0)))->FALSE);
assign sys_safe_err61 =  ~( ~(reg_stateG10_2 & (controllable_hgrant2 & ~i_hbusreq2)) | 0 );

// G(((stateG10_3=1) * (((hgrant3=1)) * (hbusreq3=0)))->FALSE);
assign sys_safe_err62 =  ~( ~(reg_stateG10_3 & (controllable_hgrant3 & ~i_hbusreq3)) | 0 );

// G(((stateG10_4=1) * (((hgrant4=1)) * (hbusreq4=0)))->FALSE);
assign sys_safe_err63 =  ~( ~(reg_stateG10_4 & (controllable_hgrant4 & ~i_hbusreq4)) | 0 );

// G(((stateG10_5=1) * (((hgrant5=1)) * (hbusreq5=0)))->FALSE);
assign sys_safe_err64 =  ~( ~(reg_stateG10_5 & (controllable_hgrant5 & ~i_hbusreq5)) | 0 );

// G(((stateG10_6=1) * (((hgrant6=1)) * (hbusreq6=0)))->FALSE);
assign sys_safe_err65 =  ~( ~(reg_stateG10_6 & (controllable_hgrant6 & ~i_hbusreq6)) | 0 );

// G(((stateG10_7=1) * (((hgrant7=1)) * (hbusreq7=0)))->FALSE);
assign sys_safe_err66 =  ~( ~(reg_stateG10_7 & (controllable_hgrant7 & ~i_hbusreq7)) | 0 );

// G(((stateG10_8=1) * (((hgrant8=1)) * (hbusreq8=0)))->FALSE);
assign sys_safe_err67 =  ~( ~(reg_stateG10_8 & (controllable_hgrant8 & ~i_hbusreq8)) | 0 );

// default master
// G((decide=1  *  hbusreq0=0  *  hbusreq1=0  *  hbusreq2=0  *  hbusreq3=0  *  hbusreq4=0  *  hbusreq5=0  *  hbusreq6=0  *  hbusreq7=0  *  hbusreq8=0) -> X(hgrant0=1));
assign sys_safe_err68 =  ~( ~(~reg_controllable_ndecide & (~reg_i_hbusreq0 & ~reg_i_hbusreq1 & ~reg_i_hbusreq2 & ~reg_i_hbusreq3 & ~reg_i_hbusreq4 & ~reg_i_hbusreq5 & ~reg_i_hbusreq6 & ~reg_i_hbusreq7 & ~reg_i_hbusreq8)) | (~controllable_nhgrant0) );

// collecting together the safety error bits:
assign sys_safe_err = sys_safe_err0 |
                      sys_safe_err1 |
                      sys_safe_err2 |
                      sys_safe_err3 |
                      sys_safe_err4 |
                      sys_safe_err5 |
                      sys_safe_err6 |
                      sys_safe_err7 |
                      sys_safe_err8 |
                      sys_safe_err9 |
                      sys_safe_err10 |
                      sys_safe_err11 |
                      sys_safe_err12 |
                      sys_safe_err13 |
                      sys_safe_err14 |
                      sys_safe_err15 |
                      sys_safe_err16 |
                      sys_safe_err17 |
                      sys_safe_err18 |
                      sys_safe_err19 |
                      sys_safe_err20 |
                      sys_safe_err21 |
                      sys_safe_err22 |
                      sys_safe_err23 |
                      sys_safe_err24 |
                      sys_safe_err25 |
                      sys_safe_err26 |
                      sys_safe_err27 |
                      sys_safe_err28 |
                      sys_safe_err29 |
                      sys_safe_err30 |
                      sys_safe_err31 |
                      sys_safe_err32 |
                      sys_safe_err33 |
                      sys_safe_err34 |
                      sys_safe_err35 |
                      sys_safe_err36 |
                      sys_safe_err37 |
                      sys_safe_err38 |
                      sys_safe_err39 |
                      sys_safe_err40 |
                      sys_safe_err41 |
                      sys_safe_err42 |
                      sys_safe_err43 |
                      sys_safe_err44 |
                      sys_safe_err45 |
                      sys_safe_err46 |
                      sys_safe_err47 |
                      sys_safe_err48 |
                      sys_safe_err49 |
                      sys_safe_err50 |
                      sys_safe_err51 |
                      sys_safe_err52 |
                      sys_safe_err53 |
                      sys_safe_err54 |
                      sys_safe_err55 |
                      sys_safe_err56 |
                      sys_safe_err57 |
                      sys_safe_err58 |
                      sys_safe_err59 |
                      sys_safe_err60 |
                      sys_safe_err61 |
                      sys_safe_err62 |
                      sys_safe_err63 |
                      sys_safe_err64 |
                      sys_safe_err65 |
                      sys_safe_err66 |
                      sys_safe_err67 |
                      sys_safe_err68;

// =============================================================
//                          ENV_FAIRNESS:
// =============================================================
// Assumption 1: 
// G(F(stateA1=0));
assign env_fair0 =  ~reg_stateA1;

// Assumption 2:
// G(F(hready=1));
assign env_fair1 =  i_hready;


// =============================================================
//                          SYS_FAIRNESS:
// =============================================================
// Guarantee 2:
// G(F(stateG2=0));
assign sys_fair0 = ~reg_stateG2;

// Guarantee 3:
// G(F((stateG3_0=0)  *  (stateG3_1=0)  *  (stateG3_2=0)));
assign sys_fair1 =  (~reg_stateG3_0 & ~reg_stateG3_1 & ~reg_stateG3_2);

// G(F(((hmaster0=0) * (hmaster1=0) * (hmaster2=0) * (hmaster3=0))  |  hbusreq0=0));
assign sys_fair2 =  ( ~(controllable_hmaster0) & ~(controllable_hmaster1) & ~(controllable_hmaster2) & ~(controllable_hmaster3) ) | ~i_hbusreq0;

// G(F(((hmaster0=1) * (hmaster1=0) * (hmaster2=0) * (hmaster3=0))  |  hbusreq1=0));
assign sys_fair3 =  ( controllable_hmaster0 & ~(controllable_hmaster1) & ~(controllable_hmaster2) & ~(controllable_hmaster3) ) | ~i_hbusreq1;

// G(F(((hmaster0=0) * (hmaster1=1) * (hmaster2=0) * (hmaster3=0))  |  hbusreq2=0));
assign sys_fair4 =  ( ~(controllable_hmaster0) & controllable_hmaster1 & ~(controllable_hmaster2) & ~(controllable_hmaster3) ) | ~i_hbusreq2;

// G(F(((hmaster0=1) * (hmaster1=1) * (hmaster2=0) * (hmaster3=0))  |  hbusreq3=0));
assign sys_fair5 =  ( controllable_hmaster0 & controllable_hmaster1 & ~(controllable_hmaster2) & ~(controllable_hmaster3) ) | ~i_hbusreq3;

// G(F(((hmaster0=0) * (hmaster1=0) * (hmaster2=1) * (hmaster3=0))  |  hbusreq4=0));
assign sys_fair6 =  ( ~(controllable_hmaster0) & ~(controllable_hmaster1) & controllable_hmaster2 & ~(controllable_hmaster3) ) | ~i_hbusreq4;

// G(F(((hmaster0=1) * (hmaster1=0) * (hmaster2=1) * (hmaster3=0))  |  hbusreq5=0));
assign sys_fair7 =  ( controllable_hmaster0 & ~(controllable_hmaster1) & controllable_hmaster2 & ~(controllable_hmaster3) ) | ~i_hbusreq5;

// G(F(((hmaster0=0) * (hmaster1=1) * (hmaster2=1) * (hmaster3=0))  |  hbusreq6=0));
assign sys_fair8 =  ( ~(controllable_hmaster0) & controllable_hmaster1 & controllable_hmaster2 & ~(controllable_hmaster3) ) | ~i_hbusreq6;

// G(F(((hmaster0=1) * (hmaster1=1) * (hmaster2=1) * (hmaster3=0))  |  hbusreq7=0));
assign sys_fair9 =  ( controllable_hmaster0 & controllable_hmaster1 & controllable_hmaster2 & ~(controllable_hmaster3) ) | ~i_hbusreq7;

// G(F(((hmaster0=0) * (hmaster1=0) * (hmaster2=0) * (hmaster3=1))  |  hbusreq8=0));
assign sys_fair10 =  ( ~(controllable_hmaster0) & ~(controllable_hmaster1) & ~(controllable_hmaster2) & controllable_hmaster3 ) | ~i_hbusreq8;

assign fair_err = (fair_cnt >= 6'b101000);

// computing the error output bit:
assign o_err = ~env_safe_err & ~env_safe_err_happened & (sys_safe_err | fair_err);

initial
 begin
  reg_i_hready = 0;
  reg_i_hbusreq0 = 0;
  reg_i_hlock0 = 0;
  reg_i_hbusreq1 = 0;
  reg_i_hlock1 = 0;
  reg_i_hbusreq2 = 0;
  reg_i_hlock2 = 0;
  reg_i_hbusreq3 = 0;
  reg_i_hlock3 = 0;
  reg_i_hbusreq4 = 0;
  reg_i_hlock4 = 0;
  reg_i_hbusreq5 = 0;
  reg_i_hlock5 = 0;
  reg_i_hbusreq6 = 0;
  reg_i_hlock6 = 0;
  reg_i_hbusreq7 = 0;
  reg_i_hlock7 = 0;
  reg_i_hbusreq8 = 0;
  reg_i_hlock8 = 0;
  reg_controllable_hmaster0 = 0;
  reg_controllable_hmaster1 = 0;
  reg_controllable_hmaster2 = 0;
  reg_controllable_hmaster3 = 0;
  reg_controllable_hmastlock = 0;
  reg_controllable_nstart = 0;
  reg_controllable_ndecide = 0;
  reg_controllable_locked = 0;
  reg_controllable_nhgrant0 = 0;
  reg_controllable_hgrant1 = 0;
  reg_controllable_hgrant2 = 0;
  reg_controllable_hgrant3 = 0;
  reg_controllable_hgrant4 = 0;
  reg_controllable_hgrant5 = 0;
  reg_controllable_hgrant6 = 0;
  reg_controllable_hgrant7 = 0;
  reg_controllable_hgrant8 = 0;
  reg_controllable_busreq = 0;
  reg_stateA1 = 0;
  reg_stateG2 = 0;
  reg_stateG3_0 = 0;
  reg_stateG3_1 = 0;
  reg_stateG3_2 = 0;
  reg_stateG10_1 = 0;
  reg_stateG10_2 = 0;
  reg_stateG10_3 = 0;
  reg_stateG10_4 = 0;
  reg_stateG10_5 = 0;
  reg_stateG10_6 = 0;
  reg_stateG10_7 = 0;
  reg_stateG10_8 = 0;
  env_safe_err_happened = 0;
  next_env_fair = 0;
  fair_cnt = 0;
  next_sys_fair = 0;
 end


always @(posedge i_clk)
 begin
   // We remember if an environment error occurred:
   env_safe_err_happened = env_safe_err_happened | env_safe_err;

   // Updating the fairness counters: 
   if((next_sys_fair == 0) & sys_fair0)
    begin
      next_sys_fair = 1;
      next_env_fair = 0;
      fair_cnt = 0;
    end
   else if((next_sys_fair == 1) & sys_fair1)
    begin
      next_sys_fair = 2;
      next_env_fair = 0;
      fair_cnt = 0;
    end
   else if((next_sys_fair == 2) & sys_fair2)
    begin
      next_sys_fair = 3;
      next_env_fair = 0;
      fair_cnt = 0;
    end
   else if((next_sys_fair == 3) & sys_fair3)
    begin
      next_sys_fair = 4;
      next_env_fair = 0;
      fair_cnt = 0;
    end
   else if((next_sys_fair == 4) & sys_fair4)
    begin
      next_sys_fair = 5;
      next_env_fair = 0;
      fair_cnt = 0;
    end
   else if((next_sys_fair == 5) & sys_fair5)
    begin
      next_sys_fair = 6;
      next_env_fair = 0;
      fair_cnt = 0;
    end
   else if((next_sys_fair == 6) & sys_fair6)
    begin
      next_sys_fair = 7;
      next_env_fair = 0;
      fair_cnt = 0;
    end
   else if((next_sys_fair == 7) & sys_fair7)
    begin
      next_sys_fair = 8;
      next_env_fair = 0;
      fair_cnt = 0;
    end
   else if((next_sys_fair == 8) & sys_fair8)
    begin
      next_sys_fair = 9;
      next_env_fair = 0;
      fair_cnt = 0;
    end
   else if((next_sys_fair == 9) & sys_fair9)
    begin
      next_sys_fair = 10;
      next_env_fair = 0;
      fair_cnt = 0;
    end
   else if((next_sys_fair == 10) & sys_fair10)
    begin
      next_sys_fair = 0;
      next_env_fair = 0;
      fair_cnt = 0;
    end
   else if(~next_env_fair & env_fair0)
    begin
      next_env_fair = 1;
    end
   else if(next_env_fair & env_fair1)
    begin
      next_env_fair = 0;
      fair_cnt = fair_cnt + 1;
    end

   // Updating the automata: 
   // Automaton A1: 
   if(~reg_stateA1 & controllable_hmastlock & ~i_hburst0 & ~i_hburst1)
    begin
      reg_stateA1 = 1'b1;
    end
   else if(reg_stateA1 & ~controllable_busreq)
    begin
      reg_stateA1 = 1'b0;
    end

   // Automaton G2: 
   if(~reg_stateG2)
    begin
      if(controllable_hmastlock & ~controllable_nstart & ~i_hburst0 & ~i_hburst1)
       begin
         reg_stateG2 = 1'b1;
       end
    end
   else // if(reg_stateG2)
    begin
      if(~controllable_busreq)
       begin
         reg_stateG2 = 1'b0;
       end
    end

   // Automaton G3: 
   if(~reg_stateG3_0 & ~reg_stateG3_1 & ~reg_stateG3_2 & controllable_hmastlock & ~controllable_nstart &  ~i_hburst0 & i_hburst1 & ~i_hready)
    begin
      reg_stateG3_0 = 1'b1;
      reg_stateG3_1 = 1'b0;
      reg_stateG3_2 = 1'b0;
    end
   else if(~reg_stateG3_0 & ~reg_stateG3_1 & ~reg_stateG3_2 & controllable_hmastlock & ~controllable_nstart &  ~i_hburst0 & i_hburst1 & i_hready)
    begin
      reg_stateG3_0 = 1'b0;
      reg_stateG3_1 = 1'b1;
      reg_stateG3_2 = 1'b0;
    end
   else if(reg_stateG3_0 & ~reg_stateG3_1 & ~reg_stateG3_2 & i_hready)
    begin
      reg_stateG3_0 = 1'b0;
      reg_stateG3_1 = 1'b1;
      reg_stateG3_2 = 1'b0;
    end
   else if(~reg_stateG3_0 & reg_stateG3_1 & ~reg_stateG3_2 & i_hready)
    begin
      reg_stateG3_0 = 1'b1;
      reg_stateG3_1 = 1'b1;
      reg_stateG3_2 = 1'b0;
    end
   else if(reg_stateG3_0 & reg_stateG3_1 & ~reg_stateG3_2 & i_hready)
    begin
      reg_stateG3_0 = 1'b0;
      reg_stateG3_1 = 1'b0;
      reg_stateG3_2 = 1'b1;
    end
   else if(~reg_stateG3_0 & ~reg_stateG3_1 & reg_stateG3_2 & i_hready)
    begin
      reg_stateG3_0 = 1'b0;
      reg_stateG3_1 = 1'b0;
      reg_stateG3_2 = 1'b0;
    end

   // Automaton G10_1: 
   if(~reg_stateG10_1 & ~controllable_hgrant1 & ~i_hbusreq1)
    begin
      reg_stateG10_1 = 1'b1;
    end
   else if(reg_stateG10_1 & i_hbusreq1)
    begin
      reg_stateG10_1 = 1'b0;
    end

   // Automaton G10_2: 
   if(~reg_stateG10_2 & ~controllable_hgrant2 & ~i_hbusreq2)
    begin
      reg_stateG10_2 = 1'b1;
    end
   else if(reg_stateG10_2 & i_hbusreq2)
    begin
      reg_stateG10_2 = 1'b0;
    end

   // Automaton G10_3: 
   if(~reg_stateG10_3 & ~controllable_hgrant3 & ~i_hbusreq3)
    begin
      reg_stateG10_3 = 1'b1;
    end
   else if(reg_stateG10_3 & i_hbusreq3)
    begin
      reg_stateG10_3 = 1'b0;
    end

   // Automaton G10_4: 
   if(~reg_stateG10_4 & ~controllable_hgrant4 & ~i_hbusreq4)
    begin
      reg_stateG10_4 = 1'b1;
    end
   else if(reg_stateG10_4 & i_hbusreq4)
    begin
      reg_stateG10_4 = 1'b0;
    end

   // Automaton G10_5: 
   if(~reg_stateG10_5 & ~controllable_hgrant5 & ~i_hbusreq5)
    begin
      reg_stateG10_5 = 1'b1;
    end
   else if(reg_stateG10_5 & i_hbusreq5)
    begin
      reg_stateG10_5 = 1'b0;
    end

   // Automaton G10_6: 
   if(~reg_stateG10_6 & ~controllable_hgrant6 & ~i_hbusreq6)
    begin
      reg_stateG10_6 = 1'b1;
    end
   else if(reg_stateG10_6 & i_hbusreq6)
    begin
      reg_stateG10_6 = 1'b0;
    end

   // Automaton G10_7: 
   if(~reg_stateG10_7 & ~controllable_hgrant7 & ~i_hbusreq7)
    begin
      reg_stateG10_7 = 1'b1;
    end
   else if(reg_stateG10_7 & i_hbusreq7)
    begin
      reg_stateG10_7 = 1'b0;
    end

   // Automaton G10_8: 
   if(~reg_stateG10_8 & ~controllable_hgrant8 & ~i_hbusreq8)
    begin
      reg_stateG10_8 = 1'b1;
    end
   else if(reg_stateG10_8 & i_hbusreq8)
    begin
      reg_stateG10_8 = 1'b0;
    end

   // Latching the previous input:
   reg_i_hready =  i_hready;
   reg_i_hbusreq0 =  i_hbusreq0;
   reg_i_hlock0 =  i_hlock0;
   reg_i_hbusreq1 =  i_hbusreq1;
   reg_i_hlock1 =  i_hlock1;
   reg_i_hbusreq2 =  i_hbusreq2;
   reg_i_hlock2 =  i_hlock2;
   reg_i_hbusreq3 =  i_hbusreq3;
   reg_i_hlock3 =  i_hlock3;
   reg_i_hbusreq4 =  i_hbusreq4;
   reg_i_hlock4 =  i_hlock4;
   reg_i_hbusreq5 =  i_hbusreq5;
   reg_i_hlock5 =  i_hlock5;
   reg_i_hbusreq6 =  i_hbusreq6;
   reg_i_hlock6 =  i_hlock6;
   reg_i_hbusreq7 =  i_hbusreq7;
   reg_i_hlock7 =  i_hlock7;
   reg_i_hbusreq8 =  i_hbusreq8;
   reg_i_hlock8 =  i_hlock8;
   reg_controllable_hmaster0 =  controllable_hmaster0;
   reg_controllable_hmaster1 =  controllable_hmaster1;
   reg_controllable_hmaster2 =  controllable_hmaster2;
   reg_controllable_hmaster3 =  controllable_hmaster3;
   reg_controllable_hmastlock =  controllable_hmastlock;
   reg_controllable_nstart =  controllable_nstart;
   reg_controllable_ndecide =  controllable_ndecide;
   reg_controllable_locked =  controllable_locked;
   reg_controllable_nhgrant0 =  controllable_nhgrant0;
   reg_controllable_hgrant1 =  controllable_hgrant1;
   reg_controllable_hgrant2 =  controllable_hgrant2;
   reg_controllable_hgrant3 =  controllable_hgrant3;
   reg_controllable_hgrant4 =  controllable_hgrant4;
   reg_controllable_hgrant5 =  controllable_hgrant5;
   reg_controllable_hgrant6 =  controllable_hgrant6;
   reg_controllable_hgrant7 =  controllable_hgrant7;
   reg_controllable_hgrant8 =  controllable_hgrant8;
   reg_controllable_busreq =  controllable_busreq;

 end
endmodule

-------------------------------
