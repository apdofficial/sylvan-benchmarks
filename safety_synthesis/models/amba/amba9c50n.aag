aag 1183 39 64 1 1080
2
4
6
8
10
12
14
16
18
20
22
24
26
28
30
32
34
36
38
40
42
44
46
48
50
52
54
56
58
60
62
64
66
68
70
72
74
76
78
80 1
82 10
84 1323
86 64
88 74
90 40
92 14
94 1345
96 66
98 1599
100 72
102 38
104 18
106 1683
108 1705
110 68
112 70
114 34
116 22
118 1729
120 6
122 58
124 30
126 26
128 1749
130 42
132 28
134 8
136 32
138 50
140 24
142 36
144 1779
146 1801
148 52
150 20
152 78
154 1823
156 2
158 54
160 1847
162 16
164 2097
166 2103
168 2109
170 2115
172 2121
174 2127
176 2277
178 2283
180 2289
182 2295
184 2301
186 2323
188 56
190 12
192 44
194 247
196 2345
198 60
200 4
202 2367
204 62
206 76
1300
208 51 12
210 53 16
212 211 209
214 55 20
216 215 212
218 57 24
220 219 216
222 61 28
224 223 220
226 63 30
228 227 224
230 65 34
232 231 228
234 67 38
236 235 232
238 69 40
240 239 236
242 195 80
244 243 80
246 245 240
248 77 75
250 248 73
252 250 71
254 50 43
256 51 42
258 257 255
260 259 252
262 76 75
264 262 73
266 264 71
268 52 43
270 53 42
272 271 269
274 273 266
276 275 261
278 77 74
280 278 73
282 280 71
284 54 43
286 55 42
288 287 285
290 289 282
292 291 276
294 76 74
296 294 73
298 296 71
300 56 43
302 57 42
304 303 301
306 305 298
308 307 292
310 248 72
312 310 71
314 60 43
316 61 42
318 317 315
320 319 312
322 321 308
324 262 72
326 324 71
328 62 43
330 63 42
332 331 329
334 333 326
336 335 322
338 278 72
340 338 71
342 64 43
344 65 42
346 345 343
348 347 340
350 349 336
352 294 72
354 352 71
356 66 43
358 67 42
360 359 357
362 361 354
364 363 350
366 250 70
368 68 43
370 69 42
372 371 369
374 373 366
376 375 364
378 193 80
380 192 80
382 379 80
384 383 9
386 385 376
388 145 80
390 144 80
392 389 80
394 390 9
396 395 386
398 107 80
400 106 80
402 399 80
404 119 80
406 118 80
408 405 80
410 409 403
412 129 80
414 128 80
416 413 80
418 417 410
420 419 9
422 421 396
424 157 80
426 156 80
428 425 80
430 426 252
432 429 253
434 433 431
436 435 380
438 437 422
440 201 80
442 200 80
444 441 80
446 445 266
448 442 267
450 449 447
452 451 380
454 453 438
456 83 80
458 82 80
460 457 80
462 461 282
464 458 283
466 465 463
468 467 380
470 469 454
472 93 80
474 92 80
476 473 80
478 477 298
480 474 299
482 481 479
484 483 380
486 485 470
488 105 80
490 104 80
492 489 80
494 493 312
496 490 313
498 497 495
500 499 380
502 501 486
504 117 80
506 116 80
508 505 80
510 509 326
512 506 327
514 513 511
516 515 380
518 517 502
520 127 80
522 126 80
524 521 80
526 525 340
528 522 341
530 529 527
532 531 380
534 533 518
536 137 80
538 136 80
540 537 80
542 541 354
544 538 355
546 545 543
548 547 380
550 549 534
552 143 80
554 142 80
556 553 80
558 557 366
560 554 367
562 561 559
564 563 380
566 565 550
568 121 80
570 120 80
572 569 80
574 570 79
576 573 78
578 577 575
580 579 380
582 581 566
584 207 80
586 206 80
588 585 80
590 89 80
592 88 80
594 591 80
596 595 589
598 101 80
600 100 80
602 599 80
604 603 596
606 113 80
608 112 80
610 607 80
612 611 604
614 613 252
616 612 253
618 617 615
620 619 8
622 621 582
624 595 586
626 624 603
628 626 611
630 629 266
632 628 267
634 633 631
636 635 8
638 637 622
640 592 589
642 640 603
644 642 611
646 645 282
648 644 283
650 649 647
652 651 8
654 653 638
656 592 586
658 656 603
660 658 611
662 661 298
664 660 299
666 665 663
668 667 8
670 669 654
672 600 596
674 672 611
676 675 312
678 674 313
680 679 677
682 681 8
684 683 670
686 624 600
688 686 611
690 689 326
692 688 327
694 693 691
696 695 8
698 697 684
700 640 600
702 700 611
704 703 340
706 702 341
708 707 705
710 709 8
712 711 698
714 656 600
716 714 611
718 717 354
720 716 355
722 721 719
724 723 8
726 725 712
728 608 604
730 729 366
732 728 367
734 733 731
736 735 8
738 737 726
740 153 80
742 152 80
744 741 80
746 745 78
748 742 79
750 749 747
752 751 8
754 753 738
756 123 80
758 122 80
760 757 80
762 191 80
764 190 80
766 763 80
768 764 761
770 768 3
772 770 7
774 773 754
776 767 761
778 776 3
780 778 6
782 781 774
784 163 80
786 162 80
788 785 80
790 786 761
792 790 4
794 792 7
796 795 782
798 789 761
800 798 4
802 800 6
804 803 796
806 151 80
808 150 80
810 807 80
812 808 761
814 812 10
816 814 7
818 817 804
820 811 761
822 820 10
824 822 6
826 825 818
828 141 80
830 140 80
832 829 80
834 830 761
836 834 14
838 836 7
840 839 826
842 833 761
844 842 14
846 844 6
848 847 840
850 133 80
852 132 80
854 851 80
856 852 761
858 856 18
860 858 7
862 861 848
864 855 761
866 864 18
868 866 6
870 869 862
872 125 80
874 124 80
876 873 80
878 874 761
880 878 22
882 880 7
884 883 870
886 877 761
888 886 22
890 888 6
892 891 884
894 115 80
896 114 80
898 895 80
900 896 761
902 900 26
904 902 7
906 905 892
908 899 761
910 908 26
912 910 6
914 913 906
916 103 80
918 102 80
920 917 80
922 918 761
924 922 32
926 924 7
928 927 914
930 921 761
932 930 32
934 932 6
936 935 928
938 91 80
940 90 80
942 939 80
944 940 761
946 944 36
948 946 7
950 949 936
952 943 761
954 952 36
956 954 6
958 957 950
960 429 2
962 426 3
964 963 961
966 965 758
968 967 958
970 442 5
972 445 4
974 973 971
976 975 758
978 977 968
980 458 11
982 461 10
984 983 981
986 985 758
988 987 978
990 474 15
992 477 14
994 993 991
996 995 758
998 997 988
1000 490 19
1002 493 18
1004 1003 1001
1006 1005 758
1008 1007 998
1010 506 23
1012 509 22
1014 1013 1011
1016 1015 758
1018 1017 1008
1020 522 27
1022 525 26
1024 1023 1021
1026 1025 758
1028 1027 1018
1030 538 33
1032 541 32
1034 1033 1031
1036 1035 758
1038 1037 1028
1040 554 37
1042 557 36
1044 1043 1041
1046 1045 758
1048 1047 1038
1050 570 7
1052 573 6
1054 1053 1051
1056 1055 758
1058 1057 1048
1060 147 80
1062 146 80
1064 1061 80
1066 53 4
1068 1066 1062
1070 1069 1058
1072 155 80
1074 154 80
1076 1073 80
1078 55 10
1080 1078 1074
1082 1081 1070
1084 187 80
1086 186 80
1088 1085 80
1090 57 14
1092 1090 1086
1094 1093 1082
1096 197 80
1098 196 80
1100 1097 80
1102 61 18
1104 1102 1098
1106 1105 1094
1108 203 80
1110 202 80
1112 1109 80
1114 63 22
1116 1114 1110
1118 1117 1106
1120 85 80
1122 84 80
1124 1121 80
1126 65 26
1128 1126 1122
1130 1129 1118
1132 95 80
1134 94 80
1136 1133 80
1138 67 32
1140 1138 1134
1142 1141 1130
1144 109 80
1146 108 80
1148 1145 80
1150 69 36
1152 1150 1146
1154 1153 1142
1156 139 80
1158 1157 80
1160 149 80
1162 1161 80
1164 1163 1159
1166 159 80
1168 1167 80
1170 1169 1164
1172 189 80
1174 1173 80
1176 1175 1170
1178 199 80
1180 1179 80
1182 1181 1176
1184 205 80
1186 1185 80
1188 1187 1182
1190 87 80
1192 1191 80
1194 1193 1188
1196 97 80
1198 1197 80
1200 1199 1194
1202 111 80
1204 1203 80
1206 1205 1200
1208 1206 761
1210 1208 2
1212 1211 1154
1214 175 80
1216 174 80
1218 1215 80
1220 173 80
1222 172 80
1224 1221 80
1226 171 80
1228 170 80
1230 1227 80
1232 169 80
1234 168 80
1236 1233 80
1238 167 80
1240 166 80
1242 1239 80
1244 165 80
1246 164 80
1248 1245 80
1250 1243 1237
1252 1250 1231
1254 1252 1225
1256 1255 1224
1258 1256 1253
1260 1259 1219
1262 1261 1218
1264 1262 1258
1266 1242 1234
1268 1267 1251
1270 1251 1228
1272 1271 1253
1274 1253 1225
1276 1252 1222
1278 1277 1275
1280 1258 1219
1282 1259 1216
1284 1283 1281
1286 1247 1242
1288 1286 1268
1290 1288 1272
1292 1290 1278
1294 1292 1284
1296 1295 1265
1298 1296 1212
1300 1299 246
1302 1125 27
1304 1302 65
1306 1122 64
1308 1306 1305
1310 1309 1305
1312 1307 1122
1314 1312 1305
1316 1315 1305
1318 1317 1311
1320 1310 1122
1322 1321 1319
1324 1137 33
1326 1324 67
1328 1134 66
1330 1328 1327
1332 1331 1327
1334 1329 1134
1336 1334 1327
1338 1337 1327
1340 1339 1333
1342 1332 1134
1344 1343 1341
1346 177 80
1348 176 80
1350 1347 80
1352 179 80
1354 178 80
1356 1353 80
1358 181 80
1360 180 80
1362 1359 80
1364 183 80
1366 182 80
1368 1365 80
1370 184 80
1372 1355 1349
1374 1372 1361
1376 1374 1367
1378 1376 1371
1380 1378 393
1382 1355 1350
1384 1382 1361
1386 1384 1367
1388 1386 1371
1390 1388 418
1392 1356 1349
1394 1392 1361
1396 1394 1367
1398 1396 1371
1400 253 50
1402 1401 1398
1404 1356 1350
1406 1404 1361
1408 1406 1367
1410 1408 1371
1412 267 52
1414 1413 1410
1416 1372 1362
1418 1416 1367
1420 1418 1371
1422 283 54
1424 1423 1420
1426 1382 1362
1428 1426 1367
1430 1428 1371
1432 299 56
1434 1433 1430
1436 1392 1362
1438 1436 1367
1440 1438 1371
1442 313 60
1444 1443 1440
1446 1404 1362
1448 1446 1367
1450 1448 1371
1452 327 62
1454 1453 1450
1456 1374 1368
1458 1456 1371
1460 341 64
1462 1461 1458
1464 1384 1368
1466 1464 1371
1468 355 66
1470 1469 1466
1472 1394 1368
1474 1472 1371
1476 367 68
1478 1477 1474
1480 99 80
1482 98 80
1484 1481 80
1486 161 80
1488 160 80
1490 1487 80
1492 1491 1485
1494 1482 44
1496 1390 1381
1498 1497 1381
1500 1391 1381
1502 1500 1402
1504 1503 1498
1506 1500 1403
1508 1506 1414
1510 1509 1504
1512 1506 1415
1514 1512 1424
1516 1515 1510
1518 1512 1425
1520 1518 1434
1522 1521 1516
1524 1518 1435
1526 1524 1444
1528 1527 1522
1530 1524 1445
1532 1530 1454
1534 1533 1528
1536 1530 1455
1538 1536 1462
1540 1539 1534
1542 1536 1463
1544 1542 1470
1546 1545 1540
1548 1542 1471
1550 1548 1478
1552 1551 1546
1554 1548 1479
1556 1554 1492
1558 1557 1552
1560 1554 1493
1562 1560 1494
1564 1563 1558
1566 1495 1482
1568 1566 1493
1570 1569 1493
1572 1571 1479
1574 1572 1471
1576 1574 1463
1578 1576 1455
1580 1578 1445
1582 1580 1435
1584 1582 1425
1586 1584 1415
1588 1586 1403
1590 1588 1391
1592 1590 1381
1594 1592 1565
1596 1564 1482
1598 1597 1595
1600 418 78
1602 1600 9
1604 1602 49
1606 1604 46
1608 1606 45
1610 1606 44
1612 409 400
1614 1612 417
1616 1614 44
1618 406 403
1620 1618 417
1622 1620 44
1624 406 400
1626 1624 417
1628 1626 44
1630 414 410
1632 1630 44
1634 1610 1609
1636 1635 1609
1638 1611 1609
1640 1638 1616
1642 1641 1636
1644 1638 1617
1646 1644 1622
1648 1647 1642
1650 1644 1623
1652 1650 1628
1654 1653 1648
1656 1650 1629
1658 1656 1632
1660 1659 1654
1662 1633 400
1664 1662 1629
1666 1664 1623
1668 1667 1623
1670 1669 1617
1672 1670 1611
1674 1672 1609
1676 1675 1609
1678 1677 1661
1680 1660 400
1682 1681 1679
1684 1149 37
1686 1684 69
1688 1146 68
1690 1688 1687
1692 1691 1687
1694 1689 1146
1696 1694 1687
1698 1697 1687
1700 1699 1693
1702 1692 1146
1704 1703 1701
1706 1633 406
1708 1706 1629
1710 1708 1623
1712 1711 1623
1714 1713 1617
1716 1715 1617
1718 1717 1611
1720 1719 1611
1722 1721 1609
1724 1722 1661
1726 1660 406
1728 1727 1725
1730 1633 414
1732 1730 1629
1734 1733 1629
1736 1735 1623
1738 1736 1617
1740 1738 1611
1742 1740 1609
1744 1742 1661
1746 1660 414
1748 1747 1745
1750 78 9
1752 1750 49
1754 1752 47
1756 1754 393
1758 390 43
1760 1759 1757
1762 1755 390
1764 1763 1755
1766 390 42
1768 1765 393
1770 1766 390
1772 1771 1769
1774 1773 1761
1776 1760 390
1778 1777 1775
1780 1065 5
1782 1780 53
1784 1062 52
1786 1784 1783
1788 1787 1783
1790 1785 1062
1792 1790 1783
1794 1793 1783
1796 1795 1789
1798 1788 1062
1800 1799 1797
1802 1077 11
1804 1802 55
1806 1074 54
1808 1806 1805
1810 1809 1805
1812 1807 1074
1814 1812 1805
1816 1815 1805
1818 1817 1811
1820 1810 1074
1822 1821 1819
1824 1491 78
1826 1824 49
1828 1826 47
1830 1488 43
1832 1830 1829
1834 1833 1829
1836 1831 1488
1838 1836 1829
1840 1839 1829
1842 1841 1835
1844 1834 1488
1846 1845 1843
1848 1563 1552
1850 1494 1249
1852 1495 1246
1854 1853 1851
1856 1492 1246
1858 1855 1493
1860 1859 1857
1862 1861 1479
1864 1862 1471
1866 1864 1463
1868 1866 1455
1870 1868 1445
1872 1870 1435
1874 1872 1425
1876 1874 1415
1878 1876 1403
1880 1878 1391
1882 1880 1381
1884 1246 1243
1886 1247 1240
1888 1887 1885
1890 1889 1494
1892 1495 1240
1894 1893 1891
1896 1492 1240
1898 1895 1493
1900 1899 1897
1902 1901 1479
1904 1902 1471
1906 1904 1463
1908 1906 1455
1910 1908 1445
1912 1910 1435
1914 1912 1425
1916 1914 1415
1918 1916 1403
1920 1918 1391
1922 1920 1381
1924 1246 1240
1926 1924 1237
1928 1925 1234
1930 1929 1927
1932 1931 1494
1934 1495 1234
1936 1935 1933
1938 1492 1234
1940 1937 1493
1942 1941 1939
1944 1943 1479
1946 1944 1471
1948 1946 1463
1950 1948 1455
1952 1950 1445
1954 1952 1435
1956 1954 1425
1958 1956 1415
1960 1958 1403
1962 1960 1391
1964 1962 1381
1966 1924 1234
1968 1966 1231
1970 1967 1228
1972 1971 1969
1974 1973 1494
1976 1495 1228
1978 1977 1975
1980 1492 1228
1982 1979 1493
1984 1983 1981
1986 1985 1479
1988 1986 1471
1990 1988 1463
1992 1990 1455
1994 1992 1445
1996 1994 1435
1998 1996 1425
2000 1998 1415
2002 2000 1403
2004 2002 1391
2006 2004 1381
2008 1966 1228
2010 2008 1225
2012 2009 1222
2014 2013 2011
2016 2015 1494
2018 1495 1222
2020 2019 2017
2022 1492 1222
2024 2021 1493
2026 2025 2023
2028 2027 1479
2030 2028 1471
2032 2030 1463
2034 2032 1455
2036 2034 1445
2038 2036 1435
2040 2038 1425
2042 2040 1415
2044 2042 1403
2046 2044 1391
2048 2046 1381
2050 2008 1222
2052 2050 1219
2054 2051 1216
2056 2055 2053
2058 2057 1494
2060 1495 1216
2062 2061 2059
2064 1492 1216
2066 2063 1493
2068 2067 2065
2070 2069 1479
2072 2070 1471
2074 2072 1463
2076 2074 1455
2078 2076 1445
2080 2078 1435
2082 2080 1425
2084 2082 1415
2086 2084 1403
2088 2086 1391
2090 2088 1381
2092 1882 1849
2094 1848 1246
2096 2095 2093
2098 1922 1849
2100 1848 1240
2102 2101 2099
2104 1964 1849
2106 1848 1234
2108 2107 2105
2110 2006 1849
2112 1848 1228
2114 2113 2111
2116 2048 1849
2118 1848 1222
2120 2119 2117
2122 2090 1849
2124 1848 1216
2126 2125 2123
2128 1479 1348
2130 2128 1471
2132 2130 1463
2134 2133 1463
2136 2135 1455
2138 2136 1445
2140 2139 1445
2142 2141 1435
2144 2142 1425
2146 2145 1425
2148 2147 1415
2150 2148 1403
2152 2151 1403
2154 2153 1391
2156 2154 1381
2158 2157 1381
2160 1479 1354
2162 2160 1471
2164 2163 1471
2166 2165 1463
2168 2166 1455
2170 2168 1445
2172 2171 1445
2174 2173 1435
2176 2175 1435
2178 2177 1425
2180 2178 1415
2182 2180 1403
2184 2183 1403
2186 2185 1391
2188 2187 1391
2190 2189 1381
2192 1479 1360
2194 2192 1471
2196 2194 1463
2198 2196 1455
2200 2198 1445
2202 2201 1445
2204 2203 1435
2206 2205 1435
2208 2207 1425
2210 2209 1425
2212 2211 1415
2214 2213 1415
2216 2215 1403
2218 2216 1391
2220 2218 1381
2222 1479 1366
2224 2222 1471
2226 2225 1471
2228 2227 1463
2230 2229 1463
2232 2231 1455
2234 2233 1455
2236 2235 1445
2238 2236 1435
2240 2238 1425
2242 2240 1415
2244 2242 1403
2246 2244 1391
2248 2246 1381
2250 1479 1370
2252 2250 1471
2254 2252 1463
2256 2254 1455
2258 2256 1445
2260 2258 1435
2262 2260 1425
2264 2262 1415
2266 2264 1403
2268 2266 1391
2270 2268 1381
2272 2159 1553
2274 1552 1348
2276 2275 2273
2278 2190 1553
2280 1552 1354
2282 2281 2279
2284 2220 1553
2286 1552 1360
2288 2287 2285
2290 2248 1553
2292 1552 1366
2294 2293 2291
2296 2270 1553
2298 1552 1370
2300 2299 2297
2302 1089 15
2304 2302 57
2306 1086 56
2308 2306 2305
2310 2309 2305
2312 2307 1086
2314 2312 2305
2316 2315 2305
2318 2317 2311
2320 2310 1086
2322 2321 2319
2324 1101 19
2326 2324 61
2328 1098 60
2330 2328 2327
2332 2331 2327
2334 2329 1098
2336 2334 2327
2338 2337 2327
2340 2339 2333
2342 2332 1098
2344 2343 2341
2346 1113 23
2348 2346 63
2350 1110 62
2352 2350 2349
2354 2353 2349
2356 2351 1110
2358 2356 2349
2360 2359 2349
2362 2361 2355
2364 2354 1110
2366 2365 2363
i0 controllable_nhgrant0
i1 controllable_hgrant1
i2 controllable_locked
i3 controllable_nstart
i4 controllable_hgrant2
i5 i_hlock0
i6 controllable_hgrant3
i7 i_hlock1
i8 controllable_hgrant4
i9 i_hlock2
i10 controllable_hgrant5
i11 i_hlock3
i12 controllable_hgrant6
i13 i_hlock4
i14 i_hlock5
i15 controllable_hgrant7
i16 i_hlock6
i17 controllable_hgrant8
i18 i_hlock7
i19 i_hlock8
i20 controllable_busreq
i21 i_hready
i22 i_hburst1
i23 i_hburst0
i24 i_hbusreq0
i25 i_hbusreq1
i26 i_hbusreq2
i27 i_hbusreq3
i28 controllable_ndecide
i29 i_hbusreq4
i30 i_hbusreq5
i31 i_hbusreq6
i32 i_hbusreq7
i33 i_hbusreq8
i34 controllable_hmaster3
i35 controllable_hmaster2
i36 controllable_hmaster1
i37 controllable_hmaster0
i38 controllable_hmastlock
l0 n81
l1 reg_controllable_hgrant2_out
l2 reg_stateG10_6_out
l3 reg_i_hbusreq6_out
l4 reg_controllable_hmaster1_out
l5 reg_i_hlock8_out
l6 reg_controllable_hgrant3_out
l7 reg_stateG10_7_out
l8 reg_i_hbusreq7_out
l9 next_env_fair_out
l10 reg_controllable_hmaster2_out
l11 reg_i_hlock7_out
l12 reg_controllable_hgrant4_out
l13 reg_stateG3_0_out
l14 reg_stateG10_8_out
l15 reg_i_hbusreq8_out
l16 reg_controllable_hmaster3_out
l17 reg_i_hlock6_out
l18 reg_controllable_hgrant5_out
l19 reg_stateG3_1_out
l20 reg_controllable_locked_out
l21 reg_controllable_ndecide_out
l22 reg_i_hlock5_out
l23 reg_controllable_hgrant6_out
l24 reg_stateG3_2_out
l25 reg_controllable_busreq_out
l26 reg_i_hlock4_out
l27 reg_controllable_nstart_out
l28 reg_controllable_hgrant7_out
l29 reg_i_hbusreq0_out
l30 reg_i_hlock3_out
l31 reg_controllable_hgrant8_out
l32 reg_stateG2_out
l33 reg_stateG10_1_out
l34 reg_i_hbusreq1_out
l35 reg_i_hlock2_out
l36 reg_controllable_hmastlock_out
l37 reg_stateG10_2_out
l38 reg_controllable_nhgrant0_out
l39 reg_i_hbusreq2_out
l40 reg_stateA1_out
l41 reg_i_hlock1_out
l42 fair_cnt<0>_out
l43 fair_cnt<1>_out
l44 fair_cnt<2>_out
l45 fair_cnt<3>_out
l46 fair_cnt<4>_out
l47 fair_cnt<5>_out
l48 next_sys_fair<0>_out
l49 next_sys_fair<1>_out
l50 next_sys_fair<2>_out
l51 next_sys_fair<3>_out
l52 next_sys_fair<4>_out
l53 reg_stateG10_3_out
l54 reg_i_hbusreq3_out
l55 reg_i_hlock0_out
l56 reg_i_hready_out
l57 env_safe_err_happened_out
l58 reg_stateG10_4_out
l59 reg_i_hbusreq4_out
l60 reg_controllable_hgrant1_out
l61 reg_stateG10_5_out
l62 reg_i_hbusreq5_out
l63 reg_controllable_hmaster0_out
o0 o_err
c
amba_9_new_50
This file was written by ABC on Tue May  5 16:54:26 2015
For information about AIGER format, refer to http://fmv.jku.at/aiger
-------------------------------
This AIGER file has been created by the following sequence of commands:
> vl2mv amba9c50.v   ---gives--> amba9c50.mv
> abc -c "read_blif_mv amba9c50.mv; write_aiger -s amba9c50n.aig"   ---gives--> amba9c50n.aig
> aigtoaig amba9c50n.aig amba9c50n.aag   ---gives--> amba9c50n.aag (this file)
Content of amba9c50.v:
module amba_9_new_50(
        o_err,
        i_clk,
        i_hready,
        i_hbusreq0,
        i_hlock0,
        i_hbusreq1,
        i_hlock1,
        i_hbusreq2,
        i_hlock2,
        i_hbusreq3,
        i_hlock3,
        i_hbusreq4,
        i_hlock4,
        i_hbusreq5,
        i_hlock5,
        i_hbusreq6,
        i_hlock6,
        i_hbusreq7,
        i_hlock7,
        i_hbusreq8,
        i_hlock8,
        i_hburst0,
        i_hburst1,
        controllable_hmaster0,
        controllable_hmaster1,
        controllable_hmaster2,
        controllable_hmaster3,
        controllable_hmastlock,
        controllable_nstart,
        controllable_ndecide,
        controllable_locked,
        controllable_nhgrant0,
        controllable_hgrant1,
        controllable_hgrant2,
        controllable_hgrant3,
        controllable_hgrant4,
        controllable_hgrant5,
        controllable_hgrant6,
        controllable_hgrant7,
        controllable_hgrant8,
        controllable_busreq);

input i_clk;
input i_hready;
input i_hbusreq0;
input i_hlock0;
input i_hbusreq1;
input i_hlock1;
input i_hbusreq2;
input i_hlock2;
input i_hbusreq3;
input i_hlock3;
input i_hbusreq4;
input i_hlock4;
input i_hbusreq5;
input i_hlock5;
input i_hbusreq6;
input i_hlock6;
input i_hbusreq7;
input i_hlock7;
input i_hbusreq8;
input i_hlock8;
input i_hburst0;
input i_hburst1;
input controllable_hmaster0;
input controllable_hmaster1;
input controllable_hmaster2;
input controllable_hmaster3;
input controllable_hmastlock;
input controllable_nstart;
input controllable_ndecide;
input controllable_locked;
input controllable_nhgrant0;
input controllable_hgrant1;
input controllable_hgrant2;
input controllable_hgrant3;
input controllable_hgrant4;
input controllable_hgrant5;
input controllable_hgrant6;
input controllable_hgrant7;
input controllable_hgrant8;
input controllable_busreq;
output o_err;

reg reg_i_hready;
reg reg_i_hbusreq0;
reg reg_i_hlock0;
reg reg_i_hbusreq1;
reg reg_i_hlock1;
reg reg_i_hbusreq2;
reg reg_i_hlock2;
reg reg_i_hbusreq3;
reg reg_i_hlock3;
reg reg_i_hbusreq4;
reg reg_i_hlock4;
reg reg_i_hbusreq5;
reg reg_i_hlock5;
reg reg_i_hbusreq6;
reg reg_i_hlock6;
reg reg_i_hbusreq7;
reg reg_i_hlock7;
reg reg_i_hbusreq8;
reg reg_i_hlock8;
reg reg_controllable_hmaster0;
reg reg_controllable_hmaster1;
reg reg_controllable_hmaster2;
reg reg_controllable_hmaster3;
reg reg_controllable_hmastlock;
reg reg_controllable_nstart;
reg reg_controllable_ndecide;
reg reg_controllable_locked;
reg reg_controllable_nhgrant0;
reg reg_controllable_hgrant1;
reg reg_controllable_hgrant2;
reg reg_controllable_hgrant3;
reg reg_controllable_hgrant4;
reg reg_controllable_hgrant5;
reg reg_controllable_hgrant6;
reg reg_controllable_hgrant7;
reg reg_controllable_hgrant8;
reg reg_controllable_busreq;
reg reg_stateA1;
reg reg_stateG2;
reg reg_stateG3_0;
reg reg_stateG3_1;
reg reg_stateG3_2;
reg reg_stateG10_1;
reg reg_stateG10_2;
reg reg_stateG10_3;
reg reg_stateG10_4;
reg reg_stateG10_5;
reg reg_stateG10_6;
reg reg_stateG10_7;
reg reg_stateG10_8;
reg env_safe_err_happened;
reg next_env_fair;
reg [5:0] fair_cnt;
reg [4:0] next_sys_fair;

wire env_safe_err0;
wire env_safe_err1;
wire env_safe_err2;
wire env_safe_err3;
wire env_safe_err4;
wire env_safe_err5;
wire env_safe_err6;
wire env_safe_err7;
wire env_safe_err8;
wire env_safe_err;

wire sys_safe_err0;
wire sys_safe_err1;
wire sys_safe_err2;
wire sys_safe_err3;
wire sys_safe_err4;
wire sys_safe_err5;
wire sys_safe_err6;
wire sys_safe_err7;
wire sys_safe_err8;
wire sys_safe_err9;
wire sys_safe_err10;
wire sys_safe_err11;
wire sys_safe_err12;
wire sys_safe_err13;
wire sys_safe_err14;
wire sys_safe_err15;
wire sys_safe_err16;
wire sys_safe_err17;
wire sys_safe_err18;
wire sys_safe_err19;
wire sys_safe_err20;
wire sys_safe_err21;
wire sys_safe_err22;
wire sys_safe_err23;
wire sys_safe_err24;
wire sys_safe_err25;
wire sys_safe_err26;
wire sys_safe_err27;
wire sys_safe_err28;
wire sys_safe_err29;
wire sys_safe_err30;
wire sys_safe_err31;
wire sys_safe_err32;
wire sys_safe_err33;
wire sys_safe_err34;
wire sys_safe_err35;
wire sys_safe_err36;
wire sys_safe_err37;
wire sys_safe_err38;
wire sys_safe_err39;
wire sys_safe_err40;
wire sys_safe_err41;
wire sys_safe_err42;
wire sys_safe_err43;
wire sys_safe_err44;
wire sys_safe_err45;
wire sys_safe_err46;
wire sys_safe_err47;
wire sys_safe_err48;
wire sys_safe_err49;
wire sys_safe_err50;
wire sys_safe_err51;
wire sys_safe_err52;
wire sys_safe_err53;
wire sys_safe_err54;
wire sys_safe_err55;
wire sys_safe_err56;
wire sys_safe_err57;
wire sys_safe_err58;
wire sys_safe_err59;
wire sys_safe_err60;
wire sys_safe_err61;
wire sys_safe_err62;
wire sys_safe_err63;
wire sys_safe_err64;
wire sys_safe_err65;
wire sys_safe_err66;
wire sys_safe_err67;
wire sys_safe_err68;
wire sys_safe_err;

wire env_fair0;
wire env_fair1;

wire sys_fair0;
wire sys_fair1;
wire sys_fair2;
wire sys_fair3;
wire sys_fair4;
wire sys_fair5;
wire sys_fair6;
wire sys_fair7;
wire sys_fair8;
wire sys_fair9;
wire sys_fair10;
wire fair_err;
wire o_err;

// =============================================================
//                        ENV_TRANSITION:
// =============================================================
// Assumption 3:
// G( hlock0=1 -> hbusreq0=1 );
assign env_safe_err0 =  ~(~ i_hlock0 | i_hbusreq0);

// Assumption 3:
// G( hlock1=1 -> hbusreq1=1 );
assign env_safe_err1 =  ~(~ i_hlock1 | i_hbusreq1);

// Assumption 3:
// G( hlock2=1 -> hbusreq2=1 );
assign env_safe_err2 =  ~(~ i_hlock2 | i_hbusreq2);

// Assumption 3:
// G( hlock3=1 -> hbusreq3=1 );
assign env_safe_err3 =  ~(~ i_hlock3 | i_hbusreq3);

// Assumption 3:
// G( hlock4=1 -> hbusreq4=1 );
assign env_safe_err4 =  ~(~ i_hlock4 | i_hbusreq4);

// Assumption 3:
// G( hlock5=1 -> hbusreq5=1 );
assign env_safe_err5 =  ~(~ i_hlock5 | i_hbusreq5);

// Assumption 3:
// G( hlock6=1 -> hbusreq6=1 );
assign env_safe_err6 =  ~(~ i_hlock6 | i_hbusreq6);

// Assumption 3:
// G( hlock7=1 -> hbusreq7=1 );
assign env_safe_err7 =  ~(~ i_hlock7 | i_hbusreq7);

// Assumption 3:
// G( hlock8=1 -> hbusreq8=1 );
assign env_safe_err8 =  ~(~ i_hlock8 | i_hbusreq8);

// collecting together the safety error bits:
assign env_safe_err = env_safe_err0 |
                      env_safe_err1 |
                      env_safe_err2 |
                      env_safe_err3 |
                      env_safe_err4 |
                      env_safe_err5 |
                      env_safe_err6 |
                      env_safe_err7 |
                      env_safe_err8;

// =============================================================
//                        SYS_TRANSITION:
// =============================================================
// G((hmaster0=0) * (hmaster1=0) * (hmaster2=0) * (hmaster3=0) -> (hbusreq0=0 <-> busreq=0));
assign sys_safe_err0 =  ~( ~( ~(controllable_hmaster0) & ~(controllable_hmaster1) & ~(controllable_hmaster2) & ~(controllable_hmaster3) )|(~i_hbusreq0 ^~ (~controllable_busreq)));

// G((hmaster0=1) * (hmaster1=0) * (hmaster2=0) * (hmaster3=0) -> (hbusreq1=0 <-> busreq=0));
assign sys_safe_err1 =  ~( ~( controllable_hmaster0 & ~(controllable_hmaster1) & ~(controllable_hmaster2) & ~(controllable_hmaster3) )|(~i_hbusreq1 ^~ (~controllable_busreq)));

// G((hmaster0=0) * (hmaster1=1) * (hmaster2=0) * (hmaster3=0) -> (hbusreq2=0 <-> busreq=0));
assign sys_safe_err2 =  ~( ~( ~(controllable_hmaster0) & controllable_hmaster1 & ~(controllable_hmaster2) & ~(controllable_hmaster3) )|(~i_hbusreq2 ^~ (~controllable_busreq)));

// G((hmaster0=1) * (hmaster1=1) * (hmaster2=0) * (hmaster3=0) -> (hbusreq3=0 <-> busreq=0));
assign sys_safe_err3 =  ~( ~( controllable_hmaster0 & controllable_hmaster1 & ~(controllable_hmaster2) & ~(controllable_hmaster3) )|(~i_hbusreq3 ^~ (~controllable_busreq)));

// G((hmaster0=0) * (hmaster1=0) * (hmaster2=1) * (hmaster3=0) -> (hbusreq4=0 <-> busreq=0));
assign sys_safe_err4 =  ~( ~( ~(controllable_hmaster0) & ~(controllable_hmaster1) & controllable_hmaster2 & ~(controllable_hmaster3) )|(~i_hbusreq4 ^~ (~controllable_busreq)));

// G((hmaster0=1) * (hmaster1=0) * (hmaster2=1) * (hmaster3=0) -> (hbusreq5=0 <-> busreq=0));
assign sys_safe_err5 =  ~( ~( controllable_hmaster0 & ~(controllable_hmaster1) & controllable_hmaster2 & ~(controllable_hmaster3) )|(~i_hbusreq5 ^~ (~controllable_busreq)));

// G((hmaster0=0) * (hmaster1=1) * (hmaster2=1) * (hmaster3=0) -> (hbusreq6=0 <-> busreq=0));
assign sys_safe_err6 =  ~( ~( ~(controllable_hmaster0) & controllable_hmaster1 & controllable_hmaster2 & ~(controllable_hmaster3) )|(~i_hbusreq6 ^~ (~controllable_busreq)));

// G((hmaster0=1) * (hmaster1=1) * (hmaster2=1) * (hmaster3=0) -> (hbusreq7=0 <-> busreq=0));
assign sys_safe_err7 =  ~( ~( controllable_hmaster0 & controllable_hmaster1 & controllable_hmaster2 & ~(controllable_hmaster3) )|(~i_hbusreq7 ^~ (~controllable_busreq)));

// G((hmaster0=0) * (hmaster1=0) * (hmaster2=0) * (hmaster3=1) -> (hbusreq8=0 <-> busreq=0));
assign sys_safe_err8 =  ~( ~( ~(controllable_hmaster0) & ~(controllable_hmaster1) & ~(controllable_hmaster2) & controllable_hmaster3 )|(~i_hbusreq8 ^~ (~controllable_busreq)));

// Guarantee 1:
// G((hready=0) -> X(start=0));
assign sys_safe_err9 =  ~( reg_i_hready | controllable_nstart );

// G(((stateG2=1) * (start=1)) -> FALSE;
assign sys_safe_err10 =  ~( ~(reg_stateG2 & ~controllable_nstart) | 0 );

// G(((stateG3_0=1) * (stateG3_1=0) * (stateG3_2=0) * ((start=1))) -> FALSE);
// G(((stateG3_0=0) * (stateG3_1=1) * (stateG3_2=0) * ((start=1))) -> FALSE);
// G(((stateG3_0=1) * (stateG3_1=1) * (stateG3_2=0) * ((start=1))) -> FALSE);
// G(((stateG3_0=0) * (stateG3_1=0) * (stateG3_2=1) * ((start=1))) -> FALSE);
// all these rules can be summarized as: only in state 000, start=1 is allowed:
assign sys_safe_err11 =  (reg_stateG3_0 | reg_stateG3_1 | reg_stateG3_2) & ~controllable_nstart;

// G( (hready=1) -> (   (hgrant0=1) <-> (X(hmaster0=0) * X(hmaster1=0) * X(hmaster2=0) * X(hmaster3=0))  ) );
assign sys_safe_err12 =  ~( ~(reg_i_hready) | ( ~reg_controllable_nhgrant0 ^~ ( ~(controllable_hmaster0) & ~(controllable_hmaster1) & ~(controllable_hmaster2) & ~(controllable_hmaster3) ) ) );

// G( (hready=1) -> (   (hgrant1=1) <-> (X(hmaster0=1) * X(hmaster1=0) * X(hmaster2=0) * X(hmaster3=0))  ) );
assign sys_safe_err13 =  ~( ~(reg_i_hready) | ( reg_controllable_hgrant1 ^~ ( controllable_hmaster0 & ~(controllable_hmaster1) & ~(controllable_hmaster2) & ~(controllable_hmaster3) ) ) );

// G( (hready=1) -> (   (hgrant2=1) <-> (X(hmaster0=0) * X(hmaster1=1) * X(hmaster2=0) * X(hmaster3=0))  ) );
assign sys_safe_err14 =  ~( ~(reg_i_hready) | ( reg_controllable_hgrant2 ^~ ( ~(controllable_hmaster0) & controllable_hmaster1 & ~(controllable_hmaster2) & ~(controllable_hmaster3) ) ) );

// G( (hready=1) -> (   (hgrant3=1) <-> (X(hmaster0=1) * X(hmaster1=1) * X(hmaster2=0) * X(hmaster3=0))  ) );
assign sys_safe_err15 =  ~( ~(reg_i_hready) | ( reg_controllable_hgrant3 ^~ ( controllable_hmaster0 & controllable_hmaster1 & ~(controllable_hmaster2) & ~(controllable_hmaster3) ) ) );

// G( (hready=1) -> (   (hgrant4=1) <-> (X(hmaster0=0) * X(hmaster1=0) * X(hmaster2=1) * X(hmaster3=0))  ) );
assign sys_safe_err16 =  ~( ~(reg_i_hready) | ( reg_controllable_hgrant4 ^~ ( ~(controllable_hmaster0) & ~(controllable_hmaster1) & controllable_hmaster2 & ~(controllable_hmaster3) ) ) );

// G( (hready=1) -> (   (hgrant5=1) <-> (X(hmaster0=1) * X(hmaster1=0) * X(hmaster2=1) * X(hmaster3=0))  ) );
assign sys_safe_err17 =  ~( ~(reg_i_hready) | ( reg_controllable_hgrant5 ^~ ( controllable_hmaster0 & ~(controllable_hmaster1) & controllable_hmaster2 & ~(controllable_hmaster3) ) ) );

// G( (hready=1) -> (   (hgrant6=1) <-> (X(hmaster0=0) * X(hmaster1=1) * X(hmaster2=1) * X(hmaster3=0))  ) );
assign sys_safe_err18 =  ~( ~(reg_i_hready) | ( reg_controllable_hgrant6 ^~ ( ~(controllable_hmaster0) & controllable_hmaster1 & controllable_hmaster2 & ~(controllable_hmaster3) ) ) );

// G( (hready=1) -> (   (hgrant7=1) <-> (X(hmaster0=1) * X(hmaster1=1) * X(hmaster2=1) * X(hmaster3=0))  ) );
assign sys_safe_err19 =  ~( ~(reg_i_hready) | ( reg_controllable_hgrant7 ^~ ( controllable_hmaster0 & controllable_hmaster1 & controllable_hmaster2 & ~(controllable_hmaster3) ) ) );

// G( (hready=1) -> (   (hgrant8=1) <-> (X(hmaster0=0) * X(hmaster1=0) * X(hmaster2=0) * X(hmaster3=1))  ) );
assign sys_safe_err20 =  ~( ~(reg_i_hready) | ( reg_controllable_hgrant8 ^~ ( ~(controllable_hmaster0) & ~(controllable_hmaster1) & ~(controllable_hmaster2) & controllable_hmaster3 ) ) );

// HMASTLOCK:
// G(  (hready=1) -> (locked=0 <-> X(hmastlock=0) ) );
assign sys_safe_err21 =  ~( ~(reg_i_hready) | (~reg_controllable_locked ^~ ~controllable_hmastlock) );

// Master 0:
// G( X(start=0) -> ( ((hmaster0=0) * (hmaster1=0) * (hmaster2=0) * (hmaster3=0)) <-> (X(hmaster0=0) * X(hmaster1=0) * X(hmaster2=0) * X(hmaster3=0)) ) );
assign sys_safe_err22 =  ~( ~(controllable_nstart) | ( ( ~(reg_controllable_hmaster0) & ~(reg_controllable_hmaster1) & ~(reg_controllable_hmaster2) & ~(reg_controllable_hmaster3) ) ^~ ( ~(controllable_hmaster0) & ~(controllable_hmaster1) & ~(controllable_hmaster2) & ~(controllable_hmaster3) )) );

// Master 1:
// G( X(start=0) -> ( ((hmaster0=1) * (hmaster1=0) * (hmaster2=0) * (hmaster3=0)) <-> (X(hmaster0=1) * X(hmaster1=0) * X(hmaster2=0) * X(hmaster3=0)) ) );
assign sys_safe_err23 =  ~( ~(controllable_nstart) | ( ( reg_controllable_hmaster0 & ~(reg_controllable_hmaster1) & ~(reg_controllable_hmaster2) & ~(reg_controllable_hmaster3) ) ^~ ( controllable_hmaster0 & ~(controllable_hmaster1) & ~(controllable_hmaster2) & ~(controllable_hmaster3) )) );

// Master 2:
// G( X(start=0) -> ( ((hmaster0=0) * (hmaster1=1) * (hmaster2=0) * (hmaster3=0)) <-> (X(hmaster0=0) * X(hmaster1=1) * X(hmaster2=0) * X(hmaster3=0)) ) );
assign sys_safe_err24 =  ~( ~(controllable_nstart) | ( ( ~(reg_controllable_hmaster0) & reg_controllable_hmaster1 & ~(reg_controllable_hmaster2) & ~(reg_controllable_hmaster3) ) ^~ ( ~(controllable_hmaster0) & controllable_hmaster1 & ~(controllable_hmaster2) & ~(controllable_hmaster3) )) );

// Master 3:
// G( X(start=0) -> ( ((hmaster0=1) * (hmaster1=1) * (hmaster2=0) * (hmaster3=0)) <-> (X(hmaster0=1) * X(hmaster1=1) * X(hmaster2=0) * X(hmaster3=0)) ) );
assign sys_safe_err25 =  ~( ~(controllable_nstart) | ( ( reg_controllable_hmaster0 & reg_controllable_hmaster1 & ~(reg_controllable_hmaster2) & ~(reg_controllable_hmaster3) ) ^~ ( controllable_hmaster0 & controllable_hmaster1 & ~(controllable_hmaster2) & ~(controllable_hmaster3) )) );

// Master 4:
// G( X(start=0) -> ( ((hmaster0=0) * (hmaster1=0) * (hmaster2=1) * (hmaster3=0)) <-> (X(hmaster0=0) * X(hmaster1=0) * X(hmaster2=1) * X(hmaster3=0)) ) );
assign sys_safe_err26 =  ~( ~(controllable_nstart) | ( ( ~(reg_controllable_hmaster0) & ~(reg_controllable_hmaster1) & reg_controllable_hmaster2 & ~(reg_controllable_hmaster3) ) ^~ ( ~(controllable_hmaster0) & ~(controllable_hmaster1) & controllable_hmaster2 & ~(controllable_hmaster3) )) );

// Master 5:
// G( X(start=0) -> ( ((hmaster0=1) * (hmaster1=0) * (hmaster2=1) * (hmaster3=0)) <-> (X(hmaster0=1) * X(hmaster1=0) * X(hmaster2=1) * X(hmaster3=0)) ) );
assign sys_safe_err27 =  ~( ~(controllable_nstart) | ( ( reg_controllable_hmaster0 & ~(reg_controllable_hmaster1) & reg_controllable_hmaster2 & ~(reg_controllable_hmaster3) ) ^~ ( controllable_hmaster0 & ~(controllable_hmaster1) & controllable_hmaster2 & ~(controllable_hmaster3) )) );

// Master 6:
// G( X(start=0) -> ( ((hmaster0=0) * (hmaster1=1) * (hmaster2=1) * (hmaster3=0)) <-> (X(hmaster0=0) * X(hmaster1=1) * X(hmaster2=1) * X(hmaster3=0)) ) );
assign sys_safe_err28 =  ~( ~(controllable_nstart) | ( ( ~(reg_controllable_hmaster0) & reg_controllable_hmaster1 & reg_controllable_hmaster2 & ~(reg_controllable_hmaster3) ) ^~ ( ~(controllable_hmaster0) & controllable_hmaster1 & controllable_hmaster2 & ~(controllable_hmaster3) )) );

// Master 7:
// G( X(start=0) -> ( ((hmaster0=1) * (hmaster1=1) * (hmaster2=1) * (hmaster3=0)) <-> (X(hmaster0=1) * X(hmaster1=1) * X(hmaster2=1) * X(hmaster3=0)) ) );
assign sys_safe_err29 =  ~( ~(controllable_nstart) | ( ( reg_controllable_hmaster0 & reg_controllable_hmaster1 & reg_controllable_hmaster2 & ~(reg_controllable_hmaster3) ) ^~ ( controllable_hmaster0 & controllable_hmaster1 & controllable_hmaster2 & ~(controllable_hmaster3) )) );

// Master 8:
// G( X(start=0) -> ( ((hmaster0=0) * (hmaster1=0) * (hmaster2=0) * (hmaster3=1)) <-> (X(hmaster0=0) * X(hmaster1=0) * X(hmaster2=0) * X(hmaster3=1)) ) );
assign sys_safe_err30 =  ~( ~(controllable_nstart) | ( ( ~(reg_controllable_hmaster0) & ~(reg_controllable_hmaster1) & ~(reg_controllable_hmaster2) & reg_controllable_hmaster3 ) ^~ ( ~(controllable_hmaster0) & ~(controllable_hmaster1) & ~(controllable_hmaster2) & controllable_hmaster3 )) );

// Guarantee 6.2:
// G( ((X(start=0))) -> ( (hmastlock=1) <-> X(hmastlock=1)) );
assign sys_safe_err31 =  ~( ~(controllable_nstart) | ( reg_controllable_hmastlock ^~ controllable_hmastlock) );

// G( (decide=1  *  hlock0=1  *  X(hgrant0=1) )->X(locked=1));
assign sys_safe_err32 =  ~( ~(~reg_controllable_ndecide & reg_i_hlock0 & ~controllable_nhgrant0) | (controllable_locked) );

// G((decide=1  *  hlock0=0  *  X(hgrant0=1))->X(locked=0));
assign sys_safe_err33 =  ~( ~(~reg_controllable_ndecide & ~reg_i_hlock0 & ~controllable_nhgrant0) | (~controllable_locked) );

// G( (decide=1  *  hlock1=1  *  X(hgrant1=1) )->X(locked=1));
assign sys_safe_err34 =  ~( ~(~reg_controllable_ndecide & reg_i_hlock1 & controllable_hgrant1) | (controllable_locked) );

// G((decide=1  *  hlock1=0  *  X(hgrant1=1))->X(locked=0));
assign sys_safe_err35 =  ~( ~(~reg_controllable_ndecide & ~reg_i_hlock1 & controllable_hgrant1) | (~controllable_locked) );

// G( (decide=1  *  hlock2=1  *  X(hgrant2=1) )->X(locked=1));
assign sys_safe_err36 =  ~( ~(~reg_controllable_ndecide & reg_i_hlock2 & controllable_hgrant2) | (controllable_locked) );

// G((decide=1  *  hlock2=0  *  X(hgrant2=1))->X(locked=0));
assign sys_safe_err37 =  ~( ~(~reg_controllable_ndecide & ~reg_i_hlock2 & controllable_hgrant2) | (~controllable_locked) );

// G( (decide=1  *  hlock3=1  *  X(hgrant3=1) )->X(locked=1));
assign sys_safe_err38 =  ~( ~(~reg_controllable_ndecide & reg_i_hlock3 & controllable_hgrant3) | (controllable_locked) );

// G((decide=1  *  hlock3=0  *  X(hgrant3=1))->X(locked=0));
assign sys_safe_err39 =  ~( ~(~reg_controllable_ndecide & ~reg_i_hlock3 & controllable_hgrant3) | (~controllable_locked) );

// G( (decide=1  *  hlock4=1  *  X(hgrant4=1) )->X(locked=1));
assign sys_safe_err40 =  ~( ~(~reg_controllable_ndecide & reg_i_hlock4 & controllable_hgrant4) | (controllable_locked) );

// G((decide=1  *  hlock4=0  *  X(hgrant4=1))->X(locked=0));
assign sys_safe_err41 =  ~( ~(~reg_controllable_ndecide & ~reg_i_hlock4 & controllable_hgrant4) | (~controllable_locked) );

// G( (decide=1  *  hlock5=1  *  X(hgrant5=1) )->X(locked=1));
assign sys_safe_err42 =  ~( ~(~reg_controllable_ndecide & reg_i_hlock5 & controllable_hgrant5) | (controllable_locked) );

// G((decide=1  *  hlock5=0  *  X(hgrant5=1))->X(locked=0));
assign sys_safe_err43 =  ~( ~(~reg_controllable_ndecide & ~reg_i_hlock5 & controllable_hgrant5) | (~controllable_locked) );

// G( (decide=1  *  hlock6=1  *  X(hgrant6=1) )->X(locked=1));
assign sys_safe_err44 =  ~( ~(~reg_controllable_ndecide & reg_i_hlock6 & controllable_hgrant6) | (controllable_locked) );

// G((decide=1  *  hlock6=0  *  X(hgrant6=1))->X(locked=0));
assign sys_safe_err45 =  ~( ~(~reg_controllable_ndecide & ~reg_i_hlock6 & controllable_hgrant6) | (~controllable_locked) );

// G( (decide=1  *  hlock7=1  *  X(hgrant7=1) )->X(locked=1));
assign sys_safe_err46 =  ~( ~(~reg_controllable_ndecide & reg_i_hlock7 & controllable_hgrant7) | (controllable_locked) );

// G((decide=1  *  hlock7=0  *  X(hgrant7=1))->X(locked=0));
assign sys_safe_err47 =  ~( ~(~reg_controllable_ndecide & ~reg_i_hlock7 & controllable_hgrant7) | (~controllable_locked) );

// G( (decide=1  *  hlock8=1  *  X(hgrant8=1) )->X(locked=1));
assign sys_safe_err48 =  ~( ~(~reg_controllable_ndecide & reg_i_hlock8 & controllable_hgrant8) | (controllable_locked) );

// G((decide=1  *  hlock8=0  *  X(hgrant8=1))->X(locked=0));
assign sys_safe_err49 =  ~( ~(~reg_controllable_ndecide & ~reg_i_hlock8 & controllable_hgrant8) | (~controllable_locked) );

// G( (decide=0) -> (  ((hgrant0=0)<->X(hgrant0=0))  ));
assign sys_safe_err50 =  ~( ~(reg_controllable_ndecide) | (reg_controllable_nhgrant0 ^~ controllable_nhgrant0) );

// G( (decide=0) -> (  ((hgrant1=0)<->X(hgrant1=0))  ));
assign sys_safe_err51 =  ~( ~(reg_controllable_ndecide) | (~reg_controllable_hgrant1 ^~ ~controllable_hgrant1) );

// G( (decide=0) -> (  ((hgrant2=0)<->X(hgrant2=0))  ));
assign sys_safe_err52 =  ~( ~(reg_controllable_ndecide) | (~reg_controllable_hgrant2 ^~ ~controllable_hgrant2) );

// G( (decide=0) -> (  ((hgrant3=0)<->X(hgrant3=0))  ));
assign sys_safe_err53 =  ~( ~(reg_controllable_ndecide) | (~reg_controllable_hgrant3 ^~ ~controllable_hgrant3) );

// G( (decide=0) -> (  ((hgrant4=0)<->X(hgrant4=0))  ));
assign sys_safe_err54 =  ~( ~(reg_controllable_ndecide) | (~reg_controllable_hgrant4 ^~ ~controllable_hgrant4) );

// G( (decide=0) -> (  ((hgrant5=0)<->X(hgrant5=0))  ));
assign sys_safe_err55 =  ~( ~(reg_controllable_ndecide) | (~reg_controllable_hgrant5 ^~ ~controllable_hgrant5) );

// G( (decide=0) -> (  ((hgrant6=0)<->X(hgrant6=0))  ));
assign sys_safe_err56 =  ~( ~(reg_controllable_ndecide) | (~reg_controllable_hgrant6 ^~ ~controllable_hgrant6) );

// G( (decide=0) -> (  ((hgrant7=0)<->X(hgrant7=0))  ));
assign sys_safe_err57 =  ~( ~(reg_controllable_ndecide) | (~reg_controllable_hgrant7 ^~ ~controllable_hgrant7) );

// G( (decide=0) -> (  ((hgrant8=0)<->X(hgrant8=0))  ));
assign sys_safe_err58 =  ~( ~(reg_controllable_ndecide) | (~reg_controllable_hgrant8 ^~ ~controllable_hgrant8) );

// G((decide=0)->(locked=0 <-> X(locked=0)));
assign sys_safe_err59 =  ~( ~(reg_controllable_ndecide) | (~reg_controllable_locked ^~ ~controllable_locked) );

// G(((stateG10_1=1) * (((hgrant1=1)) * (hbusreq1=0)))->FALSE);
assign sys_safe_err60 =  ~( ~(reg_stateG10_1 & (controllable_hgrant1 & ~i_hbusreq1)) | 0 );

// G(((stateG10_2=1) * (((hgrant2=1)) * (hbusreq2=0)))->FALSE);
assign sys_safe_err61 =  ~( ~(reg_stateG10_2 & (controllable_hgrant2 & ~i_hbusreq2)) | 0 );

// G(((stateG10_3=1) * (((hgrant3=1)) * (hbusreq3=0)))->FALSE);
assign sys_safe_err62 =  ~( ~(reg_stateG10_3 & (controllable_hgrant3 & ~i_hbusreq3)) | 0 );

// G(((stateG10_4=1) * (((hgrant4=1)) * (hbusreq4=0)))->FALSE);
assign sys_safe_err63 =  ~( ~(reg_stateG10_4 & (controllable_hgrant4 & ~i_hbusreq4)) | 0 );

// G(((stateG10_5=1) * (((hgrant5=1)) * (hbusreq5=0)))->FALSE);
assign sys_safe_err64 =  ~( ~(reg_stateG10_5 & (controllable_hgrant5 & ~i_hbusreq5)) | 0 );

// G(((stateG10_6=1) * (((hgrant6=1)) * (hbusreq6=0)))->FALSE);
assign sys_safe_err65 =  ~( ~(reg_stateG10_6 & (controllable_hgrant6 & ~i_hbusreq6)) | 0 );

// G(((stateG10_7=1) * (((hgrant7=1)) * (hbusreq7=0)))->FALSE);
assign sys_safe_err66 =  ~( ~(reg_stateG10_7 & (controllable_hgrant7 & ~i_hbusreq7)) | 0 );

// G(((stateG10_8=1) * (((hgrant8=1)) * (hbusreq8=0)))->FALSE);
assign sys_safe_err67 =  ~( ~(reg_stateG10_8 & (controllable_hgrant8 & ~i_hbusreq8)) | 0 );

// default master
// G((decide=1  *  hbusreq0=0  *  hbusreq1=0  *  hbusreq2=0  *  hbusreq3=0  *  hbusreq4=0  *  hbusreq5=0  *  hbusreq6=0  *  hbusreq7=0  *  hbusreq8=0) -> X(hgrant0=1));
assign sys_safe_err68 =  ~( ~(~reg_controllable_ndecide & (~reg_i_hbusreq0 & ~reg_i_hbusreq1 & ~reg_i_hbusreq2 & ~reg_i_hbusreq3 & ~reg_i_hbusreq4 & ~reg_i_hbusreq5 & ~reg_i_hbusreq6 & ~reg_i_hbusreq7 & ~reg_i_hbusreq8)) | (~controllable_nhgrant0) );

// collecting together the safety error bits:
assign sys_safe_err = sys_safe_err0 |
                      sys_safe_err1 |
                      sys_safe_err2 |
                      sys_safe_err3 |
                      sys_safe_err4 |
                      sys_safe_err5 |
                      sys_safe_err6 |
                      sys_safe_err7 |
                      sys_safe_err8 |
                      sys_safe_err9 |
                      sys_safe_err10 |
                      sys_safe_err11 |
                      sys_safe_err12 |
                      sys_safe_err13 |
                      sys_safe_err14 |
                      sys_safe_err15 |
                      sys_safe_err16 |
                      sys_safe_err17 |
                      sys_safe_err18 |
                      sys_safe_err19 |
                      sys_safe_err20 |
                      sys_safe_err21 |
                      sys_safe_err22 |
                      sys_safe_err23 |
                      sys_safe_err24 |
                      sys_safe_err25 |
                      sys_safe_err26 |
                      sys_safe_err27 |
                      sys_safe_err28 |
                      sys_safe_err29 |
                      sys_safe_err30 |
                      sys_safe_err31 |
                      sys_safe_err32 |
                      sys_safe_err33 |
                      sys_safe_err34 |
                      sys_safe_err35 |
                      sys_safe_err36 |
                      sys_safe_err37 |
                      sys_safe_err38 |
                      sys_safe_err39 |
                      sys_safe_err40 |
                      sys_safe_err41 |
                      sys_safe_err42 |
                      sys_safe_err43 |
                      sys_safe_err44 |
                      sys_safe_err45 |
                      sys_safe_err46 |
                      sys_safe_err47 |
                      sys_safe_err48 |
                      sys_safe_err49 |
                      sys_safe_err50 |
                      sys_safe_err51 |
                      sys_safe_err52 |
                      sys_safe_err53 |
                      sys_safe_err54 |
                      sys_safe_err55 |
                      sys_safe_err56 |
                      sys_safe_err57 |
                      sys_safe_err58 |
                      sys_safe_err59 |
                      sys_safe_err60 |
                      sys_safe_err61 |
                      sys_safe_err62 |
                      sys_safe_err63 |
                      sys_safe_err64 |
                      sys_safe_err65 |
                      sys_safe_err66 |
                      sys_safe_err67 |
                      sys_safe_err68;

// =============================================================
//                          ENV_FAIRNESS:
// =============================================================
// Assumption 1: 
// G(F(stateA1=0));
assign env_fair0 =  ~reg_stateA1;

// Assumption 2:
// G(F(hready=1));
assign env_fair1 =  i_hready;


// =============================================================
//                          SYS_FAIRNESS:
// =============================================================
// Guarantee 2:
// G(F(stateG2=0));
assign sys_fair0 = ~reg_stateG2;

// Guarantee 3:
// G(F((stateG3_0=0)  *  (stateG3_1=0)  *  (stateG3_2=0)));
assign sys_fair1 =  (~reg_stateG3_0 & ~reg_stateG3_1 & ~reg_stateG3_2);

// G(F(((hmaster0=0) * (hmaster1=0) * (hmaster2=0) * (hmaster3=0))  |  hbusreq0=0));
assign sys_fair2 =  ( ~(controllable_hmaster0) & ~(controllable_hmaster1) & ~(controllable_hmaster2) & ~(controllable_hmaster3) ) | ~i_hbusreq0;

// G(F(((hmaster0=1) * (hmaster1=0) * (hmaster2=0) * (hmaster3=0))  |  hbusreq1=0));
assign sys_fair3 =  ( controllable_hmaster0 & ~(controllable_hmaster1) & ~(controllable_hmaster2) & ~(controllable_hmaster3) ) | ~i_hbusreq1;

// G(F(((hmaster0=0) * (hmaster1=1) * (hmaster2=0) * (hmaster3=0))  |  hbusreq2=0));
assign sys_fair4 =  ( ~(controllable_hmaster0) & controllable_hmaster1 & ~(controllable_hmaster2) & ~(controllable_hmaster3) ) | ~i_hbusreq2;

// G(F(((hmaster0=1) * (hmaster1=1) * (hmaster2=0) * (hmaster3=0))  |  hbusreq3=0));
assign sys_fair5 =  ( controllable_hmaster0 & controllable_hmaster1 & ~(controllable_hmaster2) & ~(controllable_hmaster3) ) | ~i_hbusreq3;

// G(F(((hmaster0=0) * (hmaster1=0) * (hmaster2=1) * (hmaster3=0))  |  hbusreq4=0));
assign sys_fair6 =  ( ~(controllable_hmaster0) & ~(controllable_hmaster1) & controllable_hmaster2 & ~(controllable_hmaster3) ) | ~i_hbusreq4;

// G(F(((hmaster0=1) * (hmaster1=0) * (hmaster2=1) * (hmaster3=0))  |  hbusreq5=0));
assign sys_fair7 =  ( controllable_hmaster0 & ~(controllable_hmaster1) & controllable_hmaster2 & ~(controllable_hmaster3) ) | ~i_hbusreq5;

// G(F(((hmaster0=0) * (hmaster1=1) * (hmaster2=1) * (hmaster3=0))  |  hbusreq6=0));
assign sys_fair8 =  ( ~(controllable_hmaster0) & controllable_hmaster1 & controllable_hmaster2 & ~(controllable_hmaster3) ) | ~i_hbusreq6;

// G(F(((hmaster0=1) * (hmaster1=1) * (hmaster2=1) * (hmaster3=0))  |  hbusreq7=0));
assign sys_fair9 =  ( controllable_hmaster0 & controllable_hmaster1 & controllable_hmaster2 & ~(controllable_hmaster3) ) | ~i_hbusreq7;

// G(F(((hmaster0=0) * (hmaster1=0) * (hmaster2=0) * (hmaster3=1))  |  hbusreq8=0));
assign sys_fair10 =  ( ~(controllable_hmaster0) & ~(controllable_hmaster1) & ~(controllable_hmaster2) & controllable_hmaster3 ) | ~i_hbusreq8;

assign fair_err = (fair_cnt >= 6'b110010);

// computing the error output bit:
assign o_err = ~env_safe_err & ~env_safe_err_happened & (sys_safe_err | fair_err);

initial
 begin
  reg_i_hready = 0;
  reg_i_hbusreq0 = 0;
  reg_i_hlock0 = 0;
  reg_i_hbusreq1 = 0;
  reg_i_hlock1 = 0;
  reg_i_hbusreq2 = 0;
  reg_i_hlock2 = 0;
  reg_i_hbusreq3 = 0;
  reg_i_hlock3 = 0;
  reg_i_hbusreq4 = 0;
  reg_i_hlock4 = 0;
  reg_i_hbusreq5 = 0;
  reg_i_hlock5 = 0;
  reg_i_hbusreq6 = 0;
  reg_i_hlock6 = 0;
  reg_i_hbusreq7 = 0;
  reg_i_hlock7 = 0;
  reg_i_hbusreq8 = 0;
  reg_i_hlock8 = 0;
  reg_controllable_hmaster0 = 0;
  reg_controllable_hmaster1 = 0;
  reg_controllable_hmaster2 = 0;
  reg_controllable_hmaster3 = 0;
  reg_controllable_hmastlock = 0;
  reg_controllable_nstart = 0;
  reg_controllable_ndecide = 0;
  reg_controllable_locked = 0;
  reg_controllable_nhgrant0 = 0;
  reg_controllable_hgrant1 = 0;
  reg_controllable_hgrant2 = 0;
  reg_controllable_hgrant3 = 0;
  reg_controllable_hgrant4 = 0;
  reg_controllable_hgrant5 = 0;
  reg_controllable_hgrant6 = 0;
  reg_controllable_hgrant7 = 0;
  reg_controllable_hgrant8 = 0;
  reg_controllable_busreq = 0;
  reg_stateA1 = 0;
  reg_stateG2 = 0;
  reg_stateG3_0 = 0;
  reg_stateG3_1 = 0;
  reg_stateG3_2 = 0;
  reg_stateG10_1 = 0;
  reg_stateG10_2 = 0;
  reg_stateG10_3 = 0;
  reg_stateG10_4 = 0;
  reg_stateG10_5 = 0;
  reg_stateG10_6 = 0;
  reg_stateG10_7 = 0;
  reg_stateG10_8 = 0;
  env_safe_err_happened = 0;
  next_env_fair = 0;
  fair_cnt = 0;
  next_sys_fair = 0;
 end


always @(posedge i_clk)
 begin
   // We remember if an environment error occurred:
   env_safe_err_happened = env_safe_err_happened | env_safe_err;

   // Updating the fairness counters: 
   if((next_sys_fair == 0) & sys_fair0)
    begin
      next_sys_fair = 1;
      next_env_fair = 0;
      fair_cnt = 0;
    end
   else if((next_sys_fair == 1) & sys_fair1)
    begin
      next_sys_fair = 2;
      next_env_fair = 0;
      fair_cnt = 0;
    end
   else if((next_sys_fair == 2) & sys_fair2)
    begin
      next_sys_fair = 3;
      next_env_fair = 0;
      fair_cnt = 0;
    end
   else if((next_sys_fair == 3) & sys_fair3)
    begin
      next_sys_fair = 4;
      next_env_fair = 0;
      fair_cnt = 0;
    end
   else if((next_sys_fair == 4) & sys_fair4)
    begin
      next_sys_fair = 5;
      next_env_fair = 0;
      fair_cnt = 0;
    end
   else if((next_sys_fair == 5) & sys_fair5)
    begin
      next_sys_fair = 6;
      next_env_fair = 0;
      fair_cnt = 0;
    end
   else if((next_sys_fair == 6) & sys_fair6)
    begin
      next_sys_fair = 7;
      next_env_fair = 0;
      fair_cnt = 0;
    end
   else if((next_sys_fair == 7) & sys_fair7)
    begin
      next_sys_fair = 8;
      next_env_fair = 0;
      fair_cnt = 0;
    end
   else if((next_sys_fair == 8) & sys_fair8)
    begin
      next_sys_fair = 9;
      next_env_fair = 0;
      fair_cnt = 0;
    end
   else if((next_sys_fair == 9) & sys_fair9)
    begin
      next_sys_fair = 10;
      next_env_fair = 0;
      fair_cnt = 0;
    end
   else if((next_sys_fair == 10) & sys_fair10)
    begin
      next_sys_fair = 0;
      next_env_fair = 0;
      fair_cnt = 0;
    end
   else if(~next_env_fair & env_fair0)
    begin
      next_env_fair = 1;
    end
   else if(next_env_fair & env_fair1)
    begin
      next_env_fair = 0;
      fair_cnt = fair_cnt + 1;
    end

   // Updating the automata: 
   // Automaton A1: 
   if(~reg_stateA1 & controllable_hmastlock & ~i_hburst0 & ~i_hburst1)
    begin
      reg_stateA1 = 1'b1;
    end
   else if(reg_stateA1 & ~controllable_busreq)
    begin
      reg_stateA1 = 1'b0;
    end

   // Automaton G2: 
   if(~reg_stateG2)
    begin
      if(controllable_hmastlock & ~controllable_nstart & ~i_hburst0 & ~i_hburst1)
       begin
         reg_stateG2 = 1'b1;
       end
    end
   else // if(reg_stateG2)
    begin
      if(~controllable_busreq)
       begin
         reg_stateG2 = 1'b0;
       end
    end

   // Automaton G3: 
   if(~reg_stateG3_0 & ~reg_stateG3_1 & ~reg_stateG3_2 & controllable_hmastlock & ~controllable_nstart &  ~i_hburst0 & i_hburst1 & ~i_hready)
    begin
      reg_stateG3_0 = 1'b1;
      reg_stateG3_1 = 1'b0;
      reg_stateG3_2 = 1'b0;
    end
   else if(~reg_stateG3_0 & ~reg_stateG3_1 & ~reg_stateG3_2 & controllable_hmastlock & ~controllable_nstart &  ~i_hburst0 & i_hburst1 & i_hready)
    begin
      reg_stateG3_0 = 1'b0;
      reg_stateG3_1 = 1'b1;
      reg_stateG3_2 = 1'b0;
    end
   else if(reg_stateG3_0 & ~reg_stateG3_1 & ~reg_stateG3_2 & i_hready)
    begin
      reg_stateG3_0 = 1'b0;
      reg_stateG3_1 = 1'b1;
      reg_stateG3_2 = 1'b0;
    end
   else if(~reg_stateG3_0 & reg_stateG3_1 & ~reg_stateG3_2 & i_hready)
    begin
      reg_stateG3_0 = 1'b1;
      reg_stateG3_1 = 1'b1;
      reg_stateG3_2 = 1'b0;
    end
   else if(reg_stateG3_0 & reg_stateG3_1 & ~reg_stateG3_2 & i_hready)
    begin
      reg_stateG3_0 = 1'b0;
      reg_stateG3_1 = 1'b0;
      reg_stateG3_2 = 1'b1;
    end
   else if(~reg_stateG3_0 & ~reg_stateG3_1 & reg_stateG3_2 & i_hready)
    begin
      reg_stateG3_0 = 1'b0;
      reg_stateG3_1 = 1'b0;
      reg_stateG3_2 = 1'b0;
    end

   // Automaton G10_1: 
   if(~reg_stateG10_1 & ~controllable_hgrant1 & ~i_hbusreq1)
    begin
      reg_stateG10_1 = 1'b1;
    end
   else if(reg_stateG10_1 & i_hbusreq1)
    begin
      reg_stateG10_1 = 1'b0;
    end

   // Automaton G10_2: 
   if(~reg_stateG10_2 & ~controllable_hgrant2 & ~i_hbusreq2)
    begin
      reg_stateG10_2 = 1'b1;
    end
   else if(reg_stateG10_2 & i_hbusreq2)
    begin
      reg_stateG10_2 = 1'b0;
    end

   // Automaton G10_3: 
   if(~reg_stateG10_3 & ~controllable_hgrant3 & ~i_hbusreq3)
    begin
      reg_stateG10_3 = 1'b1;
    end
   else if(reg_stateG10_3 & i_hbusreq3)
    begin
      reg_stateG10_3 = 1'b0;
    end

   // Automaton G10_4: 
   if(~reg_stateG10_4 & ~controllable_hgrant4 & ~i_hbusreq4)
    begin
      reg_stateG10_4 = 1'b1;
    end
   else if(reg_stateG10_4 & i_hbusreq4)
    begin
      reg_stateG10_4 = 1'b0;
    end

   // Automaton G10_5: 
   if(~reg_stateG10_5 & ~controllable_hgrant5 & ~i_hbusreq5)
    begin
      reg_stateG10_5 = 1'b1;
    end
   else if(reg_stateG10_5 & i_hbusreq5)
    begin
      reg_stateG10_5 = 1'b0;
    end

   // Automaton G10_6: 
   if(~reg_stateG10_6 & ~controllable_hgrant6 & ~i_hbusreq6)
    begin
      reg_stateG10_6 = 1'b1;
    end
   else if(reg_stateG10_6 & i_hbusreq6)
    begin
      reg_stateG10_6 = 1'b0;
    end

   // Automaton G10_7: 
   if(~reg_stateG10_7 & ~controllable_hgrant7 & ~i_hbusreq7)
    begin
      reg_stateG10_7 = 1'b1;
    end
   else if(reg_stateG10_7 & i_hbusreq7)
    begin
      reg_stateG10_7 = 1'b0;
    end

   // Automaton G10_8: 
   if(~reg_stateG10_8 & ~controllable_hgrant8 & ~i_hbusreq8)
    begin
      reg_stateG10_8 = 1'b1;
    end
   else if(reg_stateG10_8 & i_hbusreq8)
    begin
      reg_stateG10_8 = 1'b0;
    end

   // Latching the previous input:
   reg_i_hready =  i_hready;
   reg_i_hbusreq0 =  i_hbusreq0;
   reg_i_hlock0 =  i_hlock0;
   reg_i_hbusreq1 =  i_hbusreq1;
   reg_i_hlock1 =  i_hlock1;
   reg_i_hbusreq2 =  i_hbusreq2;
   reg_i_hlock2 =  i_hlock2;
   reg_i_hbusreq3 =  i_hbusreq3;
   reg_i_hlock3 =  i_hlock3;
   reg_i_hbusreq4 =  i_hbusreq4;
   reg_i_hlock4 =  i_hlock4;
   reg_i_hbusreq5 =  i_hbusreq5;
   reg_i_hlock5 =  i_hlock5;
   reg_i_hbusreq6 =  i_hbusreq6;
   reg_i_hlock6 =  i_hlock6;
   reg_i_hbusreq7 =  i_hbusreq7;
   reg_i_hlock7 =  i_hlock7;
   reg_i_hbusreq8 =  i_hbusreq8;
   reg_i_hlock8 =  i_hlock8;
   reg_controllable_hmaster0 =  controllable_hmaster0;
   reg_controllable_hmaster1 =  controllable_hmaster1;
   reg_controllable_hmaster2 =  controllable_hmaster2;
   reg_controllable_hmaster3 =  controllable_hmaster3;
   reg_controllable_hmastlock =  controllable_hmastlock;
   reg_controllable_nstart =  controllable_nstart;
   reg_controllable_ndecide =  controllable_ndecide;
   reg_controllable_locked =  controllable_locked;
   reg_controllable_nhgrant0 =  controllable_nhgrant0;
   reg_controllable_hgrant1 =  controllable_hgrant1;
   reg_controllable_hgrant2 =  controllable_hgrant2;
   reg_controllable_hgrant3 =  controllable_hgrant3;
   reg_controllable_hgrant4 =  controllable_hgrant4;
   reg_controllable_hgrant5 =  controllable_hgrant5;
   reg_controllable_hgrant6 =  controllable_hgrant6;
   reg_controllable_hgrant7 =  controllable_hgrant7;
   reg_controllable_hgrant8 =  controllable_hgrant8;
   reg_controllable_busreq =  controllable_busreq;

 end
endmodule

-------------------------------
#!SYNTCOMP
STATUS : realizable
SOLVED_BY : 3/3 [2015-pre-classification]
SOLVED_IN : 66.6092 [2015-pre-classification]
#.
