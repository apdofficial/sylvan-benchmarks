aag 787 26 46 1 715
2
4
6
8
10
12
14
16
18
20
22
24
26
28
30
32
34
36
38
40
42
44
46
48
50
52
54 1
56 10
58 48
60 14
62 975
64 46
66 18
68 1059
70 1083
72 6
74 42
76 1103
78 26
80 24
82 8
84 34
86 22
88 1133
90 1155
92 36
94 20
96 52
98 1177
100 2
102 38
104 1201
106 16
108 1403
110 1409
112 1415
114 1421
116 1427
118 1433
120 1513
122 1519
124 1525
126 1531
128 1553
130 40
132 12
134 28
136 169
138 1575
140 44
142 4
144 50
806
146 35 12
148 37 16
150 149 147
152 39 20
154 153 150
156 41 22
158 157 154
160 45 24
162 161 158
164 137 54
166 165 54
168 167 162
170 51 49
172 170 47
174 34 27
176 35 26
178 177 175
180 179 172
182 50 49
184 182 47
186 36 27
188 37 26
190 189 187
192 191 184
194 193 181
196 51 48
198 196 47
200 38 27
202 39 26
204 203 201
206 205 198
208 207 194
210 50 48
212 210 47
214 40 27
216 41 26
218 217 215
220 219 212
222 221 208
224 170 46
226 44 27
228 45 26
230 229 227
232 231 224
234 233 222
236 135 54
238 134 54
240 237 54
242 241 9
244 243 234
246 89 54
248 88 54
250 247 54
252 248 9
254 253 244
256 69 54
258 68 54
260 257 54
262 71 54
264 70 54
266 263 54
268 267 261
270 77 54
272 76 54
274 271 54
276 275 268
278 277 9
280 279 254
282 101 54
284 100 54
286 283 54
288 284 172
290 287 173
292 291 289
294 293 238
296 295 280
298 143 54
300 142 54
302 299 54
304 303 184
306 300 185
308 307 305
310 309 238
312 311 296
314 57 54
316 56 54
318 315 54
320 319 198
322 316 199
324 323 321
326 325 238
328 327 312
330 61 54
332 60 54
334 331 54
336 335 212
338 332 213
340 339 337
342 341 238
344 343 328
346 67 54
348 66 54
350 347 54
352 351 224
354 348 225
356 355 353
358 357 238
360 359 344
362 73 54
364 72 54
366 363 54
368 364 53
370 367 52
372 371 369
374 373 238
376 375 360
378 145 54
380 144 54
382 379 54
384 59 54
386 58 54
388 385 54
390 389 383
392 65 54
394 64 54
396 393 54
398 397 390
400 399 172
402 398 173
404 403 401
406 405 8
408 407 376
410 389 380
412 410 397
414 413 184
416 412 185
418 417 415
420 419 8
422 421 408
424 386 383
426 424 397
428 427 198
430 426 199
432 431 429
434 433 8
436 435 422
438 386 380
440 438 397
442 441 212
444 440 213
446 445 443
448 447 8
450 449 436
452 394 390
454 453 224
456 452 225
458 457 455
460 459 8
462 461 450
464 97 54
466 96 54
468 465 54
470 469 52
472 466 53
474 473 471
476 475 8
478 477 462
480 75 54
482 74 54
484 481 54
486 133 54
488 132 54
490 487 54
492 488 485
494 492 3
496 494 7
498 497 478
500 491 485
502 500 3
504 502 6
506 505 498
508 107 54
510 106 54
512 509 54
514 510 485
516 514 4
518 516 7
520 519 506
522 513 485
524 522 4
526 524 6
528 527 520
530 95 54
532 94 54
534 531 54
536 532 485
538 536 10
540 538 7
542 541 528
544 535 485
546 544 10
548 546 6
550 549 542
552 87 54
554 86 54
556 553 54
558 554 485
560 558 14
562 560 7
564 563 550
566 557 485
568 566 14
570 568 6
572 571 564
574 81 54
576 80 54
578 575 54
580 576 485
582 580 18
584 582 7
586 585 572
588 579 485
590 588 18
592 590 6
594 593 586
596 287 2
598 284 3
600 599 597
602 601 482
604 603 594
606 300 5
608 303 4
610 609 607
612 611 482
614 613 604
616 316 11
618 319 10
620 619 617
622 621 482
624 623 614
626 332 15
628 335 14
630 629 627
632 631 482
634 633 624
636 348 19
638 351 18
640 639 637
642 641 482
644 643 634
646 364 7
648 367 6
650 649 647
652 651 482
654 653 644
656 91 54
658 90 54
660 657 54
662 37 4
664 662 658
666 665 654
668 99 54
670 98 54
672 669 54
674 39 10
676 674 670
678 677 666
680 129 54
682 128 54
684 681 54
686 41 14
688 686 682
690 689 678
692 139 54
694 138 54
696 693 54
698 45 18
700 698 694
702 701 690
704 85 54
706 705 54
708 93 54
710 709 54
712 711 707
714 103 54
716 715 54
718 717 712
720 131 54
722 721 54
724 723 718
726 141 54
728 727 54
730 729 724
732 730 485
734 732 2
736 735 702
738 119 54
740 118 54
742 739 54
744 117 54
746 116 54
748 745 54
750 115 54
752 114 54
754 751 54
756 113 54
758 112 54
760 757 54
762 111 54
764 110 54
766 763 54
768 109 54
770 108 54
772 769 54
774 755 749
776 774 743
778 777 742
780 778 775
782 754 746
784 783 775
786 775 743
788 774 740
790 789 787
792 771 765
794 792 759
796 794 754
798 796 784
800 798 790
802 801 781
804 802 736
806 805 168
808 121 54
810 120 54
812 809 54
814 123 54
816 122 54
818 815 54
820 125 54
822 124 54
824 821 54
826 126 54
828 817 811
830 828 823
832 830 827
834 832 251
836 817 812
838 836 823
840 838 827
842 840 276
844 818 811
846 844 823
848 846 827
850 173 34
852 851 848
854 818 812
856 854 823
858 856 827
860 185 36
862 861 858
864 828 824
866 864 827
868 199 38
870 869 866
872 836 824
874 872 827
876 213 40
878 877 874
880 844 824
882 880 827
884 225 44
886 885 882
888 63 54
890 62 54
892 889 54
894 105 54
896 104 54
898 895 54
900 899 893
902 890 28
904 842 835
906 905 835
908 843 835
910 908 852
912 911 906
914 908 853
916 914 862
918 917 912
920 914 863
922 920 870
924 923 918
926 920 871
928 926 878
930 929 924
932 926 879
934 932 886
936 935 930
938 932 887
940 938 900
942 941 936
944 938 901
946 944 902
948 947 942
950 903 890
952 950 901
954 953 901
956 955 887
958 956 879
960 958 871
962 960 863
964 962 853
966 964 843
968 966 835
970 968 949
972 948 890
974 973 971
976 276 52
978 976 9
980 978 33
982 980 30
984 982 29
986 982 28
988 267 258
990 988 275
992 990 28
994 264 261
996 994 275
998 996 28
1000 264 258
1002 1000 275
1004 1002 28
1006 272 268
1008 1006 28
1010 986 985
1012 1011 985
1014 987 985
1016 1014 992
1018 1017 1012
1020 1014 993
1022 1020 998
1024 1023 1018
1026 1020 999
1028 1026 1004
1030 1029 1024
1032 1026 1005
1034 1032 1008
1036 1035 1030
1038 1009 258
1040 1038 1005
1042 1040 999
1044 1043 999
1046 1045 993
1048 1046 987
1050 1048 985
1052 1051 985
1054 1053 1037
1056 1036 258
1058 1057 1055
1060 1009 264
1062 1060 1005
1064 1062 999
1066 1065 999
1068 1067 993
1070 1069 993
1072 1071 987
1074 1073 987
1076 1075 985
1078 1076 1037
1080 1036 264
1082 1081 1079
1084 1009 272
1086 1084 1005
1088 1087 1005
1090 1089 999
1092 1090 993
1094 1092 987
1096 1094 985
1098 1096 1037
1100 1036 272
1102 1101 1099
1104 52 9
1106 1104 33
1108 1106 31
1110 1108 251
1112 248 27
1114 1113 1111
1116 1109 248
1118 1117 1109
1120 248 26
1122 1119 251
1124 1120 248
1126 1125 1123
1128 1127 1115
1130 1114 248
1132 1131 1129
1134 661 5
1136 1134 37
1138 658 36
1140 1138 1137
1142 1141 1137
1144 1139 658
1146 1144 1137
1148 1147 1137
1150 1149 1143
1152 1142 658
1154 1153 1151
1156 673 11
1158 1156 39
1160 670 38
1162 1160 1159
1164 1163 1159
1166 1161 670
1168 1166 1159
1170 1169 1159
1172 1171 1165
1174 1164 670
1176 1175 1173
1178 899 52
1180 1178 33
1182 1180 31
1184 896 27
1186 1184 1183
1188 1187 1183
1190 1185 896
1192 1190 1183
1194 1193 1183
1196 1195 1189
1198 1188 896
1200 1199 1197
1202 947 936
1204 902 773
1206 903 770
1208 1207 1205
1210 900 770
1212 1209 901
1214 1213 1211
1216 1215 887
1218 1216 879
1220 1218 871
1222 1220 863
1224 1222 853
1226 1224 843
1228 1226 835
1230 770 767
1232 771 764
1234 1233 1231
1236 1235 902
1238 903 764
1240 1239 1237
1242 900 764
1244 1241 901
1246 1245 1243
1248 1247 887
1250 1248 879
1252 1250 871
1254 1252 863
1256 1254 853
1258 1256 843
1260 1258 835
1262 770 764
1264 1262 761
1266 1263 758
1268 1267 1265
1270 1269 902
1272 903 758
1274 1273 1271
1276 900 758
1278 1275 901
1280 1279 1277
1282 1281 887
1284 1282 879
1286 1284 871
1288 1286 863
1290 1288 853
1292 1290 843
1294 1292 835
1296 1262 758
1298 1296 755
1300 1297 752
1302 1301 1299
1304 1303 902
1306 903 752
1308 1307 1305
1310 900 752
1312 1309 901
1314 1313 1311
1316 1315 887
1318 1316 879
1320 1318 871
1322 1320 863
1324 1322 853
1326 1324 843
1328 1326 835
1330 1296 752
1332 1330 749
1334 1331 746
1336 1335 1333
1338 1337 902
1340 903 746
1342 1341 1339
1344 900 746
1346 1343 901
1348 1347 1345
1350 1349 887
1352 1350 879
1354 1352 871
1356 1354 863
1358 1356 853
1360 1358 843
1362 1360 835
1364 1330 746
1366 1364 743
1368 1365 740
1370 1369 1367
1372 1371 902
1374 903 740
1376 1375 1373
1378 900 740
1380 1377 901
1382 1381 1379
1384 1383 887
1386 1384 879
1388 1386 871
1390 1388 863
1392 1390 853
1394 1392 843
1396 1394 835
1398 1228 1203
1400 1202 770
1402 1401 1399
1404 1260 1203
1406 1202 764
1408 1407 1405
1410 1294 1203
1412 1202 758
1414 1413 1411
1416 1328 1203
1418 1202 752
1420 1419 1417
1422 1362 1203
1424 1202 746
1426 1425 1423
1428 1396 1203
1430 1202 740
1432 1431 1429
1434 887 810
1436 1434 879
1438 1436 871
1440 1439 871
1442 1441 863
1444 1442 853
1446 1445 853
1448 1447 843
1450 1448 835
1452 1451 835
1454 887 816
1456 1454 879
1458 1457 879
1460 1459 871
1462 1460 863
1464 1462 853
1466 1465 853
1468 1467 843
1470 1469 843
1472 1471 835
1474 887 822
1476 1474 879
1478 1477 879
1480 1479 871
1482 1481 871
1484 1483 863
1486 1485 863
1488 1487 853
1490 1488 843
1492 1490 835
1494 887 826
1496 1494 879
1498 1496 871
1500 1498 863
1502 1500 853
1504 1502 843
1506 1504 835
1508 1453 937
1510 936 810
1512 1511 1509
1514 1472 937
1516 936 816
1518 1517 1515
1520 1492 937
1522 936 822
1524 1523 1521
1526 1506 937
1528 936 826
1530 1529 1527
1532 685 15
1534 1532 41
1536 682 40
1538 1536 1535
1540 1539 1535
1542 1537 682
1544 1542 1535
1546 1545 1535
1548 1547 1541
1550 1540 682
1552 1551 1549
1554 697 19
1556 1554 45
1558 694 44
1560 1558 1557
1562 1561 1557
1564 1559 694
1566 1564 1557
1568 1567 1557
1570 1569 1563
1572 1562 694
1574 1573 1571
i0 controllable_nhgrant0
i1 controllable_hgrant1
i2 controllable_locked
i3 controllable_nstart
i4 controllable_hgrant2
i5 i_hlock0
i6 controllable_hgrant3
i7 i_hlock1
i8 controllable_hgrant4
i9 i_hlock2
i10 i_hlock3
i11 i_hlock4
i12 controllable_busreq
i13 i_hready
i14 i_hburst1
i15 i_hburst0
i16 i_hbusreq0
i17 i_hbusreq1
i18 i_hbusreq2
i19 i_hbusreq3
i20 controllable_ndecide
i21 i_hbusreq4
i22 controllable_hmaster2
i23 controllable_hmaster1
i24 controllable_hmaster0
i25 controllable_hmastlock
l0 n55
l1 reg_controllable_hgrant2_out
l2 reg_controllable_hmaster1_out
l3 reg_controllable_hgrant3_out
l4 next_env_fair_out
l5 reg_controllable_hmaster2_out
l6 reg_controllable_hgrant4_out
l7 reg_stateG3_0_out
l8 reg_stateG3_1_out
l9 reg_controllable_locked_out
l10 reg_controllable_ndecide_out
l11 reg_stateG3_2_out
l12 reg_controllable_busreq_out
l13 reg_i_hlock4_out
l14 reg_controllable_nstart_out
l15 reg_i_hbusreq0_out
l16 reg_i_hlock3_out
l17 reg_stateG2_out
l18 reg_stateG10_1_out
l19 reg_i_hbusreq1_out
l20 reg_i_hlock2_out
l21 reg_controllable_hmastlock_out
l22 reg_stateG10_2_out
l23 reg_controllable_nhgrant0_out
l24 reg_i_hbusreq2_out
l25 reg_stateA1_out
l26 reg_i_hlock1_out
l27 fair_cnt<0>_out
l28 fair_cnt<1>_out
l29 fair_cnt<2>_out
l30 fair_cnt<3>_out
l31 fair_cnt<4>_out
l32 fair_cnt<5>_out
l33 next_sys_fair<0>_out
l34 next_sys_fair<1>_out
l35 next_sys_fair<2>_out
l36 next_sys_fair<3>_out
l37 reg_stateG10_3_out
l38 reg_i_hbusreq3_out
l39 reg_i_hlock0_out
l40 reg_i_hready_out
l41 env_safe_err_happened_out
l42 reg_stateG10_4_out
l43 reg_i_hbusreq4_out
l44 reg_controllable_hgrant1_out
l45 reg_controllable_hmaster0_out
o0 o_err
c
amba_5_new_40
This file was written by ABC on Tue May  5 16:50:59 2015
For information about AIGER format, refer to http://fmv.jku.at/aiger
-------------------------------
This AIGER file has been created by the following sequence of commands:
> vl2mv amba5c40.v   ---gives--> amba5c40.mv
> abc -c "read_blif_mv amba5c40.mv; write_aiger -s amba5c40n.aig"   ---gives--> amba5c40n.aig
> aigtoaig amba5c40n.aig amba5c40n.aag   ---gives--> amba5c40n.aag (this file)
Content of amba5c40.v:
module amba_5_new_40(
        o_err,
        i_clk,
        i_hready,
        i_hbusreq0,
        i_hlock0,
        i_hbusreq1,
        i_hlock1,
        i_hbusreq2,
        i_hlock2,
        i_hbusreq3,
        i_hlock3,
        i_hbusreq4,
        i_hlock4,
        i_hburst0,
        i_hburst1,
        controllable_hmaster0,
        controllable_hmaster1,
        controllable_hmaster2,
        controllable_hmastlock,
        controllable_nstart,
        controllable_ndecide,
        controllable_locked,
        controllable_nhgrant0,
        controllable_hgrant1,
        controllable_hgrant2,
        controllable_hgrant3,
        controllable_hgrant4,
        controllable_busreq);

input i_clk;
input i_hready;
input i_hbusreq0;
input i_hlock0;
input i_hbusreq1;
input i_hlock1;
input i_hbusreq2;
input i_hlock2;
input i_hbusreq3;
input i_hlock3;
input i_hbusreq4;
input i_hlock4;
input i_hburst0;
input i_hburst1;
input controllable_hmaster0;
input controllable_hmaster1;
input controllable_hmaster2;
input controllable_hmastlock;
input controllable_nstart;
input controllable_ndecide;
input controllable_locked;
input controllable_nhgrant0;
input controllable_hgrant1;
input controllable_hgrant2;
input controllable_hgrant3;
input controllable_hgrant4;
input controllable_busreq;
output o_err;

reg reg_i_hready;
reg reg_i_hbusreq0;
reg reg_i_hlock0;
reg reg_i_hbusreq1;
reg reg_i_hlock1;
reg reg_i_hbusreq2;
reg reg_i_hlock2;
reg reg_i_hbusreq3;
reg reg_i_hlock3;
reg reg_i_hbusreq4;
reg reg_i_hlock4;
reg reg_controllable_hmaster0;
reg reg_controllable_hmaster1;
reg reg_controllable_hmaster2;
reg reg_controllable_hmastlock;
reg reg_controllable_nstart;
reg reg_controllable_ndecide;
reg reg_controllable_locked;
reg reg_controllable_nhgrant0;
reg reg_controllable_hgrant1;
reg reg_controllable_hgrant2;
reg reg_controllable_hgrant3;
reg reg_controllable_hgrant4;
reg reg_controllable_busreq;
reg reg_stateA1;
reg reg_stateG2;
reg reg_stateG3_0;
reg reg_stateG3_1;
reg reg_stateG3_2;
reg reg_stateG10_1;
reg reg_stateG10_2;
reg reg_stateG10_3;
reg reg_stateG10_4;
reg env_safe_err_happened;
reg next_env_fair;
reg [5:0] fair_cnt;
reg [3:0] next_sys_fair;

wire env_safe_err0;
wire env_safe_err1;
wire env_safe_err2;
wire env_safe_err3;
wire env_safe_err4;
wire env_safe_err;

wire sys_safe_err0;
wire sys_safe_err1;
wire sys_safe_err2;
wire sys_safe_err3;
wire sys_safe_err4;
wire sys_safe_err5;
wire sys_safe_err6;
wire sys_safe_err7;
wire sys_safe_err8;
wire sys_safe_err9;
wire sys_safe_err10;
wire sys_safe_err11;
wire sys_safe_err12;
wire sys_safe_err13;
wire sys_safe_err14;
wire sys_safe_err15;
wire sys_safe_err16;
wire sys_safe_err17;
wire sys_safe_err18;
wire sys_safe_err19;
wire sys_safe_err20;
wire sys_safe_err21;
wire sys_safe_err22;
wire sys_safe_err23;
wire sys_safe_err24;
wire sys_safe_err25;
wire sys_safe_err26;
wire sys_safe_err27;
wire sys_safe_err28;
wire sys_safe_err29;
wire sys_safe_err30;
wire sys_safe_err31;
wire sys_safe_err32;
wire sys_safe_err33;
wire sys_safe_err34;
wire sys_safe_err35;
wire sys_safe_err36;
wire sys_safe_err37;
wire sys_safe_err38;
wire sys_safe_err39;
wire sys_safe_err40;
wire sys_safe_err;

wire env_fair0;
wire env_fair1;

wire sys_fair0;
wire sys_fair1;
wire sys_fair2;
wire sys_fair3;
wire sys_fair4;
wire sys_fair5;
wire sys_fair6;
wire fair_err;
wire o_err;

// =============================================================
//                        ENV_TRANSITION:
// =============================================================
// Assumption 3:
// G( hlock0=1 -> hbusreq0=1 );
assign env_safe_err0 =  ~(~ i_hlock0 | i_hbusreq0);

// Assumption 3:
// G( hlock1=1 -> hbusreq1=1 );
assign env_safe_err1 =  ~(~ i_hlock1 | i_hbusreq1);

// Assumption 3:
// G( hlock2=1 -> hbusreq2=1 );
assign env_safe_err2 =  ~(~ i_hlock2 | i_hbusreq2);

// Assumption 3:
// G( hlock3=1 -> hbusreq3=1 );
assign env_safe_err3 =  ~(~ i_hlock3 | i_hbusreq3);

// Assumption 3:
// G( hlock4=1 -> hbusreq4=1 );
assign env_safe_err4 =  ~(~ i_hlock4 | i_hbusreq4);

// collecting together the safety error bits:
assign env_safe_err = env_safe_err0 |
                      env_safe_err1 |
                      env_safe_err2 |
                      env_safe_err3 |
                      env_safe_err4;

// =============================================================
//                        SYS_TRANSITION:
// =============================================================
// G((hmaster0=0) * (hmaster1=0) * (hmaster2=0) -> (hbusreq0=0 <-> busreq=0));
assign sys_safe_err0 =  ~( ~( ~(controllable_hmaster0) & ~(controllable_hmaster1) & ~(controllable_hmaster2) )|(~i_hbusreq0 ^~ (~controllable_busreq)));

// G((hmaster0=1) * (hmaster1=0) * (hmaster2=0) -> (hbusreq1=0 <-> busreq=0));
assign sys_safe_err1 =  ~( ~( controllable_hmaster0 & ~(controllable_hmaster1) & ~(controllable_hmaster2) )|(~i_hbusreq1 ^~ (~controllable_busreq)));

// G((hmaster0=0) * (hmaster1=1) * (hmaster2=0) -> (hbusreq2=0 <-> busreq=0));
assign sys_safe_err2 =  ~( ~( ~(controllable_hmaster0) & controllable_hmaster1 & ~(controllable_hmaster2) )|(~i_hbusreq2 ^~ (~controllable_busreq)));

// G((hmaster0=1) * (hmaster1=1) * (hmaster2=0) -> (hbusreq3=0 <-> busreq=0));
assign sys_safe_err3 =  ~( ~( controllable_hmaster0 & controllable_hmaster1 & ~(controllable_hmaster2) )|(~i_hbusreq3 ^~ (~controllable_busreq)));

// G((hmaster0=0) * (hmaster1=0) * (hmaster2=1) -> (hbusreq4=0 <-> busreq=0));
assign sys_safe_err4 =  ~( ~( ~(controllable_hmaster0) & ~(controllable_hmaster1) & controllable_hmaster2 )|(~i_hbusreq4 ^~ (~controllable_busreq)));

// Guarantee 1:
// G((hready=0) -> X(start=0));
assign sys_safe_err5 =  ~( reg_i_hready | controllable_nstart );

// G(((stateG2=1) * (start=1)) -> FALSE;
assign sys_safe_err6 =  ~( ~(reg_stateG2 & ~controllable_nstart) | 0 );

// G(((stateG3_0=1) * (stateG3_1=0) * (stateG3_2=0) * ((start=1))) -> FALSE);
// G(((stateG3_0=0) * (stateG3_1=1) * (stateG3_2=0) * ((start=1))) -> FALSE);
// G(((stateG3_0=1) * (stateG3_1=1) * (stateG3_2=0) * ((start=1))) -> FALSE);
// G(((stateG3_0=0) * (stateG3_1=0) * (stateG3_2=1) * ((start=1))) -> FALSE);
// all these rules can be summarized as: only in state 000, start=1 is allowed:
assign sys_safe_err7 =  (reg_stateG3_0 | reg_stateG3_1 | reg_stateG3_2) & ~controllable_nstart;

// G( (hready=1) -> (   (hgrant0=1) <-> (X(hmaster0=0) * X(hmaster1=0) * X(hmaster2=0))  ) );
assign sys_safe_err8 =  ~( ~(reg_i_hready) | ( ~reg_controllable_nhgrant0 ^~ ( ~(controllable_hmaster0) & ~(controllable_hmaster1) & ~(controllable_hmaster2) ) ) );

// G( (hready=1) -> (   (hgrant1=1) <-> (X(hmaster0=1) * X(hmaster1=0) * X(hmaster2=0))  ) );
assign sys_safe_err9 =  ~( ~(reg_i_hready) | ( reg_controllable_hgrant1 ^~ ( controllable_hmaster0 & ~(controllable_hmaster1) & ~(controllable_hmaster2) ) ) );

// G( (hready=1) -> (   (hgrant2=1) <-> (X(hmaster0=0) * X(hmaster1=1) * X(hmaster2=0))  ) );
assign sys_safe_err10 =  ~( ~(reg_i_hready) | ( reg_controllable_hgrant2 ^~ ( ~(controllable_hmaster0) & controllable_hmaster1 & ~(controllable_hmaster2) ) ) );

// G( (hready=1) -> (   (hgrant3=1) <-> (X(hmaster0=1) * X(hmaster1=1) * X(hmaster2=0))  ) );
assign sys_safe_err11 =  ~( ~(reg_i_hready) | ( reg_controllable_hgrant3 ^~ ( controllable_hmaster0 & controllable_hmaster1 & ~(controllable_hmaster2) ) ) );

// G( (hready=1) -> (   (hgrant4=1) <-> (X(hmaster0=0) * X(hmaster1=0) * X(hmaster2=1))  ) );
assign sys_safe_err12 =  ~( ~(reg_i_hready) | ( reg_controllable_hgrant4 ^~ ( ~(controllable_hmaster0) & ~(controllable_hmaster1) & controllable_hmaster2 ) ) );

// HMASTLOCK:
// G(  (hready=1) -> (locked=0 <-> X(hmastlock=0) ) );
assign sys_safe_err13 =  ~( ~(reg_i_hready) | (~reg_controllable_locked ^~ ~controllable_hmastlock) );

// Master 0:
// G( X(start=0) -> ( ((hmaster0=0) * (hmaster1=0) * (hmaster2=0)) <-> (X(hmaster0=0) * X(hmaster1=0) * X(hmaster2=0)) ) );
assign sys_safe_err14 =  ~( ~(controllable_nstart) | ( ( ~(reg_controllable_hmaster0) & ~(reg_controllable_hmaster1) & ~(reg_controllable_hmaster2) ) ^~ ( ~(controllable_hmaster0) & ~(controllable_hmaster1) & ~(controllable_hmaster2) )) );

// Master 1:
// G( X(start=0) -> ( ((hmaster0=1) * (hmaster1=0) * (hmaster2=0)) <-> (X(hmaster0=1) * X(hmaster1=0) * X(hmaster2=0)) ) );
assign sys_safe_err15 =  ~( ~(controllable_nstart) | ( ( reg_controllable_hmaster0 & ~(reg_controllable_hmaster1) & ~(reg_controllable_hmaster2) ) ^~ ( controllable_hmaster0 & ~(controllable_hmaster1) & ~(controllable_hmaster2) )) );

// Master 2:
// G( X(start=0) -> ( ((hmaster0=0) * (hmaster1=1) * (hmaster2=0)) <-> (X(hmaster0=0) * X(hmaster1=1) * X(hmaster2=0)) ) );
assign sys_safe_err16 =  ~( ~(controllable_nstart) | ( ( ~(reg_controllable_hmaster0) & reg_controllable_hmaster1 & ~(reg_controllable_hmaster2) ) ^~ ( ~(controllable_hmaster0) & controllable_hmaster1 & ~(controllable_hmaster2) )) );

// Master 3:
// G( X(start=0) -> ( ((hmaster0=1) * (hmaster1=1) * (hmaster2=0)) <-> (X(hmaster0=1) * X(hmaster1=1) * X(hmaster2=0)) ) );
assign sys_safe_err17 =  ~( ~(controllable_nstart) | ( ( reg_controllable_hmaster0 & reg_controllable_hmaster1 & ~(reg_controllable_hmaster2) ) ^~ ( controllable_hmaster0 & controllable_hmaster1 & ~(controllable_hmaster2) )) );

// Master 4:
// G( X(start=0) -> ( ((hmaster0=0) * (hmaster1=0) * (hmaster2=1)) <-> (X(hmaster0=0) * X(hmaster1=0) * X(hmaster2=1)) ) );
assign sys_safe_err18 =  ~( ~(controllable_nstart) | ( ( ~(reg_controllable_hmaster0) & ~(reg_controllable_hmaster1) & reg_controllable_hmaster2 ) ^~ ( ~(controllable_hmaster0) & ~(controllable_hmaster1) & controllable_hmaster2 )) );

// Guarantee 6.2:
// G( ((X(start=0))) -> ( (hmastlock=1) <-> X(hmastlock=1)) );
assign sys_safe_err19 =  ~( ~(controllable_nstart) | ( reg_controllable_hmastlock ^~ controllable_hmastlock) );

// G( (decide=1  *  hlock0=1  *  X(hgrant0=1) )->X(locked=1));
assign sys_safe_err20 =  ~( ~(~reg_controllable_ndecide & reg_i_hlock0 & ~controllable_nhgrant0) | (controllable_locked) );

// G((decide=1  *  hlock0=0  *  X(hgrant0=1))->X(locked=0));
assign sys_safe_err21 =  ~( ~(~reg_controllable_ndecide & ~reg_i_hlock0 & ~controllable_nhgrant0) | (~controllable_locked) );

// G( (decide=1  *  hlock1=1  *  X(hgrant1=1) )->X(locked=1));
assign sys_safe_err22 =  ~( ~(~reg_controllable_ndecide & reg_i_hlock1 & controllable_hgrant1) | (controllable_locked) );

// G((decide=1  *  hlock1=0  *  X(hgrant1=1))->X(locked=0));
assign sys_safe_err23 =  ~( ~(~reg_controllable_ndecide & ~reg_i_hlock1 & controllable_hgrant1) | (~controllable_locked) );

// G( (decide=1  *  hlock2=1  *  X(hgrant2=1) )->X(locked=1));
assign sys_safe_err24 =  ~( ~(~reg_controllable_ndecide & reg_i_hlock2 & controllable_hgrant2) | (controllable_locked) );

// G((decide=1  *  hlock2=0  *  X(hgrant2=1))->X(locked=0));
assign sys_safe_err25 =  ~( ~(~reg_controllable_ndecide & ~reg_i_hlock2 & controllable_hgrant2) | (~controllable_locked) );

// G( (decide=1  *  hlock3=1  *  X(hgrant3=1) )->X(locked=1));
assign sys_safe_err26 =  ~( ~(~reg_controllable_ndecide & reg_i_hlock3 & controllable_hgrant3) | (controllable_locked) );

// G((decide=1  *  hlock3=0  *  X(hgrant3=1))->X(locked=0));
assign sys_safe_err27 =  ~( ~(~reg_controllable_ndecide & ~reg_i_hlock3 & controllable_hgrant3) | (~controllable_locked) );

// G( (decide=1  *  hlock4=1  *  X(hgrant4=1) )->X(locked=1));
assign sys_safe_err28 =  ~( ~(~reg_controllable_ndecide & reg_i_hlock4 & controllable_hgrant4) | (controllable_locked) );

// G((decide=1  *  hlock4=0  *  X(hgrant4=1))->X(locked=0));
assign sys_safe_err29 =  ~( ~(~reg_controllable_ndecide & ~reg_i_hlock4 & controllable_hgrant4) | (~controllable_locked) );

// G( (decide=0) -> (  ((hgrant0=0)<->X(hgrant0=0))  ));
assign sys_safe_err30 =  ~( ~(reg_controllable_ndecide) | (reg_controllable_nhgrant0 ^~ controllable_nhgrant0) );

// G( (decide=0) -> (  ((hgrant1=0)<->X(hgrant1=0))  ));
assign sys_safe_err31 =  ~( ~(reg_controllable_ndecide) | (~reg_controllable_hgrant1 ^~ ~controllable_hgrant1) );

// G( (decide=0) -> (  ((hgrant2=0)<->X(hgrant2=0))  ));
assign sys_safe_err32 =  ~( ~(reg_controllable_ndecide) | (~reg_controllable_hgrant2 ^~ ~controllable_hgrant2) );

// G( (decide=0) -> (  ((hgrant3=0)<->X(hgrant3=0))  ));
assign sys_safe_err33 =  ~( ~(reg_controllable_ndecide) | (~reg_controllable_hgrant3 ^~ ~controllable_hgrant3) );

// G( (decide=0) -> (  ((hgrant4=0)<->X(hgrant4=0))  ));
assign sys_safe_err34 =  ~( ~(reg_controllable_ndecide) | (~reg_controllable_hgrant4 ^~ ~controllable_hgrant4) );

// G((decide=0)->(locked=0 <-> X(locked=0)));
assign sys_safe_err35 =  ~( ~(reg_controllable_ndecide) | (~reg_controllable_locked ^~ ~controllable_locked) );

// G(((stateG10_1=1) * (((hgrant1=1)) * (hbusreq1=0)))->FALSE);
assign sys_safe_err36 =  ~( ~(reg_stateG10_1 & (controllable_hgrant1 & ~i_hbusreq1)) | 0 );

// G(((stateG10_2=1) * (((hgrant2=1)) * (hbusreq2=0)))->FALSE);
assign sys_safe_err37 =  ~( ~(reg_stateG10_2 & (controllable_hgrant2 & ~i_hbusreq2)) | 0 );

// G(((stateG10_3=1) * (((hgrant3=1)) * (hbusreq3=0)))->FALSE);
assign sys_safe_err38 =  ~( ~(reg_stateG10_3 & (controllable_hgrant3 & ~i_hbusreq3)) | 0 );

// G(((stateG10_4=1) * (((hgrant4=1)) * (hbusreq4=0)))->FALSE);
assign sys_safe_err39 =  ~( ~(reg_stateG10_4 & (controllable_hgrant4 & ~i_hbusreq4)) | 0 );

// default master
// G((decide=1  *  hbusreq0=0  *  hbusreq1=0  *  hbusreq2=0  *  hbusreq3=0  *  hbusreq4=0) -> X(hgrant0=1));
assign sys_safe_err40 =  ~( ~(~reg_controllable_ndecide & (~reg_i_hbusreq0 & ~reg_i_hbusreq1 & ~reg_i_hbusreq2 & ~reg_i_hbusreq3 & ~reg_i_hbusreq4)) | (~controllable_nhgrant0) );

// collecting together the safety error bits:
assign sys_safe_err = sys_safe_err0 |
                      sys_safe_err1 |
                      sys_safe_err2 |
                      sys_safe_err3 |
                      sys_safe_err4 |
                      sys_safe_err5 |
                      sys_safe_err6 |
                      sys_safe_err7 |
                      sys_safe_err8 |
                      sys_safe_err9 |
                      sys_safe_err10 |
                      sys_safe_err11 |
                      sys_safe_err12 |
                      sys_safe_err13 |
                      sys_safe_err14 |
                      sys_safe_err15 |
                      sys_safe_err16 |
                      sys_safe_err17 |
                      sys_safe_err18 |
                      sys_safe_err19 |
                      sys_safe_err20 |
                      sys_safe_err21 |
                      sys_safe_err22 |
                      sys_safe_err23 |
                      sys_safe_err24 |
                      sys_safe_err25 |
                      sys_safe_err26 |
                      sys_safe_err27 |
                      sys_safe_err28 |
                      sys_safe_err29 |
                      sys_safe_err30 |
                      sys_safe_err31 |
                      sys_safe_err32 |
                      sys_safe_err33 |
                      sys_safe_err34 |
                      sys_safe_err35 |
                      sys_safe_err36 |
                      sys_safe_err37 |
                      sys_safe_err38 |
                      sys_safe_err39 |
                      sys_safe_err40;

// =============================================================
//                          ENV_FAIRNESS:
// =============================================================
// Assumption 1: 
// G(F(stateA1=0));
assign env_fair0 =  ~reg_stateA1;

// Assumption 2:
// G(F(hready=1));
assign env_fair1 =  i_hready;


// =============================================================
//                          SYS_FAIRNESS:
// =============================================================
// Guarantee 2:
// G(F(stateG2=0));
assign sys_fair0 = ~reg_stateG2;

// Guarantee 3:
// G(F((stateG3_0=0)  *  (stateG3_1=0)  *  (stateG3_2=0)));
assign sys_fair1 =  (~reg_stateG3_0 & ~reg_stateG3_1 & ~reg_stateG3_2);

// G(F(((hmaster0=0) * (hmaster1=0) * (hmaster2=0))  |  hbusreq0=0));
assign sys_fair2 =  ( ~(controllable_hmaster0) & ~(controllable_hmaster1) & ~(controllable_hmaster2) ) | ~i_hbusreq0;

// G(F(((hmaster0=1) * (hmaster1=0) * (hmaster2=0))  |  hbusreq1=0));
assign sys_fair3 =  ( controllable_hmaster0 & ~(controllable_hmaster1) & ~(controllable_hmaster2) ) | ~i_hbusreq1;

// G(F(((hmaster0=0) * (hmaster1=1) * (hmaster2=0))  |  hbusreq2=0));
assign sys_fair4 =  ( ~(controllable_hmaster0) & controllable_hmaster1 & ~(controllable_hmaster2) ) | ~i_hbusreq2;

// G(F(((hmaster0=1) * (hmaster1=1) * (hmaster2=0))  |  hbusreq3=0));
assign sys_fair5 =  ( controllable_hmaster0 & controllable_hmaster1 & ~(controllable_hmaster2) ) | ~i_hbusreq3;

// G(F(((hmaster0=0) * (hmaster1=0) * (hmaster2=1))  |  hbusreq4=0));
assign sys_fair6 =  ( ~(controllable_hmaster0) & ~(controllable_hmaster1) & controllable_hmaster2 ) | ~i_hbusreq4;

assign fair_err = (fair_cnt >= 6'b101000);

// computing the error output bit:
assign o_err = ~env_safe_err & ~env_safe_err_happened & (sys_safe_err | fair_err);

initial
 begin
  reg_i_hready = 0;
  reg_i_hbusreq0 = 0;
  reg_i_hlock0 = 0;
  reg_i_hbusreq1 = 0;
  reg_i_hlock1 = 0;
  reg_i_hbusreq2 = 0;
  reg_i_hlock2 = 0;
  reg_i_hbusreq3 = 0;
  reg_i_hlock3 = 0;
  reg_i_hbusreq4 = 0;
  reg_i_hlock4 = 0;
  reg_controllable_hmaster0 = 0;
  reg_controllable_hmaster1 = 0;
  reg_controllable_hmaster2 = 0;
  reg_controllable_hmastlock = 0;
  reg_controllable_nstart = 0;
  reg_controllable_ndecide = 0;
  reg_controllable_locked = 0;
  reg_controllable_nhgrant0 = 0;
  reg_controllable_hgrant1 = 0;
  reg_controllable_hgrant2 = 0;
  reg_controllable_hgrant3 = 0;
  reg_controllable_hgrant4 = 0;
  reg_controllable_busreq = 0;
  reg_stateA1 = 0;
  reg_stateG2 = 0;
  reg_stateG3_0 = 0;
  reg_stateG3_1 = 0;
  reg_stateG3_2 = 0;
  reg_stateG10_1 = 0;
  reg_stateG10_2 = 0;
  reg_stateG10_3 = 0;
  reg_stateG10_4 = 0;
  env_safe_err_happened = 0;
  next_env_fair = 0;
  fair_cnt = 0;
  next_sys_fair = 0;
 end


always @(posedge i_clk)
 begin
   // We remember if an environment error occurred:
   env_safe_err_happened = env_safe_err_happened | env_safe_err;

   // Updating the fairness counters: 
   if((next_sys_fair == 0) & sys_fair0)
    begin
      next_sys_fair = 1;
      next_env_fair = 0;
      fair_cnt = 0;
    end
   else if((next_sys_fair == 1) & sys_fair1)
    begin
      next_sys_fair = 2;
      next_env_fair = 0;
      fair_cnt = 0;
    end
   else if((next_sys_fair == 2) & sys_fair2)
    begin
      next_sys_fair = 3;
      next_env_fair = 0;
      fair_cnt = 0;
    end
   else if((next_sys_fair == 3) & sys_fair3)
    begin
      next_sys_fair = 4;
      next_env_fair = 0;
      fair_cnt = 0;
    end
   else if((next_sys_fair == 4) & sys_fair4)
    begin
      next_sys_fair = 5;
      next_env_fair = 0;
      fair_cnt = 0;
    end
   else if((next_sys_fair == 5) & sys_fair5)
    begin
      next_sys_fair = 6;
      next_env_fair = 0;
      fair_cnt = 0;
    end
   else if((next_sys_fair == 6) & sys_fair6)
    begin
      next_sys_fair = 0;
      next_env_fair = 0;
      fair_cnt = 0;
    end
   else if(~next_env_fair & env_fair0)
    begin
      next_env_fair = 1;
    end
   else if(next_env_fair & env_fair1)
    begin
      next_env_fair = 0;
      fair_cnt = fair_cnt + 1;
    end

   // Updating the automata: 
   // Automaton A1: 
   if(~reg_stateA1 & controllable_hmastlock & ~i_hburst0 & ~i_hburst1)
    begin
      reg_stateA1 = 1'b1;
    end
   else if(reg_stateA1 & ~controllable_busreq)
    begin
      reg_stateA1 = 1'b0;
    end

   // Automaton G2: 
   if(~reg_stateG2)
    begin
      if(controllable_hmastlock & ~controllable_nstart & ~i_hburst0 & ~i_hburst1)
       begin
         reg_stateG2 = 1'b1;
       end
    end
   else // if(reg_stateG2)
    begin
      if(~controllable_busreq)
       begin
         reg_stateG2 = 1'b0;
       end
    end

   // Automaton G3: 
   if(~reg_stateG3_0 & ~reg_stateG3_1 & ~reg_stateG3_2 & controllable_hmastlock & ~controllable_nstart &  ~i_hburst0 & i_hburst1 & ~i_hready)
    begin
      reg_stateG3_0 = 1'b1;
      reg_stateG3_1 = 1'b0;
      reg_stateG3_2 = 1'b0;
    end
   else if(~reg_stateG3_0 & ~reg_stateG3_1 & ~reg_stateG3_2 & controllable_hmastlock & ~controllable_nstart &  ~i_hburst0 & i_hburst1 & i_hready)
    begin
      reg_stateG3_0 = 1'b0;
      reg_stateG3_1 = 1'b1;
      reg_stateG3_2 = 1'b0;
    end
   else if(reg_stateG3_0 & ~reg_stateG3_1 & ~reg_stateG3_2 & i_hready)
    begin
      reg_stateG3_0 = 1'b0;
      reg_stateG3_1 = 1'b1;
      reg_stateG3_2 = 1'b0;
    end
   else if(~reg_stateG3_0 & reg_stateG3_1 & ~reg_stateG3_2 & i_hready)
    begin
      reg_stateG3_0 = 1'b1;
      reg_stateG3_1 = 1'b1;
      reg_stateG3_2 = 1'b0;
    end
   else if(reg_stateG3_0 & reg_stateG3_1 & ~reg_stateG3_2 & i_hready)
    begin
      reg_stateG3_0 = 1'b0;
      reg_stateG3_1 = 1'b0;
      reg_stateG3_2 = 1'b1;
    end
   else if(~reg_stateG3_0 & ~reg_stateG3_1 & reg_stateG3_2 & i_hready)
    begin
      reg_stateG3_0 = 1'b0;
      reg_stateG3_1 = 1'b0;
      reg_stateG3_2 = 1'b0;
    end

   // Automaton G10_1: 
   if(~reg_stateG10_1 & ~controllable_hgrant1 & ~i_hbusreq1)
    begin
      reg_stateG10_1 = 1'b1;
    end
   else if(reg_stateG10_1 & i_hbusreq1)
    begin
      reg_stateG10_1 = 1'b0;
    end

   // Automaton G10_2: 
   if(~reg_stateG10_2 & ~controllable_hgrant2 & ~i_hbusreq2)
    begin
      reg_stateG10_2 = 1'b1;
    end
   else if(reg_stateG10_2 & i_hbusreq2)
    begin
      reg_stateG10_2 = 1'b0;
    end

   // Automaton G10_3: 
   if(~reg_stateG10_3 & ~controllable_hgrant3 & ~i_hbusreq3)
    begin
      reg_stateG10_3 = 1'b1;
    end
   else if(reg_stateG10_3 & i_hbusreq3)
    begin
      reg_stateG10_3 = 1'b0;
    end

   // Automaton G10_4: 
   if(~reg_stateG10_4 & ~controllable_hgrant4 & ~i_hbusreq4)
    begin
      reg_stateG10_4 = 1'b1;
    end
   else if(reg_stateG10_4 & i_hbusreq4)
    begin
      reg_stateG10_4 = 1'b0;
    end

   // Latching the previous input:
   reg_i_hready =  i_hready;
   reg_i_hbusreq0 =  i_hbusreq0;
   reg_i_hlock0 =  i_hlock0;
   reg_i_hbusreq1 =  i_hbusreq1;
   reg_i_hlock1 =  i_hlock1;
   reg_i_hbusreq2 =  i_hbusreq2;
   reg_i_hlock2 =  i_hlock2;
   reg_i_hbusreq3 =  i_hbusreq3;
   reg_i_hlock3 =  i_hlock3;
   reg_i_hbusreq4 =  i_hbusreq4;
   reg_i_hlock4 =  i_hlock4;
   reg_controllable_hmaster0 =  controllable_hmaster0;
   reg_controllable_hmaster1 =  controllable_hmaster1;
   reg_controllable_hmaster2 =  controllable_hmaster2;
   reg_controllable_hmastlock =  controllable_hmastlock;
   reg_controllable_nstart =  controllable_nstart;
   reg_controllable_ndecide =  controllable_ndecide;
   reg_controllable_locked =  controllable_locked;
   reg_controllable_nhgrant0 =  controllable_nhgrant0;
   reg_controllable_hgrant1 =  controllable_hgrant1;
   reg_controllable_hgrant2 =  controllable_hgrant2;
   reg_controllable_hgrant3 =  controllable_hgrant3;
   reg_controllable_hgrant4 =  controllable_hgrant4;
   reg_controllable_busreq =  controllable_busreq;

 end
endmodule

-------------------------------
