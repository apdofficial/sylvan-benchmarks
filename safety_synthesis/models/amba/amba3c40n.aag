aag 604 19 37 1 548
2
4
6
8
10
12
14
16
18
20
22
24
26
28
30
32
34
36
38
40 1
42 30
44 16
46 701
48 785
50 18
52 809
54 36
56 829
58 2
60 28
62 10
64 4
66 859
68 881
70 38
72 32
74 903
76 927
78 8
80 6
82 983
84 989
86 995
88 1001
90 26
92 1179
94 1185
96 1191
98 1197
100 1203
102 1209
104 129
106 22
108 34
110 24
112 20
564
114 22 3
116 26 5
118 117 115
120 32 7
122 121 118
124 105 40
126 125 40
128 127 122
130 21 17
132 29 2
134 28 3
136 135 133
138 137 130
140 20 17
142 29 4
144 28 5
146 145 143
148 147 140
150 149 139
152 21 16
154 29 6
156 28 7
158 157 155
160 159 152
162 161 150
164 109 40
166 108 40
168 165 40
170 169 11
172 171 162
174 67 40
176 66 40
178 175 40
180 176 11
182 181 172
184 49 40
186 48 40
188 185 40
190 53 40
192 52 40
194 191 40
196 195 189
198 57 40
200 56 40
202 199 40
204 203 196
206 205 11
208 207 182
210 71 40
212 70 40
214 211 40
216 212 130
218 215 131
220 219 217
222 221 166
224 223 208
226 111 40
228 110 40
230 227 40
232 231 140
234 228 141
236 235 233
238 237 166
240 239 224
242 43 40
244 42 40
246 243 40
248 247 152
250 244 153
252 251 249
254 253 166
256 255 240
258 51 40
260 50 40
262 259 40
264 260 9
266 263 8
268 267 265
270 269 166
272 271 256
274 113 40
276 112 40
278 275 40
280 45 40
282 44 40
284 281 40
286 285 279
288 287 130
290 286 131
292 291 289
294 293 10
296 295 272
298 285 276
300 299 140
302 298 141
304 303 301
306 305 10
308 307 296
310 282 279
312 311 152
314 310 153
316 315 313
318 317 10
320 319 308
322 79 40
324 78 40
326 323 40
328 327 8
330 324 9
332 331 329
334 333 10
336 335 320
338 55 40
340 54 40
342 339 40
344 107 40
346 106 40
348 345 40
350 346 343
352 350 39
354 352 19
356 355 336
358 349 343
360 358 39
362 360 18
364 363 356
366 91 40
368 90 40
370 367 40
372 368 343
374 372 24
376 374 19
378 377 364
380 371 343
382 380 24
384 382 18
386 385 378
388 73 40
390 72 40
392 389 40
394 390 343
396 394 30
398 396 19
400 399 386
402 393 343
404 402 30
406 404 18
408 407 400
410 215 38
412 212 39
414 413 411
416 415 340
418 417 408
420 228 25
422 231 24
424 423 421
426 425 340
428 427 418
430 244 31
432 247 30
434 433 431
436 435 340
438 437 428
440 260 19
442 263 18
444 443 441
446 445 340
448 447 438
450 69 40
452 68 40
454 451 40
456 24 5
458 456 452
460 459 448
462 75 40
464 74 40
466 463 40
468 30 7
470 468 464
472 471 460
474 59 40
476 475 40
478 65 40
480 479 40
482 481 477
484 81 40
486 485 40
488 487 482
490 488 343
492 490 38
494 493 472
496 103 40
498 102 40
500 497 40
502 101 40
504 100 40
506 503 40
508 99 40
510 98 40
512 509 40
514 97 40
516 96 40
518 515 40
520 95 40
522 94 40
524 521 40
526 93 40
528 92 40
530 527 40
532 513 507
534 532 501
536 535 500
538 536 533
540 512 504
542 541 533
544 533 501
546 532 498
548 547 545
550 529 523
552 550 517
554 552 512
556 554 542
558 556 548
560 559 539
562 560 494
564 563 128
566 83 40
568 82 40
570 567 40
572 85 40
574 84 40
576 573 40
578 87 40
580 86 40
582 579 40
584 88 40
586 575 569
588 586 581
590 588 585
592 590 179
594 575 570
596 594 581
598 596 585
600 598 204
602 576 569
604 602 581
606 604 585
608 131 2
610 609 606
612 576 570
614 612 581
616 614 585
618 141 4
620 619 616
622 586 582
624 622 585
626 153 6
628 627 624
630 47 40
632 46 40
634 631 40
636 77 40
638 76 40
640 637 40
642 641 635
644 632 34
646 600 593
648 647 593
650 601 593
652 650 610
654 653 648
656 650 611
658 656 620
660 659 654
662 656 621
664 662 628
666 665 660
668 662 629
670 668 642
672 671 666
674 668 643
676 674 644
678 677 672
680 645 632
682 680 643
684 683 643
686 685 629
688 686 621
690 688 611
692 690 601
694 692 593
696 694 679
698 678 632
700 699 697
702 204 8
704 702 11
706 704 15
708 706 12
710 708 35
712 708 34
714 195 186
716 714 203
718 716 34
720 192 189
722 720 203
724 722 34
726 192 186
728 726 203
730 728 34
732 200 196
734 732 34
736 712 711
738 737 711
740 713 711
742 740 718
744 743 738
746 740 719
748 746 724
750 749 744
752 746 725
754 752 730
756 755 750
758 752 731
760 758 734
762 761 756
764 735 186
766 764 731
768 766 725
770 769 725
772 771 719
774 772 713
776 774 711
778 777 711
780 779 763
782 762 186
784 783 781
786 735 192
788 786 731
790 788 725
792 791 725
794 793 719
796 795 719
798 797 713
800 799 713
802 801 711
804 802 763
806 762 192
808 807 805
810 735 200
812 810 731
814 813 731
816 815 725
818 816 719
820 818 713
822 820 711
824 822 763
826 762 200
828 827 825
830 11 8
832 830 15
834 832 13
836 834 179
838 176 29
840 839 837
842 835 176
844 843 835
846 176 28
848 845 179
850 846 176
852 851 849
854 853 841
856 840 176
858 857 855
860 455 25
862 860 5
864 452 4
866 864 863
868 867 863
870 865 452
872 870 863
874 873 863
876 875 869
878 868 452
880 879 877
882 467 31
884 882 7
886 464 6
888 886 885
890 889 885
892 887 464
894 892 885
896 895 885
898 897 891
900 890 464
902 901 899
904 641 8
906 904 15
908 906 13
910 638 29
912 910 909
914 913 909
916 911 638
918 916 909
920 919 909
922 921 915
924 914 638
926 925 923
928 629 568
930 928 621
932 930 611
934 933 611
936 935 601
938 936 593
940 939 593
942 629 574
944 942 621
946 944 611
948 947 611
950 949 601
952 951 601
954 953 593
956 629 580
958 956 621
960 959 621
962 961 611
964 962 601
966 964 593
968 629 584
970 968 621
972 970 611
974 972 601
976 974 593
978 941 667
980 666 568
982 981 979
984 954 667
986 666 574
988 987 985
990 966 667
992 666 580
994 993 991
996 976 667
998 666 584
1000 999 997
1002 677 666
1004 644 531
1006 645 528
1008 1007 1005
1010 642 528
1012 1009 643
1014 1013 1011
1016 1015 629
1018 1016 621
1020 1018 611
1022 1020 601
1024 1022 593
1026 528 525
1028 529 522
1030 1029 1027
1032 1031 644
1034 645 522
1036 1035 1033
1038 642 522
1040 1037 643
1042 1041 1039
1044 1043 629
1046 1044 621
1048 1046 611
1050 1048 601
1052 1050 593
1054 528 522
1056 1054 519
1058 1055 516
1060 1059 1057
1062 1061 644
1064 645 516
1066 1065 1063
1068 642 516
1070 1067 643
1072 1071 1069
1074 1073 629
1076 1074 621
1078 1076 611
1080 1078 601
1082 1080 593
1084 1054 516
1086 1084 513
1088 1085 510
1090 1089 1087
1092 1091 644
1094 645 510
1096 1095 1093
1098 642 510
1100 1097 643
1102 1101 1099
1104 1103 629
1106 1104 621
1108 1106 611
1110 1108 601
1112 1110 593
1114 1084 510
1116 1114 507
1118 1115 504
1120 1119 1117
1122 1121 644
1124 645 504
1126 1125 1123
1128 642 504
1130 1127 643
1132 1131 1129
1134 1133 629
1136 1134 621
1138 1136 611
1140 1138 601
1142 1140 593
1144 1114 504
1146 1144 501
1148 1145 498
1150 1149 1147
1152 1151 644
1154 645 498
1156 1155 1153
1158 642 498
1160 1157 643
1162 1161 1159
1164 1163 629
1166 1164 621
1168 1166 611
1170 1168 601
1172 1170 593
1174 1024 1003
1176 1002 528
1178 1177 1175
1180 1052 1003
1182 1002 522
1184 1183 1181
1186 1082 1003
1188 1002 516
1190 1189 1187
1192 1112 1003
1194 1002 510
1196 1195 1193
1198 1142 1003
1200 1002 504
1202 1201 1199
1204 1172 1003
1206 1002 498
1208 1207 1205
i0 i_hbusreq0
i1 i_hbusreq1
i2 i_hbusreq2
i3 controllable_hmastlock
i4 controllable_nstart
i5 i_hburst1
i6 i_hburst0
i7 controllable_hmaster1
i8 controllable_locked
i9 controllable_hmaster0
i10 i_hlock0
i11 controllable_hgrant1
i12 i_hlock1
i13 controllable_busreq
i14 controllable_hgrant2
i15 i_hlock2
i16 i_hready
i17 controllable_ndecide
i18 controllable_nhgrant0
l0 n41
l1 reg_controllable_hgrant2_out
l2 reg_controllable_hmaster1_out
l3 next_env_fair_out
l4 reg_stateG3_0_out
l5 reg_controllable_locked_out
l6 reg_stateG3_1_out
l7 reg_controllable_ndecide_out
l8 reg_stateG3_2_out
l9 reg_i_hbusreq0_out
l10 reg_controllable_busreq_out
l11 reg_controllable_nstart_out
l12 reg_i_hbusreq1_out
l13 reg_stateG2_out
l14 reg_stateG10_1_out
l15 reg_controllable_nhgrant0_out
l16 reg_i_hlock2_out
l17 reg_stateG10_2_out
l18 reg_stateA1_out
l19 reg_controllable_hmastlock_out
l20 reg_i_hbusreq2_out
l21 next_sys_fair<0>_out
l22 next_sys_fair<1>_out
l23 next_sys_fair<2>_out
l24 next_sys_fair<3>_out
l25 reg_i_hlock1_out
l26 fair_cnt<0>_out
l27 fair_cnt<1>_out
l28 fair_cnt<2>_out
l29 fair_cnt<3>_out
l30 fair_cnt<4>_out
l31 fair_cnt<5>_out
l32 env_safe_err_happened_out
l33 reg_i_hlock0_out
l34 reg_i_hready_out
l35 reg_controllable_hgrant1_out
l36 reg_controllable_hmaster0_out
o0 o_err
c
amba_3_new_40
This file was written by ABC on Tue May  5 16:50:45 2015
For information about AIGER format, refer to http://fmv.jku.at/aiger
-------------------------------
This AIGER file has been created by the following sequence of commands:
> vl2mv amba3c40.v   ---gives--> amba3c40.mv
> abc -c "read_blif_mv amba3c40.mv; write_aiger -s amba3c40n.aig"   ---gives--> amba3c40n.aig
> aigtoaig amba3c40n.aig amba3c40n.aag   ---gives--> amba3c40n.aag (this file)
Content of amba3c40.v:
module amba_3_new_40(
        o_err,
        i_clk,
        i_hready,
        i_hbusreq0,
        i_hlock0,
        i_hbusreq1,
        i_hlock1,
        i_hbusreq2,
        i_hlock2,
        i_hburst0,
        i_hburst1,
        controllable_hmaster0,
        controllable_hmaster1,
        controllable_hmastlock,
        controllable_nstart,
        controllable_ndecide,
        controllable_locked,
        controllable_nhgrant0,
        controllable_hgrant1,
        controllable_hgrant2,
        controllable_busreq);

input i_clk;
input i_hready;
input i_hbusreq0;
input i_hlock0;
input i_hbusreq1;
input i_hlock1;
input i_hbusreq2;
input i_hlock2;
input i_hburst0;
input i_hburst1;
input controllable_hmaster0;
input controllable_hmaster1;
input controllable_hmastlock;
input controllable_nstart;
input controllable_ndecide;
input controllable_locked;
input controllable_nhgrant0;
input controllable_hgrant1;
input controllable_hgrant2;
input controllable_busreq;
output o_err;

reg reg_i_hready;
reg reg_i_hbusreq0;
reg reg_i_hlock0;
reg reg_i_hbusreq1;
reg reg_i_hlock1;
reg reg_i_hbusreq2;
reg reg_i_hlock2;
reg reg_controllable_hmaster0;
reg reg_controllable_hmaster1;
reg reg_controllable_hmastlock;
reg reg_controllable_nstart;
reg reg_controllable_ndecide;
reg reg_controllable_locked;
reg reg_controllable_nhgrant0;
reg reg_controllable_hgrant1;
reg reg_controllable_hgrant2;
reg reg_controllable_busreq;
reg reg_stateA1;
reg reg_stateG2;
reg reg_stateG3_0;
reg reg_stateG3_1;
reg reg_stateG3_2;
reg reg_stateG10_1;
reg reg_stateG10_2;
reg env_safe_err_happened;
reg next_env_fair;
reg [5:0] fair_cnt;
reg [3:0] next_sys_fair;

wire env_safe_err0;
wire env_safe_err1;
wire env_safe_err2;
wire env_safe_err;

wire sys_safe_err0;
wire sys_safe_err1;
wire sys_safe_err2;
wire sys_safe_err3;
wire sys_safe_err4;
wire sys_safe_err5;
wire sys_safe_err6;
wire sys_safe_err7;
wire sys_safe_err8;
wire sys_safe_err9;
wire sys_safe_err10;
wire sys_safe_err11;
wire sys_safe_err12;
wire sys_safe_err13;
wire sys_safe_err14;
wire sys_safe_err15;
wire sys_safe_err16;
wire sys_safe_err17;
wire sys_safe_err18;
wire sys_safe_err19;
wire sys_safe_err20;
wire sys_safe_err21;
wire sys_safe_err22;
wire sys_safe_err23;
wire sys_safe_err24;
wire sys_safe_err25;
wire sys_safe_err26;
wire sys_safe_err;

wire env_fair0;
wire env_fair1;

wire sys_fair0;
wire sys_fair1;
wire sys_fair2;
wire sys_fair3;
wire sys_fair4;
wire fair_err;
wire o_err;

// =============================================================
//                        ENV_TRANSITION:
// =============================================================
// Assumption 3:
// G( hlock0=1 -> hbusreq0=1 );
assign env_safe_err0 =  ~(~ i_hlock0 | i_hbusreq0);

// Assumption 3:
// G( hlock1=1 -> hbusreq1=1 );
assign env_safe_err1 =  ~(~ i_hlock1 | i_hbusreq1);

// Assumption 3:
// G( hlock2=1 -> hbusreq2=1 );
assign env_safe_err2 =  ~(~ i_hlock2 | i_hbusreq2);

// collecting together the safety error bits:
assign env_safe_err = env_safe_err0 |
                      env_safe_err1 |
                      env_safe_err2;

// =============================================================
//                        SYS_TRANSITION:
// =============================================================
// G((hmaster0=0) * (hmaster1=0) -> (hbusreq0=0 <-> busreq=0));
assign sys_safe_err0 =  ~( ~( ~(controllable_hmaster0) & ~(controllable_hmaster1) )|(~i_hbusreq0 ^~ (~controllable_busreq)));

// G((hmaster0=1) * (hmaster1=0) -> (hbusreq1=0 <-> busreq=0));
assign sys_safe_err1 =  ~( ~( controllable_hmaster0 & ~(controllable_hmaster1) )|(~i_hbusreq1 ^~ (~controllable_busreq)));

// G((hmaster0=0) * (hmaster1=1) -> (hbusreq2=0 <-> busreq=0));
assign sys_safe_err2 =  ~( ~( ~(controllable_hmaster0) & controllable_hmaster1 )|(~i_hbusreq2 ^~ (~controllable_busreq)));

// Guarantee 1:
// G((hready=0) -> X(start=0));
assign sys_safe_err3 =  ~( reg_i_hready | controllable_nstart );

// G(((stateG2=1) * (start=1)) -> FALSE;
assign sys_safe_err4 =  ~( ~(reg_stateG2 & ~controllable_nstart) | 0 );

// G(((stateG3_0=1) * (stateG3_1=0) * (stateG3_2=0) * ((start=1))) -> FALSE);
// G(((stateG3_0=0) * (stateG3_1=1) * (stateG3_2=0) * ((start=1))) -> FALSE);
// G(((stateG3_0=1) * (stateG3_1=1) * (stateG3_2=0) * ((start=1))) -> FALSE);
// G(((stateG3_0=0) * (stateG3_1=0) * (stateG3_2=1) * ((start=1))) -> FALSE);
// all these rules can be summarized as: only in state 000, start=1 is allowed:
assign sys_safe_err5 =  (reg_stateG3_0 | reg_stateG3_1 | reg_stateG3_2) & ~controllable_nstart;

// G( (hready=1) -> (   (hgrant0=1) <-> (X(hmaster0=0) * X(hmaster1=0))  ) );
assign sys_safe_err6 =  ~( ~(reg_i_hready) | ( ~reg_controllable_nhgrant0 ^~ ( ~(controllable_hmaster0) & ~(controllable_hmaster1) ) ) );

// G( (hready=1) -> (   (hgrant1=1) <-> (X(hmaster0=1) * X(hmaster1=0))  ) );
assign sys_safe_err7 =  ~( ~(reg_i_hready) | ( reg_controllable_hgrant1 ^~ ( controllable_hmaster0 & ~(controllable_hmaster1) ) ) );

// G( (hready=1) -> (   (hgrant2=1) <-> (X(hmaster0=0) * X(hmaster1=1))  ) );
assign sys_safe_err8 =  ~( ~(reg_i_hready) | ( reg_controllable_hgrant2 ^~ ( ~(controllable_hmaster0) & controllable_hmaster1 ) ) );

// HMASTLOCK:
// G(  (hready=1) -> (locked=0 <-> X(hmastlock=0) ) );
assign sys_safe_err9 =  ~( ~(reg_i_hready) | (~reg_controllable_locked ^~ ~controllable_hmastlock) );

// Master 0:
// G( X(start=0) -> ( ((hmaster0=0) * (hmaster1=0)) <-> (X(hmaster0=0) * X(hmaster1=0)) ) );
assign sys_safe_err10 =  ~( ~(controllable_nstart) | ( ( ~(reg_controllable_hmaster0) & ~(reg_controllable_hmaster1) ) ^~ ( ~(controllable_hmaster0) & ~(controllable_hmaster1) )) );

// Master 1:
// G( X(start=0) -> ( ((hmaster0=1) * (hmaster1=0)) <-> (X(hmaster0=1) * X(hmaster1=0)) ) );
assign sys_safe_err11 =  ~( ~(controllable_nstart) | ( ( reg_controllable_hmaster0 & ~(reg_controllable_hmaster1) ) ^~ ( controllable_hmaster0 & ~(controllable_hmaster1) )) );

// Master 2:
// G( X(start=0) -> ( ((hmaster0=0) * (hmaster1=1)) <-> (X(hmaster0=0) * X(hmaster1=1)) ) );
assign sys_safe_err12 =  ~( ~(controllable_nstart) | ( ( ~(reg_controllable_hmaster0) & reg_controllable_hmaster1 ) ^~ ( ~(controllable_hmaster0) & controllable_hmaster1 )) );

// Guarantee 6.2:
// G( ((X(start=0))) -> ( (hmastlock=1) <-> X(hmastlock=1)) );
assign sys_safe_err13 =  ~( ~(controllable_nstart) | ( reg_controllable_hmastlock ^~ controllable_hmastlock) );

// G( (decide=1  *  hlock0=1  *  X(hgrant0=1) )->X(locked=1));
assign sys_safe_err14 =  ~( ~(~reg_controllable_ndecide & reg_i_hlock0 & ~controllable_nhgrant0) | (controllable_locked) );

// G((decide=1  *  hlock0=0  *  X(hgrant0=1))->X(locked=0));
assign sys_safe_err15 =  ~( ~(~reg_controllable_ndecide & ~reg_i_hlock0 & ~controllable_nhgrant0) | (~controllable_locked) );

// G( (decide=1  *  hlock1=1  *  X(hgrant1=1) )->X(locked=1));
assign sys_safe_err16 =  ~( ~(~reg_controllable_ndecide & reg_i_hlock1 & controllable_hgrant1) | (controllable_locked) );

// G((decide=1  *  hlock1=0  *  X(hgrant1=1))->X(locked=0));
assign sys_safe_err17 =  ~( ~(~reg_controllable_ndecide & ~reg_i_hlock1 & controllable_hgrant1) | (~controllable_locked) );

// G( (decide=1  *  hlock2=1  *  X(hgrant2=1) )->X(locked=1));
assign sys_safe_err18 =  ~( ~(~reg_controllable_ndecide & reg_i_hlock2 & controllable_hgrant2) | (controllable_locked) );

// G((decide=1  *  hlock2=0  *  X(hgrant2=1))->X(locked=0));
assign sys_safe_err19 =  ~( ~(~reg_controllable_ndecide & ~reg_i_hlock2 & controllable_hgrant2) | (~controllable_locked) );

// G( (decide=0) -> (  ((hgrant0=0)<->X(hgrant0=0))  ));
assign sys_safe_err20 =  ~( ~(reg_controllable_ndecide) | (reg_controllable_nhgrant0 ^~ controllable_nhgrant0) );

// G( (decide=0) -> (  ((hgrant1=0)<->X(hgrant1=0))  ));
assign sys_safe_err21 =  ~( ~(reg_controllable_ndecide) | (~reg_controllable_hgrant1 ^~ ~controllable_hgrant1) );

// G( (decide=0) -> (  ((hgrant2=0)<->X(hgrant2=0))  ));
assign sys_safe_err22 =  ~( ~(reg_controllable_ndecide) | (~reg_controllable_hgrant2 ^~ ~controllable_hgrant2) );

// G((decide=0)->(locked=0 <-> X(locked=0)));
assign sys_safe_err23 =  ~( ~(reg_controllable_ndecide) | (~reg_controllable_locked ^~ ~controllable_locked) );

// G(((stateG10_1=1) * (((hgrant1=1)) * (hbusreq1=0)))->FALSE);
assign sys_safe_err24 =  ~( ~(reg_stateG10_1 & (controllable_hgrant1 & ~i_hbusreq1)) | 0 );

// G(((stateG10_2=1) * (((hgrant2=1)) * (hbusreq2=0)))->FALSE);
assign sys_safe_err25 =  ~( ~(reg_stateG10_2 & (controllable_hgrant2 & ~i_hbusreq2)) | 0 );

// default master
// G((decide=1  *  hbusreq0=0  *  hbusreq1=0  *  hbusreq2=0) -> X(hgrant0=1));
assign sys_safe_err26 =  ~( ~(~reg_controllable_ndecide & (~reg_i_hbusreq0 & ~reg_i_hbusreq1 & ~reg_i_hbusreq2)) | (~controllable_nhgrant0) );

// collecting together the safety error bits:
assign sys_safe_err = sys_safe_err0 |
                      sys_safe_err1 |
                      sys_safe_err2 |
                      sys_safe_err3 |
                      sys_safe_err4 |
                      sys_safe_err5 |
                      sys_safe_err6 |
                      sys_safe_err7 |
                      sys_safe_err8 |
                      sys_safe_err9 |
                      sys_safe_err10 |
                      sys_safe_err11 |
                      sys_safe_err12 |
                      sys_safe_err13 |
                      sys_safe_err14 |
                      sys_safe_err15 |
                      sys_safe_err16 |
                      sys_safe_err17 |
                      sys_safe_err18 |
                      sys_safe_err19 |
                      sys_safe_err20 |
                      sys_safe_err21 |
                      sys_safe_err22 |
                      sys_safe_err23 |
                      sys_safe_err24 |
                      sys_safe_err25 |
                      sys_safe_err26;

// =============================================================
//                          ENV_FAIRNESS:
// =============================================================
// Assumption 1: 
// G(F(stateA1=0));
assign env_fair0 =  ~reg_stateA1;

// Assumption 2:
// G(F(hready=1));
assign env_fair1 =  i_hready;


// =============================================================
//                          SYS_FAIRNESS:
// =============================================================
// Guarantee 2:
// G(F(stateG2=0));
assign sys_fair0 = ~reg_stateG2;

// Guarantee 3:
// G(F((stateG3_0=0)  *  (stateG3_1=0)  *  (stateG3_2=0)));
assign sys_fair1 =  (~reg_stateG3_0 & ~reg_stateG3_1 & ~reg_stateG3_2);

// G(F(((hmaster0=0) * (hmaster1=0))  |  hbusreq0=0));
assign sys_fair2 =  ( ~(controllable_hmaster0) & ~(controllable_hmaster1) ) | ~i_hbusreq0;

// G(F(((hmaster0=1) * (hmaster1=0))  |  hbusreq1=0));
assign sys_fair3 =  ( controllable_hmaster0 & ~(controllable_hmaster1) ) | ~i_hbusreq1;

// G(F(((hmaster0=0) * (hmaster1=1))  |  hbusreq2=0));
assign sys_fair4 =  ( ~(controllable_hmaster0) & controllable_hmaster1 ) | ~i_hbusreq2;

assign fair_err = (fair_cnt >= 6'b101000);

// computing the error output bit:
assign o_err = ~env_safe_err & ~env_safe_err_happened & (sys_safe_err | fair_err);

initial
 begin
  reg_i_hready = 0;
  reg_i_hbusreq0 = 0;
  reg_i_hlock0 = 0;
  reg_i_hbusreq1 = 0;
  reg_i_hlock1 = 0;
  reg_i_hbusreq2 = 0;
  reg_i_hlock2 = 0;
  reg_controllable_hmaster0 = 0;
  reg_controllable_hmaster1 = 0;
  reg_controllable_hmastlock = 0;
  reg_controllable_nstart = 0;
  reg_controllable_ndecide = 0;
  reg_controllable_locked = 0;
  reg_controllable_nhgrant0 = 0;
  reg_controllable_hgrant1 = 0;
  reg_controllable_hgrant2 = 0;
  reg_controllable_busreq = 0;
  reg_stateA1 = 0;
  reg_stateG2 = 0;
  reg_stateG3_0 = 0;
  reg_stateG3_1 = 0;
  reg_stateG3_2 = 0;
  reg_stateG10_1 = 0;
  reg_stateG10_2 = 0;
  env_safe_err_happened = 0;
  next_env_fair = 0;
  fair_cnt = 0;
  next_sys_fair = 0;
 end


always @(posedge i_clk)
 begin
   // We remember if an environment error occurred:
   env_safe_err_happened = env_safe_err_happened | env_safe_err;

   // Updating the fairness counters: 
   if((next_sys_fair == 0) & sys_fair0)
    begin
      next_sys_fair = 1;
      next_env_fair = 0;
      fair_cnt = 0;
    end
   else if((next_sys_fair == 1) & sys_fair1)
    begin
      next_sys_fair = 2;
      next_env_fair = 0;
      fair_cnt = 0;
    end
   else if((next_sys_fair == 2) & sys_fair2)
    begin
      next_sys_fair = 3;
      next_env_fair = 0;
      fair_cnt = 0;
    end
   else if((next_sys_fair == 3) & sys_fair3)
    begin
      next_sys_fair = 4;
      next_env_fair = 0;
      fair_cnt = 0;
    end
   else if((next_sys_fair == 4) & sys_fair4)
    begin
      next_sys_fair = 0;
      next_env_fair = 0;
      fair_cnt = 0;
    end
   else if(~next_env_fair & env_fair0)
    begin
      next_env_fair = 1;
    end
   else if(next_env_fair & env_fair1)
    begin
      next_env_fair = 0;
      fair_cnt = fair_cnt + 1;
    end

   // Updating the automata: 
   // Automaton A1: 
   if(~reg_stateA1 & controllable_hmastlock & ~i_hburst0 & ~i_hburst1)
    begin
      reg_stateA1 = 1'b1;
    end
   else if(reg_stateA1 & ~controllable_busreq)
    begin
      reg_stateA1 = 1'b0;
    end

   // Automaton G2: 
   if(~reg_stateG2)
    begin
      if(controllable_hmastlock & ~controllable_nstart & ~i_hburst0 & ~i_hburst1)
       begin
         reg_stateG2 = 1'b1;
       end
    end
   else // if(reg_stateG2)
    begin
      if(~controllable_busreq)
       begin
         reg_stateG2 = 1'b0;
       end
    end

   // Automaton G3: 
   if(~reg_stateG3_0 & ~reg_stateG3_1 & ~reg_stateG3_2 & controllable_hmastlock & ~controllable_nstart &  ~i_hburst0 & i_hburst1 & ~i_hready)
    begin
      reg_stateG3_0 = 1'b1;
      reg_stateG3_1 = 1'b0;
      reg_stateG3_2 = 1'b0;
    end
   else if(~reg_stateG3_0 & ~reg_stateG3_1 & ~reg_stateG3_2 & controllable_hmastlock & ~controllable_nstart &  ~i_hburst0 & i_hburst1 & i_hready)
    begin
      reg_stateG3_0 = 1'b0;
      reg_stateG3_1 = 1'b1;
      reg_stateG3_2 = 1'b0;
    end
   else if(reg_stateG3_0 & ~reg_stateG3_1 & ~reg_stateG3_2 & i_hready)
    begin
      reg_stateG3_0 = 1'b0;
      reg_stateG3_1 = 1'b1;
      reg_stateG3_2 = 1'b0;
    end
   else if(~reg_stateG3_0 & reg_stateG3_1 & ~reg_stateG3_2 & i_hready)
    begin
      reg_stateG3_0 = 1'b1;
      reg_stateG3_1 = 1'b1;
      reg_stateG3_2 = 1'b0;
    end
   else if(reg_stateG3_0 & reg_stateG3_1 & ~reg_stateG3_2 & i_hready)
    begin
      reg_stateG3_0 = 1'b0;
      reg_stateG3_1 = 1'b0;
      reg_stateG3_2 = 1'b1;
    end
   else if(~reg_stateG3_0 & ~reg_stateG3_1 & reg_stateG3_2 & i_hready)
    begin
      reg_stateG3_0 = 1'b0;
      reg_stateG3_1 = 1'b0;
      reg_stateG3_2 = 1'b0;
    end

   // Automaton G10_1: 
   if(~reg_stateG10_1 & ~controllable_hgrant1 & ~i_hbusreq1)
    begin
      reg_stateG10_1 = 1'b1;
    end
   else if(reg_stateG10_1 & i_hbusreq1)
    begin
      reg_stateG10_1 = 1'b0;
    end

   // Automaton G10_2: 
   if(~reg_stateG10_2 & ~controllable_hgrant2 & ~i_hbusreq2)
    begin
      reg_stateG10_2 = 1'b1;
    end
   else if(reg_stateG10_2 & i_hbusreq2)
    begin
      reg_stateG10_2 = 1'b0;
    end

   // Latching the previous input:
   reg_i_hready =  i_hready;
   reg_i_hbusreq0 =  i_hbusreq0;
   reg_i_hlock0 =  i_hlock0;
   reg_i_hbusreq1 =  i_hbusreq1;
   reg_i_hlock1 =  i_hlock1;
   reg_i_hbusreq2 =  i_hbusreq2;
   reg_i_hlock2 =  i_hlock2;
   reg_controllable_hmaster0 =  controllable_hmaster0;
   reg_controllable_hmaster1 =  controllable_hmaster1;
   reg_controllable_hmastlock =  controllable_hmastlock;
   reg_controllable_nstart =  controllable_nstart;
   reg_controllable_ndecide =  controllable_ndecide;
   reg_controllable_locked =  controllable_locked;
   reg_controllable_nhgrant0 =  controllable_nhgrant0;
   reg_controllable_hgrant1 =  controllable_hgrant1;
   reg_controllable_hgrant2 =  controllable_hgrant2;
   reg_controllable_busreq =  controllable_busreq;

 end
endmodule

-------------------------------
