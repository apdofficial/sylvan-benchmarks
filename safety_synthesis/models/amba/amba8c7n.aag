aag 986 35 56 1 895
2
4
6
8
10
12
14
16
18
20
22
24
26
28
30
32
34
36
38
40
42
44
46
48
50
52
54
56
58
60
62
64
66
68
70
72 1
74 10
76 1131
78 60
80 66
82 14
84 1153
86 62
88 1391
90 64
92 36
94 18
96 1475
98 34
100 22
102 1499
104 6
106 54
108 30
110 26
112 1519
114 38
116 28
118 8
120 32
122 46
124 24
126 1549
128 1571
130 48
132 20
134 70
136 1593
138 2
140 50
142 1617
144 16
146 1735
148 1741
150 1747
152 1883
154 1889
156 1895
158 1901
160 1907
162 1929
164 52
166 12
168 40
170 219
172 1951
174 56
176 4
178 1973
180 58
182 68
1108
184 47 12
186 49 16
188 187 185
190 51 20
192 191 188
194 53 24
196 195 192
198 57 28
200 199 196
202 59 30
204 203 200
206 61 34
208 207 204
210 63 36
212 211 208
214 171 72
216 215 72
218 217 212
220 69 67
222 220 65
224 46 39
226 47 38
228 227 225
230 229 222
232 68 67
234 232 65
236 48 39
238 49 38
240 239 237
242 241 234
244 243 231
246 69 66
248 246 65
250 50 39
252 51 38
254 253 251
256 255 248
258 257 244
260 68 66
262 260 65
264 52 39
266 53 38
268 267 265
270 269 262
272 271 258
274 220 64
276 56 39
278 57 38
280 279 277
282 281 274
284 283 272
286 232 64
288 58 39
290 59 38
292 291 289
294 293 286
296 295 284
298 246 64
300 60 39
302 61 38
304 303 301
306 305 298
308 307 296
310 260 64
312 62 39
314 63 38
316 315 313
318 317 310
320 319 308
322 169 72
324 168 72
326 323 72
328 327 9
330 329 320
332 127 72
334 126 72
336 333 72
338 334 9
340 339 330
342 97 72
344 96 72
346 343 72
348 103 72
350 102 72
352 349 72
354 353 347
356 113 72
358 112 72
360 357 72
362 361 354
364 363 9
366 365 340
368 139 72
370 138 72
372 369 72
374 370 222
376 373 223
378 377 375
380 379 324
382 381 366
384 177 72
386 176 72
388 385 72
390 389 234
392 386 235
394 393 391
396 395 324
398 397 382
400 75 72
402 74 72
404 401 72
406 405 248
408 402 249
410 409 407
412 411 324
414 413 398
416 83 72
418 82 72
420 417 72
422 421 262
424 418 263
426 425 423
428 427 324
430 429 414
432 95 72
434 94 72
436 433 72
438 437 274
440 434 275
442 441 439
444 443 324
446 445 430
448 101 72
450 100 72
452 449 72
454 453 286
456 450 287
458 457 455
460 459 324
462 461 446
464 111 72
466 110 72
468 465 72
470 469 298
472 466 299
474 473 471
476 475 324
478 477 462
480 121 72
482 120 72
484 481 72
486 485 310
488 482 311
490 489 487
492 491 324
494 493 478
496 105 72
498 104 72
500 497 72
502 498 71
504 501 70
506 505 503
508 507 324
510 509 494
512 183 72
514 182 72
516 513 72
518 81 72
520 80 72
522 519 72
524 523 517
526 91 72
528 90 72
530 527 72
532 531 524
534 533 222
536 532 223
538 537 535
540 539 8
542 541 510
544 523 514
546 544 531
548 547 234
550 546 235
552 551 549
554 553 8
556 555 542
558 520 517
560 558 531
562 561 248
564 560 249
566 565 563
568 567 8
570 569 556
572 520 514
574 572 531
576 575 262
578 574 263
580 579 577
582 581 8
584 583 570
586 528 524
588 587 274
590 586 275
592 591 589
594 593 8
596 595 584
598 544 528
600 599 286
602 598 287
604 603 601
606 605 8
608 607 596
610 558 528
612 611 298
614 610 299
616 615 613
618 617 8
620 619 608
622 572 528
624 623 310
626 622 311
628 627 625
630 629 8
632 631 620
634 135 72
636 134 72
638 635 72
640 639 70
642 636 71
644 643 641
646 645 8
648 647 632
650 107 72
652 106 72
654 651 72
656 167 72
658 166 72
660 657 72
662 658 655
664 662 3
666 664 7
668 667 648
670 661 655
672 670 3
674 672 6
676 675 668
678 145 72
680 144 72
682 679 72
684 680 655
686 684 4
688 686 7
690 689 676
692 683 655
694 692 4
696 694 6
698 697 690
700 133 72
702 132 72
704 701 72
706 702 655
708 706 10
710 708 7
712 711 698
714 705 655
716 714 10
718 716 6
720 719 712
722 125 72
724 124 72
726 723 72
728 724 655
730 728 14
732 730 7
734 733 720
736 727 655
738 736 14
740 738 6
742 741 734
744 117 72
746 116 72
748 745 72
750 746 655
752 750 18
754 752 7
756 755 742
758 749 655
760 758 18
762 760 6
764 763 756
766 109 72
768 108 72
770 767 72
772 768 655
774 772 22
776 774 7
778 777 764
780 771 655
782 780 22
784 782 6
786 785 778
788 99 72
790 98 72
792 789 72
794 790 655
796 794 26
798 796 7
800 799 786
802 793 655
804 802 26
806 804 6
808 807 800
810 93 72
812 92 72
814 811 72
816 812 655
818 816 32
820 818 7
822 821 808
824 815 655
826 824 32
828 826 6
830 829 822
832 373 2
834 370 3
836 835 833
838 837 652
840 839 830
842 386 5
844 389 4
846 845 843
848 847 652
850 849 840
852 402 11
854 405 10
856 855 853
858 857 652
860 859 850
862 418 15
864 421 14
866 865 863
868 867 652
870 869 860
872 434 19
874 437 18
876 875 873
878 877 652
880 879 870
882 450 23
884 453 22
886 885 883
888 887 652
890 889 880
892 466 27
894 469 26
896 895 893
898 897 652
900 899 890
902 482 33
904 485 32
906 905 903
908 907 652
910 909 900
912 498 7
914 501 6
916 915 913
918 917 652
920 919 910
922 129 72
924 128 72
926 923 72
928 49 4
930 928 924
932 931 920
934 137 72
936 136 72
938 935 72
940 51 10
942 940 936
944 943 932
946 163 72
948 162 72
950 947 72
952 53 14
954 952 948
956 955 944
958 173 72
960 172 72
962 959 72
964 57 18
966 964 960
968 967 956
970 179 72
972 178 72
974 971 72
976 59 22
978 976 972
980 979 968
982 77 72
984 76 72
986 983 72
988 61 26
990 988 984
992 991 980
994 85 72
996 84 72
998 995 72
1000 63 32
1002 1000 996
1004 1003 992
1006 123 72
1008 1007 72
1010 131 72
1012 1011 72
1014 1013 1009
1016 141 72
1018 1017 72
1020 1019 1014
1022 165 72
1024 1023 72
1026 1025 1020
1028 175 72
1030 1029 72
1032 1031 1026
1034 181 72
1036 1035 72
1038 1037 1032
1040 79 72
1042 1041 72
1044 1043 1038
1046 87 72
1048 1047 72
1050 1049 1044
1052 1050 655
1054 1052 2
1056 1055 1004
1058 151 72
1060 150 72
1062 1059 72
1064 149 72
1066 148 72
1068 1065 72
1070 147 72
1072 146 72
1074 1071 72
1076 1075 1069
1078 1077 1068
1080 1078 1074
1082 1081 1063
1084 1083 1062
1086 1084 1080
1088 1074 1069
1090 1075 1066
1092 1091 1089
1094 1080 1063
1096 1081 1060
1098 1097 1095
1100 1092 1074
1102 1100 1098
1104 1103 1087
1106 1104 1056
1108 1107 218
1110 987 27
1112 1110 61
1114 984 60
1116 1114 1113
1118 1117 1113
1120 1115 984
1122 1120 1113
1124 1123 1113
1126 1125 1119
1128 1118 984
1130 1129 1127
1132 999 33
1134 1132 63
1136 996 62
1138 1136 1135
1140 1139 1135
1142 1137 996
1144 1142 1135
1146 1145 1135
1148 1147 1141
1150 1140 996
1152 1151 1149
1154 153 72
1156 152 72
1158 1155 72
1160 155 72
1162 154 72
1164 1161 72
1166 157 72
1168 156 72
1170 1167 72
1172 159 72
1174 158 72
1176 1173 72
1178 160 72
1180 1163 1157
1182 1180 1169
1184 1182 1175
1186 1184 1179
1188 1186 337
1190 1163 1158
1192 1190 1169
1194 1192 1175
1196 1194 1179
1198 1196 362
1200 1164 1157
1202 1200 1169
1204 1202 1175
1206 1204 1179
1208 223 46
1210 1209 1206
1212 1164 1158
1214 1212 1169
1216 1214 1175
1218 1216 1179
1220 235 48
1222 1221 1218
1224 1180 1170
1226 1224 1175
1228 1226 1179
1230 249 50
1232 1231 1228
1234 1190 1170
1236 1234 1175
1238 1236 1179
1240 263 52
1242 1241 1238
1244 1200 1170
1246 1244 1175
1248 1246 1179
1250 275 56
1252 1251 1248
1254 1212 1170
1256 1254 1175
1258 1256 1179
1260 287 58
1262 1261 1258
1264 1182 1176
1266 1264 1179
1268 299 60
1270 1269 1266
1272 1192 1176
1274 1272 1179
1276 311 62
1278 1277 1274
1280 89 72
1282 88 72
1284 1281 72
1286 143 72
1288 142 72
1290 1287 72
1292 1291 1285
1294 1282 40
1296 1198 1189
1298 1297 1189
1300 1199 1189
1302 1300 1210
1304 1303 1298
1306 1300 1211
1308 1306 1222
1310 1309 1304
1312 1306 1223
1314 1312 1232
1316 1315 1310
1318 1312 1233
1320 1318 1242
1322 1321 1316
1324 1318 1243
1326 1324 1252
1328 1327 1322
1330 1324 1253
1332 1330 1262
1334 1333 1328
1336 1330 1263
1338 1336 1270
1340 1339 1334
1342 1336 1271
1344 1342 1278
1346 1345 1340
1348 1342 1279
1350 1348 1292
1352 1351 1346
1354 1348 1293
1356 1354 1294
1358 1357 1352
1360 1295 1282
1362 1360 1293
1364 1363 1293
1366 1365 1279
1368 1366 1271
1370 1368 1263
1372 1370 1253
1374 1372 1243
1376 1374 1233
1378 1376 1223
1380 1378 1211
1382 1380 1199
1384 1382 1189
1386 1384 1359
1388 1358 1282
1390 1389 1387
1392 362 70
1394 1392 9
1396 1394 45
1398 1396 42
1400 1398 41
1402 1398 40
1404 353 344
1406 1404 361
1408 1406 40
1410 350 347
1412 1410 361
1414 1412 40
1416 350 344
1418 1416 361
1420 1418 40
1422 358 354
1424 1422 40
1426 1402 1401
1428 1427 1401
1430 1403 1401
1432 1430 1408
1434 1433 1428
1436 1430 1409
1438 1436 1414
1440 1439 1434
1442 1436 1415
1444 1442 1420
1446 1445 1440
1448 1442 1421
1450 1448 1424
1452 1451 1446
1454 1425 344
1456 1454 1421
1458 1456 1415
1460 1459 1415
1462 1461 1409
1464 1462 1403
1466 1464 1401
1468 1467 1401
1470 1469 1453
1472 1452 344
1474 1473 1471
1476 1425 350
1478 1476 1421
1480 1478 1415
1482 1481 1415
1484 1483 1409
1486 1485 1409
1488 1487 1403
1490 1489 1403
1492 1491 1401
1494 1492 1453
1496 1452 350
1498 1497 1495
1500 1425 358
1502 1500 1421
1504 1503 1421
1506 1505 1415
1508 1506 1409
1510 1508 1403
1512 1510 1401
1514 1512 1453
1516 1452 358
1518 1517 1515
1520 70 9
1522 1520 45
1524 1522 43
1526 1524 337
1528 334 39
1530 1529 1527
1532 1525 334
1534 1533 1525
1536 334 38
1538 1535 337
1540 1536 334
1542 1541 1539
1544 1543 1531
1546 1530 334
1548 1547 1545
1550 927 5
1552 1550 49
1554 924 48
1556 1554 1553
1558 1557 1553
1560 1555 924
1562 1560 1553
1564 1563 1553
1566 1565 1559
1568 1558 924
1570 1569 1567
1572 939 11
1574 1572 51
1576 936 50
1578 1576 1575
1580 1579 1575
1582 1577 936
1584 1582 1575
1586 1585 1575
1588 1587 1581
1590 1580 936
1592 1591 1589
1594 1291 70
1596 1594 45
1598 1596 43
1600 1288 39
1602 1600 1599
1604 1603 1599
1606 1601 1288
1608 1606 1599
1610 1609 1599
1612 1611 1605
1614 1604 1288
1616 1615 1613
1618 1357 1346
1620 1294 1075
1622 1295 1072
1624 1623 1621
1626 1292 1072
1628 1625 1293
1630 1629 1627
1632 1631 1279
1634 1632 1271
1636 1634 1263
1638 1636 1253
1640 1638 1243
1642 1640 1233
1644 1642 1223
1646 1644 1211
1648 1646 1199
1650 1648 1189
1652 1072 1069
1654 1073 1066
1656 1655 1653
1658 1657 1294
1660 1295 1066
1662 1661 1659
1664 1292 1066
1666 1663 1293
1668 1667 1665
1670 1669 1279
1672 1670 1271
1674 1672 1263
1676 1674 1253
1678 1676 1243
1680 1678 1233
1682 1680 1223
1684 1682 1211
1686 1684 1199
1688 1686 1189
1690 1072 1066
1692 1690 1063
1694 1691 1060
1696 1695 1693
1698 1697 1294
1700 1295 1060
1702 1701 1699
1704 1292 1060
1706 1703 1293
1708 1707 1705
1710 1709 1279
1712 1710 1271
1714 1712 1263
1716 1714 1253
1718 1716 1243
1720 1718 1233
1722 1720 1223
1724 1722 1211
1726 1724 1199
1728 1726 1189
1730 1650 1619
1732 1618 1072
1734 1733 1731
1736 1688 1619
1738 1618 1066
1740 1739 1737
1742 1728 1619
1744 1618 1060
1746 1745 1743
1748 1279 1156
1750 1748 1271
1752 1751 1271
1754 1753 1263
1756 1754 1253
1758 1757 1253
1760 1759 1243
1762 1760 1233
1764 1763 1233
1766 1765 1223
1768 1766 1211
1770 1769 1211
1772 1771 1199
1774 1772 1189
1776 1775 1189
1778 1279 1162
1780 1778 1271
1782 1780 1263
1784 1782 1253
1786 1785 1253
1788 1787 1243
1790 1789 1243
1792 1791 1233
1794 1792 1223
1796 1794 1211
1798 1797 1211
1800 1799 1199
1802 1801 1199
1804 1803 1189
1806 1279 1168
1808 1806 1271
1810 1808 1263
1812 1810 1253
1814 1813 1253
1816 1815 1243
1818 1817 1243
1820 1819 1233
1822 1821 1233
1824 1823 1223
1826 1825 1223
1828 1827 1211
1830 1828 1199
1832 1830 1189
1834 1279 1174
1836 1834 1271
1838 1837 1271
1840 1839 1263
1842 1841 1263
1844 1843 1253
1846 1844 1243
1848 1846 1233
1850 1848 1223
1852 1850 1211
1854 1852 1199
1856 1854 1189
1858 1279 1178
1860 1858 1271
1862 1860 1263
1864 1862 1253
1866 1864 1243
1868 1866 1233
1870 1868 1223
1872 1870 1211
1874 1872 1199
1876 1874 1189
1878 1777 1347
1880 1346 1156
1882 1881 1879
1884 1804 1347
1886 1346 1162
1888 1887 1885
1890 1832 1347
1892 1346 1168
1894 1893 1891
1896 1856 1347
1898 1346 1174
1900 1899 1897
1902 1876 1347
1904 1346 1178
1906 1905 1903
1908 951 15
1910 1908 53
1912 948 52
1914 1912 1911
1916 1915 1911
1918 1913 948
1920 1918 1911
1922 1921 1911
1924 1923 1917
1926 1916 948
1928 1927 1925
1930 963 19
1932 1930 57
1934 960 56
1936 1934 1933
1938 1937 1933
1940 1935 960
1942 1940 1933
1944 1943 1933
1946 1945 1939
1948 1938 960
1950 1949 1947
1952 975 23
1954 1952 59
1956 972 58
1958 1956 1955
1960 1959 1955
1962 1957 972
1964 1962 1955
1966 1965 1955
1968 1967 1961
1970 1960 972
1972 1971 1969
i0 controllable_nhgrant0
i1 controllable_hgrant1
i2 controllable_locked
i3 controllable_nstart
i4 controllable_hgrant2
i5 i_hlock0
i6 controllable_hgrant3
i7 i_hlock1
i8 controllable_hgrant4
i9 i_hlock2
i10 controllable_hgrant5
i11 i_hlock3
i12 controllable_hgrant6
i13 i_hlock4
i14 i_hlock5
i15 controllable_hgrant7
i16 i_hlock6
i17 i_hlock7
i18 controllable_busreq
i19 i_hready
i20 i_hburst1
i21 i_hburst0
i22 i_hbusreq0
i23 i_hbusreq1
i24 i_hbusreq2
i25 i_hbusreq3
i26 controllable_ndecide
i27 i_hbusreq4
i28 i_hbusreq5
i29 i_hbusreq6
i30 i_hbusreq7
i31 controllable_hmaster2
i32 controllable_hmaster1
i33 controllable_hmaster0
i34 controllable_hmastlock
l0 n73
l1 reg_controllable_hgrant2_out
l2 reg_stateG10_6_out
l3 reg_i_hbusreq6_out
l4 reg_controllable_hmaster1_out
l5 reg_controllable_hgrant3_out
l6 reg_stateG10_7_out
l7 reg_i_hbusreq7_out
l8 next_env_fair_out
l9 reg_controllable_hmaster2_out
l10 reg_i_hlock7_out
l11 reg_controllable_hgrant4_out
l12 reg_stateG3_0_out
l13 reg_i_hlock6_out
l14 reg_controllable_hgrant5_out
l15 reg_stateG3_1_out
l16 reg_controllable_locked_out
l17 reg_controllable_ndecide_out
l18 reg_i_hlock5_out
l19 reg_controllable_hgrant6_out
l20 reg_stateG3_2_out
l21 reg_controllable_busreq_out
l22 reg_i_hlock4_out
l23 reg_controllable_nstart_out
l24 reg_controllable_hgrant7_out
l25 reg_i_hbusreq0_out
l26 reg_i_hlock3_out
l27 reg_stateG2_out
l28 reg_stateG10_1_out
l29 reg_i_hbusreq1_out
l30 reg_i_hlock2_out
l31 reg_controllable_hmastlock_out
l32 reg_stateG10_2_out
l33 reg_controllable_nhgrant0_out
l34 reg_i_hbusreq2_out
l35 reg_stateA1_out
l36 reg_i_hlock1_out
l37 fair_cnt<0>_out
l38 fair_cnt<1>_out
l39 fair_cnt<2>_out
l40 next_sys_fair<0>_out
l41 next_sys_fair<1>_out
l42 next_sys_fair<2>_out
l43 next_sys_fair<3>_out
l44 next_sys_fair<4>_out
l45 reg_stateG10_3_out
l46 reg_i_hbusreq3_out
l47 reg_i_hlock0_out
l48 reg_i_hready_out
l49 env_safe_err_happened_out
l50 reg_stateG10_4_out
l51 reg_i_hbusreq4_out
l52 reg_controllable_hgrant1_out
l53 reg_stateG10_5_out
l54 reg_i_hbusreq5_out
l55 reg_controllable_hmaster0_out
o0 o_err
c
amba_8_new_7
This file was written by ABC on Sat Aug 31 20:24:34 2013
For information about AIGER format, refer to http://fmv.jku.at/aiger
-------------------------------
This AIGER file has been created by the following sequence of commands:
> vl2mv amba8c7.v   ---gives--> amba8c7.mv
> abc -c "read_blif_mv amba8c7.mv; write_aiger -s amba8c7n.aig"   ---gives--> amba8c7n.aig
> aigtoaig amba8c7n.aig amba8c7n.aag   ---gives--> amba8c7n.aag (this file)
Content of amba8c7.v:
module amba_8_new_7(
        o_err,
        i_clk,
        i_hready,
        i_hbusreq0,
        i_hlock0,
        i_hbusreq1,
        i_hlock1,
        i_hbusreq2,
        i_hlock2,
        i_hbusreq3,
        i_hlock3,
        i_hbusreq4,
        i_hlock4,
        i_hbusreq5,
        i_hlock5,
        i_hbusreq6,
        i_hlock6,
        i_hbusreq7,
        i_hlock7,
        i_hburst0,
        i_hburst1,
        controllable_hmaster0,
        controllable_hmaster1,
        controllable_hmaster2,
        controllable_hmastlock,
        controllable_nstart,
        controllable_ndecide,
        controllable_locked,
        controllable_nhgrant0,
        controllable_hgrant1,
        controllable_hgrant2,
        controllable_hgrant3,
        controllable_hgrant4,
        controllable_hgrant5,
        controllable_hgrant6,
        controllable_hgrant7,
        controllable_busreq);

input i_clk;
input i_hready;
input i_hbusreq0;
input i_hlock0;
input i_hbusreq1;
input i_hlock1;
input i_hbusreq2;
input i_hlock2;
input i_hbusreq3;
input i_hlock3;
input i_hbusreq4;
input i_hlock4;
input i_hbusreq5;
input i_hlock5;
input i_hbusreq6;
input i_hlock6;
input i_hbusreq7;
input i_hlock7;
input i_hburst0;
input i_hburst1;
input controllable_hmaster0;
input controllable_hmaster1;
input controllable_hmaster2;
input controllable_hmastlock;
input controllable_nstart;
input controllable_ndecide;
input controllable_locked;
input controllable_nhgrant0;
input controllable_hgrant1;
input controllable_hgrant2;
input controllable_hgrant3;
input controllable_hgrant4;
input controllable_hgrant5;
input controllable_hgrant6;
input controllable_hgrant7;
input controllable_busreq;
output o_err;

reg reg_i_hready;
reg reg_i_hbusreq0;
reg reg_i_hlock0;
reg reg_i_hbusreq1;
reg reg_i_hlock1;
reg reg_i_hbusreq2;
reg reg_i_hlock2;
reg reg_i_hbusreq3;
reg reg_i_hlock3;
reg reg_i_hbusreq4;
reg reg_i_hlock4;
reg reg_i_hbusreq5;
reg reg_i_hlock5;
reg reg_i_hbusreq6;
reg reg_i_hlock6;
reg reg_i_hbusreq7;
reg reg_i_hlock7;
reg reg_controllable_hmaster0;
reg reg_controllable_hmaster1;
reg reg_controllable_hmaster2;
reg reg_controllable_hmastlock;
reg reg_controllable_nstart;
reg reg_controllable_ndecide;
reg reg_controllable_locked;
reg reg_controllable_nhgrant0;
reg reg_controllable_hgrant1;
reg reg_controllable_hgrant2;
reg reg_controllable_hgrant3;
reg reg_controllable_hgrant4;
reg reg_controllable_hgrant5;
reg reg_controllable_hgrant6;
reg reg_controllable_hgrant7;
reg reg_controllable_busreq;
reg reg_stateA1;
reg reg_stateG2;
reg reg_stateG3_0;
reg reg_stateG3_1;
reg reg_stateG3_2;
reg reg_stateG10_1;
reg reg_stateG10_2;
reg reg_stateG10_3;
reg reg_stateG10_4;
reg reg_stateG10_5;
reg reg_stateG10_6;
reg reg_stateG10_7;
reg env_safe_err_happened;
reg next_env_fair;
reg [2:0] fair_cnt;
reg [4:0] next_sys_fair;

wire env_safe_err0;
wire env_safe_err1;
wire env_safe_err2;
wire env_safe_err3;
wire env_safe_err4;
wire env_safe_err5;
wire env_safe_err6;
wire env_safe_err7;
wire env_safe_err;

wire sys_safe_err0;
wire sys_safe_err1;
wire sys_safe_err2;
wire sys_safe_err3;
wire sys_safe_err4;
wire sys_safe_err5;
wire sys_safe_err6;
wire sys_safe_err7;
wire sys_safe_err8;
wire sys_safe_err9;
wire sys_safe_err10;
wire sys_safe_err11;
wire sys_safe_err12;
wire sys_safe_err13;
wire sys_safe_err14;
wire sys_safe_err15;
wire sys_safe_err16;
wire sys_safe_err17;
wire sys_safe_err18;
wire sys_safe_err19;
wire sys_safe_err20;
wire sys_safe_err21;
wire sys_safe_err22;
wire sys_safe_err23;
wire sys_safe_err24;
wire sys_safe_err25;
wire sys_safe_err26;
wire sys_safe_err27;
wire sys_safe_err28;
wire sys_safe_err29;
wire sys_safe_err30;
wire sys_safe_err31;
wire sys_safe_err32;
wire sys_safe_err33;
wire sys_safe_err34;
wire sys_safe_err35;
wire sys_safe_err36;
wire sys_safe_err37;
wire sys_safe_err38;
wire sys_safe_err39;
wire sys_safe_err40;
wire sys_safe_err41;
wire sys_safe_err42;
wire sys_safe_err43;
wire sys_safe_err44;
wire sys_safe_err45;
wire sys_safe_err46;
wire sys_safe_err47;
wire sys_safe_err48;
wire sys_safe_err49;
wire sys_safe_err50;
wire sys_safe_err51;
wire sys_safe_err52;
wire sys_safe_err53;
wire sys_safe_err54;
wire sys_safe_err55;
wire sys_safe_err56;
wire sys_safe_err57;
wire sys_safe_err58;
wire sys_safe_err59;
wire sys_safe_err60;
wire sys_safe_err61;
wire sys_safe_err;

wire env_fair0;
wire env_fair1;

wire sys_fair0;
wire sys_fair1;
wire sys_fair2;
wire sys_fair3;
wire sys_fair4;
wire sys_fair5;
wire sys_fair6;
wire sys_fair7;
wire sys_fair8;
wire sys_fair9;
wire fair_err;
wire o_err;

// =============================================================
//                        ENV_TRANSITION:
// =============================================================
// Assumption 3:
// G( hlock0=1 -> hbusreq0=1 );
assign env_safe_err0 =  ~(~ i_hlock0 | i_hbusreq0);

// Assumption 3:
// G( hlock1=1 -> hbusreq1=1 );
assign env_safe_err1 =  ~(~ i_hlock1 | i_hbusreq1);

// Assumption 3:
// G( hlock2=1 -> hbusreq2=1 );
assign env_safe_err2 =  ~(~ i_hlock2 | i_hbusreq2);

// Assumption 3:
// G( hlock3=1 -> hbusreq3=1 );
assign env_safe_err3 =  ~(~ i_hlock3 | i_hbusreq3);

// Assumption 3:
// G( hlock4=1 -> hbusreq4=1 );
assign env_safe_err4 =  ~(~ i_hlock4 | i_hbusreq4);

// Assumption 3:
// G( hlock5=1 -> hbusreq5=1 );
assign env_safe_err5 =  ~(~ i_hlock5 | i_hbusreq5);

// Assumption 3:
// G( hlock6=1 -> hbusreq6=1 );
assign env_safe_err6 =  ~(~ i_hlock6 | i_hbusreq6);

// Assumption 3:
// G( hlock7=1 -> hbusreq7=1 );
assign env_safe_err7 =  ~(~ i_hlock7 | i_hbusreq7);

// collecting together the safety error bits:
assign env_safe_err = env_safe_err0 |
                      env_safe_err1 |
                      env_safe_err2 |
                      env_safe_err3 |
                      env_safe_err4 |
                      env_safe_err5 |
                      env_safe_err6 |
                      env_safe_err7;

// =============================================================
//                        SYS_TRANSITION:
// =============================================================
// G((hmaster0=0) * (hmaster1=0) * (hmaster2=0) -> (hbusreq0=0 <-> busreq=0));
assign sys_safe_err0 =  ~( ~( ~(controllable_hmaster0) & ~(controllable_hmaster1) & ~(controllable_hmaster2) )|(~i_hbusreq0 ^~ (~controllable_busreq)));

// G((hmaster0=1) * (hmaster1=0) * (hmaster2=0) -> (hbusreq1=0 <-> busreq=0));
assign sys_safe_err1 =  ~( ~( controllable_hmaster0 & ~(controllable_hmaster1) & ~(controllable_hmaster2) )|(~i_hbusreq1 ^~ (~controllable_busreq)));

// G((hmaster0=0) * (hmaster1=1) * (hmaster2=0) -> (hbusreq2=0 <-> busreq=0));
assign sys_safe_err2 =  ~( ~( ~(controllable_hmaster0) & controllable_hmaster1 & ~(controllable_hmaster2) )|(~i_hbusreq2 ^~ (~controllable_busreq)));

// G((hmaster0=1) * (hmaster1=1) * (hmaster2=0) -> (hbusreq3=0 <-> busreq=0));
assign sys_safe_err3 =  ~( ~( controllable_hmaster0 & controllable_hmaster1 & ~(controllable_hmaster2) )|(~i_hbusreq3 ^~ (~controllable_busreq)));

// G((hmaster0=0) * (hmaster1=0) * (hmaster2=1) -> (hbusreq4=0 <-> busreq=0));
assign sys_safe_err4 =  ~( ~( ~(controllable_hmaster0) & ~(controllable_hmaster1) & controllable_hmaster2 )|(~i_hbusreq4 ^~ (~controllable_busreq)));

// G((hmaster0=1) * (hmaster1=0) * (hmaster2=1) -> (hbusreq5=0 <-> busreq=0));
assign sys_safe_err5 =  ~( ~( controllable_hmaster0 & ~(controllable_hmaster1) & controllable_hmaster2 )|(~i_hbusreq5 ^~ (~controllable_busreq)));

// G((hmaster0=0) * (hmaster1=1) * (hmaster2=1) -> (hbusreq6=0 <-> busreq=0));
assign sys_safe_err6 =  ~( ~( ~(controllable_hmaster0) & controllable_hmaster1 & controllable_hmaster2 )|(~i_hbusreq6 ^~ (~controllable_busreq)));

// G((hmaster0=1) * (hmaster1=1) * (hmaster2=1) -> (hbusreq7=0 <-> busreq=0));
assign sys_safe_err7 =  ~( ~( controllable_hmaster0 & controllable_hmaster1 & controllable_hmaster2 )|(~i_hbusreq7 ^~ (~controllable_busreq)));

// Guarantee 1:
// G((hready=0) -> X(start=0));
assign sys_safe_err8 =  ~( reg_i_hready | controllable_nstart );

// G(((stateG2=1) * (start=1)) -> FALSE;
assign sys_safe_err9 =  ~( ~(reg_stateG2 & ~controllable_nstart) | 0 );

// G(((stateG3_0=1) * (stateG3_1=0) * (stateG3_2=0) * ((start=1))) -> FALSE);
// G(((stateG3_0=0) * (stateG3_1=1) * (stateG3_2=0) * ((start=1))) -> FALSE);
// G(((stateG3_0=1) * (stateG3_1=1) * (stateG3_2=0) * ((start=1))) -> FALSE);
// G(((stateG3_0=0) * (stateG3_1=0) * (stateG3_2=1) * ((start=1))) -> FALSE);
// all these rules can be summarized as: only in state 000, start=1 is allowed:
assign sys_safe_err10 =  (reg_stateG3_0 | reg_stateG3_1 | reg_stateG3_2) & ~controllable_nstart;

// G( (hready=1) -> (   (hgrant0=1) <-> (X(hmaster0=0) * X(hmaster1=0) * X(hmaster2=0))  ) );
assign sys_safe_err11 =  ~( ~(reg_i_hready) | ( ~reg_controllable_nhgrant0 ^~ ( ~(controllable_hmaster0) & ~(controllable_hmaster1) & ~(controllable_hmaster2) ) ) );

// G( (hready=1) -> (   (hgrant1=1) <-> (X(hmaster0=1) * X(hmaster1=0) * X(hmaster2=0))  ) );
assign sys_safe_err12 =  ~( ~(reg_i_hready) | ( reg_controllable_hgrant1 ^~ ( controllable_hmaster0 & ~(controllable_hmaster1) & ~(controllable_hmaster2) ) ) );

// G( (hready=1) -> (   (hgrant2=1) <-> (X(hmaster0=0) * X(hmaster1=1) * X(hmaster2=0))  ) );
assign sys_safe_err13 =  ~( ~(reg_i_hready) | ( reg_controllable_hgrant2 ^~ ( ~(controllable_hmaster0) & controllable_hmaster1 & ~(controllable_hmaster2) ) ) );

// G( (hready=1) -> (   (hgrant3=1) <-> (X(hmaster0=1) * X(hmaster1=1) * X(hmaster2=0))  ) );
assign sys_safe_err14 =  ~( ~(reg_i_hready) | ( reg_controllable_hgrant3 ^~ ( controllable_hmaster0 & controllable_hmaster1 & ~(controllable_hmaster2) ) ) );

// G( (hready=1) -> (   (hgrant4=1) <-> (X(hmaster0=0) * X(hmaster1=0) * X(hmaster2=1))  ) );
assign sys_safe_err15 =  ~( ~(reg_i_hready) | ( reg_controllable_hgrant4 ^~ ( ~(controllable_hmaster0) & ~(controllable_hmaster1) & controllable_hmaster2 ) ) );

// G( (hready=1) -> (   (hgrant5=1) <-> (X(hmaster0=1) * X(hmaster1=0) * X(hmaster2=1))  ) );
assign sys_safe_err16 =  ~( ~(reg_i_hready) | ( reg_controllable_hgrant5 ^~ ( controllable_hmaster0 & ~(controllable_hmaster1) & controllable_hmaster2 ) ) );

// G( (hready=1) -> (   (hgrant6=1) <-> (X(hmaster0=0) * X(hmaster1=1) * X(hmaster2=1))  ) );
assign sys_safe_err17 =  ~( ~(reg_i_hready) | ( reg_controllable_hgrant6 ^~ ( ~(controllable_hmaster0) & controllable_hmaster1 & controllable_hmaster2 ) ) );

// G( (hready=1) -> (   (hgrant7=1) <-> (X(hmaster0=1) * X(hmaster1=1) * X(hmaster2=1))  ) );
assign sys_safe_err18 =  ~( ~(reg_i_hready) | ( reg_controllable_hgrant7 ^~ ( controllable_hmaster0 & controllable_hmaster1 & controllable_hmaster2 ) ) );

// HMASTLOCK:
// G(  (hready=1) -> (locked=0 <-> X(hmastlock=0) ) );
assign sys_safe_err19 =  ~( ~(reg_i_hready) | (~reg_controllable_locked ^~ ~controllable_hmastlock) );

// Master 0:
// G( X(start=0) -> ( ((hmaster0=0) * (hmaster1=0) * (hmaster2=0)) <-> (X(hmaster0=0) * X(hmaster1=0) * X(hmaster2=0)) ) );
assign sys_safe_err20 =  ~( ~(controllable_nstart) | ( ( ~(reg_controllable_hmaster0) & ~(reg_controllable_hmaster1) & ~(reg_controllable_hmaster2) ) ^~ ( ~(controllable_hmaster0) & ~(controllable_hmaster1) & ~(controllable_hmaster2) )) );

// Master 1:
// G( X(start=0) -> ( ((hmaster0=1) * (hmaster1=0) * (hmaster2=0)) <-> (X(hmaster0=1) * X(hmaster1=0) * X(hmaster2=0)) ) );
assign sys_safe_err21 =  ~( ~(controllable_nstart) | ( ( reg_controllable_hmaster0 & ~(reg_controllable_hmaster1) & ~(reg_controllable_hmaster2) ) ^~ ( controllable_hmaster0 & ~(controllable_hmaster1) & ~(controllable_hmaster2) )) );

// Master 2:
// G( X(start=0) -> ( ((hmaster0=0) * (hmaster1=1) * (hmaster2=0)) <-> (X(hmaster0=0) * X(hmaster1=1) * X(hmaster2=0)) ) );
assign sys_safe_err22 =  ~( ~(controllable_nstart) | ( ( ~(reg_controllable_hmaster0) & reg_controllable_hmaster1 & ~(reg_controllable_hmaster2) ) ^~ ( ~(controllable_hmaster0) & controllable_hmaster1 & ~(controllable_hmaster2) )) );

// Master 3:
// G( X(start=0) -> ( ((hmaster0=1) * (hmaster1=1) * (hmaster2=0)) <-> (X(hmaster0=1) * X(hmaster1=1) * X(hmaster2=0)) ) );
assign sys_safe_err23 =  ~( ~(controllable_nstart) | ( ( reg_controllable_hmaster0 & reg_controllable_hmaster1 & ~(reg_controllable_hmaster2) ) ^~ ( controllable_hmaster0 & controllable_hmaster1 & ~(controllable_hmaster2) )) );

// Master 4:
// G( X(start=0) -> ( ((hmaster0=0) * (hmaster1=0) * (hmaster2=1)) <-> (X(hmaster0=0) * X(hmaster1=0) * X(hmaster2=1)) ) );
assign sys_safe_err24 =  ~( ~(controllable_nstart) | ( ( ~(reg_controllable_hmaster0) & ~(reg_controllable_hmaster1) & reg_controllable_hmaster2 ) ^~ ( ~(controllable_hmaster0) & ~(controllable_hmaster1) & controllable_hmaster2 )) );

// Master 5:
// G( X(start=0) -> ( ((hmaster0=1) * (hmaster1=0) * (hmaster2=1)) <-> (X(hmaster0=1) * X(hmaster1=0) * X(hmaster2=1)) ) );
assign sys_safe_err25 =  ~( ~(controllable_nstart) | ( ( reg_controllable_hmaster0 & ~(reg_controllable_hmaster1) & reg_controllable_hmaster2 ) ^~ ( controllable_hmaster0 & ~(controllable_hmaster1) & controllable_hmaster2 )) );

// Master 6:
// G( X(start=0) -> ( ((hmaster0=0) * (hmaster1=1) * (hmaster2=1)) <-> (X(hmaster0=0) * X(hmaster1=1) * X(hmaster2=1)) ) );
assign sys_safe_err26 =  ~( ~(controllable_nstart) | ( ( ~(reg_controllable_hmaster0) & reg_controllable_hmaster1 & reg_controllable_hmaster2 ) ^~ ( ~(controllable_hmaster0) & controllable_hmaster1 & controllable_hmaster2 )) );

// Master 7:
// G( X(start=0) -> ( ((hmaster0=1) * (hmaster1=1) * (hmaster2=1)) <-> (X(hmaster0=1) * X(hmaster1=1) * X(hmaster2=1)) ) );
assign sys_safe_err27 =  ~( ~(controllable_nstart) | ( ( reg_controllable_hmaster0 & reg_controllable_hmaster1 & reg_controllable_hmaster2 ) ^~ ( controllable_hmaster0 & controllable_hmaster1 & controllable_hmaster2 )) );

// Guarantee 6.2:
// G( ((X(start=0))) -> ( (hmastlock=1) <-> X(hmastlock=1)) );
assign sys_safe_err28 =  ~( ~(controllable_nstart) | ( reg_controllable_hmastlock ^~ controllable_hmastlock) );

// G( (decide=1  *  hlock0=1  *  X(hgrant0=1) )->X(locked=1));
assign sys_safe_err29 =  ~( ~(~reg_controllable_ndecide & reg_i_hlock0 & ~controllable_nhgrant0) | (controllable_locked) );

// G((decide=1  *  hlock0=0  *  X(hgrant0=1))->X(locked=0));
assign sys_safe_err30 =  ~( ~(~reg_controllable_ndecide & ~reg_i_hlock0 & ~controllable_nhgrant0) | (~controllable_locked) );

// G( (decide=1  *  hlock1=1  *  X(hgrant1=1) )->X(locked=1));
assign sys_safe_err31 =  ~( ~(~reg_controllable_ndecide & reg_i_hlock1 & controllable_hgrant1) | (controllable_locked) );

// G((decide=1  *  hlock1=0  *  X(hgrant1=1))->X(locked=0));
assign sys_safe_err32 =  ~( ~(~reg_controllable_ndecide & ~reg_i_hlock1 & controllable_hgrant1) | (~controllable_locked) );

// G( (decide=1  *  hlock2=1  *  X(hgrant2=1) )->X(locked=1));
assign sys_safe_err33 =  ~( ~(~reg_controllable_ndecide & reg_i_hlock2 & controllable_hgrant2) | (controllable_locked) );

// G((decide=1  *  hlock2=0  *  X(hgrant2=1))->X(locked=0));
assign sys_safe_err34 =  ~( ~(~reg_controllable_ndecide & ~reg_i_hlock2 & controllable_hgrant2) | (~controllable_locked) );

// G( (decide=1  *  hlock3=1  *  X(hgrant3=1) )->X(locked=1));
assign sys_safe_err35 =  ~( ~(~reg_controllable_ndecide & reg_i_hlock3 & controllable_hgrant3) | (controllable_locked) );

// G((decide=1  *  hlock3=0  *  X(hgrant3=1))->X(locked=0));
assign sys_safe_err36 =  ~( ~(~reg_controllable_ndecide & ~reg_i_hlock3 & controllable_hgrant3) | (~controllable_locked) );

// G( (decide=1  *  hlock4=1  *  X(hgrant4=1) )->X(locked=1));
assign sys_safe_err37 =  ~( ~(~reg_controllable_ndecide & reg_i_hlock4 & controllable_hgrant4) | (controllable_locked) );

// G((decide=1  *  hlock4=0  *  X(hgrant4=1))->X(locked=0));
assign sys_safe_err38 =  ~( ~(~reg_controllable_ndecide & ~reg_i_hlock4 & controllable_hgrant4) | (~controllable_locked) );

// G( (decide=1  *  hlock5=1  *  X(hgrant5=1) )->X(locked=1));
assign sys_safe_err39 =  ~( ~(~reg_controllable_ndecide & reg_i_hlock5 & controllable_hgrant5) | (controllable_locked) );

// G((decide=1  *  hlock5=0  *  X(hgrant5=1))->X(locked=0));
assign sys_safe_err40 =  ~( ~(~reg_controllable_ndecide & ~reg_i_hlock5 & controllable_hgrant5) | (~controllable_locked) );

// G( (decide=1  *  hlock6=1  *  X(hgrant6=1) )->X(locked=1));
assign sys_safe_err41 =  ~( ~(~reg_controllable_ndecide & reg_i_hlock6 & controllable_hgrant6) | (controllable_locked) );

// G((decide=1  *  hlock6=0  *  X(hgrant6=1))->X(locked=0));
assign sys_safe_err42 =  ~( ~(~reg_controllable_ndecide & ~reg_i_hlock6 & controllable_hgrant6) | (~controllable_locked) );

// G( (decide=1  *  hlock7=1  *  X(hgrant7=1) )->X(locked=1));
assign sys_safe_err43 =  ~( ~(~reg_controllable_ndecide & reg_i_hlock7 & controllable_hgrant7) | (controllable_locked) );

// G((decide=1  *  hlock7=0  *  X(hgrant7=1))->X(locked=0));
assign sys_safe_err44 =  ~( ~(~reg_controllable_ndecide & ~reg_i_hlock7 & controllable_hgrant7) | (~controllable_locked) );

// G( (decide=0) -> (  ((hgrant0=0)<->X(hgrant0=0))  ));
assign sys_safe_err45 =  ~( ~(reg_controllable_ndecide) | (reg_controllable_nhgrant0 ^~ controllable_nhgrant0) );

// G( (decide=0) -> (  ((hgrant1=0)<->X(hgrant1=0))  ));
assign sys_safe_err46 =  ~( ~(reg_controllable_ndecide) | (~reg_controllable_hgrant1 ^~ ~controllable_hgrant1) );

// G( (decide=0) -> (  ((hgrant2=0)<->X(hgrant2=0))  ));
assign sys_safe_err47 =  ~( ~(reg_controllable_ndecide) | (~reg_controllable_hgrant2 ^~ ~controllable_hgrant2) );

// G( (decide=0) -> (  ((hgrant3=0)<->X(hgrant3=0))  ));
assign sys_safe_err48 =  ~( ~(reg_controllable_ndecide) | (~reg_controllable_hgrant3 ^~ ~controllable_hgrant3) );

// G( (decide=0) -> (  ((hgrant4=0)<->X(hgrant4=0))  ));
assign sys_safe_err49 =  ~( ~(reg_controllable_ndecide) | (~reg_controllable_hgrant4 ^~ ~controllable_hgrant4) );

// G( (decide=0) -> (  ((hgrant5=0)<->X(hgrant5=0))  ));
assign sys_safe_err50 =  ~( ~(reg_controllable_ndecide) | (~reg_controllable_hgrant5 ^~ ~controllable_hgrant5) );

// G( (decide=0) -> (  ((hgrant6=0)<->X(hgrant6=0))  ));
assign sys_safe_err51 =  ~( ~(reg_controllable_ndecide) | (~reg_controllable_hgrant6 ^~ ~controllable_hgrant6) );

// G( (decide=0) -> (  ((hgrant7=0)<->X(hgrant7=0))  ));
assign sys_safe_err52 =  ~( ~(reg_controllable_ndecide) | (~reg_controllable_hgrant7 ^~ ~controllable_hgrant7) );

// G((decide=0)->(locked=0 <-> X(locked=0)));
assign sys_safe_err53 =  ~( ~(reg_controllable_ndecide) | (~reg_controllable_locked ^~ ~controllable_locked) );

// G(((stateG10_1=1) * (((hgrant1=1)) * (hbusreq1=0)))->FALSE);
assign sys_safe_err54 =  ~( ~(reg_stateG10_1 & (controllable_hgrant1 & ~i_hbusreq1)) | 0 );

// G(((stateG10_2=1) * (((hgrant2=1)) * (hbusreq2=0)))->FALSE);
assign sys_safe_err55 =  ~( ~(reg_stateG10_2 & (controllable_hgrant2 & ~i_hbusreq2)) | 0 );

// G(((stateG10_3=1) * (((hgrant3=1)) * (hbusreq3=0)))->FALSE);
assign sys_safe_err56 =  ~( ~(reg_stateG10_3 & (controllable_hgrant3 & ~i_hbusreq3)) | 0 );

// G(((stateG10_4=1) * (((hgrant4=1)) * (hbusreq4=0)))->FALSE);
assign sys_safe_err57 =  ~( ~(reg_stateG10_4 & (controllable_hgrant4 & ~i_hbusreq4)) | 0 );

// G(((stateG10_5=1) * (((hgrant5=1)) * (hbusreq5=0)))->FALSE);
assign sys_safe_err58 =  ~( ~(reg_stateG10_5 & (controllable_hgrant5 & ~i_hbusreq5)) | 0 );

// G(((stateG10_6=1) * (((hgrant6=1)) * (hbusreq6=0)))->FALSE);
assign sys_safe_err59 =  ~( ~(reg_stateG10_6 & (controllable_hgrant6 & ~i_hbusreq6)) | 0 );

// G(((stateG10_7=1) * (((hgrant7=1)) * (hbusreq7=0)))->FALSE);
assign sys_safe_err60 =  ~( ~(reg_stateG10_7 & (controllable_hgrant7 & ~i_hbusreq7)) | 0 );

// default master
// G((decide=1  *  hbusreq0=0  *  hbusreq1=0  *  hbusreq2=0  *  hbusreq3=0  *  hbusreq4=0  *  hbusreq5=0  *  hbusreq6=0  *  hbusreq7=0) -> X(hgrant0=1));
assign sys_safe_err61 =  ~( ~(~reg_controllable_ndecide & (~reg_i_hbusreq0 & ~reg_i_hbusreq1 & ~reg_i_hbusreq2 & ~reg_i_hbusreq3 & ~reg_i_hbusreq4 & ~reg_i_hbusreq5 & ~reg_i_hbusreq6 & ~reg_i_hbusreq7)) | (~controllable_nhgrant0) );

// collecting together the safety error bits:
assign sys_safe_err = sys_safe_err0 |
                      sys_safe_err1 |
                      sys_safe_err2 |
                      sys_safe_err3 |
                      sys_safe_err4 |
                      sys_safe_err5 |
                      sys_safe_err6 |
                      sys_safe_err7 |
                      sys_safe_err8 |
                      sys_safe_err9 |
                      sys_safe_err10 |
                      sys_safe_err11 |
                      sys_safe_err12 |
                      sys_safe_err13 |
                      sys_safe_err14 |
                      sys_safe_err15 |
                      sys_safe_err16 |
                      sys_safe_err17 |
                      sys_safe_err18 |
                      sys_safe_err19 |
                      sys_safe_err20 |
                      sys_safe_err21 |
                      sys_safe_err22 |
                      sys_safe_err23 |
                      sys_safe_err24 |
                      sys_safe_err25 |
                      sys_safe_err26 |
                      sys_safe_err27 |
                      sys_safe_err28 |
                      sys_safe_err29 |
                      sys_safe_err30 |
                      sys_safe_err31 |
                      sys_safe_err32 |
                      sys_safe_err33 |
                      sys_safe_err34 |
                      sys_safe_err35 |
                      sys_safe_err36 |
                      sys_safe_err37 |
                      sys_safe_err38 |
                      sys_safe_err39 |
                      sys_safe_err40 |
                      sys_safe_err41 |
                      sys_safe_err42 |
                      sys_safe_err43 |
                      sys_safe_err44 |
                      sys_safe_err45 |
                      sys_safe_err46 |
                      sys_safe_err47 |
                      sys_safe_err48 |
                      sys_safe_err49 |
                      sys_safe_err50 |
                      sys_safe_err51 |
                      sys_safe_err52 |
                      sys_safe_err53 |
                      sys_safe_err54 |
                      sys_safe_err55 |
                      sys_safe_err56 |
                      sys_safe_err57 |
                      sys_safe_err58 |
                      sys_safe_err59 |
                      sys_safe_err60 |
                      sys_safe_err61;

// =============================================================
//                          ENV_FAIRNESS:
// =============================================================
// Assumption 1: 
// G(F(stateA1=0));
assign env_fair0 =  ~reg_stateA1;

// Assumption 2:
// G(F(hready=1));
assign env_fair1 =  i_hready;


// =============================================================
//                          SYS_FAIRNESS:
// =============================================================
// Guarantee 2:
// G(F(stateG2=0));
assign sys_fair0 = ~reg_stateG2;

// Guarantee 3:
// G(F((stateG3_0=0)  *  (stateG3_1=0)  *  (stateG3_2=0)));
assign sys_fair1 =  (~reg_stateG3_0 & ~reg_stateG3_1 & ~reg_stateG3_2);

// G(F(((hmaster0=0) * (hmaster1=0) * (hmaster2=0))  |  hbusreq0=0));
assign sys_fair2 =  ( ~(controllable_hmaster0) & ~(controllable_hmaster1) & ~(controllable_hmaster2) ) | ~i_hbusreq0;

// G(F(((hmaster0=1) * (hmaster1=0) * (hmaster2=0))  |  hbusreq1=0));
assign sys_fair3 =  ( controllable_hmaster0 & ~(controllable_hmaster1) & ~(controllable_hmaster2) ) | ~i_hbusreq1;

// G(F(((hmaster0=0) * (hmaster1=1) * (hmaster2=0))  |  hbusreq2=0));
assign sys_fair4 =  ( ~(controllable_hmaster0) & controllable_hmaster1 & ~(controllable_hmaster2) ) | ~i_hbusreq2;

// G(F(((hmaster0=1) * (hmaster1=1) * (hmaster2=0))  |  hbusreq3=0));
assign sys_fair5 =  ( controllable_hmaster0 & controllable_hmaster1 & ~(controllable_hmaster2) ) | ~i_hbusreq3;

// G(F(((hmaster0=0) * (hmaster1=0) * (hmaster2=1))  |  hbusreq4=0));
assign sys_fair6 =  ( ~(controllable_hmaster0) & ~(controllable_hmaster1) & controllable_hmaster2 ) | ~i_hbusreq4;

// G(F(((hmaster0=1) * (hmaster1=0) * (hmaster2=1))  |  hbusreq5=0));
assign sys_fair7 =  ( controllable_hmaster0 & ~(controllable_hmaster1) & controllable_hmaster2 ) | ~i_hbusreq5;

// G(F(((hmaster0=0) * (hmaster1=1) * (hmaster2=1))  |  hbusreq6=0));
assign sys_fair8 =  ( ~(controllable_hmaster0) & controllable_hmaster1 & controllable_hmaster2 ) | ~i_hbusreq6;

// G(F(((hmaster0=1) * (hmaster1=1) * (hmaster2=1))  |  hbusreq7=0));
assign sys_fair9 =  ( controllable_hmaster0 & controllable_hmaster1 & controllable_hmaster2 ) | ~i_hbusreq7;

assign fair_err = (fair_cnt >= 3'b111);

// computing the error output bit:
assign o_err = ~env_safe_err & ~env_safe_err_happened & (sys_safe_err | fair_err);

initial
 begin
  reg_i_hready = 0;
  reg_i_hbusreq0 = 0;
  reg_i_hlock0 = 0;
  reg_i_hbusreq1 = 0;
  reg_i_hlock1 = 0;
  reg_i_hbusreq2 = 0;
  reg_i_hlock2 = 0;
  reg_i_hbusreq3 = 0;
  reg_i_hlock3 = 0;
  reg_i_hbusreq4 = 0;
  reg_i_hlock4 = 0;
  reg_i_hbusreq5 = 0;
  reg_i_hlock5 = 0;
  reg_i_hbusreq6 = 0;
  reg_i_hlock6 = 0;
  reg_i_hbusreq7 = 0;
  reg_i_hlock7 = 0;
  reg_controllable_hmaster0 = 0;
  reg_controllable_hmaster1 = 0;
  reg_controllable_hmaster2 = 0;
  reg_controllable_hmastlock = 0;
  reg_controllable_nstart = 0;
  reg_controllable_ndecide = 0;
  reg_controllable_locked = 0;
  reg_controllable_nhgrant0 = 0;
  reg_controllable_hgrant1 = 0;
  reg_controllable_hgrant2 = 0;
  reg_controllable_hgrant3 = 0;
  reg_controllable_hgrant4 = 0;
  reg_controllable_hgrant5 = 0;
  reg_controllable_hgrant6 = 0;
  reg_controllable_hgrant7 = 0;
  reg_controllable_busreq = 0;
  reg_stateA1 = 0;
  reg_stateG2 = 0;
  reg_stateG3_0 = 0;
  reg_stateG3_1 = 0;
  reg_stateG3_2 = 0;
  reg_stateG10_1 = 0;
  reg_stateG10_2 = 0;
  reg_stateG10_3 = 0;
  reg_stateG10_4 = 0;
  reg_stateG10_5 = 0;
  reg_stateG10_6 = 0;
  reg_stateG10_7 = 0;
  env_safe_err_happened = 0;
  next_env_fair = 0;
  fair_cnt = 0;
  next_sys_fair = 0;
 end


always @(posedge i_clk)
 begin
   // We remember if an environment error occurred:
   env_safe_err_happened = env_safe_err_happened | env_safe_err;

   // Updating the fairness counters: 
   if((next_sys_fair == 0) & sys_fair0)
    begin
      next_sys_fair = 1;
      next_env_fair = 0;
      fair_cnt = 0;
    end
   else if((next_sys_fair == 1) & sys_fair1)
    begin
      next_sys_fair = 2;
      next_env_fair = 0;
      fair_cnt = 0;
    end
   else if((next_sys_fair == 2) & sys_fair2)
    begin
      next_sys_fair = 3;
      next_env_fair = 0;
      fair_cnt = 0;
    end
   else if((next_sys_fair == 3) & sys_fair3)
    begin
      next_sys_fair = 4;
      next_env_fair = 0;
      fair_cnt = 0;
    end
   else if((next_sys_fair == 4) & sys_fair4)
    begin
      next_sys_fair = 5;
      next_env_fair = 0;
      fair_cnt = 0;
    end
   else if((next_sys_fair == 5) & sys_fair5)
    begin
      next_sys_fair = 6;
      next_env_fair = 0;
      fair_cnt = 0;
    end
   else if((next_sys_fair == 6) & sys_fair6)
    begin
      next_sys_fair = 7;
      next_env_fair = 0;
      fair_cnt = 0;
    end
   else if((next_sys_fair == 7) & sys_fair7)
    begin
      next_sys_fair = 8;
      next_env_fair = 0;
      fair_cnt = 0;
    end
   else if((next_sys_fair == 8) & sys_fair8)
    begin
      next_sys_fair = 9;
      next_env_fair = 0;
      fair_cnt = 0;
    end
   else if((next_sys_fair == 9) & sys_fair9)
    begin
      next_sys_fair = 0;
      next_env_fair = 0;
      fair_cnt = 0;
    end
   else if(~next_env_fair & env_fair0)
    begin
      next_env_fair = 1;
    end
   else if(next_env_fair & env_fair1)
    begin
      next_env_fair = 0;
      fair_cnt = fair_cnt + 1;
    end

   // Updating the automata: 
   // Automaton A1: 
   if(~reg_stateA1 & controllable_hmastlock & ~i_hburst0 & ~i_hburst1)
    begin
      reg_stateA1 = 1'b1;
    end
   else if(reg_stateA1 & ~controllable_busreq)
    begin
      reg_stateA1 = 1'b0;
    end

   // Automaton G2: 
   if(~reg_stateG2)
    begin
      if(controllable_hmastlock & ~controllable_nstart & ~i_hburst0 & ~i_hburst1)
       begin
         reg_stateG2 = 1'b1;
       end
    end
   else // if(reg_stateG2)
    begin
      if(~controllable_busreq)
       begin
         reg_stateG2 = 1'b0;
       end
    end

   // Automaton G3: 
   if(~reg_stateG3_0 & ~reg_stateG3_1 & ~reg_stateG3_2 & controllable_hmastlock & ~controllable_nstart &  ~i_hburst0 & i_hburst1 & ~i_hready)
    begin
      reg_stateG3_0 = 1'b1;
      reg_stateG3_1 = 1'b0;
      reg_stateG3_2 = 1'b0;
    end
   else if(~reg_stateG3_0 & ~reg_stateG3_1 & ~reg_stateG3_2 & controllable_hmastlock & ~controllable_nstart &  ~i_hburst0 & i_hburst1 & i_hready)
    begin
      reg_stateG3_0 = 1'b0;
      reg_stateG3_1 = 1'b1;
      reg_stateG3_2 = 1'b0;
    end
   else if(reg_stateG3_0 & ~reg_stateG3_1 & ~reg_stateG3_2 & i_hready)
    begin
      reg_stateG3_0 = 1'b0;
      reg_stateG3_1 = 1'b1;
      reg_stateG3_2 = 1'b0;
    end
   else if(~reg_stateG3_0 & reg_stateG3_1 & ~reg_stateG3_2 & i_hready)
    begin
      reg_stateG3_0 = 1'b1;
      reg_stateG3_1 = 1'b1;
      reg_stateG3_2 = 1'b0;
    end
   else if(reg_stateG3_0 & reg_stateG3_1 & ~reg_stateG3_2 & i_hready)
    begin
      reg_stateG3_0 = 1'b0;
      reg_stateG3_1 = 1'b0;
      reg_stateG3_2 = 1'b1;
    end
   else if(~reg_stateG3_0 & ~reg_stateG3_1 & reg_stateG3_2 & i_hready)
    begin
      reg_stateG3_0 = 1'b0;
      reg_stateG3_1 = 1'b0;
      reg_stateG3_2 = 1'b0;
    end

   // Automaton G10_1: 
   if(~reg_stateG10_1 & ~controllable_hgrant1 & ~i_hbusreq1)
    begin
      reg_stateG10_1 = 1'b1;
    end
   else if(reg_stateG10_1 & i_hbusreq1)
    begin
      reg_stateG10_1 = 1'b0;
    end

   // Automaton G10_2: 
   if(~reg_stateG10_2 & ~controllable_hgrant2 & ~i_hbusreq2)
    begin
      reg_stateG10_2 = 1'b1;
    end
   else if(reg_stateG10_2 & i_hbusreq2)
    begin
      reg_stateG10_2 = 1'b0;
    end

   // Automaton G10_3: 
   if(~reg_stateG10_3 & ~controllable_hgrant3 & ~i_hbusreq3)
    begin
      reg_stateG10_3 = 1'b1;
    end
   else if(reg_stateG10_3 & i_hbusreq3)
    begin
      reg_stateG10_3 = 1'b0;
    end

   // Automaton G10_4: 
   if(~reg_stateG10_4 & ~controllable_hgrant4 & ~i_hbusreq4)
    begin
      reg_stateG10_4 = 1'b1;
    end
   else if(reg_stateG10_4 & i_hbusreq4)
    begin
      reg_stateG10_4 = 1'b0;
    end

   // Automaton G10_5: 
   if(~reg_stateG10_5 & ~controllable_hgrant5 & ~i_hbusreq5)
    begin
      reg_stateG10_5 = 1'b1;
    end
   else if(reg_stateG10_5 & i_hbusreq5)
    begin
      reg_stateG10_5 = 1'b0;
    end

   // Automaton G10_6: 
   if(~reg_stateG10_6 & ~controllable_hgrant6 & ~i_hbusreq6)
    begin
      reg_stateG10_6 = 1'b1;
    end
   else if(reg_stateG10_6 & i_hbusreq6)
    begin
      reg_stateG10_6 = 1'b0;
    end

   // Automaton G10_7: 
   if(~reg_stateG10_7 & ~controllable_hgrant7 & ~i_hbusreq7)
    begin
      reg_stateG10_7 = 1'b1;
    end
   else if(reg_stateG10_7 & i_hbusreq7)
    begin
      reg_stateG10_7 = 1'b0;
    end

   // Latching the previous input:
   reg_i_hready =  i_hready;
   reg_i_hbusreq0 =  i_hbusreq0;
   reg_i_hlock0 =  i_hlock0;
   reg_i_hbusreq1 =  i_hbusreq1;
   reg_i_hlock1 =  i_hlock1;
   reg_i_hbusreq2 =  i_hbusreq2;
   reg_i_hlock2 =  i_hlock2;
   reg_i_hbusreq3 =  i_hbusreq3;
   reg_i_hlock3 =  i_hlock3;
   reg_i_hbusreq4 =  i_hbusreq4;
   reg_i_hlock4 =  i_hlock4;
   reg_i_hbusreq5 =  i_hbusreq5;
   reg_i_hlock5 =  i_hlock5;
   reg_i_hbusreq6 =  i_hbusreq6;
   reg_i_hlock6 =  i_hlock6;
   reg_i_hbusreq7 =  i_hbusreq7;
   reg_i_hlock7 =  i_hlock7;
   reg_controllable_hmaster0 =  controllable_hmaster0;
   reg_controllable_hmaster1 =  controllable_hmaster1;
   reg_controllable_hmaster2 =  controllable_hmaster2;
   reg_controllable_hmastlock =  controllable_hmastlock;
   reg_controllable_nstart =  controllable_nstart;
   reg_controllable_ndecide =  controllable_ndecide;
   reg_controllable_locked =  controllable_locked;
   reg_controllable_nhgrant0 =  controllable_nhgrant0;
   reg_controllable_hgrant1 =  controllable_hgrant1;
   reg_controllable_hgrant2 =  controllable_hgrant2;
   reg_controllable_hgrant3 =  controllable_hgrant3;
   reg_controllable_hgrant4 =  controllable_hgrant4;
   reg_controllable_hgrant5 =  controllable_hgrant5;
   reg_controllable_hgrant6 =  controllable_hgrant6;
   reg_controllable_hgrant7 =  controllable_hgrant7;
   reg_controllable_busreq =  controllable_busreq;

 end
endmodule

-------------------------------
#!SYNTCOMP
STATUS : realizable
SOLVED_BY : 6/8 [SYNTCOMP2014-RealSeq]
SOLVED_IN : 18.5452 [SYNTCOMP2014-RealSeq]
#.
