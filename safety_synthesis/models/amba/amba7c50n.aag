aag 990 32 55 1 903
2
4
6
8
10
12
14
16
18
20
22
24
26
28
30
32
34
36
38
40
42
44
46
48
50
52
54
56
58
60
62
64
66 1
68 10
70 1065
72 56
74 60
76 14
78 1287
80 58
82 18
84 1371
86 32
88 22
90 1395
92 6
94 50
96 30
98 26
100 1415
102 34
104 28
106 8
108 42
110 24
112 1445
114 1467
116 44
118 20
120 64
122 1489
124 2
126 46
128 1513
130 16
132 1739
134 1745
136 1751
138 1757
140 1763
142 1769
144 1891
146 1897
148 1903
150 1909
152 1915
154 1937
156 48
158 12
160 36
162 207
164 1959
166 52
168 4
170 1981
172 54
174 62
1042
176 43 12
178 45 16
180 179 177
182 47 20
184 183 180
186 49 24
188 187 184
190 53 28
192 191 188
194 55 30
196 195 192
198 57 32
200 199 196
202 163 66
204 203 66
206 205 200
208 63 61
210 208 59
212 42 35
214 43 34
216 215 213
218 217 210
220 62 61
222 220 59
224 44 35
226 45 34
228 227 225
230 229 222
232 231 219
234 63 60
236 234 59
238 46 35
240 47 34
242 241 239
244 243 236
246 245 232
248 62 60
250 248 59
252 48 35
254 49 34
256 255 253
258 257 250
260 259 246
262 208 58
264 52 35
266 53 34
268 267 265
270 269 262
272 271 260
274 220 58
276 54 35
278 55 34
280 279 277
282 281 274
284 283 272
286 234 58
288 56 35
290 57 34
292 291 289
294 293 286
296 295 284
298 161 66
300 160 66
302 299 66
304 303 9
306 305 296
308 113 66
310 112 66
312 309 66
314 310 9
316 315 306
318 85 66
320 84 66
322 319 66
324 91 66
326 90 66
328 325 66
330 329 323
332 101 66
334 100 66
336 333 66
338 337 330
340 339 9
342 341 316
344 125 66
346 124 66
348 345 66
350 346 210
352 349 211
354 353 351
356 355 300
358 357 342
360 169 66
362 168 66
364 361 66
366 365 222
368 362 223
370 369 367
372 371 300
374 373 358
376 69 66
378 68 66
380 377 66
382 381 236
384 378 237
386 385 383
388 387 300
390 389 374
392 77 66
394 76 66
396 393 66
398 397 250
400 394 251
402 401 399
404 403 300
406 405 390
408 83 66
410 82 66
412 409 66
414 413 262
416 410 263
418 417 415
420 419 300
422 421 406
424 89 66
426 88 66
428 425 66
430 429 274
432 426 275
434 433 431
436 435 300
438 437 422
440 99 66
442 98 66
444 441 66
446 445 286
448 442 287
450 449 447
452 451 300
454 453 438
456 93 66
458 92 66
460 457 66
462 458 65
464 461 64
466 465 463
468 467 300
470 469 454
472 175 66
474 174 66
476 473 66
478 75 66
480 74 66
482 479 66
484 483 477
486 81 66
488 80 66
490 487 66
492 491 484
494 493 210
496 492 211
498 497 495
500 499 8
502 501 470
504 483 474
506 504 491
508 507 222
510 506 223
512 511 509
514 513 8
516 515 502
518 480 477
520 518 491
522 521 236
524 520 237
526 525 523
528 527 8
530 529 516
532 480 474
534 532 491
536 535 250
538 534 251
540 539 537
542 541 8
544 543 530
546 488 484
548 547 262
550 546 263
552 551 549
554 553 8
556 555 544
558 504 488
560 559 274
562 558 275
564 563 561
566 565 8
568 567 556
570 518 488
572 571 286
574 570 287
576 575 573
578 577 8
580 579 568
582 121 66
584 120 66
586 583 66
588 587 64
590 584 65
592 591 589
594 593 8
596 595 580
598 95 66
600 94 66
602 599 66
604 159 66
606 158 66
608 605 66
610 606 603
612 610 3
614 612 7
616 615 596
618 609 603
620 618 3
622 620 6
624 623 616
626 131 66
628 130 66
630 627 66
632 628 603
634 632 4
636 634 7
638 637 624
640 631 603
642 640 4
644 642 6
646 645 638
648 119 66
650 118 66
652 649 66
654 650 603
656 654 10
658 656 7
660 659 646
662 653 603
664 662 10
666 664 6
668 667 660
670 111 66
672 110 66
674 671 66
676 672 603
678 676 14
680 678 7
682 681 668
684 675 603
686 684 14
688 686 6
690 689 682
692 105 66
694 104 66
696 693 66
698 694 603
700 698 18
702 700 7
704 703 690
706 697 603
708 706 18
710 708 6
712 711 704
714 97 66
716 96 66
718 715 66
720 716 603
722 720 22
724 722 7
726 725 712
728 719 603
730 728 22
732 730 6
734 733 726
736 87 66
738 86 66
740 737 66
742 738 603
744 742 26
746 744 7
748 747 734
750 741 603
752 750 26
754 752 6
756 755 748
758 349 2
760 346 3
762 761 759
764 763 600
766 765 756
768 362 5
770 365 4
772 771 769
774 773 600
776 775 766
778 378 11
780 381 10
782 781 779
784 783 600
786 785 776
788 394 15
790 397 14
792 791 789
794 793 600
796 795 786
798 410 19
800 413 18
802 801 799
804 803 600
806 805 796
808 426 23
810 429 22
812 811 809
814 813 600
816 815 806
818 442 27
820 445 26
822 821 819
824 823 600
826 825 816
828 458 7
830 461 6
832 831 829
834 833 600
836 835 826
838 115 66
840 114 66
842 839 66
844 45 4
846 844 840
848 847 836
850 123 66
852 122 66
854 851 66
856 47 10
858 856 852
860 859 848
862 155 66
864 154 66
866 863 66
868 49 14
870 868 864
872 871 860
874 165 66
876 164 66
878 875 66
880 53 18
882 880 876
884 883 872
886 171 66
888 170 66
890 887 66
892 55 22
894 892 888
896 895 884
898 71 66
900 70 66
902 899 66
904 57 26
906 904 900
908 907 896
910 109 66
912 911 66
914 117 66
916 915 66
918 917 913
920 127 66
922 921 66
924 923 918
926 157 66
928 927 66
930 929 924
932 167 66
934 933 66
936 935 930
938 173 66
940 939 66
942 941 936
944 73 66
946 945 66
948 947 942
950 948 603
952 950 2
954 953 908
956 143 66
958 142 66
960 957 66
962 141 66
964 140 66
966 963 66
968 139 66
970 138 66
972 969 66
974 137 66
976 136 66
978 975 66
980 135 66
982 134 66
984 981 66
986 133 66
988 132 66
990 987 66
992 985 979
994 992 973
996 994 967
998 997 966
1000 998 995
1002 1001 961
1004 1003 960
1006 1004 1000
1008 984 976
1010 1009 993
1012 993 970
1014 1013 995
1016 995 967
1018 994 964
1020 1019 1017
1022 1000 961
1024 1001 958
1026 1025 1023
1028 989 984
1030 1028 1010
1032 1030 1014
1034 1032 1020
1036 1034 1026
1038 1037 1007
1040 1038 954
1042 1041 206
1044 903 27
1046 1044 57
1048 900 56
1050 1048 1047
1052 1051 1047
1054 1049 900
1056 1054 1047
1058 1057 1047
1060 1059 1053
1062 1052 900
1064 1063 1061
1066 145 66
1068 144 66
1070 1067 66
1072 147 66
1074 146 66
1076 1073 66
1078 149 66
1080 148 66
1082 1079 66
1084 151 66
1086 150 66
1088 1085 66
1090 152 66
1092 1075 1069
1094 1092 1081
1096 1094 1087
1098 1096 1091
1100 1098 313
1102 1075 1070
1104 1102 1081
1106 1104 1087
1108 1106 1091
1110 1108 338
1112 1076 1069
1114 1112 1081
1116 1114 1087
1118 1116 1091
1120 211 42
1122 1121 1118
1124 1076 1070
1126 1124 1081
1128 1126 1087
1130 1128 1091
1132 223 44
1134 1133 1130
1136 1092 1082
1138 1136 1087
1140 1138 1091
1142 237 46
1144 1143 1140
1146 1102 1082
1148 1146 1087
1150 1148 1091
1152 251 48
1154 1153 1150
1156 1112 1082
1158 1156 1087
1160 1158 1091
1162 263 52
1164 1163 1160
1166 1124 1082
1168 1166 1087
1170 1168 1091
1172 275 54
1174 1173 1170
1176 1094 1088
1178 1176 1091
1180 287 56
1182 1181 1178
1184 79 66
1186 78 66
1188 1185 66
1190 129 66
1192 128 66
1194 1191 66
1196 1195 1189
1198 1186 36
1200 1110 1101
1202 1201 1101
1204 1111 1101
1206 1204 1122
1208 1207 1202
1210 1204 1123
1212 1210 1134
1214 1213 1208
1216 1210 1135
1218 1216 1144
1220 1219 1214
1222 1216 1145
1224 1222 1154
1226 1225 1220
1228 1222 1155
1230 1228 1164
1232 1231 1226
1234 1228 1165
1236 1234 1174
1238 1237 1232
1240 1234 1175
1242 1240 1182
1244 1243 1238
1246 1240 1183
1248 1246 1196
1250 1249 1244
1252 1246 1197
1254 1252 1198
1256 1255 1250
1258 1199 1186
1260 1258 1197
1262 1261 1197
1264 1263 1183
1266 1264 1175
1268 1266 1165
1270 1268 1155
1272 1270 1145
1274 1272 1135
1276 1274 1123
1278 1276 1111
1280 1278 1101
1282 1280 1257
1284 1256 1186
1286 1285 1283
1288 338 64
1290 1288 9
1292 1290 41
1294 1292 38
1296 1294 37
1298 1294 36
1300 329 320
1302 1300 337
1304 1302 36
1306 326 323
1308 1306 337
1310 1308 36
1312 326 320
1314 1312 337
1316 1314 36
1318 334 330
1320 1318 36
1322 1298 1297
1324 1323 1297
1326 1299 1297
1328 1326 1304
1330 1329 1324
1332 1326 1305
1334 1332 1310
1336 1335 1330
1338 1332 1311
1340 1338 1316
1342 1341 1336
1344 1338 1317
1346 1344 1320
1348 1347 1342
1350 1321 320
1352 1350 1317
1354 1352 1311
1356 1355 1311
1358 1357 1305
1360 1358 1299
1362 1360 1297
1364 1363 1297
1366 1365 1349
1368 1348 320
1370 1369 1367
1372 1321 326
1374 1372 1317
1376 1374 1311
1378 1377 1311
1380 1379 1305
1382 1381 1305
1384 1383 1299
1386 1385 1299
1388 1387 1297
1390 1388 1349
1392 1348 326
1394 1393 1391
1396 1321 334
1398 1396 1317
1400 1399 1317
1402 1401 1311
1404 1402 1305
1406 1404 1299
1408 1406 1297
1410 1408 1349
1412 1348 334
1414 1413 1411
1416 64 9
1418 1416 41
1420 1418 39
1422 1420 313
1424 310 35
1426 1425 1423
1428 1421 310
1430 1429 1421
1432 310 34
1434 1431 313
1436 1432 310
1438 1437 1435
1440 1439 1427
1442 1426 310
1444 1443 1441
1446 843 5
1448 1446 45
1450 840 44
1452 1450 1449
1454 1453 1449
1456 1451 840
1458 1456 1449
1460 1459 1449
1462 1461 1455
1464 1454 840
1466 1465 1463
1468 855 11
1470 1468 47
1472 852 46
1474 1472 1471
1476 1475 1471
1478 1473 852
1480 1478 1471
1482 1481 1471
1484 1483 1477
1486 1476 852
1488 1487 1485
1490 1195 64
1492 1490 41
1494 1492 39
1496 1192 35
1498 1496 1495
1500 1499 1495
1502 1497 1192
1504 1502 1495
1506 1505 1495
1508 1507 1501
1510 1500 1192
1512 1511 1509
1514 1255 1244
1516 1198 991
1518 1199 988
1520 1519 1517
1522 1196 988
1524 1521 1197
1526 1525 1523
1528 1527 1183
1530 1528 1175
1532 1530 1165
1534 1532 1155
1536 1534 1145
1538 1536 1135
1540 1538 1123
1542 1540 1111
1544 1542 1101
1546 988 985
1548 989 982
1550 1549 1547
1552 1551 1198
1554 1199 982
1556 1555 1553
1558 1196 982
1560 1557 1197
1562 1561 1559
1564 1563 1183
1566 1564 1175
1568 1566 1165
1570 1568 1155
1572 1570 1145
1574 1572 1135
1576 1574 1123
1578 1576 1111
1580 1578 1101
1582 988 982
1584 1582 979
1586 1583 976
1588 1587 1585
1590 1589 1198
1592 1199 976
1594 1593 1591
1596 1196 976
1598 1595 1197
1600 1599 1597
1602 1601 1183
1604 1602 1175
1606 1604 1165
1608 1606 1155
1610 1608 1145
1612 1610 1135
1614 1612 1123
1616 1614 1111
1618 1616 1101
1620 1582 976
1622 1620 973
1624 1621 970
1626 1625 1623
1628 1627 1198
1630 1199 970
1632 1631 1629
1634 1196 970
1636 1633 1197
1638 1637 1635
1640 1639 1183
1642 1640 1175
1644 1642 1165
1646 1644 1155
1648 1646 1145
1650 1648 1135
1652 1650 1123
1654 1652 1111
1656 1654 1101
1658 1620 970
1660 1658 967
1662 1659 964
1664 1663 1661
1666 1665 1198
1668 1199 964
1670 1669 1667
1672 1196 964
1674 1671 1197
1676 1675 1673
1678 1677 1183
1680 1678 1175
1682 1680 1165
1684 1682 1155
1686 1684 1145
1688 1686 1135
1690 1688 1123
1692 1690 1111
1694 1692 1101
1696 1658 964
1698 1696 961
1700 1697 958
1702 1701 1699
1704 1703 1198
1706 1199 958
1708 1707 1705
1710 1196 958
1712 1709 1197
1714 1713 1711
1716 1715 1183
1718 1716 1175
1720 1718 1165
1722 1720 1155
1724 1722 1145
1726 1724 1135
1728 1726 1123
1730 1728 1111
1732 1730 1101
1734 1544 1515
1736 1514 988
1738 1737 1735
1740 1580 1515
1742 1514 982
1744 1743 1741
1746 1618 1515
1748 1514 976
1750 1749 1747
1752 1656 1515
1754 1514 970
1756 1755 1753
1758 1694 1515
1760 1514 964
1762 1761 1759
1764 1732 1515
1766 1514 958
1768 1767 1765
1770 1183 1068
1772 1770 1175
1774 1772 1165
1776 1775 1165
1778 1777 1155
1780 1778 1145
1782 1781 1145
1784 1783 1135
1786 1784 1123
1788 1787 1123
1790 1789 1111
1792 1790 1101
1794 1793 1101
1796 1183 1074
1798 1796 1175
1800 1798 1165
1802 1801 1165
1804 1803 1155
1806 1805 1155
1808 1807 1145
1810 1808 1135
1812 1810 1123
1814 1813 1123
1816 1815 1111
1818 1817 1111
1820 1819 1101
1822 1183 1080
1824 1822 1175
1826 1824 1165
1828 1827 1165
1830 1829 1155
1832 1831 1155
1834 1833 1145
1836 1835 1145
1838 1837 1135
1840 1839 1135
1842 1841 1123
1844 1842 1111
1846 1844 1101
1848 1183 1086
1850 1848 1175
1852 1851 1175
1854 1853 1165
1856 1854 1155
1858 1856 1145
1860 1858 1135
1862 1860 1123
1864 1862 1111
1866 1864 1101
1868 1183 1090
1870 1868 1175
1872 1870 1165
1874 1872 1155
1876 1874 1145
1878 1876 1135
1880 1878 1123
1882 1880 1111
1884 1882 1101
1886 1795 1245
1888 1244 1068
1890 1889 1887
1892 1820 1245
1894 1244 1074
1896 1895 1893
1898 1846 1245
1900 1244 1080
1902 1901 1899
1904 1866 1245
1906 1244 1086
1908 1907 1905
1910 1884 1245
1912 1244 1090
1914 1913 1911
1916 867 15
1918 1916 49
1920 864 48
1922 1920 1919
1924 1923 1919
1926 1921 864
1928 1926 1919
1930 1929 1919
1932 1931 1925
1934 1924 864
1936 1935 1933
1938 879 19
1940 1938 53
1942 876 52
1944 1942 1941
1946 1945 1941
1948 1943 876
1950 1948 1941
1952 1951 1941
1954 1953 1947
1956 1946 876
1958 1957 1955
1960 891 23
1962 1960 55
1964 888 54
1966 1964 1963
1968 1967 1963
1970 1965 888
1972 1970 1963
1974 1973 1963
1976 1975 1969
1978 1968 888
1980 1979 1977
i0 controllable_nhgrant0
i1 controllable_hgrant1
i2 controllable_locked
i3 controllable_nstart
i4 controllable_hgrant2
i5 i_hlock0
i6 controllable_hgrant3
i7 i_hlock1
i8 controllable_hgrant4
i9 i_hlock2
i10 controllable_hgrant5
i11 i_hlock3
i12 controllable_hgrant6
i13 i_hlock4
i14 i_hlock5
i15 i_hlock6
i16 controllable_busreq
i17 i_hready
i18 i_hburst1
i19 i_hburst0
i20 i_hbusreq0
i21 i_hbusreq1
i22 i_hbusreq2
i23 i_hbusreq3
i24 controllable_ndecide
i25 i_hbusreq4
i26 i_hbusreq5
i27 i_hbusreq6
i28 controllable_hmaster2
i29 controllable_hmaster1
i30 controllable_hmaster0
i31 controllable_hmastlock
l0 n67
l1 reg_controllable_hgrant2_out
l2 reg_stateG10_6_out
l3 reg_i_hbusreq6_out
l4 reg_controllable_hmaster1_out
l5 reg_controllable_hgrant3_out
l6 next_env_fair_out
l7 reg_controllable_hmaster2_out
l8 reg_controllable_hgrant4_out
l9 reg_stateG3_0_out
l10 reg_i_hlock6_out
l11 reg_controllable_hgrant5_out
l12 reg_stateG3_1_out
l13 reg_controllable_locked_out
l14 reg_controllable_ndecide_out
l15 reg_i_hlock5_out
l16 reg_controllable_hgrant6_out
l17 reg_stateG3_2_out
l18 reg_controllable_busreq_out
l19 reg_i_hlock4_out
l20 reg_controllable_nstart_out
l21 reg_i_hbusreq0_out
l22 reg_i_hlock3_out
l23 reg_stateG2_out
l24 reg_stateG10_1_out
l25 reg_i_hbusreq1_out
l26 reg_i_hlock2_out
l27 reg_controllable_hmastlock_out
l28 reg_stateG10_2_out
l29 reg_controllable_nhgrant0_out
l30 reg_i_hbusreq2_out
l31 reg_stateA1_out
l32 reg_i_hlock1_out
l33 fair_cnt<0>_out
l34 fair_cnt<1>_out
l35 fair_cnt<2>_out
l36 fair_cnt<3>_out
l37 fair_cnt<4>_out
l38 fair_cnt<5>_out
l39 next_sys_fair<0>_out
l40 next_sys_fair<1>_out
l41 next_sys_fair<2>_out
l42 next_sys_fair<3>_out
l43 next_sys_fair<4>_out
l44 reg_stateG10_3_out
l45 reg_i_hbusreq3_out
l46 reg_i_hlock0_out
l47 reg_i_hready_out
l48 env_safe_err_happened_out
l49 reg_stateG10_4_out
l50 reg_i_hbusreq4_out
l51 reg_controllable_hgrant1_out
l52 reg_stateG10_5_out
l53 reg_i_hbusreq5_out
l54 reg_controllable_hmaster0_out
o0 o_err
c
amba_7_new_50
This file was written by ABC on Tue May  5 16:50:42 2015
For information about AIGER format, refer to http://fmv.jku.at/aiger
-------------------------------
This AIGER file has been created by the following sequence of commands:
> vl2mv amba7c50.v   ---gives--> amba7c50.mv
> abc -c "read_blif_mv amba7c50.mv; write_aiger -s amba7c50n.aig"   ---gives--> amba7c50n.aig
> aigtoaig amba7c50n.aig amba7c50n.aag   ---gives--> amba7c50n.aag (this file)
Content of amba7c50.v:
module amba_7_new_50(
        o_err,
        i_clk,
        i_hready,
        i_hbusreq0,
        i_hlock0,
        i_hbusreq1,
        i_hlock1,
        i_hbusreq2,
        i_hlock2,
        i_hbusreq3,
        i_hlock3,
        i_hbusreq4,
        i_hlock4,
        i_hbusreq5,
        i_hlock5,
        i_hbusreq6,
        i_hlock6,
        i_hburst0,
        i_hburst1,
        controllable_hmaster0,
        controllable_hmaster1,
        controllable_hmaster2,
        controllable_hmastlock,
        controllable_nstart,
        controllable_ndecide,
        controllable_locked,
        controllable_nhgrant0,
        controllable_hgrant1,
        controllable_hgrant2,
        controllable_hgrant3,
        controllable_hgrant4,
        controllable_hgrant5,
        controllable_hgrant6,
        controllable_busreq);

input i_clk;
input i_hready;
input i_hbusreq0;
input i_hlock0;
input i_hbusreq1;
input i_hlock1;
input i_hbusreq2;
input i_hlock2;
input i_hbusreq3;
input i_hlock3;
input i_hbusreq4;
input i_hlock4;
input i_hbusreq5;
input i_hlock5;
input i_hbusreq6;
input i_hlock6;
input i_hburst0;
input i_hburst1;
input controllable_hmaster0;
input controllable_hmaster1;
input controllable_hmaster2;
input controllable_hmastlock;
input controllable_nstart;
input controllable_ndecide;
input controllable_locked;
input controllable_nhgrant0;
input controllable_hgrant1;
input controllable_hgrant2;
input controllable_hgrant3;
input controllable_hgrant4;
input controllable_hgrant5;
input controllable_hgrant6;
input controllable_busreq;
output o_err;

reg reg_i_hready;
reg reg_i_hbusreq0;
reg reg_i_hlock0;
reg reg_i_hbusreq1;
reg reg_i_hlock1;
reg reg_i_hbusreq2;
reg reg_i_hlock2;
reg reg_i_hbusreq3;
reg reg_i_hlock3;
reg reg_i_hbusreq4;
reg reg_i_hlock4;
reg reg_i_hbusreq5;
reg reg_i_hlock5;
reg reg_i_hbusreq6;
reg reg_i_hlock6;
reg reg_controllable_hmaster0;
reg reg_controllable_hmaster1;
reg reg_controllable_hmaster2;
reg reg_controllable_hmastlock;
reg reg_controllable_nstart;
reg reg_controllable_ndecide;
reg reg_controllable_locked;
reg reg_controllable_nhgrant0;
reg reg_controllable_hgrant1;
reg reg_controllable_hgrant2;
reg reg_controllable_hgrant3;
reg reg_controllable_hgrant4;
reg reg_controllable_hgrant5;
reg reg_controllable_hgrant6;
reg reg_controllable_busreq;
reg reg_stateA1;
reg reg_stateG2;
reg reg_stateG3_0;
reg reg_stateG3_1;
reg reg_stateG3_2;
reg reg_stateG10_1;
reg reg_stateG10_2;
reg reg_stateG10_3;
reg reg_stateG10_4;
reg reg_stateG10_5;
reg reg_stateG10_6;
reg env_safe_err_happened;
reg next_env_fair;
reg [5:0] fair_cnt;
reg [4:0] next_sys_fair;

wire env_safe_err0;
wire env_safe_err1;
wire env_safe_err2;
wire env_safe_err3;
wire env_safe_err4;
wire env_safe_err5;
wire env_safe_err6;
wire env_safe_err;

wire sys_safe_err0;
wire sys_safe_err1;
wire sys_safe_err2;
wire sys_safe_err3;
wire sys_safe_err4;
wire sys_safe_err5;
wire sys_safe_err6;
wire sys_safe_err7;
wire sys_safe_err8;
wire sys_safe_err9;
wire sys_safe_err10;
wire sys_safe_err11;
wire sys_safe_err12;
wire sys_safe_err13;
wire sys_safe_err14;
wire sys_safe_err15;
wire sys_safe_err16;
wire sys_safe_err17;
wire sys_safe_err18;
wire sys_safe_err19;
wire sys_safe_err20;
wire sys_safe_err21;
wire sys_safe_err22;
wire sys_safe_err23;
wire sys_safe_err24;
wire sys_safe_err25;
wire sys_safe_err26;
wire sys_safe_err27;
wire sys_safe_err28;
wire sys_safe_err29;
wire sys_safe_err30;
wire sys_safe_err31;
wire sys_safe_err32;
wire sys_safe_err33;
wire sys_safe_err34;
wire sys_safe_err35;
wire sys_safe_err36;
wire sys_safe_err37;
wire sys_safe_err38;
wire sys_safe_err39;
wire sys_safe_err40;
wire sys_safe_err41;
wire sys_safe_err42;
wire sys_safe_err43;
wire sys_safe_err44;
wire sys_safe_err45;
wire sys_safe_err46;
wire sys_safe_err47;
wire sys_safe_err48;
wire sys_safe_err49;
wire sys_safe_err50;
wire sys_safe_err51;
wire sys_safe_err52;
wire sys_safe_err53;
wire sys_safe_err54;
wire sys_safe_err;

wire env_fair0;
wire env_fair1;

wire sys_fair0;
wire sys_fair1;
wire sys_fair2;
wire sys_fair3;
wire sys_fair4;
wire sys_fair5;
wire sys_fair6;
wire sys_fair7;
wire sys_fair8;
wire fair_err;
wire o_err;

// =============================================================
//                        ENV_TRANSITION:
// =============================================================
// Assumption 3:
// G( hlock0=1 -> hbusreq0=1 );
assign env_safe_err0 =  ~(~ i_hlock0 | i_hbusreq0);

// Assumption 3:
// G( hlock1=1 -> hbusreq1=1 );
assign env_safe_err1 =  ~(~ i_hlock1 | i_hbusreq1);

// Assumption 3:
// G( hlock2=1 -> hbusreq2=1 );
assign env_safe_err2 =  ~(~ i_hlock2 | i_hbusreq2);

// Assumption 3:
// G( hlock3=1 -> hbusreq3=1 );
assign env_safe_err3 =  ~(~ i_hlock3 | i_hbusreq3);

// Assumption 3:
// G( hlock4=1 -> hbusreq4=1 );
assign env_safe_err4 =  ~(~ i_hlock4 | i_hbusreq4);

// Assumption 3:
// G( hlock5=1 -> hbusreq5=1 );
assign env_safe_err5 =  ~(~ i_hlock5 | i_hbusreq5);

// Assumption 3:
// G( hlock6=1 -> hbusreq6=1 );
assign env_safe_err6 =  ~(~ i_hlock6 | i_hbusreq6);

// collecting together the safety error bits:
assign env_safe_err = env_safe_err0 |
                      env_safe_err1 |
                      env_safe_err2 |
                      env_safe_err3 |
                      env_safe_err4 |
                      env_safe_err5 |
                      env_safe_err6;

// =============================================================
//                        SYS_TRANSITION:
// =============================================================
// G((hmaster0=0) * (hmaster1=0) * (hmaster2=0) -> (hbusreq0=0 <-> busreq=0));
assign sys_safe_err0 =  ~( ~( ~(controllable_hmaster0) & ~(controllable_hmaster1) & ~(controllable_hmaster2) )|(~i_hbusreq0 ^~ (~controllable_busreq)));

// G((hmaster0=1) * (hmaster1=0) * (hmaster2=0) -> (hbusreq1=0 <-> busreq=0));
assign sys_safe_err1 =  ~( ~( controllable_hmaster0 & ~(controllable_hmaster1) & ~(controllable_hmaster2) )|(~i_hbusreq1 ^~ (~controllable_busreq)));

// G((hmaster0=0) * (hmaster1=1) * (hmaster2=0) -> (hbusreq2=0 <-> busreq=0));
assign sys_safe_err2 =  ~( ~( ~(controllable_hmaster0) & controllable_hmaster1 & ~(controllable_hmaster2) )|(~i_hbusreq2 ^~ (~controllable_busreq)));

// G((hmaster0=1) * (hmaster1=1) * (hmaster2=0) -> (hbusreq3=0 <-> busreq=0));
assign sys_safe_err3 =  ~( ~( controllable_hmaster0 & controllable_hmaster1 & ~(controllable_hmaster2) )|(~i_hbusreq3 ^~ (~controllable_busreq)));

// G((hmaster0=0) * (hmaster1=0) * (hmaster2=1) -> (hbusreq4=0 <-> busreq=0));
assign sys_safe_err4 =  ~( ~( ~(controllable_hmaster0) & ~(controllable_hmaster1) & controllable_hmaster2 )|(~i_hbusreq4 ^~ (~controllable_busreq)));

// G((hmaster0=1) * (hmaster1=0) * (hmaster2=1) -> (hbusreq5=0 <-> busreq=0));
assign sys_safe_err5 =  ~( ~( controllable_hmaster0 & ~(controllable_hmaster1) & controllable_hmaster2 )|(~i_hbusreq5 ^~ (~controllable_busreq)));

// G((hmaster0=0) * (hmaster1=1) * (hmaster2=1) -> (hbusreq6=0 <-> busreq=0));
assign sys_safe_err6 =  ~( ~( ~(controllable_hmaster0) & controllable_hmaster1 & controllable_hmaster2 )|(~i_hbusreq6 ^~ (~controllable_busreq)));

// Guarantee 1:
// G((hready=0) -> X(start=0));
assign sys_safe_err7 =  ~( reg_i_hready | controllable_nstart );

// G(((stateG2=1) * (start=1)) -> FALSE;
assign sys_safe_err8 =  ~( ~(reg_stateG2 & ~controllable_nstart) | 0 );

// G(((stateG3_0=1) * (stateG3_1=0) * (stateG3_2=0) * ((start=1))) -> FALSE);
// G(((stateG3_0=0) * (stateG3_1=1) * (stateG3_2=0) * ((start=1))) -> FALSE);
// G(((stateG3_0=1) * (stateG3_1=1) * (stateG3_2=0) * ((start=1))) -> FALSE);
// G(((stateG3_0=0) * (stateG3_1=0) * (stateG3_2=1) * ((start=1))) -> FALSE);
// all these rules can be summarized as: only in state 000, start=1 is allowed:
assign sys_safe_err9 =  (reg_stateG3_0 | reg_stateG3_1 | reg_stateG3_2) & ~controllable_nstart;

// G( (hready=1) -> (   (hgrant0=1) <-> (X(hmaster0=0) * X(hmaster1=0) * X(hmaster2=0))  ) );
assign sys_safe_err10 =  ~( ~(reg_i_hready) | ( ~reg_controllable_nhgrant0 ^~ ( ~(controllable_hmaster0) & ~(controllable_hmaster1) & ~(controllable_hmaster2) ) ) );

// G( (hready=1) -> (   (hgrant1=1) <-> (X(hmaster0=1) * X(hmaster1=0) * X(hmaster2=0))  ) );
assign sys_safe_err11 =  ~( ~(reg_i_hready) | ( reg_controllable_hgrant1 ^~ ( controllable_hmaster0 & ~(controllable_hmaster1) & ~(controllable_hmaster2) ) ) );

// G( (hready=1) -> (   (hgrant2=1) <-> (X(hmaster0=0) * X(hmaster1=1) * X(hmaster2=0))  ) );
assign sys_safe_err12 =  ~( ~(reg_i_hready) | ( reg_controllable_hgrant2 ^~ ( ~(controllable_hmaster0) & controllable_hmaster1 & ~(controllable_hmaster2) ) ) );

// G( (hready=1) -> (   (hgrant3=1) <-> (X(hmaster0=1) * X(hmaster1=1) * X(hmaster2=0))  ) );
assign sys_safe_err13 =  ~( ~(reg_i_hready) | ( reg_controllable_hgrant3 ^~ ( controllable_hmaster0 & controllable_hmaster1 & ~(controllable_hmaster2) ) ) );

// G( (hready=1) -> (   (hgrant4=1) <-> (X(hmaster0=0) * X(hmaster1=0) * X(hmaster2=1))  ) );
assign sys_safe_err14 =  ~( ~(reg_i_hready) | ( reg_controllable_hgrant4 ^~ ( ~(controllable_hmaster0) & ~(controllable_hmaster1) & controllable_hmaster2 ) ) );

// G( (hready=1) -> (   (hgrant5=1) <-> (X(hmaster0=1) * X(hmaster1=0) * X(hmaster2=1))  ) );
assign sys_safe_err15 =  ~( ~(reg_i_hready) | ( reg_controllable_hgrant5 ^~ ( controllable_hmaster0 & ~(controllable_hmaster1) & controllable_hmaster2 ) ) );

// G( (hready=1) -> (   (hgrant6=1) <-> (X(hmaster0=0) * X(hmaster1=1) * X(hmaster2=1))  ) );
assign sys_safe_err16 =  ~( ~(reg_i_hready) | ( reg_controllable_hgrant6 ^~ ( ~(controllable_hmaster0) & controllable_hmaster1 & controllable_hmaster2 ) ) );

// HMASTLOCK:
// G(  (hready=1) -> (locked=0 <-> X(hmastlock=0) ) );
assign sys_safe_err17 =  ~( ~(reg_i_hready) | (~reg_controllable_locked ^~ ~controllable_hmastlock) );

// Master 0:
// G( X(start=0) -> ( ((hmaster0=0) * (hmaster1=0) * (hmaster2=0)) <-> (X(hmaster0=0) * X(hmaster1=0) * X(hmaster2=0)) ) );
assign sys_safe_err18 =  ~( ~(controllable_nstart) | ( ( ~(reg_controllable_hmaster0) & ~(reg_controllable_hmaster1) & ~(reg_controllable_hmaster2) ) ^~ ( ~(controllable_hmaster0) & ~(controllable_hmaster1) & ~(controllable_hmaster2) )) );

// Master 1:
// G( X(start=0) -> ( ((hmaster0=1) * (hmaster1=0) * (hmaster2=0)) <-> (X(hmaster0=1) * X(hmaster1=0) * X(hmaster2=0)) ) );
assign sys_safe_err19 =  ~( ~(controllable_nstart) | ( ( reg_controllable_hmaster0 & ~(reg_controllable_hmaster1) & ~(reg_controllable_hmaster2) ) ^~ ( controllable_hmaster0 & ~(controllable_hmaster1) & ~(controllable_hmaster2) )) );

// Master 2:
// G( X(start=0) -> ( ((hmaster0=0) * (hmaster1=1) * (hmaster2=0)) <-> (X(hmaster0=0) * X(hmaster1=1) * X(hmaster2=0)) ) );
assign sys_safe_err20 =  ~( ~(controllable_nstart) | ( ( ~(reg_controllable_hmaster0) & reg_controllable_hmaster1 & ~(reg_controllable_hmaster2) ) ^~ ( ~(controllable_hmaster0) & controllable_hmaster1 & ~(controllable_hmaster2) )) );

// Master 3:
// G( X(start=0) -> ( ((hmaster0=1) * (hmaster1=1) * (hmaster2=0)) <-> (X(hmaster0=1) * X(hmaster1=1) * X(hmaster2=0)) ) );
assign sys_safe_err21 =  ~( ~(controllable_nstart) | ( ( reg_controllable_hmaster0 & reg_controllable_hmaster1 & ~(reg_controllable_hmaster2) ) ^~ ( controllable_hmaster0 & controllable_hmaster1 & ~(controllable_hmaster2) )) );

// Master 4:
// G( X(start=0) -> ( ((hmaster0=0) * (hmaster1=0) * (hmaster2=1)) <-> (X(hmaster0=0) * X(hmaster1=0) * X(hmaster2=1)) ) );
assign sys_safe_err22 =  ~( ~(controllable_nstart) | ( ( ~(reg_controllable_hmaster0) & ~(reg_controllable_hmaster1) & reg_controllable_hmaster2 ) ^~ ( ~(controllable_hmaster0) & ~(controllable_hmaster1) & controllable_hmaster2 )) );

// Master 5:
// G( X(start=0) -> ( ((hmaster0=1) * (hmaster1=0) * (hmaster2=1)) <-> (X(hmaster0=1) * X(hmaster1=0) * X(hmaster2=1)) ) );
assign sys_safe_err23 =  ~( ~(controllable_nstart) | ( ( reg_controllable_hmaster0 & ~(reg_controllable_hmaster1) & reg_controllable_hmaster2 ) ^~ ( controllable_hmaster0 & ~(controllable_hmaster1) & controllable_hmaster2 )) );

// Master 6:
// G( X(start=0) -> ( ((hmaster0=0) * (hmaster1=1) * (hmaster2=1)) <-> (X(hmaster0=0) * X(hmaster1=1) * X(hmaster2=1)) ) );
assign sys_safe_err24 =  ~( ~(controllable_nstart) | ( ( ~(reg_controllable_hmaster0) & reg_controllable_hmaster1 & reg_controllable_hmaster2 ) ^~ ( ~(controllable_hmaster0) & controllable_hmaster1 & controllable_hmaster2 )) );

// Guarantee 6.2:
// G( ((X(start=0))) -> ( (hmastlock=1) <-> X(hmastlock=1)) );
assign sys_safe_err25 =  ~( ~(controllable_nstart) | ( reg_controllable_hmastlock ^~ controllable_hmastlock) );

// G( (decide=1  *  hlock0=1  *  X(hgrant0=1) )->X(locked=1));
assign sys_safe_err26 =  ~( ~(~reg_controllable_ndecide & reg_i_hlock0 & ~controllable_nhgrant0) | (controllable_locked) );

// G((decide=1  *  hlock0=0  *  X(hgrant0=1))->X(locked=0));
assign sys_safe_err27 =  ~( ~(~reg_controllable_ndecide & ~reg_i_hlock0 & ~controllable_nhgrant0) | (~controllable_locked) );

// G( (decide=1  *  hlock1=1  *  X(hgrant1=1) )->X(locked=1));
assign sys_safe_err28 =  ~( ~(~reg_controllable_ndecide & reg_i_hlock1 & controllable_hgrant1) | (controllable_locked) );

// G((decide=1  *  hlock1=0  *  X(hgrant1=1))->X(locked=0));
assign sys_safe_err29 =  ~( ~(~reg_controllable_ndecide & ~reg_i_hlock1 & controllable_hgrant1) | (~controllable_locked) );

// G( (decide=1  *  hlock2=1  *  X(hgrant2=1) )->X(locked=1));
assign sys_safe_err30 =  ~( ~(~reg_controllable_ndecide & reg_i_hlock2 & controllable_hgrant2) | (controllable_locked) );

// G((decide=1  *  hlock2=0  *  X(hgrant2=1))->X(locked=0));
assign sys_safe_err31 =  ~( ~(~reg_controllable_ndecide & ~reg_i_hlock2 & controllable_hgrant2) | (~controllable_locked) );

// G( (decide=1  *  hlock3=1  *  X(hgrant3=1) )->X(locked=1));
assign sys_safe_err32 =  ~( ~(~reg_controllable_ndecide & reg_i_hlock3 & controllable_hgrant3) | (controllable_locked) );

// G((decide=1  *  hlock3=0  *  X(hgrant3=1))->X(locked=0));
assign sys_safe_err33 =  ~( ~(~reg_controllable_ndecide & ~reg_i_hlock3 & controllable_hgrant3) | (~controllable_locked) );

// G( (decide=1  *  hlock4=1  *  X(hgrant4=1) )->X(locked=1));
assign sys_safe_err34 =  ~( ~(~reg_controllable_ndecide & reg_i_hlock4 & controllable_hgrant4) | (controllable_locked) );

// G((decide=1  *  hlock4=0  *  X(hgrant4=1))->X(locked=0));
assign sys_safe_err35 =  ~( ~(~reg_controllable_ndecide & ~reg_i_hlock4 & controllable_hgrant4) | (~controllable_locked) );

// G( (decide=1  *  hlock5=1  *  X(hgrant5=1) )->X(locked=1));
assign sys_safe_err36 =  ~( ~(~reg_controllable_ndecide & reg_i_hlock5 & controllable_hgrant5) | (controllable_locked) );

// G((decide=1  *  hlock5=0  *  X(hgrant5=1))->X(locked=0));
assign sys_safe_err37 =  ~( ~(~reg_controllable_ndecide & ~reg_i_hlock5 & controllable_hgrant5) | (~controllable_locked) );

// G( (decide=1  *  hlock6=1  *  X(hgrant6=1) )->X(locked=1));
assign sys_safe_err38 =  ~( ~(~reg_controllable_ndecide & reg_i_hlock6 & controllable_hgrant6) | (controllable_locked) );

// G((decide=1  *  hlock6=0  *  X(hgrant6=1))->X(locked=0));
assign sys_safe_err39 =  ~( ~(~reg_controllable_ndecide & ~reg_i_hlock6 & controllable_hgrant6) | (~controllable_locked) );

// G( (decide=0) -> (  ((hgrant0=0)<->X(hgrant0=0))  ));
assign sys_safe_err40 =  ~( ~(reg_controllable_ndecide) | (reg_controllable_nhgrant0 ^~ controllable_nhgrant0) );

// G( (decide=0) -> (  ((hgrant1=0)<->X(hgrant1=0))  ));
assign sys_safe_err41 =  ~( ~(reg_controllable_ndecide) | (~reg_controllable_hgrant1 ^~ ~controllable_hgrant1) );

// G( (decide=0) -> (  ((hgrant2=0)<->X(hgrant2=0))  ));
assign sys_safe_err42 =  ~( ~(reg_controllable_ndecide) | (~reg_controllable_hgrant2 ^~ ~controllable_hgrant2) );

// G( (decide=0) -> (  ((hgrant3=0)<->X(hgrant3=0))  ));
assign sys_safe_err43 =  ~( ~(reg_controllable_ndecide) | (~reg_controllable_hgrant3 ^~ ~controllable_hgrant3) );

// G( (decide=0) -> (  ((hgrant4=0)<->X(hgrant4=0))  ));
assign sys_safe_err44 =  ~( ~(reg_controllable_ndecide) | (~reg_controllable_hgrant4 ^~ ~controllable_hgrant4) );

// G( (decide=0) -> (  ((hgrant5=0)<->X(hgrant5=0))  ));
assign sys_safe_err45 =  ~( ~(reg_controllable_ndecide) | (~reg_controllable_hgrant5 ^~ ~controllable_hgrant5) );

// G( (decide=0) -> (  ((hgrant6=0)<->X(hgrant6=0))  ));
assign sys_safe_err46 =  ~( ~(reg_controllable_ndecide) | (~reg_controllable_hgrant6 ^~ ~controllable_hgrant6) );

// G((decide=0)->(locked=0 <-> X(locked=0)));
assign sys_safe_err47 =  ~( ~(reg_controllable_ndecide) | (~reg_controllable_locked ^~ ~controllable_locked) );

// G(((stateG10_1=1) * (((hgrant1=1)) * (hbusreq1=0)))->FALSE);
assign sys_safe_err48 =  ~( ~(reg_stateG10_1 & (controllable_hgrant1 & ~i_hbusreq1)) | 0 );

// G(((stateG10_2=1) * (((hgrant2=1)) * (hbusreq2=0)))->FALSE);
assign sys_safe_err49 =  ~( ~(reg_stateG10_2 & (controllable_hgrant2 & ~i_hbusreq2)) | 0 );

// G(((stateG10_3=1) * (((hgrant3=1)) * (hbusreq3=0)))->FALSE);
assign sys_safe_err50 =  ~( ~(reg_stateG10_3 & (controllable_hgrant3 & ~i_hbusreq3)) | 0 );

// G(((stateG10_4=1) * (((hgrant4=1)) * (hbusreq4=0)))->FALSE);
assign sys_safe_err51 =  ~( ~(reg_stateG10_4 & (controllable_hgrant4 & ~i_hbusreq4)) | 0 );

// G(((stateG10_5=1) * (((hgrant5=1)) * (hbusreq5=0)))->FALSE);
assign sys_safe_err52 =  ~( ~(reg_stateG10_5 & (controllable_hgrant5 & ~i_hbusreq5)) | 0 );

// G(((stateG10_6=1) * (((hgrant6=1)) * (hbusreq6=0)))->FALSE);
assign sys_safe_err53 =  ~( ~(reg_stateG10_6 & (controllable_hgrant6 & ~i_hbusreq6)) | 0 );

// default master
// G((decide=1  *  hbusreq0=0  *  hbusreq1=0  *  hbusreq2=0  *  hbusreq3=0  *  hbusreq4=0  *  hbusreq5=0  *  hbusreq6=0) -> X(hgrant0=1));
assign sys_safe_err54 =  ~( ~(~reg_controllable_ndecide & (~reg_i_hbusreq0 & ~reg_i_hbusreq1 & ~reg_i_hbusreq2 & ~reg_i_hbusreq3 & ~reg_i_hbusreq4 & ~reg_i_hbusreq5 & ~reg_i_hbusreq6)) | (~controllable_nhgrant0) );

// collecting together the safety error bits:
assign sys_safe_err = sys_safe_err0 |
                      sys_safe_err1 |
                      sys_safe_err2 |
                      sys_safe_err3 |
                      sys_safe_err4 |
                      sys_safe_err5 |
                      sys_safe_err6 |
                      sys_safe_err7 |
                      sys_safe_err8 |
                      sys_safe_err9 |
                      sys_safe_err10 |
                      sys_safe_err11 |
                      sys_safe_err12 |
                      sys_safe_err13 |
                      sys_safe_err14 |
                      sys_safe_err15 |
                      sys_safe_err16 |
                      sys_safe_err17 |
                      sys_safe_err18 |
                      sys_safe_err19 |
                      sys_safe_err20 |
                      sys_safe_err21 |
                      sys_safe_err22 |
                      sys_safe_err23 |
                      sys_safe_err24 |
                      sys_safe_err25 |
                      sys_safe_err26 |
                      sys_safe_err27 |
                      sys_safe_err28 |
                      sys_safe_err29 |
                      sys_safe_err30 |
                      sys_safe_err31 |
                      sys_safe_err32 |
                      sys_safe_err33 |
                      sys_safe_err34 |
                      sys_safe_err35 |
                      sys_safe_err36 |
                      sys_safe_err37 |
                      sys_safe_err38 |
                      sys_safe_err39 |
                      sys_safe_err40 |
                      sys_safe_err41 |
                      sys_safe_err42 |
                      sys_safe_err43 |
                      sys_safe_err44 |
                      sys_safe_err45 |
                      sys_safe_err46 |
                      sys_safe_err47 |
                      sys_safe_err48 |
                      sys_safe_err49 |
                      sys_safe_err50 |
                      sys_safe_err51 |
                      sys_safe_err52 |
                      sys_safe_err53 |
                      sys_safe_err54;

// =============================================================
//                          ENV_FAIRNESS:
// =============================================================
// Assumption 1: 
// G(F(stateA1=0));
assign env_fair0 =  ~reg_stateA1;

// Assumption 2:
// G(F(hready=1));
assign env_fair1 =  i_hready;


// =============================================================
//                          SYS_FAIRNESS:
// =============================================================
// Guarantee 2:
// G(F(stateG2=0));
assign sys_fair0 = ~reg_stateG2;

// Guarantee 3:
// G(F((stateG3_0=0)  *  (stateG3_1=0)  *  (stateG3_2=0)));
assign sys_fair1 =  (~reg_stateG3_0 & ~reg_stateG3_1 & ~reg_stateG3_2);

// G(F(((hmaster0=0) * (hmaster1=0) * (hmaster2=0))  |  hbusreq0=0));
assign sys_fair2 =  ( ~(controllable_hmaster0) & ~(controllable_hmaster1) & ~(controllable_hmaster2) ) | ~i_hbusreq0;

// G(F(((hmaster0=1) * (hmaster1=0) * (hmaster2=0))  |  hbusreq1=0));
assign sys_fair3 =  ( controllable_hmaster0 & ~(controllable_hmaster1) & ~(controllable_hmaster2) ) | ~i_hbusreq1;

// G(F(((hmaster0=0) * (hmaster1=1) * (hmaster2=0))  |  hbusreq2=0));
assign sys_fair4 =  ( ~(controllable_hmaster0) & controllable_hmaster1 & ~(controllable_hmaster2) ) | ~i_hbusreq2;

// G(F(((hmaster0=1) * (hmaster1=1) * (hmaster2=0))  |  hbusreq3=0));
assign sys_fair5 =  ( controllable_hmaster0 & controllable_hmaster1 & ~(controllable_hmaster2) ) | ~i_hbusreq3;

// G(F(((hmaster0=0) * (hmaster1=0) * (hmaster2=1))  |  hbusreq4=0));
assign sys_fair6 =  ( ~(controllable_hmaster0) & ~(controllable_hmaster1) & controllable_hmaster2 ) | ~i_hbusreq4;

// G(F(((hmaster0=1) * (hmaster1=0) * (hmaster2=1))  |  hbusreq5=0));
assign sys_fair7 =  ( controllable_hmaster0 & ~(controllable_hmaster1) & controllable_hmaster2 ) | ~i_hbusreq5;

// G(F(((hmaster0=0) * (hmaster1=1) * (hmaster2=1))  |  hbusreq6=0));
assign sys_fair8 =  ( ~(controllable_hmaster0) & controllable_hmaster1 & controllable_hmaster2 ) | ~i_hbusreq6;

assign fair_err = (fair_cnt >= 6'b110010);

// computing the error output bit:
assign o_err = ~env_safe_err & ~env_safe_err_happened & (sys_safe_err | fair_err);

initial
 begin
  reg_i_hready = 0;
  reg_i_hbusreq0 = 0;
  reg_i_hlock0 = 0;
  reg_i_hbusreq1 = 0;
  reg_i_hlock1 = 0;
  reg_i_hbusreq2 = 0;
  reg_i_hlock2 = 0;
  reg_i_hbusreq3 = 0;
  reg_i_hlock3 = 0;
  reg_i_hbusreq4 = 0;
  reg_i_hlock4 = 0;
  reg_i_hbusreq5 = 0;
  reg_i_hlock5 = 0;
  reg_i_hbusreq6 = 0;
  reg_i_hlock6 = 0;
  reg_controllable_hmaster0 = 0;
  reg_controllable_hmaster1 = 0;
  reg_controllable_hmaster2 = 0;
  reg_controllable_hmastlock = 0;
  reg_controllable_nstart = 0;
  reg_controllable_ndecide = 0;
  reg_controllable_locked = 0;
  reg_controllable_nhgrant0 = 0;
  reg_controllable_hgrant1 = 0;
  reg_controllable_hgrant2 = 0;
  reg_controllable_hgrant3 = 0;
  reg_controllable_hgrant4 = 0;
  reg_controllable_hgrant5 = 0;
  reg_controllable_hgrant6 = 0;
  reg_controllable_busreq = 0;
  reg_stateA1 = 0;
  reg_stateG2 = 0;
  reg_stateG3_0 = 0;
  reg_stateG3_1 = 0;
  reg_stateG3_2 = 0;
  reg_stateG10_1 = 0;
  reg_stateG10_2 = 0;
  reg_stateG10_3 = 0;
  reg_stateG10_4 = 0;
  reg_stateG10_5 = 0;
  reg_stateG10_6 = 0;
  env_safe_err_happened = 0;
  next_env_fair = 0;
  fair_cnt = 0;
  next_sys_fair = 0;
 end


always @(posedge i_clk)
 begin
   // We remember if an environment error occurred:
   env_safe_err_happened = env_safe_err_happened | env_safe_err;

   // Updating the fairness counters: 
   if((next_sys_fair == 0) & sys_fair0)
    begin
      next_sys_fair = 1;
      next_env_fair = 0;
      fair_cnt = 0;
    end
   else if((next_sys_fair == 1) & sys_fair1)
    begin
      next_sys_fair = 2;
      next_env_fair = 0;
      fair_cnt = 0;
    end
   else if((next_sys_fair == 2) & sys_fair2)
    begin
      next_sys_fair = 3;
      next_env_fair = 0;
      fair_cnt = 0;
    end
   else if((next_sys_fair == 3) & sys_fair3)
    begin
      next_sys_fair = 4;
      next_env_fair = 0;
      fair_cnt = 0;
    end
   else if((next_sys_fair == 4) & sys_fair4)
    begin
      next_sys_fair = 5;
      next_env_fair = 0;
      fair_cnt = 0;
    end
   else if((next_sys_fair == 5) & sys_fair5)
    begin
      next_sys_fair = 6;
      next_env_fair = 0;
      fair_cnt = 0;
    end
   else if((next_sys_fair == 6) & sys_fair6)
    begin
      next_sys_fair = 7;
      next_env_fair = 0;
      fair_cnt = 0;
    end
   else if((next_sys_fair == 7) & sys_fair7)
    begin
      next_sys_fair = 8;
      next_env_fair = 0;
      fair_cnt = 0;
    end
   else if((next_sys_fair == 8) & sys_fair8)
    begin
      next_sys_fair = 0;
      next_env_fair = 0;
      fair_cnt = 0;
    end
   else if(~next_env_fair & env_fair0)
    begin
      next_env_fair = 1;
    end
   else if(next_env_fair & env_fair1)
    begin
      next_env_fair = 0;
      fair_cnt = fair_cnt + 1;
    end

   // Updating the automata: 
   // Automaton A1: 
   if(~reg_stateA1 & controllable_hmastlock & ~i_hburst0 & ~i_hburst1)
    begin
      reg_stateA1 = 1'b1;
    end
   else if(reg_stateA1 & ~controllable_busreq)
    begin
      reg_stateA1 = 1'b0;
    end

   // Automaton G2: 
   if(~reg_stateG2)
    begin
      if(controllable_hmastlock & ~controllable_nstart & ~i_hburst0 & ~i_hburst1)
       begin
         reg_stateG2 = 1'b1;
       end
    end
   else // if(reg_stateG2)
    begin
      if(~controllable_busreq)
       begin
         reg_stateG2 = 1'b0;
       end
    end

   // Automaton G3: 
   if(~reg_stateG3_0 & ~reg_stateG3_1 & ~reg_stateG3_2 & controllable_hmastlock & ~controllable_nstart &  ~i_hburst0 & i_hburst1 & ~i_hready)
    begin
      reg_stateG3_0 = 1'b1;
      reg_stateG3_1 = 1'b0;
      reg_stateG3_2 = 1'b0;
    end
   else if(~reg_stateG3_0 & ~reg_stateG3_1 & ~reg_stateG3_2 & controllable_hmastlock & ~controllable_nstart &  ~i_hburst0 & i_hburst1 & i_hready)
    begin
      reg_stateG3_0 = 1'b0;
      reg_stateG3_1 = 1'b1;
      reg_stateG3_2 = 1'b0;
    end
   else if(reg_stateG3_0 & ~reg_stateG3_1 & ~reg_stateG3_2 & i_hready)
    begin
      reg_stateG3_0 = 1'b0;
      reg_stateG3_1 = 1'b1;
      reg_stateG3_2 = 1'b0;
    end
   else if(~reg_stateG3_0 & reg_stateG3_1 & ~reg_stateG3_2 & i_hready)
    begin
      reg_stateG3_0 = 1'b1;
      reg_stateG3_1 = 1'b1;
      reg_stateG3_2 = 1'b0;
    end
   else if(reg_stateG3_0 & reg_stateG3_1 & ~reg_stateG3_2 & i_hready)
    begin
      reg_stateG3_0 = 1'b0;
      reg_stateG3_1 = 1'b0;
      reg_stateG3_2 = 1'b1;
    end
   else if(~reg_stateG3_0 & ~reg_stateG3_1 & reg_stateG3_2 & i_hready)
    begin
      reg_stateG3_0 = 1'b0;
      reg_stateG3_1 = 1'b0;
      reg_stateG3_2 = 1'b0;
    end

   // Automaton G10_1: 
   if(~reg_stateG10_1 & ~controllable_hgrant1 & ~i_hbusreq1)
    begin
      reg_stateG10_1 = 1'b1;
    end
   else if(reg_stateG10_1 & i_hbusreq1)
    begin
      reg_stateG10_1 = 1'b0;
    end

   // Automaton G10_2: 
   if(~reg_stateG10_2 & ~controllable_hgrant2 & ~i_hbusreq2)
    begin
      reg_stateG10_2 = 1'b1;
    end
   else if(reg_stateG10_2 & i_hbusreq2)
    begin
      reg_stateG10_2 = 1'b0;
    end

   // Automaton G10_3: 
   if(~reg_stateG10_3 & ~controllable_hgrant3 & ~i_hbusreq3)
    begin
      reg_stateG10_3 = 1'b1;
    end
   else if(reg_stateG10_3 & i_hbusreq3)
    begin
      reg_stateG10_3 = 1'b0;
    end

   // Automaton G10_4: 
   if(~reg_stateG10_4 & ~controllable_hgrant4 & ~i_hbusreq4)
    begin
      reg_stateG10_4 = 1'b1;
    end
   else if(reg_stateG10_4 & i_hbusreq4)
    begin
      reg_stateG10_4 = 1'b0;
    end

   // Automaton G10_5: 
   if(~reg_stateG10_5 & ~controllable_hgrant5 & ~i_hbusreq5)
    begin
      reg_stateG10_5 = 1'b1;
    end
   else if(reg_stateG10_5 & i_hbusreq5)
    begin
      reg_stateG10_5 = 1'b0;
    end

   // Automaton G10_6: 
   if(~reg_stateG10_6 & ~controllable_hgrant6 & ~i_hbusreq6)
    begin
      reg_stateG10_6 = 1'b1;
    end
   else if(reg_stateG10_6 & i_hbusreq6)
    begin
      reg_stateG10_6 = 1'b0;
    end

   // Latching the previous input:
   reg_i_hready =  i_hready;
   reg_i_hbusreq0 =  i_hbusreq0;
   reg_i_hlock0 =  i_hlock0;
   reg_i_hbusreq1 =  i_hbusreq1;
   reg_i_hlock1 =  i_hlock1;
   reg_i_hbusreq2 =  i_hbusreq2;
   reg_i_hlock2 =  i_hlock2;
   reg_i_hbusreq3 =  i_hbusreq3;
   reg_i_hlock3 =  i_hlock3;
   reg_i_hbusreq4 =  i_hbusreq4;
   reg_i_hlock4 =  i_hlock4;
   reg_i_hbusreq5 =  i_hbusreq5;
   reg_i_hlock5 =  i_hlock5;
   reg_i_hbusreq6 =  i_hbusreq6;
   reg_i_hlock6 =  i_hlock6;
   reg_controllable_hmaster0 =  controllable_hmaster0;
   reg_controllable_hmaster1 =  controllable_hmaster1;
   reg_controllable_hmaster2 =  controllable_hmaster2;
   reg_controllable_hmastlock =  controllable_hmastlock;
   reg_controllable_nstart =  controllable_nstart;
   reg_controllable_ndecide =  controllable_ndecide;
   reg_controllable_locked =  controllable_locked;
   reg_controllable_nhgrant0 =  controllable_nhgrant0;
   reg_controllable_hgrant1 =  controllable_hgrant1;
   reg_controllable_hgrant2 =  controllable_hgrant2;
   reg_controllable_hgrant3 =  controllable_hgrant3;
   reg_controllable_hgrant4 =  controllable_hgrant4;
   reg_controllable_hgrant5 =  controllable_hgrant5;
   reg_controllable_hgrant6 =  controllable_hgrant6;
   reg_controllable_busreq =  controllable_busreq;

 end
endmodule

-------------------------------
#!SYNTCOMP
STATUS : realizable
SOLVED_BY : 3/3 [2015-pre-classification]
SOLVED_IN : 24.9675 [2015-pre-classification]
#.
