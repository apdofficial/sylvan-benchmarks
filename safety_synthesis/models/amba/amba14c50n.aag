aag 1618 54 84 1 1480
2
4
6
8
10
12
14
16
18
20
22
24
26
28
30
32
34
36
38
40
42
44
46
48
50
52
54
56
58
60
62
64
66
68
70
72
74
76
78
80
82
84
86
88
90
92
94
96
98
100
102
104
106
108
110 1
112 68
114 18
116 92
118 90
120 64
122 20
124 96
126 86
128 60
130 22
132 82
134 54
136 24
138 26
140 104
142 28
144 30
146 32
148 1925
150 1947
152 1971
154 1993
156 2013
158 10
160 48
162 2043
164 2065
166 8
168 2653
170 2659
172 2665
174 2671
176 2677
178 2683
180 2705
182 6
184 70
186 2727
188 4
190 2777
192 66
194 2807
196 2829
198 2
200 62
202 2851
204 108
206 56
208 2873
210 36
212 106
214 46
216 34
218 38
220 2895
222 72
224 102
226 44
228 2917
230 100
232 42
234 74
236 2939
238 98
240 40
242 50
244 76
246 2961
248 337
250 78
252 2983
254 80
256 14
258 84
260 3213
262 3219
264 3225
266 3231
268 3237
270 16
272 88
274 12
276 94
1840
278 98 15
280 100 17
282 281 279
284 102 19
286 285 282
288 106 21
290 289 286
292 108 23
294 293 290
296 25 2
298 297 294
300 27 4
302 301 298
304 29 6
306 305 302
308 31 8
310 309 306
312 33 10
314 313 310
316 95 46
318 317 314
320 91 44
322 321 318
324 87 42
326 325 322
328 83 40
330 329 326
332 249 110
334 333 110
336 335 330
338 71 67
340 338 63
342 340 57
344 39 14
346 38 15
348 347 345
350 349 342
352 70 67
354 352 63
356 354 57
358 39 16
360 38 17
362 361 359
364 363 356
366 365 351
368 71 66
370 368 63
372 370 57
374 39 18
376 38 19
378 377 375
380 379 372
382 381 366
384 70 66
386 384 63
388 386 57
390 39 20
392 38 21
394 393 391
396 395 388
398 397 382
400 338 62
402 400 57
404 39 22
406 38 23
408 407 405
410 409 402
412 411 398
414 352 62
416 414 57
418 39 24
420 38 25
422 421 419
424 423 416
426 425 412
428 368 62
430 428 57
432 39 26
434 38 27
436 435 433
438 437 430
440 439 426
442 384 62
444 442 57
446 39 28
448 38 29
450 449 447
452 451 444
454 453 440
456 340 56
458 39 30
460 38 31
462 461 459
464 463 456
466 465 454
468 354 56
470 39 32
472 38 33
474 473 471
476 475 468
478 477 466
480 370 56
482 94 39
484 95 38
486 485 483
488 487 480
490 489 478
492 386 56
494 90 39
496 91 38
498 497 495
500 499 492
502 501 490
504 400 56
506 86 39
508 87 38
510 509 507
512 511 504
514 513 502
516 414 56
518 82 39
520 83 38
522 521 519
524 523 516
526 525 514
528 211 110
530 210 110
532 529 110
534 533 105
536 535 526
538 195 110
540 194 110
542 539 110
544 540 105
546 545 536
548 149 110
550 148 110
552 549 110
554 153 110
556 152 110
558 555 110
560 559 553
562 157 110
564 156 110
566 563 110
568 567 560
570 569 105
572 571 546
574 243 110
576 242 110
578 575 110
580 576 342
582 579 343
584 583 581
586 585 530
588 587 572
590 223 110
592 222 110
594 591 110
596 595 356
598 592 357
600 599 597
602 601 530
604 603 588
606 235 110
608 234 110
610 607 110
612 611 372
614 608 373
616 615 613
618 617 530
620 619 604
622 245 110
624 244 110
626 623 110
628 627 388
630 624 389
632 631 629
634 633 530
636 635 620
638 251 110
640 250 110
642 639 110
644 643 402
646 640 403
648 647 645
650 649 530
652 651 636
654 255 110
656 254 110
658 655 110
660 659 416
662 656 417
664 663 661
666 665 530
668 667 652
670 259 110
672 258 110
674 671 110
676 675 430
678 672 431
680 679 677
682 681 530
684 683 668
686 273 110
688 272 110
690 687 110
692 691 444
694 688 445
696 695 693
698 697 530
700 699 684
702 117 110
704 116 110
706 703 110
708 707 456
710 704 457
712 711 709
714 713 530
716 715 700
718 125 110
720 124 110
722 719 110
724 723 468
726 720 469
728 727 725
730 729 530
732 731 716
734 135 110
736 134 110
738 735 110
740 739 480
742 736 481
744 743 741
746 745 530
748 747 732
750 129 110
752 128 110
754 751 110
756 755 492
758 752 493
760 759 757
762 761 530
764 763 748
766 121 110
768 120 110
770 767 110
772 771 504
774 768 505
776 775 773
778 777 530
780 779 764
782 113 110
784 112 110
786 783 110
788 787 516
790 784 517
792 791 789
794 793 530
796 795 780
798 275 110
800 274 110
802 799 110
804 800 49
806 803 48
808 807 805
810 809 530
812 811 796
814 185 110
816 184 110
818 815 110
820 193 110
822 192 110
824 821 110
826 825 819
828 201 110
830 200 110
832 829 110
834 833 826
836 207 110
838 206 110
840 837 110
842 841 834
844 843 342
846 842 343
848 847 845
850 849 104
852 851 812
854 825 816
856 854 833
858 856 841
860 859 356
862 858 357
864 863 861
866 865 104
868 867 852
870 822 819
872 870 833
874 872 841
876 875 372
878 874 373
880 879 877
882 881 104
884 883 868
886 822 816
888 886 833
890 888 841
892 891 388
894 890 389
896 895 893
898 897 104
900 899 884
902 830 826
904 902 841
906 905 402
908 904 403
910 909 907
912 911 104
914 913 900
916 854 830
918 916 841
920 919 416
922 918 417
924 923 921
926 925 104
928 927 914
930 870 830
932 930 841
934 933 430
936 932 431
938 937 935
940 939 104
942 941 928
944 886 830
946 944 841
948 947 444
950 946 445
952 951 949
954 953 104
956 955 942
958 838 834
960 959 456
962 958 457
964 963 961
966 965 104
968 967 956
970 856 838
972 971 468
974 970 469
976 975 973
978 977 104
980 979 968
982 872 838
984 983 480
986 982 481
988 987 985
990 989 104
992 991 980
994 888 838
996 995 492
998 994 493
1000 999 997
1002 1001 104
1004 1003 992
1006 902 838
1008 1007 504
1010 1006 505
1012 1011 1009
1014 1013 104
1016 1015 1004
1018 916 838
1020 1019 516
1022 1018 517
1024 1023 1021
1026 1025 104
1028 1027 1016
1030 161 110
1032 160 110
1034 1031 110
1036 1035 48
1038 1032 49
1040 1039 1037
1042 1041 104
1044 1043 1028
1046 217 110
1048 216 110
1050 1047 110
1052 239 110
1054 238 110
1056 1053 110
1058 1054 1051
1060 1058 51
1062 1060 13
1064 1063 1044
1066 1057 1051
1068 1066 51
1070 1068 12
1072 1071 1064
1074 231 110
1076 230 110
1078 1075 110
1080 1076 1051
1082 1080 72
1084 1082 13
1086 1085 1072
1088 1079 1051
1090 1088 72
1092 1090 12
1094 1093 1086
1096 225 110
1098 224 110
1100 1097 110
1102 1098 1051
1104 1102 74
1106 1104 13
1108 1107 1094
1110 1101 1051
1112 1110 74
1114 1112 12
1116 1115 1108
1118 213 110
1120 212 110
1122 1119 110
1124 1120 1051
1126 1124 76
1128 1126 13
1130 1129 1116
1132 1123 1051
1134 1132 76
1136 1134 12
1138 1137 1130
1140 205 110
1142 204 110
1144 1141 110
1146 1142 1051
1148 1146 78
1150 1148 13
1152 1151 1138
1154 1145 1051
1156 1154 78
1158 1156 12
1160 1159 1152
1162 199 110
1164 198 110
1166 1163 110
1168 1164 1051
1170 1168 80
1172 1170 13
1174 1173 1160
1176 1167 1051
1178 1176 80
1180 1178 12
1182 1181 1174
1184 189 110
1186 188 110
1188 1185 110
1190 1186 1051
1192 1190 84
1194 1192 13
1196 1195 1182
1198 1189 1051
1200 1198 84
1202 1200 12
1204 1203 1196
1206 183 110
1208 182 110
1210 1207 110
1212 1208 1051
1214 1212 88
1216 1214 13
1218 1217 1204
1220 1211 1051
1222 1220 88
1224 1222 12
1226 1225 1218
1228 167 110
1230 166 110
1232 1229 110
1234 1230 1051
1236 1234 92
1238 1236 13
1240 1239 1226
1242 1233 1051
1244 1242 92
1246 1244 12
1248 1247 1240
1250 159 110
1252 158 110
1254 1251 110
1256 1252 1051
1258 1256 96
1260 1258 13
1262 1261 1248
1264 1255 1051
1266 1264 96
1268 1266 12
1270 1269 1262
1272 215 110
1274 214 110
1276 1273 110
1278 1274 1051
1280 1278 54
1282 1280 13
1284 1283 1270
1286 1277 1051
1288 1286 54
1290 1288 12
1292 1291 1284
1294 227 110
1296 226 110
1298 1295 110
1300 1296 1051
1302 1300 60
1304 1302 13
1306 1305 1292
1308 1299 1051
1310 1308 60
1312 1310 12
1314 1313 1306
1316 233 110
1318 232 110
1320 1317 110
1322 1318 1051
1324 1322 64
1326 1324 13
1328 1327 1314
1330 1321 1051
1332 1330 64
1334 1332 12
1336 1335 1328
1338 241 110
1340 240 110
1342 1339 110
1344 1340 1051
1346 1344 68
1348 1346 13
1350 1349 1336
1352 1343 1051
1354 1352 68
1356 1354 12
1358 1357 1350
1360 579 50
1362 576 51
1364 1363 1361
1366 1365 1048
1368 1367 1358
1370 592 73
1372 595 72
1374 1373 1371
1376 1375 1048
1378 1377 1368
1380 608 75
1382 611 74
1384 1383 1381
1386 1385 1048
1388 1387 1378
1390 624 77
1392 627 76
1394 1393 1391
1396 1395 1048
1398 1397 1388
1400 640 79
1402 643 78
1404 1403 1401
1406 1405 1048
1408 1407 1398
1410 656 81
1412 659 80
1414 1413 1411
1416 1415 1048
1418 1417 1408
1420 672 85
1422 675 84
1424 1423 1421
1426 1425 1048
1428 1427 1418
1430 688 89
1432 691 88
1434 1433 1431
1436 1435 1048
1438 1437 1428
1440 704 93
1442 707 92
1444 1443 1441
1446 1445 1048
1448 1447 1438
1450 720 97
1452 723 96
1454 1453 1451
1456 1455 1048
1458 1457 1448
1460 736 55
1462 739 54
1464 1463 1461
1466 1465 1048
1468 1467 1458
1470 752 61
1472 755 60
1474 1473 1471
1476 1475 1048
1478 1477 1468
1480 768 65
1482 771 64
1484 1483 1481
1486 1485 1048
1488 1487 1478
1490 784 69
1492 787 68
1494 1493 1491
1496 1495 1048
1498 1497 1488
1500 800 13
1502 803 12
1504 1503 1501
1506 1505 1048
1508 1507 1498
1510 187 110
1512 186 110
1514 1511 110
1516 72 17
1518 1516 1512
1520 1519 1508
1522 197 110
1524 196 110
1526 1523 110
1528 74 19
1530 1528 1524
1532 1531 1520
1534 203 110
1536 202 110
1538 1535 110
1540 76 21
1542 1540 1536
1544 1543 1532
1546 209 110
1548 208 110
1550 1547 110
1552 78 23
1554 1552 1548
1556 1555 1544
1558 221 110
1560 220 110
1562 1559 110
1564 80 25
1566 1564 1560
1568 1567 1556
1570 229 110
1572 228 110
1574 1571 110
1576 84 27
1578 1576 1572
1580 1579 1568
1582 237 110
1584 236 110
1586 1583 110
1588 88 29
1590 1588 1584
1592 1591 1580
1594 247 110
1596 246 110
1598 1595 110
1600 92 31
1602 1600 1596
1604 1603 1592
1606 253 110
1608 252 110
1610 1607 110
1612 96 33
1614 1612 1608
1616 1615 1604
1618 181 110
1620 180 110
1622 1619 110
1624 95 54
1626 1624 1620
1628 1627 1616
1630 165 110
1632 164 110
1634 1631 110
1636 91 60
1638 1636 1632
1640 1639 1628
1642 155 110
1644 154 110
1646 1643 110
1648 87 64
1650 1648 1644
1652 1651 1640
1654 151 110
1656 150 110
1658 1655 110
1660 83 68
1662 1660 1656
1664 1663 1652
1666 257 110
1668 1667 110
1670 271 110
1672 1671 110
1674 1673 1669
1676 115 110
1678 1677 110
1680 1679 1674
1682 123 110
1684 1683 110
1686 1685 1680
1688 131 110
1690 1689 110
1692 1691 1686
1694 137 110
1696 1695 110
1698 1697 1692
1700 139 110
1702 1701 110
1704 1703 1698
1706 143 110
1708 1707 110
1710 1709 1704
1712 145 110
1714 1713 110
1716 1715 1710
1718 147 110
1720 1719 110
1722 1721 1716
1724 277 110
1726 1725 110
1728 1727 1722
1730 119 110
1732 1731 110
1734 1733 1728
1736 127 110
1738 1737 110
1740 1739 1734
1742 133 110
1744 1743 110
1746 1745 1740
1748 1746 1051
1750 1748 50
1752 1751 1664
1754 179 110
1756 178 110
1758 1755 110
1760 177 110
1762 176 110
1764 1761 110
1766 175 110
1768 174 110
1770 1767 110
1772 173 110
1774 172 110
1776 1773 110
1778 171 110
1780 170 110
1782 1779 110
1784 169 110
1786 168 110
1788 1785 110
1790 1783 1777
1792 1790 1771
1794 1792 1765
1796 1795 1764
1798 1796 1793
1800 1799 1759
1802 1801 1758
1804 1802 1798
1806 1782 1774
1808 1807 1791
1810 1791 1768
1812 1811 1793
1814 1793 1765
1816 1792 1762
1818 1817 1815
1820 1798 1759
1822 1799 1756
1824 1823 1821
1826 1787 1782
1828 1826 1808
1830 1828 1812
1832 1830 1818
1834 1832 1824
1836 1835 1805
1838 1836 1752
1840 1839 336
1842 568 48
1844 1842 105
1846 1844 59
1848 1846 52
1850 1848 37
1852 1848 36
1854 559 550
1856 1854 567
1858 1856 36
1860 556 553
1862 1860 567
1864 1862 36
1866 556 550
1868 1866 567
1870 1868 36
1872 564 560
1874 1872 36
1876 1852 1851
1878 1877 1851
1880 1853 1851
1882 1880 1858
1884 1883 1878
1886 1880 1859
1888 1886 1864
1890 1889 1884
1892 1886 1865
1894 1892 1870
1896 1895 1890
1898 1892 1871
1900 1898 1874
1902 1901 1896
1904 1875 550
1906 1904 1871
1908 1906 1865
1910 1909 1865
1912 1911 1859
1914 1912 1853
1916 1914 1851
1918 1917 1851
1920 1919 1903
1922 1902 550
1924 1923 1921
1926 1659 69
1928 1926 83
1930 1656 82
1932 1930 1929
1934 1933 1929
1936 1931 1656
1938 1936 1929
1940 1939 1929
1942 1941 1935
1944 1934 1656
1946 1945 1943
1948 1875 556
1950 1948 1871
1952 1950 1865
1954 1953 1865
1956 1955 1859
1958 1957 1859
1960 1959 1853
1962 1961 1853
1964 1963 1851
1966 1964 1903
1968 1902 556
1970 1969 1967
1972 1647 65
1974 1972 87
1976 1644 86
1978 1976 1975
1980 1979 1975
1982 1977 1644
1984 1982 1975
1986 1985 1975
1988 1987 1981
1990 1980 1644
1992 1991 1989
1994 1875 564
1996 1994 1871
1998 1997 1871
2000 1999 1865
2002 2000 1859
2004 2002 1853
2006 2004 1851
2008 2006 1903
2010 1902 564
2012 2011 2009
2014 163 110
2016 162 110
2018 2015 110
2020 2019 48
2022 2020 59
2024 2022 53
2026 2016 39
2028 2026 2025
2030 2029 2025
2032 2027 2016
2034 2032 2025
2036 2035 2025
2038 2037 2031
2040 2030 2016
2042 2041 2039
2044 1635 61
2046 2044 91
2048 1632 90
2050 2048 2047
2052 2051 2047
2054 2049 1632
2056 2054 2047
2058 2057 2047
2060 2059 2053
2062 2052 1632
2064 2063 2061
2066 261 110
2068 260 110
2070 2067 110
2072 263 110
2074 262 110
2076 2073 110
2078 265 110
2080 264 110
2082 2079 110
2084 267 110
2086 266 110
2088 2085 110
2090 268 110
2092 2075 2069
2094 2092 2081
2096 2094 2087
2098 2096 2091
2100 2098 543
2102 2075 2070
2104 2102 2081
2106 2104 2087
2108 2106 2091
2110 2108 568
2112 2076 2069
2114 2112 2081
2116 2114 2087
2118 2116 2091
2120 343 14
2122 2121 2118
2124 2076 2070
2126 2124 2081
2128 2126 2087
2130 2128 2091
2132 357 16
2134 2133 2130
2136 2092 2082
2138 2136 2087
2140 2138 2091
2142 373 18
2144 2143 2140
2146 2102 2082
2148 2146 2087
2150 2148 2091
2152 389 20
2154 2153 2150
2156 2112 2082
2158 2156 2087
2160 2158 2091
2162 403 22
2164 2163 2160
2166 2124 2082
2168 2166 2087
2170 2168 2091
2172 417 24
2174 2173 2170
2176 2094 2088
2178 2176 2091
2180 431 26
2182 2181 2178
2184 2104 2088
2186 2184 2091
2188 445 28
2190 2189 2186
2192 2114 2088
2194 2192 2091
2196 457 30
2198 2197 2194
2200 2126 2088
2202 2200 2091
2204 469 32
2206 2205 2202
2208 2136 2088
2210 2208 2091
2212 481 94
2214 2213 2210
2216 2146 2088
2218 2216 2091
2220 493 90
2222 2221 2218
2224 2156 2088
2226 2224 2091
2228 505 86
2230 2229 2226
2232 2166 2088
2234 2232 2091
2236 517 82
2238 2237 2234
2240 191 110
2242 190 110
2244 2241 110
2246 2245 2019
2248 2242 36
2250 2110 2101
2252 2251 2101
2254 2111 2101
2256 2254 2122
2258 2257 2252
2260 2254 2123
2262 2260 2134
2264 2263 2258
2266 2260 2135
2268 2266 2144
2270 2269 2264
2272 2266 2145
2274 2272 2154
2276 2275 2270
2278 2272 2155
2280 2278 2164
2282 2281 2276
2284 2278 2165
2286 2284 2174
2288 2287 2282
2290 2284 2175
2292 2290 2182
2294 2293 2288
2296 2290 2183
2298 2296 2190
2300 2299 2294
2302 2296 2191
2304 2302 2198
2306 2305 2300
2308 2302 2199
2310 2308 2206
2312 2311 2306
2314 2308 2207
2316 2314 2214
2318 2317 2312
2320 2314 2215
2322 2320 2222
2324 2323 2318
2326 2320 2223
2328 2326 2230
2330 2329 2324
2332 2326 2231
2334 2332 2238
2336 2335 2330
2338 2332 2239
2340 2338 2247
2342 2340 2248
2344 2343 2336
2346 2248 1789
2348 2249 1786
2350 2349 2347
2352 2246 1786
2354 2351 2247
2356 2355 2353
2358 2357 2239
2360 2358 2231
2362 2360 2223
2364 2362 2215
2366 2364 2207
2368 2366 2199
2370 2368 2191
2372 2370 2183
2374 2372 2175
2376 2374 2165
2378 2376 2155
2380 2378 2145
2382 2380 2135
2384 2382 2123
2386 2384 2111
2388 2386 2101
2390 1786 1783
2392 1787 1780
2394 2393 2391
2396 2395 2248
2398 2249 1780
2400 2399 2397
2402 2246 1780
2404 2401 2247
2406 2405 2403
2408 2407 2239
2410 2408 2231
2412 2410 2223
2414 2412 2215
2416 2414 2207
2418 2416 2199
2420 2418 2191
2422 2420 2183
2424 2422 2175
2426 2424 2165
2428 2426 2155
2430 2428 2145
2432 2430 2135
2434 2432 2123
2436 2434 2111
2438 2436 2101
2440 1786 1780
2442 2440 1777
2444 2441 1774
2446 2445 2443
2448 2447 2248
2450 2249 1774
2452 2451 2449
2454 2246 1774
2456 2453 2247
2458 2457 2455
2460 2459 2239
2462 2460 2231
2464 2462 2223
2466 2464 2215
2468 2466 2207
2470 2468 2199
2472 2470 2191
2474 2472 2183
2476 2474 2175
2478 2476 2165
2480 2478 2155
2482 2480 2145
2484 2482 2135
2486 2484 2123
2488 2486 2111
2490 2488 2101
2492 2440 1774
2494 2492 1771
2496 2493 1768
2498 2497 2495
2500 2499 2248
2502 2249 1768
2504 2503 2501
2506 2246 1768
2508 2505 2247
2510 2509 2507
2512 2511 2239
2514 2512 2231
2516 2514 2223
2518 2516 2215
2520 2518 2207
2522 2520 2199
2524 2522 2191
2526 2524 2183
2528 2526 2175
2530 2528 2165
2532 2530 2155
2534 2532 2145
2536 2534 2135
2538 2536 2123
2540 2538 2111
2542 2540 2101
2544 2492 1768
2546 2544 1765
2548 2545 1762
2550 2549 2547
2552 2551 2248
2554 2249 1762
2556 2555 2553
2558 2246 1762
2560 2557 2247
2562 2561 2559
2564 2563 2239
2566 2564 2231
2568 2566 2223
2570 2568 2215
2572 2570 2207
2574 2572 2199
2576 2574 2191
2578 2576 2183
2580 2578 2175
2582 2580 2165
2584 2582 2155
2586 2584 2145
2588 2586 2135
2590 2588 2123
2592 2590 2111
2594 2592 2101
2596 2544 1762
2598 2596 1759
2600 2597 1756
2602 2601 2599
2604 2603 2248
2606 2249 1756
2608 2607 2605
2610 2246 1756
2612 2609 2247
2614 2613 2611
2616 2615 2239
2618 2616 2231
2620 2618 2223
2622 2620 2215
2624 2622 2207
2626 2624 2199
2628 2626 2191
2630 2628 2183
2632 2630 2175
2634 2632 2165
2636 2634 2155
2638 2636 2145
2640 2638 2135
2642 2640 2123
2644 2642 2111
2646 2644 2101
2648 2388 2345
2650 2344 1786
2652 2651 2649
2654 2438 2345
2656 2344 1780
2658 2657 2655
2660 2490 2345
2662 2344 1774
2664 2663 2661
2666 2542 2345
2668 2344 1768
2670 2669 2667
2672 2594 2345
2674 2344 1762
2676 2675 2673
2678 2646 2345
2680 2344 1756
2682 2681 2679
2684 1623 55
2686 2684 95
2688 1620 94
2690 2688 2687
2692 2691 2687
2694 2689 1620
2696 2694 2687
2698 2697 2687
2700 2699 2693
2702 2692 1620
2704 2703 2701
2706 1515 73
2708 2706 17
2710 1512 16
2712 2710 2709
2714 2713 2709
2716 2711 1512
2718 2716 2709
2720 2719 2709
2722 2721 2715
2724 2714 1512
2726 2725 2723
2728 2338 2246
2730 2729 2336
2732 2730 2343
2734 2249 2242
2736 2734 2247
2738 2737 2247
2740 2739 2239
2742 2740 2231
2744 2742 2223
2746 2744 2215
2748 2746 2207
2750 2748 2199
2752 2750 2191
2754 2752 2183
2756 2754 2175
2758 2756 2165
2760 2758 2155
2762 2760 2145
2764 2762 2135
2766 2764 2123
2768 2766 2111
2770 2768 2101
2772 2770 2733
2774 2732 2242
2776 2775 2773
2778 105 48
2780 2778 59
2782 2780 53
2784 2782 543
2786 540 39
2788 2787 2785
2790 2783 540
2792 2791 2783
2794 540 38
2796 2793 543
2798 2794 540
2800 2799 2797
2802 2801 2789
2804 2788 540
2806 2805 2803
2808 1527 75
2810 2808 19
2812 1524 18
2814 2812 2811
2816 2815 2811
2818 2813 1524
2820 2818 2811
2822 2821 2811
2824 2823 2817
2826 2816 1524
2828 2827 2825
2830 1539 77
2832 2830 21
2834 1536 20
2836 2834 2833
2838 2837 2833
2840 2835 1536
2842 2840 2833
2844 2843 2833
2846 2845 2839
2848 2838 1536
2850 2849 2847
2852 1551 79
2854 2852 23
2856 1548 22
2858 2856 2855
2860 2859 2855
2862 2857 1548
2864 2862 2855
2866 2865 2855
2868 2867 2861
2870 2860 1548
2872 2871 2869
2874 1563 81
2876 2874 25
2878 1560 24
2880 2878 2877
2882 2881 2877
2884 2879 1560
2886 2884 2877
2888 2887 2877
2890 2889 2883
2892 2882 1560
2894 2893 2891
2896 1575 85
2898 2896 27
2900 1572 26
2902 2900 2899
2904 2903 2899
2906 2901 1572
2908 2906 2899
2910 2909 2899
2912 2911 2905
2914 2904 1572
2916 2915 2913
2918 1587 89
2920 2918 29
2922 1584 28
2924 2922 2921
2926 2925 2921
2928 2923 1584
2930 2928 2921
2932 2931 2921
2934 2933 2927
2936 2926 1584
2938 2937 2935
2940 1599 93
2942 2940 31
2944 1596 30
2946 2944 2943
2948 2947 2943
2950 2945 1596
2952 2950 2943
2954 2953 2943
2956 2955 2949
2958 2948 1596
2960 2959 2957
2962 1611 97
2964 2962 33
2966 1608 32
2968 2966 2965
2970 2969 2965
2972 2967 1608
2974 2972 2965
2976 2975 2965
2978 2977 2971
2980 2970 1608
2982 2981 2979
2984 2239 2068
2986 2984 2231
2988 2987 2231
2990 2989 2223
2992 2990 2215
2994 2993 2215
2996 2995 2207
2998 2996 2199
3000 2999 2199
3002 3001 2191
3004 3002 2183
3006 3005 2183
3008 3007 2175
3010 3008 2165
3012 3011 2165
3014 3013 2155
3016 3014 2145
3018 3017 2145
3020 3019 2135
3022 3020 2123
3024 3023 2123
3026 3025 2111
3028 3026 2101
3030 3029 2101
3032 2239 2074
3034 3032 2231
3036 3035 2231
3038 3037 2223
3040 3039 2223
3042 3041 2215
3044 3042 2207
3046 3044 2199
3048 3047 2199
3050 3049 2191
3052 3051 2191
3054 3053 2183
3056 3054 2175
3058 3056 2165
3060 3059 2165
3062 3061 2155
3064 3063 2155
3066 3065 2145
3068 3066 2135
3070 3068 2123
3072 3071 2123
3074 3073 2111
3076 3075 2111
3078 3077 2101
3080 2239 2080
3082 3080 2231
3084 3083 2231
3086 3085 2223
3088 3087 2223
3090 3089 2215
3092 3091 2215
3094 3093 2207
3096 3095 2207
3098 3097 2199
3100 3098 2191
3102 3100 2183
3104 3102 2175
3106 3104 2165
3108 3107 2165
3110 3109 2155
3112 3111 2155
3114 3113 2145
3116 3115 2145
3118 3117 2135
3120 3119 2135
3122 3121 2123
3124 3122 2111
3126 3124 2101
3128 2239 2086
3130 3128 2231
3132 3131 2231
3134 3133 2223
3136 3135 2223
3138 3137 2215
3140 3139 2215
3142 3141 2207
3144 3143 2207
3146 3145 2199
3148 3147 2199
3150 3149 2191
3152 3151 2191
3154 3153 2183
3156 3155 2183
3158 3157 2175
3160 3159 2175
3162 3161 2165
3164 3162 2155
3166 3164 2145
3168 3166 2135
3170 3168 2123
3172 3170 2111
3174 3172 2101
3176 2239 2090
3178 3176 2231
3180 3178 2223
3182 3180 2215
3184 3182 2207
3186 3184 2199
3188 3186 2191
3190 3188 2183
3192 3190 2175
3194 3192 2165
3196 3194 2155
3198 3196 2145
3200 3198 2135
3202 3200 2123
3204 3202 2111
3206 3204 2101
3208 3031 2337
3210 2336 2068
3212 3211 3209
3214 3078 2337
3216 2336 2074
3218 3217 3215
3220 3126 2337
3222 2336 2080
3224 3223 3221
3226 3174 2337
3228 2336 2086
3230 3229 3227
3232 3206 2337
3234 2336 2090
3236 3235 3233
i0 i_hlock5
i1 i_hlock6
i2 i_hlock7
i3 i_hlock8
i4 i_hlock9
i5 controllable_locked
i6 i_hbusreq0
i7 i_hbusreq1
i8 i_hbusreq2
i9 i_hbusreq3
i10 i_hbusreq4
i11 i_hbusreq5
i12 i_hbusreq6
i13 i_hbusreq7
i14 i_hbusreq8
i15 i_hbusreq9
i16 controllable_ndecide
i17 i_hready
i18 controllable_busreq
i19 i_hlock13
i20 i_hlock12
i21 i_hlock11
i22 i_hlock10
i23 controllable_hmastlock
i24 controllable_nhgrant0
i25 i_hburst1
i26 controllable_hgrant10
i27 controllable_hmaster3
i28 i_hburst0
i29 controllable_hgrant11
i30 controllable_hmaster2
i31 controllable_hgrant12
i32 controllable_hmaster1
i33 controllable_hgrant13
i34 controllable_hmaster0
i35 controllable_hgrant1
i36 controllable_hgrant2
i37 controllable_hgrant3
i38 controllable_hgrant4
i39 controllable_hgrant5
i40 i_hbusreq13
i41 controllable_hgrant6
i42 i_hbusreq12
i43 controllable_hgrant7
i44 i_hbusreq11
i45 controllable_hgrant8
i46 i_hbusreq10
i47 controllable_hgrant9
i48 i_hlock0
i49 i_hlock1
i50 i_hlock2
i51 controllable_nstart
i52 i_hlock3
i53 i_hlock4
l0 n111
l1 reg_controllable_hgrant13_out
l2 reg_i_hbusreq2_out
l3 reg_controllable_hgrant8_out
l4 reg_i_hbusreq11_out
l5 reg_controllable_hgrant12_out
l6 reg_i_hbusreq3_out
l7 reg_controllable_hgrant9_out
l8 reg_i_hbusreq12_out
l9 reg_controllable_hgrant11_out
l10 reg_i_hbusreq4_out
l11 reg_i_hbusreq13_out
l12 reg_controllable_hgrant10_out
l13 reg_i_hbusreq5_out
l14 reg_i_hbusreq6_out
l15 reg_controllable_nstart_out
l16 reg_i_hbusreq7_out
l17 reg_i_hbusreq8_out
l18 reg_i_hbusreq9_out
l19 reg_stateG3_0_out
l20 reg_stateG10_13_out
l21 reg_stateG3_1_out
l22 reg_stateG10_12_out
l23 reg_stateG3_2_out
l24 reg_i_hlock9_out
l25 reg_controllable_hmastlock_out
l26 reg_stateA1_out
l27 reg_stateG10_11_out
l28 reg_i_hlock8_out
l29 fair_cnt<0>_out
l30 fair_cnt<1>_out
l31 fair_cnt<2>_out
l32 fair_cnt<3>_out
l33 fair_cnt<4>_out
l34 fair_cnt<5>_out
l35 reg_stateG10_10_out
l36 reg_i_hlock7_out
l37 reg_controllable_hmaster0_out
l38 reg_stateG10_1_out
l39 reg_i_hlock6_out
l40 next_env_fair_out
l41 reg_controllable_hmaster1_out
l42 reg_stateG2_out
l43 reg_stateG10_2_out
l44 reg_i_hlock5_out
l45 reg_controllable_hmaster2_out
l46 reg_stateG10_3_out
l47 reg_i_hlock4_out
l48 reg_controllable_hmaster3_out
l49 reg_stateG10_4_out
l50 reg_i_hready_out
l51 reg_i_hlock3_out
l52 reg_i_hlock10_out
l53 reg_controllable_ndecide_out
l54 reg_controllable_busreq_out
l55 reg_stateG10_5_out
l56 reg_controllable_hgrant1_out
l57 reg_i_hlock2_out
l58 reg_i_hlock11_out
l59 reg_stateG10_6_out
l60 reg_i_hlock1_out
l61 reg_i_hlock12_out
l62 reg_controllable_hgrant2_out
l63 reg_stateG10_7_out
l64 reg_i_hlock0_out
l65 reg_i_hlock13_out
l66 reg_controllable_nhgrant0_out
l67 reg_controllable_hgrant3_out
l68 reg_stateG10_8_out
l69 env_safe_err_happened_out
l70 reg_controllable_hgrant4_out
l71 reg_stateG10_9_out
l72 reg_controllable_hgrant5_out
l73 reg_i_hbusreq0_out
l74 reg_controllable_hgrant6_out
l75 next_sys_fair<0>_out
l76 next_sys_fair<1>_out
l77 next_sys_fair<2>_out
l78 next_sys_fair<3>_out
l79 next_sys_fair<4>_out
l80 reg_i_hbusreq1_out
l81 reg_controllable_hgrant7_out
l82 reg_controllable_locked_out
l83 reg_i_hbusreq10_out
o0 o_err
c
amba_14_new_50
This file was written by ABC on Tue May  5 17:01:49 2015
For information about AIGER format, refer to http://fmv.jku.at/aiger
-------------------------------
This AIGER file has been created by the following sequence of commands:
> vl2mv amba14c50.v   ---gives--> amba14c50.mv
> abc -c "read_blif_mv amba14c50.mv; write_aiger -s amba14c50n.aig"   ---gives--> amba14c50n.aig
> aigtoaig amba14c50n.aig amba14c50n.aag   ---gives--> amba14c50n.aag (this file)
Content of amba14c50.v:
module amba_14_new_50(
        o_err,
        i_clk,
        i_hready,
        i_hbusreq0,
        i_hlock0,
        i_hbusreq1,
        i_hlock1,
        i_hbusreq2,
        i_hlock2,
        i_hbusreq3,
        i_hlock3,
        i_hbusreq4,
        i_hlock4,
        i_hbusreq5,
        i_hlock5,
        i_hbusreq6,
        i_hlock6,
        i_hbusreq7,
        i_hlock7,
        i_hbusreq8,
        i_hlock8,
        i_hbusreq9,
        i_hlock9,
        i_hbusreq10,
        i_hlock10,
        i_hbusreq11,
        i_hlock11,
        i_hbusreq12,
        i_hlock12,
        i_hbusreq13,
        i_hlock13,
        i_hburst0,
        i_hburst1,
        controllable_hmaster0,
        controllable_hmaster1,
        controllable_hmaster2,
        controllable_hmaster3,
        controllable_hmastlock,
        controllable_nstart,
        controllable_ndecide,
        controllable_locked,
        controllable_nhgrant0,
        controllable_hgrant1,
        controllable_hgrant2,
        controllable_hgrant3,
        controllable_hgrant4,
        controllable_hgrant5,
        controllable_hgrant6,
        controllable_hgrant7,
        controllable_hgrant8,
        controllable_hgrant9,
        controllable_hgrant10,
        controllable_hgrant11,
        controllable_hgrant12,
        controllable_hgrant13,
        controllable_busreq);

input i_clk;
input i_hready;
input i_hbusreq0;
input i_hlock0;
input i_hbusreq1;
input i_hlock1;
input i_hbusreq2;
input i_hlock2;
input i_hbusreq3;
input i_hlock3;
input i_hbusreq4;
input i_hlock4;
input i_hbusreq5;
input i_hlock5;
input i_hbusreq6;
input i_hlock6;
input i_hbusreq7;
input i_hlock7;
input i_hbusreq8;
input i_hlock8;
input i_hbusreq9;
input i_hlock9;
input i_hbusreq10;
input i_hlock10;
input i_hbusreq11;
input i_hlock11;
input i_hbusreq12;
input i_hlock12;
input i_hbusreq13;
input i_hlock13;
input i_hburst0;
input i_hburst1;
input controllable_hmaster0;
input controllable_hmaster1;
input controllable_hmaster2;
input controllable_hmaster3;
input controllable_hmastlock;
input controllable_nstart;
input controllable_ndecide;
input controllable_locked;
input controllable_nhgrant0;
input controllable_hgrant1;
input controllable_hgrant2;
input controllable_hgrant3;
input controllable_hgrant4;
input controllable_hgrant5;
input controllable_hgrant6;
input controllable_hgrant7;
input controllable_hgrant8;
input controllable_hgrant9;
input controllable_hgrant10;
input controllable_hgrant11;
input controllable_hgrant12;
input controllable_hgrant13;
input controllable_busreq;
output o_err;

reg reg_i_hready;
reg reg_i_hbusreq0;
reg reg_i_hlock0;
reg reg_i_hbusreq1;
reg reg_i_hlock1;
reg reg_i_hbusreq2;
reg reg_i_hlock2;
reg reg_i_hbusreq3;
reg reg_i_hlock3;
reg reg_i_hbusreq4;
reg reg_i_hlock4;
reg reg_i_hbusreq5;
reg reg_i_hlock5;
reg reg_i_hbusreq6;
reg reg_i_hlock6;
reg reg_i_hbusreq7;
reg reg_i_hlock7;
reg reg_i_hbusreq8;
reg reg_i_hlock8;
reg reg_i_hbusreq9;
reg reg_i_hlock9;
reg reg_i_hbusreq10;
reg reg_i_hlock10;
reg reg_i_hbusreq11;
reg reg_i_hlock11;
reg reg_i_hbusreq12;
reg reg_i_hlock12;
reg reg_i_hbusreq13;
reg reg_i_hlock13;
reg reg_controllable_hmaster0;
reg reg_controllable_hmaster1;
reg reg_controllable_hmaster2;
reg reg_controllable_hmaster3;
reg reg_controllable_hmastlock;
reg reg_controllable_nstart;
reg reg_controllable_ndecide;
reg reg_controllable_locked;
reg reg_controllable_nhgrant0;
reg reg_controllable_hgrant1;
reg reg_controllable_hgrant2;
reg reg_controllable_hgrant3;
reg reg_controllable_hgrant4;
reg reg_controllable_hgrant5;
reg reg_controllable_hgrant6;
reg reg_controllable_hgrant7;
reg reg_controllable_hgrant8;
reg reg_controllable_hgrant9;
reg reg_controllable_hgrant10;
reg reg_controllable_hgrant11;
reg reg_controllable_hgrant12;
reg reg_controllable_hgrant13;
reg reg_controllable_busreq;
reg reg_stateA1;
reg reg_stateG2;
reg reg_stateG3_0;
reg reg_stateG3_1;
reg reg_stateG3_2;
reg reg_stateG10_1;
reg reg_stateG10_2;
reg reg_stateG10_3;
reg reg_stateG10_4;
reg reg_stateG10_5;
reg reg_stateG10_6;
reg reg_stateG10_7;
reg reg_stateG10_8;
reg reg_stateG10_9;
reg reg_stateG10_10;
reg reg_stateG10_11;
reg reg_stateG10_12;
reg reg_stateG10_13;
reg env_safe_err_happened;
reg next_env_fair;
reg [5:0] fair_cnt;
reg [4:0] next_sys_fair;

wire env_safe_err0;
wire env_safe_err1;
wire env_safe_err2;
wire env_safe_err3;
wire env_safe_err4;
wire env_safe_err5;
wire env_safe_err6;
wire env_safe_err7;
wire env_safe_err8;
wire env_safe_err9;
wire env_safe_err10;
wire env_safe_err11;
wire env_safe_err12;
wire env_safe_err13;
wire env_safe_err;

wire sys_safe_err0;
wire sys_safe_err1;
wire sys_safe_err2;
wire sys_safe_err3;
wire sys_safe_err4;
wire sys_safe_err5;
wire sys_safe_err6;
wire sys_safe_err7;
wire sys_safe_err8;
wire sys_safe_err9;
wire sys_safe_err10;
wire sys_safe_err11;
wire sys_safe_err12;
wire sys_safe_err13;
wire sys_safe_err14;
wire sys_safe_err15;
wire sys_safe_err16;
wire sys_safe_err17;
wire sys_safe_err18;
wire sys_safe_err19;
wire sys_safe_err20;
wire sys_safe_err21;
wire sys_safe_err22;
wire sys_safe_err23;
wire sys_safe_err24;
wire sys_safe_err25;
wire sys_safe_err26;
wire sys_safe_err27;
wire sys_safe_err28;
wire sys_safe_err29;
wire sys_safe_err30;
wire sys_safe_err31;
wire sys_safe_err32;
wire sys_safe_err33;
wire sys_safe_err34;
wire sys_safe_err35;
wire sys_safe_err36;
wire sys_safe_err37;
wire sys_safe_err38;
wire sys_safe_err39;
wire sys_safe_err40;
wire sys_safe_err41;
wire sys_safe_err42;
wire sys_safe_err43;
wire sys_safe_err44;
wire sys_safe_err45;
wire sys_safe_err46;
wire sys_safe_err47;
wire sys_safe_err48;
wire sys_safe_err49;
wire sys_safe_err50;
wire sys_safe_err51;
wire sys_safe_err52;
wire sys_safe_err53;
wire sys_safe_err54;
wire sys_safe_err55;
wire sys_safe_err56;
wire sys_safe_err57;
wire sys_safe_err58;
wire sys_safe_err59;
wire sys_safe_err60;
wire sys_safe_err61;
wire sys_safe_err62;
wire sys_safe_err63;
wire sys_safe_err64;
wire sys_safe_err65;
wire sys_safe_err66;
wire sys_safe_err67;
wire sys_safe_err68;
wire sys_safe_err69;
wire sys_safe_err70;
wire sys_safe_err71;
wire sys_safe_err72;
wire sys_safe_err73;
wire sys_safe_err74;
wire sys_safe_err75;
wire sys_safe_err76;
wire sys_safe_err77;
wire sys_safe_err78;
wire sys_safe_err79;
wire sys_safe_err80;
wire sys_safe_err81;
wire sys_safe_err82;
wire sys_safe_err83;
wire sys_safe_err84;
wire sys_safe_err85;
wire sys_safe_err86;
wire sys_safe_err87;
wire sys_safe_err88;
wire sys_safe_err89;
wire sys_safe_err90;
wire sys_safe_err91;
wire sys_safe_err92;
wire sys_safe_err93;
wire sys_safe_err94;
wire sys_safe_err95;
wire sys_safe_err96;
wire sys_safe_err97;
wire sys_safe_err98;
wire sys_safe_err99;
wire sys_safe_err100;
wire sys_safe_err101;
wire sys_safe_err102;
wire sys_safe_err103;
wire sys_safe_err;

wire env_fair0;
wire env_fair1;

wire sys_fair0;
wire sys_fair1;
wire sys_fair2;
wire sys_fair3;
wire sys_fair4;
wire sys_fair5;
wire sys_fair6;
wire sys_fair7;
wire sys_fair8;
wire sys_fair9;
wire sys_fair10;
wire sys_fair11;
wire sys_fair12;
wire sys_fair13;
wire sys_fair14;
wire sys_fair15;
wire fair_err;
wire o_err;

// =============================================================
//                        ENV_TRANSITION:
// =============================================================
// Assumption 3:
// G( hlock0=1 -> hbusreq0=1 );
assign env_safe_err0 =  ~(~ i_hlock0 | i_hbusreq0);

// Assumption 3:
// G( hlock1=1 -> hbusreq1=1 );
assign env_safe_err1 =  ~(~ i_hlock1 | i_hbusreq1);

// Assumption 3:
// G( hlock2=1 -> hbusreq2=1 );
assign env_safe_err2 =  ~(~ i_hlock2 | i_hbusreq2);

// Assumption 3:
// G( hlock3=1 -> hbusreq3=1 );
assign env_safe_err3 =  ~(~ i_hlock3 | i_hbusreq3);

// Assumption 3:
// G( hlock4=1 -> hbusreq4=1 );
assign env_safe_err4 =  ~(~ i_hlock4 | i_hbusreq4);

// Assumption 3:
// G( hlock5=1 -> hbusreq5=1 );
assign env_safe_err5 =  ~(~ i_hlock5 | i_hbusreq5);

// Assumption 3:
// G( hlock6=1 -> hbusreq6=1 );
assign env_safe_err6 =  ~(~ i_hlock6 | i_hbusreq6);

// Assumption 3:
// G( hlock7=1 -> hbusreq7=1 );
assign env_safe_err7 =  ~(~ i_hlock7 | i_hbusreq7);

// Assumption 3:
// G( hlock8=1 -> hbusreq8=1 );
assign env_safe_err8 =  ~(~ i_hlock8 | i_hbusreq8);

// Assumption 3:
// G( hlock9=1 -> hbusreq9=1 );
assign env_safe_err9 =  ~(~ i_hlock9 | i_hbusreq9);

// Assumption 3:
// G( hlock10=1 -> hbusreq10=1 );
assign env_safe_err10 =  ~(~ i_hlock10 | i_hbusreq10);

// Assumption 3:
// G( hlock11=1 -> hbusreq11=1 );
assign env_safe_err11 =  ~(~ i_hlock11 | i_hbusreq11);

// Assumption 3:
// G( hlock12=1 -> hbusreq12=1 );
assign env_safe_err12 =  ~(~ i_hlock12 | i_hbusreq12);

// Assumption 3:
// G( hlock13=1 -> hbusreq13=1 );
assign env_safe_err13 =  ~(~ i_hlock13 | i_hbusreq13);

// collecting together the safety error bits:
assign env_safe_err = env_safe_err0 |
                      env_safe_err1 |
                      env_safe_err2 |
                      env_safe_err3 |
                      env_safe_err4 |
                      env_safe_err5 |
                      env_safe_err6 |
                      env_safe_err7 |
                      env_safe_err8 |
                      env_safe_err9 |
                      env_safe_err10 |
                      env_safe_err11 |
                      env_safe_err12 |
                      env_safe_err13;

// =============================================================
//                        SYS_TRANSITION:
// =============================================================
// G((hmaster0=0) * (hmaster1=0) * (hmaster2=0) * (hmaster3=0) -> (hbusreq0=0 <-> busreq=0));
assign sys_safe_err0 =  ~( ~( ~(controllable_hmaster0) & ~(controllable_hmaster1) & ~(controllable_hmaster2) & ~(controllable_hmaster3) )|(~i_hbusreq0 ^~ (~controllable_busreq)));

// G((hmaster0=1) * (hmaster1=0) * (hmaster2=0) * (hmaster3=0) -> (hbusreq1=0 <-> busreq=0));
assign sys_safe_err1 =  ~( ~( controllable_hmaster0 & ~(controllable_hmaster1) & ~(controllable_hmaster2) & ~(controllable_hmaster3) )|(~i_hbusreq1 ^~ (~controllable_busreq)));

// G((hmaster0=0) * (hmaster1=1) * (hmaster2=0) * (hmaster3=0) -> (hbusreq2=0 <-> busreq=0));
assign sys_safe_err2 =  ~( ~( ~(controllable_hmaster0) & controllable_hmaster1 & ~(controllable_hmaster2) & ~(controllable_hmaster3) )|(~i_hbusreq2 ^~ (~controllable_busreq)));

// G((hmaster0=1) * (hmaster1=1) * (hmaster2=0) * (hmaster3=0) -> (hbusreq3=0 <-> busreq=0));
assign sys_safe_err3 =  ~( ~( controllable_hmaster0 & controllable_hmaster1 & ~(controllable_hmaster2) & ~(controllable_hmaster3) )|(~i_hbusreq3 ^~ (~controllable_busreq)));

// G((hmaster0=0) * (hmaster1=0) * (hmaster2=1) * (hmaster3=0) -> (hbusreq4=0 <-> busreq=0));
assign sys_safe_err4 =  ~( ~( ~(controllable_hmaster0) & ~(controllable_hmaster1) & controllable_hmaster2 & ~(controllable_hmaster3) )|(~i_hbusreq4 ^~ (~controllable_busreq)));

// G((hmaster0=1) * (hmaster1=0) * (hmaster2=1) * (hmaster3=0) -> (hbusreq5=0 <-> busreq=0));
assign sys_safe_err5 =  ~( ~( controllable_hmaster0 & ~(controllable_hmaster1) & controllable_hmaster2 & ~(controllable_hmaster3) )|(~i_hbusreq5 ^~ (~controllable_busreq)));

// G((hmaster0=0) * (hmaster1=1) * (hmaster2=1) * (hmaster3=0) -> (hbusreq6=0 <-> busreq=0));
assign sys_safe_err6 =  ~( ~( ~(controllable_hmaster0) & controllable_hmaster1 & controllable_hmaster2 & ~(controllable_hmaster3) )|(~i_hbusreq6 ^~ (~controllable_busreq)));

// G((hmaster0=1) * (hmaster1=1) * (hmaster2=1) * (hmaster3=0) -> (hbusreq7=0 <-> busreq=0));
assign sys_safe_err7 =  ~( ~( controllable_hmaster0 & controllable_hmaster1 & controllable_hmaster2 & ~(controllable_hmaster3) )|(~i_hbusreq7 ^~ (~controllable_busreq)));

// G((hmaster0=0) * (hmaster1=0) * (hmaster2=0) * (hmaster3=1) -> (hbusreq8=0 <-> busreq=0));
assign sys_safe_err8 =  ~( ~( ~(controllable_hmaster0) & ~(controllable_hmaster1) & ~(controllable_hmaster2) & controllable_hmaster3 )|(~i_hbusreq8 ^~ (~controllable_busreq)));

// G((hmaster0=1) * (hmaster1=0) * (hmaster2=0) * (hmaster3=1) -> (hbusreq9=0 <-> busreq=0));
assign sys_safe_err9 =  ~( ~( controllable_hmaster0 & ~(controllable_hmaster1) & ~(controllable_hmaster2) & controllable_hmaster3 )|(~i_hbusreq9 ^~ (~controllable_busreq)));

// G((hmaster0=0) * (hmaster1=1) * (hmaster2=0) * (hmaster3=1) -> (hbusreq10=0 <-> busreq=0));
assign sys_safe_err10 =  ~( ~( ~(controllable_hmaster0) & controllable_hmaster1 & ~(controllable_hmaster2) & controllable_hmaster3 )|(~i_hbusreq10 ^~ (~controllable_busreq)));

// G((hmaster0=1) * (hmaster1=1) * (hmaster2=0) * (hmaster3=1) -> (hbusreq11=0 <-> busreq=0));
assign sys_safe_err11 =  ~( ~( controllable_hmaster0 & controllable_hmaster1 & ~(controllable_hmaster2) & controllable_hmaster3 )|(~i_hbusreq11 ^~ (~controllable_busreq)));

// G((hmaster0=0) * (hmaster1=0) * (hmaster2=1) * (hmaster3=1) -> (hbusreq12=0 <-> busreq=0));
assign sys_safe_err12 =  ~( ~( ~(controllable_hmaster0) & ~(controllable_hmaster1) & controllable_hmaster2 & controllable_hmaster3 )|(~i_hbusreq12 ^~ (~controllable_busreq)));

// G((hmaster0=1) * (hmaster1=0) * (hmaster2=1) * (hmaster3=1) -> (hbusreq13=0 <-> busreq=0));
assign sys_safe_err13 =  ~( ~( controllable_hmaster0 & ~(controllable_hmaster1) & controllable_hmaster2 & controllable_hmaster3 )|(~i_hbusreq13 ^~ (~controllable_busreq)));

// Guarantee 1:
// G((hready=0) -> X(start=0));
assign sys_safe_err14 =  ~( reg_i_hready | controllable_nstart );

// G(((stateG2=1) * (start=1)) -> FALSE;
assign sys_safe_err15 =  ~( ~(reg_stateG2 & ~controllable_nstart) | 0 );

// G(((stateG3_0=1) * (stateG3_1=0) * (stateG3_2=0) * ((start=1))) -> FALSE);
// G(((stateG3_0=0) * (stateG3_1=1) * (stateG3_2=0) * ((start=1))) -> FALSE);
// G(((stateG3_0=1) * (stateG3_1=1) * (stateG3_2=0) * ((start=1))) -> FALSE);
// G(((stateG3_0=0) * (stateG3_1=0) * (stateG3_2=1) * ((start=1))) -> FALSE);
// all these rules can be summarized as: only in state 000, start=1 is allowed:
assign sys_safe_err16 =  (reg_stateG3_0 | reg_stateG3_1 | reg_stateG3_2) & ~controllable_nstart;

// G( (hready=1) -> (   (hgrant0=1) <-> (X(hmaster0=0) * X(hmaster1=0) * X(hmaster2=0) * X(hmaster3=0))  ) );
assign sys_safe_err17 =  ~( ~(reg_i_hready) | ( ~reg_controllable_nhgrant0 ^~ ( ~(controllable_hmaster0) & ~(controllable_hmaster1) & ~(controllable_hmaster2) & ~(controllable_hmaster3) ) ) );

// G( (hready=1) -> (   (hgrant1=1) <-> (X(hmaster0=1) * X(hmaster1=0) * X(hmaster2=0) * X(hmaster3=0))  ) );
assign sys_safe_err18 =  ~( ~(reg_i_hready) | ( reg_controllable_hgrant1 ^~ ( controllable_hmaster0 & ~(controllable_hmaster1) & ~(controllable_hmaster2) & ~(controllable_hmaster3) ) ) );

// G( (hready=1) -> (   (hgrant2=1) <-> (X(hmaster0=0) * X(hmaster1=1) * X(hmaster2=0) * X(hmaster3=0))  ) );
assign sys_safe_err19 =  ~( ~(reg_i_hready) | ( reg_controllable_hgrant2 ^~ ( ~(controllable_hmaster0) & controllable_hmaster1 & ~(controllable_hmaster2) & ~(controllable_hmaster3) ) ) );

// G( (hready=1) -> (   (hgrant3=1) <-> (X(hmaster0=1) * X(hmaster1=1) * X(hmaster2=0) * X(hmaster3=0))  ) );
assign sys_safe_err20 =  ~( ~(reg_i_hready) | ( reg_controllable_hgrant3 ^~ ( controllable_hmaster0 & controllable_hmaster1 & ~(controllable_hmaster2) & ~(controllable_hmaster3) ) ) );

// G( (hready=1) -> (   (hgrant4=1) <-> (X(hmaster0=0) * X(hmaster1=0) * X(hmaster2=1) * X(hmaster3=0))  ) );
assign sys_safe_err21 =  ~( ~(reg_i_hready) | ( reg_controllable_hgrant4 ^~ ( ~(controllable_hmaster0) & ~(controllable_hmaster1) & controllable_hmaster2 & ~(controllable_hmaster3) ) ) );

// G( (hready=1) -> (   (hgrant5=1) <-> (X(hmaster0=1) * X(hmaster1=0) * X(hmaster2=1) * X(hmaster3=0))  ) );
assign sys_safe_err22 =  ~( ~(reg_i_hready) | ( reg_controllable_hgrant5 ^~ ( controllable_hmaster0 & ~(controllable_hmaster1) & controllable_hmaster2 & ~(controllable_hmaster3) ) ) );

// G( (hready=1) -> (   (hgrant6=1) <-> (X(hmaster0=0) * X(hmaster1=1) * X(hmaster2=1) * X(hmaster3=0))  ) );
assign sys_safe_err23 =  ~( ~(reg_i_hready) | ( reg_controllable_hgrant6 ^~ ( ~(controllable_hmaster0) & controllable_hmaster1 & controllable_hmaster2 & ~(controllable_hmaster3) ) ) );

// G( (hready=1) -> (   (hgrant7=1) <-> (X(hmaster0=1) * X(hmaster1=1) * X(hmaster2=1) * X(hmaster3=0))  ) );
assign sys_safe_err24 =  ~( ~(reg_i_hready) | ( reg_controllable_hgrant7 ^~ ( controllable_hmaster0 & controllable_hmaster1 & controllable_hmaster2 & ~(controllable_hmaster3) ) ) );

// G( (hready=1) -> (   (hgrant8=1) <-> (X(hmaster0=0) * X(hmaster1=0) * X(hmaster2=0) * X(hmaster3=1))  ) );
assign sys_safe_err25 =  ~( ~(reg_i_hready) | ( reg_controllable_hgrant8 ^~ ( ~(controllable_hmaster0) & ~(controllable_hmaster1) & ~(controllable_hmaster2) & controllable_hmaster3 ) ) );

// G( (hready=1) -> (   (hgrant9=1) <-> (X(hmaster0=1) * X(hmaster1=0) * X(hmaster2=0) * X(hmaster3=1))  ) );
assign sys_safe_err26 =  ~( ~(reg_i_hready) | ( reg_controllable_hgrant9 ^~ ( controllable_hmaster0 & ~(controllable_hmaster1) & ~(controllable_hmaster2) & controllable_hmaster3 ) ) );

// G( (hready=1) -> (   (hgrant10=1) <-> (X(hmaster0=0) * X(hmaster1=1) * X(hmaster2=0) * X(hmaster3=1))  ) );
assign sys_safe_err27 =  ~( ~(reg_i_hready) | ( reg_controllable_hgrant10 ^~ ( ~(controllable_hmaster0) & controllable_hmaster1 & ~(controllable_hmaster2) & controllable_hmaster3 ) ) );

// G( (hready=1) -> (   (hgrant11=1) <-> (X(hmaster0=1) * X(hmaster1=1) * X(hmaster2=0) * X(hmaster3=1))  ) );
assign sys_safe_err28 =  ~( ~(reg_i_hready) | ( reg_controllable_hgrant11 ^~ ( controllable_hmaster0 & controllable_hmaster1 & ~(controllable_hmaster2) & controllable_hmaster3 ) ) );

// G( (hready=1) -> (   (hgrant12=1) <-> (X(hmaster0=0) * X(hmaster1=0) * X(hmaster2=1) * X(hmaster3=1))  ) );
assign sys_safe_err29 =  ~( ~(reg_i_hready) | ( reg_controllable_hgrant12 ^~ ( ~(controllable_hmaster0) & ~(controllable_hmaster1) & controllable_hmaster2 & controllable_hmaster3 ) ) );

// G( (hready=1) -> (   (hgrant13=1) <-> (X(hmaster0=1) * X(hmaster1=0) * X(hmaster2=1) * X(hmaster3=1))  ) );
assign sys_safe_err30 =  ~( ~(reg_i_hready) | ( reg_controllable_hgrant13 ^~ ( controllable_hmaster0 & ~(controllable_hmaster1) & controllable_hmaster2 & controllable_hmaster3 ) ) );

// HMASTLOCK:
// G(  (hready=1) -> (locked=0 <-> X(hmastlock=0) ) );
assign sys_safe_err31 =  ~( ~(reg_i_hready) | (~reg_controllable_locked ^~ ~controllable_hmastlock) );

// Master 0:
// G( X(start=0) -> ( ((hmaster0=0) * (hmaster1=0) * (hmaster2=0) * (hmaster3=0)) <-> (X(hmaster0=0) * X(hmaster1=0) * X(hmaster2=0) * X(hmaster3=0)) ) );
assign sys_safe_err32 =  ~( ~(controllable_nstart) | ( ( ~(reg_controllable_hmaster0) & ~(reg_controllable_hmaster1) & ~(reg_controllable_hmaster2) & ~(reg_controllable_hmaster3) ) ^~ ( ~(controllable_hmaster0) & ~(controllable_hmaster1) & ~(controllable_hmaster2) & ~(controllable_hmaster3) )) );

// Master 1:
// G( X(start=0) -> ( ((hmaster0=1) * (hmaster1=0) * (hmaster2=0) * (hmaster3=0)) <-> (X(hmaster0=1) * X(hmaster1=0) * X(hmaster2=0) * X(hmaster3=0)) ) );
assign sys_safe_err33 =  ~( ~(controllable_nstart) | ( ( reg_controllable_hmaster0 & ~(reg_controllable_hmaster1) & ~(reg_controllable_hmaster2) & ~(reg_controllable_hmaster3) ) ^~ ( controllable_hmaster0 & ~(controllable_hmaster1) & ~(controllable_hmaster2) & ~(controllable_hmaster3) )) );

// Master 2:
// G( X(start=0) -> ( ((hmaster0=0) * (hmaster1=1) * (hmaster2=0) * (hmaster3=0)) <-> (X(hmaster0=0) * X(hmaster1=1) * X(hmaster2=0) * X(hmaster3=0)) ) );
assign sys_safe_err34 =  ~( ~(controllable_nstart) | ( ( ~(reg_controllable_hmaster0) & reg_controllable_hmaster1 & ~(reg_controllable_hmaster2) & ~(reg_controllable_hmaster3) ) ^~ ( ~(controllable_hmaster0) & controllable_hmaster1 & ~(controllable_hmaster2) & ~(controllable_hmaster3) )) );

// Master 3:
// G( X(start=0) -> ( ((hmaster0=1) * (hmaster1=1) * (hmaster2=0) * (hmaster3=0)) <-> (X(hmaster0=1) * X(hmaster1=1) * X(hmaster2=0) * X(hmaster3=0)) ) );
assign sys_safe_err35 =  ~( ~(controllable_nstart) | ( ( reg_controllable_hmaster0 & reg_controllable_hmaster1 & ~(reg_controllable_hmaster2) & ~(reg_controllable_hmaster3) ) ^~ ( controllable_hmaster0 & controllable_hmaster1 & ~(controllable_hmaster2) & ~(controllable_hmaster3) )) );

// Master 4:
// G( X(start=0) -> ( ((hmaster0=0) * (hmaster1=0) * (hmaster2=1) * (hmaster3=0)) <-> (X(hmaster0=0) * X(hmaster1=0) * X(hmaster2=1) * X(hmaster3=0)) ) );
assign sys_safe_err36 =  ~( ~(controllable_nstart) | ( ( ~(reg_controllable_hmaster0) & ~(reg_controllable_hmaster1) & reg_controllable_hmaster2 & ~(reg_controllable_hmaster3) ) ^~ ( ~(controllable_hmaster0) & ~(controllable_hmaster1) & controllable_hmaster2 & ~(controllable_hmaster3) )) );

// Master 5:
// G( X(start=0) -> ( ((hmaster0=1) * (hmaster1=0) * (hmaster2=1) * (hmaster3=0)) <-> (X(hmaster0=1) * X(hmaster1=0) * X(hmaster2=1) * X(hmaster3=0)) ) );
assign sys_safe_err37 =  ~( ~(controllable_nstart) | ( ( reg_controllable_hmaster0 & ~(reg_controllable_hmaster1) & reg_controllable_hmaster2 & ~(reg_controllable_hmaster3) ) ^~ ( controllable_hmaster0 & ~(controllable_hmaster1) & controllable_hmaster2 & ~(controllable_hmaster3) )) );

// Master 6:
// G( X(start=0) -> ( ((hmaster0=0) * (hmaster1=1) * (hmaster2=1) * (hmaster3=0)) <-> (X(hmaster0=0) * X(hmaster1=1) * X(hmaster2=1) * X(hmaster3=0)) ) );
assign sys_safe_err38 =  ~( ~(controllable_nstart) | ( ( ~(reg_controllable_hmaster0) & reg_controllable_hmaster1 & reg_controllable_hmaster2 & ~(reg_controllable_hmaster3) ) ^~ ( ~(controllable_hmaster0) & controllable_hmaster1 & controllable_hmaster2 & ~(controllable_hmaster3) )) );

// Master 7:
// G( X(start=0) -> ( ((hmaster0=1) * (hmaster1=1) * (hmaster2=1) * (hmaster3=0)) <-> (X(hmaster0=1) * X(hmaster1=1) * X(hmaster2=1) * X(hmaster3=0)) ) );
assign sys_safe_err39 =  ~( ~(controllable_nstart) | ( ( reg_controllable_hmaster0 & reg_controllable_hmaster1 & reg_controllable_hmaster2 & ~(reg_controllable_hmaster3) ) ^~ ( controllable_hmaster0 & controllable_hmaster1 & controllable_hmaster2 & ~(controllable_hmaster3) )) );

// Master 8:
// G( X(start=0) -> ( ((hmaster0=0) * (hmaster1=0) * (hmaster2=0) * (hmaster3=1)) <-> (X(hmaster0=0) * X(hmaster1=0) * X(hmaster2=0) * X(hmaster3=1)) ) );
assign sys_safe_err40 =  ~( ~(controllable_nstart) | ( ( ~(reg_controllable_hmaster0) & ~(reg_controllable_hmaster1) & ~(reg_controllable_hmaster2) & reg_controllable_hmaster3 ) ^~ ( ~(controllable_hmaster0) & ~(controllable_hmaster1) & ~(controllable_hmaster2) & controllable_hmaster3 )) );

// Master 9:
// G( X(start=0) -> ( ((hmaster0=1) * (hmaster1=0) * (hmaster2=0) * (hmaster3=1)) <-> (X(hmaster0=1) * X(hmaster1=0) * X(hmaster2=0) * X(hmaster3=1)) ) );
assign sys_safe_err41 =  ~( ~(controllable_nstart) | ( ( reg_controllable_hmaster0 & ~(reg_controllable_hmaster1) & ~(reg_controllable_hmaster2) & reg_controllable_hmaster3 ) ^~ ( controllable_hmaster0 & ~(controllable_hmaster1) & ~(controllable_hmaster2) & controllable_hmaster3 )) );

// Master 10:
// G( X(start=0) -> ( ((hmaster0=0) * (hmaster1=1) * (hmaster2=0) * (hmaster3=1)) <-> (X(hmaster0=0) * X(hmaster1=1) * X(hmaster2=0) * X(hmaster3=1)) ) );
assign sys_safe_err42 =  ~( ~(controllable_nstart) | ( ( ~(reg_controllable_hmaster0) & reg_controllable_hmaster1 & ~(reg_controllable_hmaster2) & reg_controllable_hmaster3 ) ^~ ( ~(controllable_hmaster0) & controllable_hmaster1 & ~(controllable_hmaster2) & controllable_hmaster3 )) );

// Master 11:
// G( X(start=0) -> ( ((hmaster0=1) * (hmaster1=1) * (hmaster2=0) * (hmaster3=1)) <-> (X(hmaster0=1) * X(hmaster1=1) * X(hmaster2=0) * X(hmaster3=1)) ) );
assign sys_safe_err43 =  ~( ~(controllable_nstart) | ( ( reg_controllable_hmaster0 & reg_controllable_hmaster1 & ~(reg_controllable_hmaster2) & reg_controllable_hmaster3 ) ^~ ( controllable_hmaster0 & controllable_hmaster1 & ~(controllable_hmaster2) & controllable_hmaster3 )) );

// Master 12:
// G( X(start=0) -> ( ((hmaster0=0) * (hmaster1=0) * (hmaster2=1) * (hmaster3=1)) <-> (X(hmaster0=0) * X(hmaster1=0) * X(hmaster2=1) * X(hmaster3=1)) ) );
assign sys_safe_err44 =  ~( ~(controllable_nstart) | ( ( ~(reg_controllable_hmaster0) & ~(reg_controllable_hmaster1) & reg_controllable_hmaster2 & reg_controllable_hmaster3 ) ^~ ( ~(controllable_hmaster0) & ~(controllable_hmaster1) & controllable_hmaster2 & controllable_hmaster3 )) );

// Master 13:
// G( X(start=0) -> ( ((hmaster0=1) * (hmaster1=0) * (hmaster2=1) * (hmaster3=1)) <-> (X(hmaster0=1) * X(hmaster1=0) * X(hmaster2=1) * X(hmaster3=1)) ) );
assign sys_safe_err45 =  ~( ~(controllable_nstart) | ( ( reg_controllable_hmaster0 & ~(reg_controllable_hmaster1) & reg_controllable_hmaster2 & reg_controllable_hmaster3 ) ^~ ( controllable_hmaster0 & ~(controllable_hmaster1) & controllable_hmaster2 & controllable_hmaster3 )) );

// Guarantee 6.2:
// G( ((X(start=0))) -> ( (hmastlock=1) <-> X(hmastlock=1)) );
assign sys_safe_err46 =  ~( ~(controllable_nstart) | ( reg_controllable_hmastlock ^~ controllable_hmastlock) );

// G( (decide=1  *  hlock0=1  *  X(hgrant0=1) )->X(locked=1));
assign sys_safe_err47 =  ~( ~(~reg_controllable_ndecide & reg_i_hlock0 & ~controllable_nhgrant0) | (controllable_locked) );

// G((decide=1  *  hlock0=0  *  X(hgrant0=1))->X(locked=0));
assign sys_safe_err48 =  ~( ~(~reg_controllable_ndecide & ~reg_i_hlock0 & ~controllable_nhgrant0) | (~controllable_locked) );

// G( (decide=1  *  hlock1=1  *  X(hgrant1=1) )->X(locked=1));
assign sys_safe_err49 =  ~( ~(~reg_controllable_ndecide & reg_i_hlock1 & controllable_hgrant1) | (controllable_locked) );

// G((decide=1  *  hlock1=0  *  X(hgrant1=1))->X(locked=0));
assign sys_safe_err50 =  ~( ~(~reg_controllable_ndecide & ~reg_i_hlock1 & controllable_hgrant1) | (~controllable_locked) );

// G( (decide=1  *  hlock2=1  *  X(hgrant2=1) )->X(locked=1));
assign sys_safe_err51 =  ~( ~(~reg_controllable_ndecide & reg_i_hlock2 & controllable_hgrant2) | (controllable_locked) );

// G((decide=1  *  hlock2=0  *  X(hgrant2=1))->X(locked=0));
assign sys_safe_err52 =  ~( ~(~reg_controllable_ndecide & ~reg_i_hlock2 & controllable_hgrant2) | (~controllable_locked) );

// G( (decide=1  *  hlock3=1  *  X(hgrant3=1) )->X(locked=1));
assign sys_safe_err53 =  ~( ~(~reg_controllable_ndecide & reg_i_hlock3 & controllable_hgrant3) | (controllable_locked) );

// G((decide=1  *  hlock3=0  *  X(hgrant3=1))->X(locked=0));
assign sys_safe_err54 =  ~( ~(~reg_controllable_ndecide & ~reg_i_hlock3 & controllable_hgrant3) | (~controllable_locked) );

// G( (decide=1  *  hlock4=1  *  X(hgrant4=1) )->X(locked=1));
assign sys_safe_err55 =  ~( ~(~reg_controllable_ndecide & reg_i_hlock4 & controllable_hgrant4) | (controllable_locked) );

// G((decide=1  *  hlock4=0  *  X(hgrant4=1))->X(locked=0));
assign sys_safe_err56 =  ~( ~(~reg_controllable_ndecide & ~reg_i_hlock4 & controllable_hgrant4) | (~controllable_locked) );

// G( (decide=1  *  hlock5=1  *  X(hgrant5=1) )->X(locked=1));
assign sys_safe_err57 =  ~( ~(~reg_controllable_ndecide & reg_i_hlock5 & controllable_hgrant5) | (controllable_locked) );

// G((decide=1  *  hlock5=0  *  X(hgrant5=1))->X(locked=0));
assign sys_safe_err58 =  ~( ~(~reg_controllable_ndecide & ~reg_i_hlock5 & controllable_hgrant5) | (~controllable_locked) );

// G( (decide=1  *  hlock6=1  *  X(hgrant6=1) )->X(locked=1));
assign sys_safe_err59 =  ~( ~(~reg_controllable_ndecide & reg_i_hlock6 & controllable_hgrant6) | (controllable_locked) );

// G((decide=1  *  hlock6=0  *  X(hgrant6=1))->X(locked=0));
assign sys_safe_err60 =  ~( ~(~reg_controllable_ndecide & ~reg_i_hlock6 & controllable_hgrant6) | (~controllable_locked) );

// G( (decide=1  *  hlock7=1  *  X(hgrant7=1) )->X(locked=1));
assign sys_safe_err61 =  ~( ~(~reg_controllable_ndecide & reg_i_hlock7 & controllable_hgrant7) | (controllable_locked) );

// G((decide=1  *  hlock7=0  *  X(hgrant7=1))->X(locked=0));
assign sys_safe_err62 =  ~( ~(~reg_controllable_ndecide & ~reg_i_hlock7 & controllable_hgrant7) | (~controllable_locked) );

// G( (decide=1  *  hlock8=1  *  X(hgrant8=1) )->X(locked=1));
assign sys_safe_err63 =  ~( ~(~reg_controllable_ndecide & reg_i_hlock8 & controllable_hgrant8) | (controllable_locked) );

// G((decide=1  *  hlock8=0  *  X(hgrant8=1))->X(locked=0));
assign sys_safe_err64 =  ~( ~(~reg_controllable_ndecide & ~reg_i_hlock8 & controllable_hgrant8) | (~controllable_locked) );

// G( (decide=1  *  hlock9=1  *  X(hgrant9=1) )->X(locked=1));
assign sys_safe_err65 =  ~( ~(~reg_controllable_ndecide & reg_i_hlock9 & controllable_hgrant9) | (controllable_locked) );

// G((decide=1  *  hlock9=0  *  X(hgrant9=1))->X(locked=0));
assign sys_safe_err66 =  ~( ~(~reg_controllable_ndecide & ~reg_i_hlock9 & controllable_hgrant9) | (~controllable_locked) );

// G( (decide=1  *  hlock10=1  *  X(hgrant10=1) )->X(locked=1));
assign sys_safe_err67 =  ~( ~(~reg_controllable_ndecide & reg_i_hlock10 & controllable_hgrant10) | (controllable_locked) );

// G((decide=1  *  hlock10=0  *  X(hgrant10=1))->X(locked=0));
assign sys_safe_err68 =  ~( ~(~reg_controllable_ndecide & ~reg_i_hlock10 & controllable_hgrant10) | (~controllable_locked) );

// G( (decide=1  *  hlock11=1  *  X(hgrant11=1) )->X(locked=1));
assign sys_safe_err69 =  ~( ~(~reg_controllable_ndecide & reg_i_hlock11 & controllable_hgrant11) | (controllable_locked) );

// G((decide=1  *  hlock11=0  *  X(hgrant11=1))->X(locked=0));
assign sys_safe_err70 =  ~( ~(~reg_controllable_ndecide & ~reg_i_hlock11 & controllable_hgrant11) | (~controllable_locked) );

// G( (decide=1  *  hlock12=1  *  X(hgrant12=1) )->X(locked=1));
assign sys_safe_err71 =  ~( ~(~reg_controllable_ndecide & reg_i_hlock12 & controllable_hgrant12) | (controllable_locked) );

// G((decide=1  *  hlock12=0  *  X(hgrant12=1))->X(locked=0));
assign sys_safe_err72 =  ~( ~(~reg_controllable_ndecide & ~reg_i_hlock12 & controllable_hgrant12) | (~controllable_locked) );

// G( (decide=1  *  hlock13=1  *  X(hgrant13=1) )->X(locked=1));
assign sys_safe_err73 =  ~( ~(~reg_controllable_ndecide & reg_i_hlock13 & controllable_hgrant13) | (controllable_locked) );

// G((decide=1  *  hlock13=0  *  X(hgrant13=1))->X(locked=0));
assign sys_safe_err74 =  ~( ~(~reg_controllable_ndecide & ~reg_i_hlock13 & controllable_hgrant13) | (~controllable_locked) );

// G( (decide=0) -> (  ((hgrant0=0)<->X(hgrant0=0))  ));
assign sys_safe_err75 =  ~( ~(reg_controllable_ndecide) | (reg_controllable_nhgrant0 ^~ controllable_nhgrant0) );

// G( (decide=0) -> (  ((hgrant1=0)<->X(hgrant1=0))  ));
assign sys_safe_err76 =  ~( ~(reg_controllable_ndecide) | (~reg_controllable_hgrant1 ^~ ~controllable_hgrant1) );

// G( (decide=0) -> (  ((hgrant2=0)<->X(hgrant2=0))  ));
assign sys_safe_err77 =  ~( ~(reg_controllable_ndecide) | (~reg_controllable_hgrant2 ^~ ~controllable_hgrant2) );

// G( (decide=0) -> (  ((hgrant3=0)<->X(hgrant3=0))  ));
assign sys_safe_err78 =  ~( ~(reg_controllable_ndecide) | (~reg_controllable_hgrant3 ^~ ~controllable_hgrant3) );

// G( (decide=0) -> (  ((hgrant4=0)<->X(hgrant4=0))  ));
assign sys_safe_err79 =  ~( ~(reg_controllable_ndecide) | (~reg_controllable_hgrant4 ^~ ~controllable_hgrant4) );

// G( (decide=0) -> (  ((hgrant5=0)<->X(hgrant5=0))  ));
assign sys_safe_err80 =  ~( ~(reg_controllable_ndecide) | (~reg_controllable_hgrant5 ^~ ~controllable_hgrant5) );

// G( (decide=0) -> (  ((hgrant6=0)<->X(hgrant6=0))  ));
assign sys_safe_err81 =  ~( ~(reg_controllable_ndecide) | (~reg_controllable_hgrant6 ^~ ~controllable_hgrant6) );

// G( (decide=0) -> (  ((hgrant7=0)<->X(hgrant7=0))  ));
assign sys_safe_err82 =  ~( ~(reg_controllable_ndecide) | (~reg_controllable_hgrant7 ^~ ~controllable_hgrant7) );

// G( (decide=0) -> (  ((hgrant8=0)<->X(hgrant8=0))  ));
assign sys_safe_err83 =  ~( ~(reg_controllable_ndecide) | (~reg_controllable_hgrant8 ^~ ~controllable_hgrant8) );

// G( (decide=0) -> (  ((hgrant9=0)<->X(hgrant9=0))  ));
assign sys_safe_err84 =  ~( ~(reg_controllable_ndecide) | (~reg_controllable_hgrant9 ^~ ~controllable_hgrant9) );

// G( (decide=0) -> (  ((hgrant10=0)<->X(hgrant10=0))  ));
assign sys_safe_err85 =  ~( ~(reg_controllable_ndecide) | (~reg_controllable_hgrant10 ^~ ~controllable_hgrant10) );

// G( (decide=0) -> (  ((hgrant11=0)<->X(hgrant11=0))  ));
assign sys_safe_err86 =  ~( ~(reg_controllable_ndecide) | (~reg_controllable_hgrant11 ^~ ~controllable_hgrant11) );

// G( (decide=0) -> (  ((hgrant12=0)<->X(hgrant12=0))  ));
assign sys_safe_err87 =  ~( ~(reg_controllable_ndecide) | (~reg_controllable_hgrant12 ^~ ~controllable_hgrant12) );

// G( (decide=0) -> (  ((hgrant13=0)<->X(hgrant13=0))  ));
assign sys_safe_err88 =  ~( ~(reg_controllable_ndecide) | (~reg_controllable_hgrant13 ^~ ~controllable_hgrant13) );

// G((decide=0)->(locked=0 <-> X(locked=0)));
assign sys_safe_err89 =  ~( ~(reg_controllable_ndecide) | (~reg_controllable_locked ^~ ~controllable_locked) );

// G(((stateG10_1=1) * (((hgrant1=1)) * (hbusreq1=0)))->FALSE);
assign sys_safe_err90 =  ~( ~(reg_stateG10_1 & (controllable_hgrant1 & ~i_hbusreq1)) | 0 );

// G(((stateG10_2=1) * (((hgrant2=1)) * (hbusreq2=0)))->FALSE);
assign sys_safe_err91 =  ~( ~(reg_stateG10_2 & (controllable_hgrant2 & ~i_hbusreq2)) | 0 );

// G(((stateG10_3=1) * (((hgrant3=1)) * (hbusreq3=0)))->FALSE);
assign sys_safe_err92 =  ~( ~(reg_stateG10_3 & (controllable_hgrant3 & ~i_hbusreq3)) | 0 );

// G(((stateG10_4=1) * (((hgrant4=1)) * (hbusreq4=0)))->FALSE);
assign sys_safe_err93 =  ~( ~(reg_stateG10_4 & (controllable_hgrant4 & ~i_hbusreq4)) | 0 );

// G(((stateG10_5=1) * (((hgrant5=1)) * (hbusreq5=0)))->FALSE);
assign sys_safe_err94 =  ~( ~(reg_stateG10_5 & (controllable_hgrant5 & ~i_hbusreq5)) | 0 );

// G(((stateG10_6=1) * (((hgrant6=1)) * (hbusreq6=0)))->FALSE);
assign sys_safe_err95 =  ~( ~(reg_stateG10_6 & (controllable_hgrant6 & ~i_hbusreq6)) | 0 );

// G(((stateG10_7=1) * (((hgrant7=1)) * (hbusreq7=0)))->FALSE);
assign sys_safe_err96 =  ~( ~(reg_stateG10_7 & (controllable_hgrant7 & ~i_hbusreq7)) | 0 );

// G(((stateG10_8=1) * (((hgrant8=1)) * (hbusreq8=0)))->FALSE);
assign sys_safe_err97 =  ~( ~(reg_stateG10_8 & (controllable_hgrant8 & ~i_hbusreq8)) | 0 );

// G(((stateG10_9=1) * (((hgrant9=1)) * (hbusreq9=0)))->FALSE);
assign sys_safe_err98 =  ~( ~(reg_stateG10_9 & (controllable_hgrant9 & ~i_hbusreq9)) | 0 );

// G(((stateG10_10=1) * (((hgrant10=1)) * (hbusreq10=0)))->FALSE);
assign sys_safe_err99 =  ~( ~(reg_stateG10_10 & (controllable_hgrant10 & ~i_hbusreq10)) | 0 );

// G(((stateG10_11=1) * (((hgrant11=1)) * (hbusreq11=0)))->FALSE);
assign sys_safe_err100 =  ~( ~(reg_stateG10_11 & (controllable_hgrant11 & ~i_hbusreq11)) | 0 );

// G(((stateG10_12=1) * (((hgrant12=1)) * (hbusreq12=0)))->FALSE);
assign sys_safe_err101 =  ~( ~(reg_stateG10_12 & (controllable_hgrant12 & ~i_hbusreq12)) | 0 );

// G(((stateG10_13=1) * (((hgrant13=1)) * (hbusreq13=0)))->FALSE);
assign sys_safe_err102 =  ~( ~(reg_stateG10_13 & (controllable_hgrant13 & ~i_hbusreq13)) | 0 );

// default master
// G((decide=1  *  hbusreq0=0  *  hbusreq1=0  *  hbusreq2=0  *  hbusreq3=0  *  hbusreq4=0  *  hbusreq5=0  *  hbusreq6=0  *  hbusreq7=0  *  hbusreq8=0  *  hbusreq9=0  *  hbusreq10=0  *  hbusreq11=0  *  hbusreq12=0  *  hbusreq13=0) -> X(hgrant0=1));
assign sys_safe_err103 =  ~( ~(~reg_controllable_ndecide & (~reg_i_hbusreq0 & ~reg_i_hbusreq1 & ~reg_i_hbusreq2 & ~reg_i_hbusreq3 & ~reg_i_hbusreq4 & ~reg_i_hbusreq5 & ~reg_i_hbusreq6 & ~reg_i_hbusreq7 & ~reg_i_hbusreq8 & ~reg_i_hbusreq9 & ~reg_i_hbusreq10 & ~reg_i_hbusreq11 & ~reg_i_hbusreq12 & ~reg_i_hbusreq13)) | (~controllable_nhgrant0) );

// collecting together the safety error bits:
assign sys_safe_err = sys_safe_err0 |
                      sys_safe_err1 |
                      sys_safe_err2 |
                      sys_safe_err3 |
                      sys_safe_err4 |
                      sys_safe_err5 |
                      sys_safe_err6 |
                      sys_safe_err7 |
                      sys_safe_err8 |
                      sys_safe_err9 |
                      sys_safe_err10 |
                      sys_safe_err11 |
                      sys_safe_err12 |
                      sys_safe_err13 |
                      sys_safe_err14 |
                      sys_safe_err15 |
                      sys_safe_err16 |
                      sys_safe_err17 |
                      sys_safe_err18 |
                      sys_safe_err19 |
                      sys_safe_err20 |
                      sys_safe_err21 |
                      sys_safe_err22 |
                      sys_safe_err23 |
                      sys_safe_err24 |
                      sys_safe_err25 |
                      sys_safe_err26 |
                      sys_safe_err27 |
                      sys_safe_err28 |
                      sys_safe_err29 |
                      sys_safe_err30 |
                      sys_safe_err31 |
                      sys_safe_err32 |
                      sys_safe_err33 |
                      sys_safe_err34 |
                      sys_safe_err35 |
                      sys_safe_err36 |
                      sys_safe_err37 |
                      sys_safe_err38 |
                      sys_safe_err39 |
                      sys_safe_err40 |
                      sys_safe_err41 |
                      sys_safe_err42 |
                      sys_safe_err43 |
                      sys_safe_err44 |
                      sys_safe_err45 |
                      sys_safe_err46 |
                      sys_safe_err47 |
                      sys_safe_err48 |
                      sys_safe_err49 |
                      sys_safe_err50 |
                      sys_safe_err51 |
                      sys_safe_err52 |
                      sys_safe_err53 |
                      sys_safe_err54 |
                      sys_safe_err55 |
                      sys_safe_err56 |
                      sys_safe_err57 |
                      sys_safe_err58 |
                      sys_safe_err59 |
                      sys_safe_err60 |
                      sys_safe_err61 |
                      sys_safe_err62 |
                      sys_safe_err63 |
                      sys_safe_err64 |
                      sys_safe_err65 |
                      sys_safe_err66 |
                      sys_safe_err67 |
                      sys_safe_err68 |
                      sys_safe_err69 |
                      sys_safe_err70 |
                      sys_safe_err71 |
                      sys_safe_err72 |
                      sys_safe_err73 |
                      sys_safe_err74 |
                      sys_safe_err75 |
                      sys_safe_err76 |
                      sys_safe_err77 |
                      sys_safe_err78 |
                      sys_safe_err79 |
                      sys_safe_err80 |
                      sys_safe_err81 |
                      sys_safe_err82 |
                      sys_safe_err83 |
                      sys_safe_err84 |
                      sys_safe_err85 |
                      sys_safe_err86 |
                      sys_safe_err87 |
                      sys_safe_err88 |
                      sys_safe_err89 |
                      sys_safe_err90 |
                      sys_safe_err91 |
                      sys_safe_err92 |
                      sys_safe_err93 |
                      sys_safe_err94 |
                      sys_safe_err95 |
                      sys_safe_err96 |
                      sys_safe_err97 |
                      sys_safe_err98 |
                      sys_safe_err99 |
                      sys_safe_err100 |
                      sys_safe_err101 |
                      sys_safe_err102 |
                      sys_safe_err103;

// =============================================================
//                          ENV_FAIRNESS:
// =============================================================
// Assumption 1: 
// G(F(stateA1=0));
assign env_fair0 =  ~reg_stateA1;

// Assumption 2:
// G(F(hready=1));
assign env_fair1 =  i_hready;


// =============================================================
//                          SYS_FAIRNESS:
// =============================================================
// Guarantee 2:
// G(F(stateG2=0));
assign sys_fair0 = ~reg_stateG2;

// Guarantee 3:
// G(F((stateG3_0=0)  *  (stateG3_1=0)  *  (stateG3_2=0)));
assign sys_fair1 =  (~reg_stateG3_0 & ~reg_stateG3_1 & ~reg_stateG3_2);

// G(F(((hmaster0=0) * (hmaster1=0) * (hmaster2=0) * (hmaster3=0))  |  hbusreq0=0));
assign sys_fair2 =  ( ~(controllable_hmaster0) & ~(controllable_hmaster1) & ~(controllable_hmaster2) & ~(controllable_hmaster3) ) | ~i_hbusreq0;

// G(F(((hmaster0=1) * (hmaster1=0) * (hmaster2=0) * (hmaster3=0))  |  hbusreq1=0));
assign sys_fair3 =  ( controllable_hmaster0 & ~(controllable_hmaster1) & ~(controllable_hmaster2) & ~(controllable_hmaster3) ) | ~i_hbusreq1;

// G(F(((hmaster0=0) * (hmaster1=1) * (hmaster2=0) * (hmaster3=0))  |  hbusreq2=0));
assign sys_fair4 =  ( ~(controllable_hmaster0) & controllable_hmaster1 & ~(controllable_hmaster2) & ~(controllable_hmaster3) ) | ~i_hbusreq2;

// G(F(((hmaster0=1) * (hmaster1=1) * (hmaster2=0) * (hmaster3=0))  |  hbusreq3=0));
assign sys_fair5 =  ( controllable_hmaster0 & controllable_hmaster1 & ~(controllable_hmaster2) & ~(controllable_hmaster3) ) | ~i_hbusreq3;

// G(F(((hmaster0=0) * (hmaster1=0) * (hmaster2=1) * (hmaster3=0))  |  hbusreq4=0));
assign sys_fair6 =  ( ~(controllable_hmaster0) & ~(controllable_hmaster1) & controllable_hmaster2 & ~(controllable_hmaster3) ) | ~i_hbusreq4;

// G(F(((hmaster0=1) * (hmaster1=0) * (hmaster2=1) * (hmaster3=0))  |  hbusreq5=0));
assign sys_fair7 =  ( controllable_hmaster0 & ~(controllable_hmaster1) & controllable_hmaster2 & ~(controllable_hmaster3) ) | ~i_hbusreq5;

// G(F(((hmaster0=0) * (hmaster1=1) * (hmaster2=1) * (hmaster3=0))  |  hbusreq6=0));
assign sys_fair8 =  ( ~(controllable_hmaster0) & controllable_hmaster1 & controllable_hmaster2 & ~(controllable_hmaster3) ) | ~i_hbusreq6;

// G(F(((hmaster0=1) * (hmaster1=1) * (hmaster2=1) * (hmaster3=0))  |  hbusreq7=0));
assign sys_fair9 =  ( controllable_hmaster0 & controllable_hmaster1 & controllable_hmaster2 & ~(controllable_hmaster3) ) | ~i_hbusreq7;

// G(F(((hmaster0=0) * (hmaster1=0) * (hmaster2=0) * (hmaster3=1))  |  hbusreq8=0));
assign sys_fair10 =  ( ~(controllable_hmaster0) & ~(controllable_hmaster1) & ~(controllable_hmaster2) & controllable_hmaster3 ) | ~i_hbusreq8;

// G(F(((hmaster0=1) * (hmaster1=0) * (hmaster2=0) * (hmaster3=1))  |  hbusreq9=0));
assign sys_fair11 =  ( controllable_hmaster0 & ~(controllable_hmaster1) & ~(controllable_hmaster2) & controllable_hmaster3 ) | ~i_hbusreq9;

// G(F(((hmaster0=0) * (hmaster1=1) * (hmaster2=0) * (hmaster3=1))  |  hbusreq10=0));
assign sys_fair12 =  ( ~(controllable_hmaster0) & controllable_hmaster1 & ~(controllable_hmaster2) & controllable_hmaster3 ) | ~i_hbusreq10;

// G(F(((hmaster0=1) * (hmaster1=1) * (hmaster2=0) * (hmaster3=1))  |  hbusreq11=0));
assign sys_fair13 =  ( controllable_hmaster0 & controllable_hmaster1 & ~(controllable_hmaster2) & controllable_hmaster3 ) | ~i_hbusreq11;

// G(F(((hmaster0=0) * (hmaster1=0) * (hmaster2=1) * (hmaster3=1))  |  hbusreq12=0));
assign sys_fair14 =  ( ~(controllable_hmaster0) & ~(controllable_hmaster1) & controllable_hmaster2 & controllable_hmaster3 ) | ~i_hbusreq12;

// G(F(((hmaster0=1) * (hmaster1=0) * (hmaster2=1) * (hmaster3=1))  |  hbusreq13=0));
assign sys_fair15 =  ( controllable_hmaster0 & ~(controllable_hmaster1) & controllable_hmaster2 & controllable_hmaster3 ) | ~i_hbusreq13;

assign fair_err = (fair_cnt >= 6'b110010);

// computing the error output bit:
assign o_err = ~env_safe_err & ~env_safe_err_happened & (sys_safe_err | fair_err);

initial
 begin
  reg_i_hready = 0;
  reg_i_hbusreq0 = 0;
  reg_i_hlock0 = 0;
  reg_i_hbusreq1 = 0;
  reg_i_hlock1 = 0;
  reg_i_hbusreq2 = 0;
  reg_i_hlock2 = 0;
  reg_i_hbusreq3 = 0;
  reg_i_hlock3 = 0;
  reg_i_hbusreq4 = 0;
  reg_i_hlock4 = 0;
  reg_i_hbusreq5 = 0;
  reg_i_hlock5 = 0;
  reg_i_hbusreq6 = 0;
  reg_i_hlock6 = 0;
  reg_i_hbusreq7 = 0;
  reg_i_hlock7 = 0;
  reg_i_hbusreq8 = 0;
  reg_i_hlock8 = 0;
  reg_i_hbusreq9 = 0;
  reg_i_hlock9 = 0;
  reg_i_hbusreq10 = 0;
  reg_i_hlock10 = 0;
  reg_i_hbusreq11 = 0;
  reg_i_hlock11 = 0;
  reg_i_hbusreq12 = 0;
  reg_i_hlock12 = 0;
  reg_i_hbusreq13 = 0;
  reg_i_hlock13 = 0;
  reg_controllable_hmaster0 = 0;
  reg_controllable_hmaster1 = 0;
  reg_controllable_hmaster2 = 0;
  reg_controllable_hmaster3 = 0;
  reg_controllable_hmastlock = 0;
  reg_controllable_nstart = 0;
  reg_controllable_ndecide = 0;
  reg_controllable_locked = 0;
  reg_controllable_nhgrant0 = 0;
  reg_controllable_hgrant1 = 0;
  reg_controllable_hgrant2 = 0;
  reg_controllable_hgrant3 = 0;
  reg_controllable_hgrant4 = 0;
  reg_controllable_hgrant5 = 0;
  reg_controllable_hgrant6 = 0;
  reg_controllable_hgrant7 = 0;
  reg_controllable_hgrant8 = 0;
  reg_controllable_hgrant9 = 0;
  reg_controllable_hgrant10 = 0;
  reg_controllable_hgrant11 = 0;
  reg_controllable_hgrant12 = 0;
  reg_controllable_hgrant13 = 0;
  reg_controllable_busreq = 0;
  reg_stateA1 = 0;
  reg_stateG2 = 0;
  reg_stateG3_0 = 0;
  reg_stateG3_1 = 0;
  reg_stateG3_2 = 0;
  reg_stateG10_1 = 0;
  reg_stateG10_2 = 0;
  reg_stateG10_3 = 0;
  reg_stateG10_4 = 0;
  reg_stateG10_5 = 0;
  reg_stateG10_6 = 0;
  reg_stateG10_7 = 0;
  reg_stateG10_8 = 0;
  reg_stateG10_9 = 0;
  reg_stateG10_10 = 0;
  reg_stateG10_11 = 0;
  reg_stateG10_12 = 0;
  reg_stateG10_13 = 0;
  env_safe_err_happened = 0;
  next_env_fair = 0;
  fair_cnt = 0;
  next_sys_fair = 0;
 end


always @(posedge i_clk)
 begin
   // We remember if an environment error occurred:
   env_safe_err_happened = env_safe_err_happened | env_safe_err;

   // Updating the fairness counters: 
   if((next_sys_fair == 0) & sys_fair0)
    begin
      next_sys_fair = 1;
      next_env_fair = 0;
      fair_cnt = 0;
    end
   else if((next_sys_fair == 1) & sys_fair1)
    begin
      next_sys_fair = 2;
      next_env_fair = 0;
      fair_cnt = 0;
    end
   else if((next_sys_fair == 2) & sys_fair2)
    begin
      next_sys_fair = 3;
      next_env_fair = 0;
      fair_cnt = 0;
    end
   else if((next_sys_fair == 3) & sys_fair3)
    begin
      next_sys_fair = 4;
      next_env_fair = 0;
      fair_cnt = 0;
    end
   else if((next_sys_fair == 4) & sys_fair4)
    begin
      next_sys_fair = 5;
      next_env_fair = 0;
      fair_cnt = 0;
    end
   else if((next_sys_fair == 5) & sys_fair5)
    begin
      next_sys_fair = 6;
      next_env_fair = 0;
      fair_cnt = 0;
    end
   else if((next_sys_fair == 6) & sys_fair6)
    begin
      next_sys_fair = 7;
      next_env_fair = 0;
      fair_cnt = 0;
    end
   else if((next_sys_fair == 7) & sys_fair7)
    begin
      next_sys_fair = 8;
      next_env_fair = 0;
      fair_cnt = 0;
    end
   else if((next_sys_fair == 8) & sys_fair8)
    begin
      next_sys_fair = 9;
      next_env_fair = 0;
      fair_cnt = 0;
    end
   else if((next_sys_fair == 9) & sys_fair9)
    begin
      next_sys_fair = 10;
      next_env_fair = 0;
      fair_cnt = 0;
    end
   else if((next_sys_fair == 10) & sys_fair10)
    begin
      next_sys_fair = 11;
      next_env_fair = 0;
      fair_cnt = 0;
    end
   else if((next_sys_fair == 11) & sys_fair11)
    begin
      next_sys_fair = 12;
      next_env_fair = 0;
      fair_cnt = 0;
    end
   else if((next_sys_fair == 12) & sys_fair12)
    begin
      next_sys_fair = 13;
      next_env_fair = 0;
      fair_cnt = 0;
    end
   else if((next_sys_fair == 13) & sys_fair13)
    begin
      next_sys_fair = 14;
      next_env_fair = 0;
      fair_cnt = 0;
    end
   else if((next_sys_fair == 14) & sys_fair14)
    begin
      next_sys_fair = 15;
      next_env_fair = 0;
      fair_cnt = 0;
    end
   else if((next_sys_fair == 15) & sys_fair15)
    begin
      next_sys_fair = 0;
      next_env_fair = 0;
      fair_cnt = 0;
    end
   else if(~next_env_fair & env_fair0)
    begin
      next_env_fair = 1;
    end
   else if(next_env_fair & env_fair1)
    begin
      next_env_fair = 0;
      fair_cnt = fair_cnt + 1;
    end

   // Updating the automata: 
   // Automaton A1: 
   if(~reg_stateA1 & controllable_hmastlock & ~i_hburst0 & ~i_hburst1)
    begin
      reg_stateA1 = 1'b1;
    end
   else if(reg_stateA1 & ~controllable_busreq)
    begin
      reg_stateA1 = 1'b0;
    end

   // Automaton G2: 
   if(~reg_stateG2)
    begin
      if(controllable_hmastlock & ~controllable_nstart & ~i_hburst0 & ~i_hburst1)
       begin
         reg_stateG2 = 1'b1;
       end
    end
   else // if(reg_stateG2)
    begin
      if(~controllable_busreq)
       begin
         reg_stateG2 = 1'b0;
       end
    end

   // Automaton G3: 
   if(~reg_stateG3_0 & ~reg_stateG3_1 & ~reg_stateG3_2 & controllable_hmastlock & ~controllable_nstart &  ~i_hburst0 & i_hburst1 & ~i_hready)
    begin
      reg_stateG3_0 = 1'b1;
      reg_stateG3_1 = 1'b0;
      reg_stateG3_2 = 1'b0;
    end
   else if(~reg_stateG3_0 & ~reg_stateG3_1 & ~reg_stateG3_2 & controllable_hmastlock & ~controllable_nstart &  ~i_hburst0 & i_hburst1 & i_hready)
    begin
      reg_stateG3_0 = 1'b0;
      reg_stateG3_1 = 1'b1;
      reg_stateG3_2 = 1'b0;
    end
   else if(reg_stateG3_0 & ~reg_stateG3_1 & ~reg_stateG3_2 & i_hready)
    begin
      reg_stateG3_0 = 1'b0;
      reg_stateG3_1 = 1'b1;
      reg_stateG3_2 = 1'b0;
    end
   else if(~reg_stateG3_0 & reg_stateG3_1 & ~reg_stateG3_2 & i_hready)
    begin
      reg_stateG3_0 = 1'b1;
      reg_stateG3_1 = 1'b1;
      reg_stateG3_2 = 1'b0;
    end
   else if(reg_stateG3_0 & reg_stateG3_1 & ~reg_stateG3_2 & i_hready)
    begin
      reg_stateG3_0 = 1'b0;
      reg_stateG3_1 = 1'b0;
      reg_stateG3_2 = 1'b1;
    end
   else if(~reg_stateG3_0 & ~reg_stateG3_1 & reg_stateG3_2 & i_hready)
    begin
      reg_stateG3_0 = 1'b0;
      reg_stateG3_1 = 1'b0;
      reg_stateG3_2 = 1'b0;
    end

   // Automaton G10_1: 
   if(~reg_stateG10_1 & ~controllable_hgrant1 & ~i_hbusreq1)
    begin
      reg_stateG10_1 = 1'b1;
    end
   else if(reg_stateG10_1 & i_hbusreq1)
    begin
      reg_stateG10_1 = 1'b0;
    end

   // Automaton G10_2: 
   if(~reg_stateG10_2 & ~controllable_hgrant2 & ~i_hbusreq2)
    begin
      reg_stateG10_2 = 1'b1;
    end
   else if(reg_stateG10_2 & i_hbusreq2)
    begin
      reg_stateG10_2 = 1'b0;
    end

   // Automaton G10_3: 
   if(~reg_stateG10_3 & ~controllable_hgrant3 & ~i_hbusreq3)
    begin
      reg_stateG10_3 = 1'b1;
    end
   else if(reg_stateG10_3 & i_hbusreq3)
    begin
      reg_stateG10_3 = 1'b0;
    end

   // Automaton G10_4: 
   if(~reg_stateG10_4 & ~controllable_hgrant4 & ~i_hbusreq4)
    begin
      reg_stateG10_4 = 1'b1;
    end
   else if(reg_stateG10_4 & i_hbusreq4)
    begin
      reg_stateG10_4 = 1'b0;
    end

   // Automaton G10_5: 
   if(~reg_stateG10_5 & ~controllable_hgrant5 & ~i_hbusreq5)
    begin
      reg_stateG10_5 = 1'b1;
    end
   else if(reg_stateG10_5 & i_hbusreq5)
    begin
      reg_stateG10_5 = 1'b0;
    end

   // Automaton G10_6: 
   if(~reg_stateG10_6 & ~controllable_hgrant6 & ~i_hbusreq6)
    begin
      reg_stateG10_6 = 1'b1;
    end
   else if(reg_stateG10_6 & i_hbusreq6)
    begin
      reg_stateG10_6 = 1'b0;
    end

   // Automaton G10_7: 
   if(~reg_stateG10_7 & ~controllable_hgrant7 & ~i_hbusreq7)
    begin
      reg_stateG10_7 = 1'b1;
    end
   else if(reg_stateG10_7 & i_hbusreq7)
    begin
      reg_stateG10_7 = 1'b0;
    end

   // Automaton G10_8: 
   if(~reg_stateG10_8 & ~controllable_hgrant8 & ~i_hbusreq8)
    begin
      reg_stateG10_8 = 1'b1;
    end
   else if(reg_stateG10_8 & i_hbusreq8)
    begin
      reg_stateG10_8 = 1'b0;
    end

   // Automaton G10_9: 
   if(~reg_stateG10_9 & ~controllable_hgrant9 & ~i_hbusreq9)
    begin
      reg_stateG10_9 = 1'b1;
    end
   else if(reg_stateG10_9 & i_hbusreq9)
    begin
      reg_stateG10_9 = 1'b0;
    end

   // Automaton G10_10: 
   if(~reg_stateG10_10 & ~controllable_hgrant10 & ~i_hbusreq10)
    begin
      reg_stateG10_10 = 1'b1;
    end
   else if(reg_stateG10_10 & i_hbusreq10)
    begin
      reg_stateG10_10 = 1'b0;
    end

   // Automaton G10_11: 
   if(~reg_stateG10_11 & ~controllable_hgrant11 & ~i_hbusreq11)
    begin
      reg_stateG10_11 = 1'b1;
    end
   else if(reg_stateG10_11 & i_hbusreq11)
    begin
      reg_stateG10_11 = 1'b0;
    end

   // Automaton G10_12: 
   if(~reg_stateG10_12 & ~controllable_hgrant12 & ~i_hbusreq12)
    begin
      reg_stateG10_12 = 1'b1;
    end
   else if(reg_stateG10_12 & i_hbusreq12)
    begin
      reg_stateG10_12 = 1'b0;
    end

   // Automaton G10_13: 
   if(~reg_stateG10_13 & ~controllable_hgrant13 & ~i_hbusreq13)
    begin
      reg_stateG10_13 = 1'b1;
    end
   else if(reg_stateG10_13 & i_hbusreq13)
    begin
      reg_stateG10_13 = 1'b0;
    end

   // Latching the previous input:
   reg_i_hready =  i_hready;
   reg_i_hbusreq0 =  i_hbusreq0;
   reg_i_hlock0 =  i_hlock0;
   reg_i_hbusreq1 =  i_hbusreq1;
   reg_i_hlock1 =  i_hlock1;
   reg_i_hbusreq2 =  i_hbusreq2;
   reg_i_hlock2 =  i_hlock2;
   reg_i_hbusreq3 =  i_hbusreq3;
   reg_i_hlock3 =  i_hlock3;
   reg_i_hbusreq4 =  i_hbusreq4;
   reg_i_hlock4 =  i_hlock4;
   reg_i_hbusreq5 =  i_hbusreq5;
   reg_i_hlock5 =  i_hlock5;
   reg_i_hbusreq6 =  i_hbusreq6;
   reg_i_hlock6 =  i_hlock6;
   reg_i_hbusreq7 =  i_hbusreq7;
   reg_i_hlock7 =  i_hlock7;
   reg_i_hbusreq8 =  i_hbusreq8;
   reg_i_hlock8 =  i_hlock8;
   reg_i_hbusreq9 =  i_hbusreq9;
   reg_i_hlock9 =  i_hlock9;
   reg_i_hbusreq10 =  i_hbusreq10;
   reg_i_hlock10 =  i_hlock10;
   reg_i_hbusreq11 =  i_hbusreq11;
   reg_i_hlock11 =  i_hlock11;
   reg_i_hbusreq12 =  i_hbusreq12;
   reg_i_hlock12 =  i_hlock12;
   reg_i_hbusreq13 =  i_hbusreq13;
   reg_i_hlock13 =  i_hlock13;
   reg_controllable_hmaster0 =  controllable_hmaster0;
   reg_controllable_hmaster1 =  controllable_hmaster1;
   reg_controllable_hmaster2 =  controllable_hmaster2;
   reg_controllable_hmaster3 =  controllable_hmaster3;
   reg_controllable_hmastlock =  controllable_hmastlock;
   reg_controllable_nstart =  controllable_nstart;
   reg_controllable_ndecide =  controllable_ndecide;
   reg_controllable_locked =  controllable_locked;
   reg_controllable_nhgrant0 =  controllable_nhgrant0;
   reg_controllable_hgrant1 =  controllable_hgrant1;
   reg_controllable_hgrant2 =  controllable_hgrant2;
   reg_controllable_hgrant3 =  controllable_hgrant3;
   reg_controllable_hgrant4 =  controllable_hgrant4;
   reg_controllable_hgrant5 =  controllable_hgrant5;
   reg_controllable_hgrant6 =  controllable_hgrant6;
   reg_controllable_hgrant7 =  controllable_hgrant7;
   reg_controllable_hgrant8 =  controllable_hgrant8;
   reg_controllable_hgrant9 =  controllable_hgrant9;
   reg_controllable_hgrant10 =  controllable_hgrant10;
   reg_controllable_hgrant11 =  controllable_hgrant11;
   reg_controllable_hgrant12 =  controllable_hgrant12;
   reg_controllable_hgrant13 =  controllable_hgrant13;
   reg_controllable_busreq =  controllable_busreq;

 end
endmodule

-------------------------------
#!SYNTCOMP
STATUS : realizable
SOLVED_BY : 3/3 [2015-pre-classification]
SOLVED_IN : 213.723 [2015-pre-classification]
#.
