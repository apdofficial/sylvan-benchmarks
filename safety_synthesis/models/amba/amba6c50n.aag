aag 882 29 50 1 803
2
4
6
8
10
12
14
16
18
20
22
24
26
28
30
32
34
36
38
40
42
44
46
48
50
52
54
56
58
60 1
62 10
64 54
66 14
68 1117
70 52
72 18
74 1201
76 22
78 1225
80 6
82 46
84 28
86 1245
88 30
90 26
92 8
94 38
96 24
98 1275
100 1297
102 40
104 20
106 58
108 1319
110 2
112 42
114 1343
116 16
118 1557
120 1563
122 1569
124 1575
126 1581
128 1587
130 1681
132 1687
134 1693
136 1699
138 1721
140 44
142 12
144 32
146 187
148 1743
150 48
152 4
154 1765
156 50
158 56
932
160 39 12
162 41 16
164 163 161
166 43 20
168 167 164
170 45 24
172 171 168
174 49 26
176 175 172
178 51 28
180 179 176
182 147 60
184 183 60
186 185 180
188 57 55
190 188 53
192 38 31
194 39 30
196 195 193
198 197 190
200 56 55
202 200 53
204 40 31
206 41 30
208 207 205
210 209 202
212 211 199
214 57 54
216 214 53
218 42 31
220 43 30
222 221 219
224 223 216
226 225 212
228 56 54
230 228 53
232 44 31
234 45 30
236 235 233
238 237 230
240 239 226
242 188 52
244 48 31
246 49 30
248 247 245
250 249 242
252 251 240
254 200 52
256 50 31
258 51 30
260 259 257
262 261 254
264 263 252
266 145 60
268 144 60
270 267 60
272 271 9
274 273 264
276 99 60
278 98 60
280 277 60
282 278 9
284 283 274
286 75 60
288 74 60
290 287 60
292 79 60
294 78 60
296 293 60
298 297 291
300 87 60
302 86 60
304 301 60
306 305 298
308 307 9
310 309 284
312 111 60
314 110 60
316 313 60
318 314 190
320 317 191
322 321 319
324 323 268
326 325 310
328 153 60
330 152 60
332 329 60
334 333 202
336 330 203
338 337 335
340 339 268
342 341 326
344 63 60
346 62 60
348 345 60
350 349 216
352 346 217
354 353 351
356 355 268
358 357 342
360 67 60
362 66 60
364 361 60
366 365 230
368 362 231
370 369 367
372 371 268
374 373 358
376 73 60
378 72 60
380 377 60
382 381 242
384 378 243
386 385 383
388 387 268
390 389 374
392 77 60
394 76 60
396 393 60
398 397 254
400 394 255
402 401 399
404 403 268
406 405 390
408 81 60
410 80 60
412 409 60
414 410 59
416 413 58
418 417 415
420 419 268
422 421 406
424 159 60
426 158 60
428 425 60
430 65 60
432 64 60
434 431 60
436 435 429
438 71 60
440 70 60
442 439 60
444 443 436
446 445 190
448 444 191
450 449 447
452 451 8
454 453 422
456 435 426
458 456 443
460 459 202
462 458 203
464 463 461
466 465 8
468 467 454
470 432 429
472 470 443
474 473 216
476 472 217
478 477 475
480 479 8
482 481 468
484 432 426
486 484 443
488 487 230
490 486 231
492 491 489
494 493 8
496 495 482
498 440 436
500 499 242
502 498 243
504 503 501
506 505 8
508 507 496
510 456 440
512 511 254
514 510 255
516 515 513
518 517 8
520 519 508
522 107 60
524 106 60
526 523 60
528 527 58
530 524 59
532 531 529
534 533 8
536 535 520
538 83 60
540 82 60
542 539 60
544 143 60
546 142 60
548 545 60
550 546 543
552 550 3
554 552 7
556 555 536
558 549 543
560 558 3
562 560 6
564 563 556
566 117 60
568 116 60
570 567 60
572 568 543
574 572 4
576 574 7
578 577 564
580 571 543
582 580 4
584 582 6
586 585 578
588 105 60
590 104 60
592 589 60
594 590 543
596 594 10
598 596 7
600 599 586
602 593 543
604 602 10
606 604 6
608 607 600
610 97 60
612 96 60
614 611 60
616 612 543
618 616 14
620 618 7
622 621 608
624 615 543
626 624 14
628 626 6
630 629 622
632 91 60
634 90 60
636 633 60
638 634 543
640 638 18
642 640 7
644 643 630
646 637 543
648 646 18
650 648 6
652 651 644
654 85 60
656 84 60
658 655 60
660 656 543
662 660 22
664 662 7
666 665 652
668 659 543
670 668 22
672 670 6
674 673 666
676 317 2
678 314 3
680 679 677
682 681 540
684 683 674
686 330 5
688 333 4
690 689 687
692 691 540
694 693 684
696 346 11
698 349 10
700 699 697
702 701 540
704 703 694
706 362 15
708 365 14
710 709 707
712 711 540
714 713 704
716 378 19
718 381 18
720 719 717
722 721 540
724 723 714
726 394 23
728 397 22
730 729 727
732 731 540
734 733 724
736 410 7
738 413 6
740 739 737
742 741 540
744 743 734
746 101 60
748 100 60
750 747 60
752 41 4
754 752 748
756 755 744
758 109 60
760 108 60
762 759 60
764 43 10
766 764 760
768 767 756
770 139 60
772 138 60
774 771 60
776 45 14
778 776 772
780 779 768
782 149 60
784 148 60
786 783 60
788 49 18
790 788 784
792 791 780
794 155 60
796 154 60
798 795 60
800 51 22
802 800 796
804 803 792
806 95 60
808 807 60
810 103 60
812 811 60
814 813 809
816 113 60
818 817 60
820 819 814
822 141 60
824 823 60
826 825 820
828 151 60
830 829 60
832 831 826
834 157 60
836 835 60
838 837 832
840 838 543
842 840 2
844 843 804
846 129 60
848 128 60
850 847 60
852 127 60
854 126 60
856 853 60
858 125 60
860 124 60
862 859 60
864 123 60
866 122 60
868 865 60
870 121 60
872 120 60
874 871 60
876 119 60
878 118 60
880 877 60
882 875 869
884 882 863
886 884 857
888 887 856
890 888 885
892 891 851
894 893 850
896 894 890
898 874 866
900 899 883
902 883 860
904 903 885
906 885 857
908 884 854
910 909 907
912 890 851
914 891 848
916 915 913
918 879 874
920 918 900
922 920 904
924 922 910
926 924 916
928 927 897
930 928 844
932 931 186
934 131 60
936 130 60
938 935 60
940 133 60
942 132 60
944 941 60
946 135 60
948 134 60
950 947 60
952 136 60
954 943 937
956 954 949
958 956 953
960 958 281
962 943 938
964 962 949
966 964 953
968 966 306
970 944 937
972 970 949
974 972 953
976 191 38
978 977 974
980 944 938
982 980 949
984 982 953
986 203 40
988 987 984
990 954 950
992 990 953
994 217 42
996 995 992
998 962 950
1000 998 953
1002 231 44
1004 1003 1000
1006 970 950
1008 1006 953
1010 243 48
1012 1011 1008
1014 980 950
1016 1014 953
1018 255 50
1020 1019 1016
1022 69 60
1024 68 60
1026 1023 60
1028 115 60
1030 114 60
1032 1029 60
1034 1033 1027
1036 1024 32
1038 968 961
1040 1039 961
1042 969 961
1044 1042 978
1046 1045 1040
1048 1042 979
1050 1048 988
1052 1051 1046
1054 1048 989
1056 1054 996
1058 1057 1052
1060 1054 997
1062 1060 1004
1064 1063 1058
1066 1060 1005
1068 1066 1012
1070 1069 1064
1072 1066 1013
1074 1072 1020
1076 1075 1070
1078 1072 1021
1080 1078 1034
1082 1081 1076
1084 1078 1035
1086 1084 1036
1088 1087 1082
1090 1037 1024
1092 1090 1035
1094 1093 1035
1096 1095 1021
1098 1096 1013
1100 1098 1005
1102 1100 997
1104 1102 989
1106 1104 979
1108 1106 969
1110 1108 961
1112 1110 1089
1114 1088 1024
1116 1115 1113
1118 306 58
1120 1118 9
1122 1120 37
1124 1122 34
1126 1124 33
1128 1124 32
1130 297 288
1132 1130 305
1134 1132 32
1136 294 291
1138 1136 305
1140 1138 32
1142 294 288
1144 1142 305
1146 1144 32
1148 302 298
1150 1148 32
1152 1128 1127
1154 1153 1127
1156 1129 1127
1158 1156 1134
1160 1159 1154
1162 1156 1135
1164 1162 1140
1166 1165 1160
1168 1162 1141
1170 1168 1146
1172 1171 1166
1174 1168 1147
1176 1174 1150
1178 1177 1172
1180 1151 288
1182 1180 1147
1184 1182 1141
1186 1185 1141
1188 1187 1135
1190 1188 1129
1192 1190 1127
1194 1193 1127
1196 1195 1179
1198 1178 288
1200 1199 1197
1202 1151 294
1204 1202 1147
1206 1204 1141
1208 1207 1141
1210 1209 1135
1212 1211 1135
1214 1213 1129
1216 1215 1129
1218 1217 1127
1220 1218 1179
1222 1178 294
1224 1223 1221
1226 1151 302
1228 1226 1147
1230 1229 1147
1232 1231 1141
1234 1232 1135
1236 1234 1129
1238 1236 1127
1240 1238 1179
1242 1178 302
1244 1243 1241
1246 58 9
1248 1246 37
1250 1248 35
1252 1250 281
1254 278 31
1256 1255 1253
1258 1251 278
1260 1259 1251
1262 278 30
1264 1261 281
1266 1262 278
1268 1267 1265
1270 1269 1257
1272 1256 278
1274 1273 1271
1276 751 5
1278 1276 41
1280 748 40
1282 1280 1279
1284 1283 1279
1286 1281 748
1288 1286 1279
1290 1289 1279
1292 1291 1285
1294 1284 748
1296 1295 1293
1298 763 11
1300 1298 43
1302 760 42
1304 1302 1301
1306 1305 1301
1308 1303 760
1310 1308 1301
1312 1311 1301
1314 1313 1307
1316 1306 760
1318 1317 1315
1320 1033 58
1322 1320 37
1324 1322 35
1326 1030 31
1328 1326 1325
1330 1329 1325
1332 1327 1030
1334 1332 1325
1336 1335 1325
1338 1337 1331
1340 1330 1030
1342 1341 1339
1344 1087 1076
1346 1036 881
1348 1037 878
1350 1349 1347
1352 1034 878
1354 1351 1035
1356 1355 1353
1358 1357 1021
1360 1358 1013
1362 1360 1005
1364 1362 997
1366 1364 989
1368 1366 979
1370 1368 969
1372 1370 961
1374 878 875
1376 879 872
1378 1377 1375
1380 1379 1036
1382 1037 872
1384 1383 1381
1386 1034 872
1388 1385 1035
1390 1389 1387
1392 1391 1021
1394 1392 1013
1396 1394 1005
1398 1396 997
1400 1398 989
1402 1400 979
1404 1402 969
1406 1404 961
1408 878 872
1410 1408 869
1412 1409 866
1414 1413 1411
1416 1415 1036
1418 1037 866
1420 1419 1417
1422 1034 866
1424 1421 1035
1426 1425 1423
1428 1427 1021
1430 1428 1013
1432 1430 1005
1434 1432 997
1436 1434 989
1438 1436 979
1440 1438 969
1442 1440 961
1444 1408 866
1446 1444 863
1448 1445 860
1450 1449 1447
1452 1451 1036
1454 1037 860
1456 1455 1453
1458 1034 860
1460 1457 1035
1462 1461 1459
1464 1463 1021
1466 1464 1013
1468 1466 1005
1470 1468 997
1472 1470 989
1474 1472 979
1476 1474 969
1478 1476 961
1480 1444 860
1482 1480 857
1484 1481 854
1486 1485 1483
1488 1487 1036
1490 1037 854
1492 1491 1489
1494 1034 854
1496 1493 1035
1498 1497 1495
1500 1499 1021
1502 1500 1013
1504 1502 1005
1506 1504 997
1508 1506 989
1510 1508 979
1512 1510 969
1514 1512 961
1516 1480 854
1518 1516 851
1520 1517 848
1522 1521 1519
1524 1523 1036
1526 1037 848
1528 1527 1525
1530 1034 848
1532 1529 1035
1534 1533 1531
1536 1535 1021
1538 1536 1013
1540 1538 1005
1542 1540 997
1544 1542 989
1546 1544 979
1548 1546 969
1550 1548 961
1552 1372 1345
1554 1344 878
1556 1555 1553
1558 1406 1345
1560 1344 872
1562 1561 1559
1564 1442 1345
1566 1344 866
1568 1567 1565
1570 1478 1345
1572 1344 860
1574 1573 1571
1576 1514 1345
1578 1344 854
1580 1579 1577
1582 1550 1345
1584 1344 848
1586 1585 1583
1588 1021 936
1590 1588 1013
1592 1591 1013
1594 1593 1005
1596 1594 997
1598 1597 997
1600 1599 989
1602 1600 979
1604 1603 979
1606 1605 969
1608 1606 961
1610 1609 961
1612 1021 942
1614 1612 1013
1616 1615 1013
1618 1617 1005
1620 1619 1005
1622 1621 997
1624 1622 989
1626 1624 979
1628 1627 979
1630 1629 969
1632 1631 969
1634 1633 961
1636 1021 948
1638 1636 1013
1640 1639 1013
1642 1641 1005
1644 1643 1005
1646 1645 997
1648 1647 997
1650 1649 989
1652 1651 989
1654 1653 979
1656 1654 969
1658 1656 961
1660 1021 952
1662 1660 1013
1664 1662 1005
1666 1664 997
1668 1666 989
1670 1668 979
1672 1670 969
1674 1672 961
1676 1611 1077
1678 1076 936
1680 1679 1677
1682 1634 1077
1684 1076 942
1686 1685 1683
1688 1658 1077
1690 1076 948
1692 1691 1689
1694 1674 1077
1696 1076 952
1698 1697 1695
1700 775 15
1702 1700 45
1704 772 44
1706 1704 1703
1708 1707 1703
1710 1705 772
1712 1710 1703
1714 1713 1703
1716 1715 1709
1718 1708 772
1720 1719 1717
1722 787 19
1724 1722 49
1726 784 48
1728 1726 1725
1730 1729 1725
1732 1727 784
1734 1732 1725
1736 1735 1725
1738 1737 1731
1740 1730 784
1742 1741 1739
1744 799 23
1746 1744 51
1748 796 50
1750 1748 1747
1752 1751 1747
1754 1749 796
1756 1754 1747
1758 1757 1747
1760 1759 1753
1762 1752 796
1764 1763 1761
i0 controllable_nhgrant0
i1 controllable_hgrant1
i2 controllable_locked
i3 controllable_nstart
i4 controllable_hgrant2
i5 i_hlock0
i6 controllable_hgrant3
i7 i_hlock1
i8 controllable_hgrant4
i9 i_hlock2
i10 controllable_hgrant5
i11 i_hlock3
i12 i_hlock4
i13 i_hlock5
i14 controllable_busreq
i15 i_hready
i16 i_hburst1
i17 i_hburst0
i18 i_hbusreq0
i19 i_hbusreq1
i20 i_hbusreq2
i21 i_hbusreq3
i22 controllable_ndecide
i23 i_hbusreq4
i24 i_hbusreq5
i25 controllable_hmaster2
i26 controllable_hmaster1
i27 controllable_hmaster0
i28 controllable_hmastlock
l0 n61
l1 reg_controllable_hgrant2_out
l2 reg_controllable_hmaster1_out
l3 reg_controllable_hgrant3_out
l4 next_env_fair_out
l5 reg_controllable_hmaster2_out
l6 reg_controllable_hgrant4_out
l7 reg_stateG3_0_out
l8 reg_controllable_hgrant5_out
l9 reg_stateG3_1_out
l10 reg_controllable_locked_out
l11 reg_controllable_ndecide_out
l12 reg_i_hlock5_out
l13 reg_stateG3_2_out
l14 reg_controllable_busreq_out
l15 reg_i_hlock4_out
l16 reg_controllable_nstart_out
l17 reg_i_hbusreq0_out
l18 reg_i_hlock3_out
l19 reg_stateG2_out
l20 reg_stateG10_1_out
l21 reg_i_hbusreq1_out
l22 reg_i_hlock2_out
l23 reg_controllable_hmastlock_out
l24 reg_stateG10_2_out
l25 reg_controllable_nhgrant0_out
l26 reg_i_hbusreq2_out
l27 reg_stateA1_out
l28 reg_i_hlock1_out
l29 fair_cnt<0>_out
l30 fair_cnt<1>_out
l31 fair_cnt<2>_out
l32 fair_cnt<3>_out
l33 fair_cnt<4>_out
l34 fair_cnt<5>_out
l35 next_sys_fair<0>_out
l36 next_sys_fair<1>_out
l37 next_sys_fair<2>_out
l38 next_sys_fair<3>_out
l39 reg_stateG10_3_out
l40 reg_i_hbusreq3_out
l41 reg_i_hlock0_out
l42 reg_i_hready_out
l43 env_safe_err_happened_out
l44 reg_stateG10_4_out
l45 reg_i_hbusreq4_out
l46 reg_controllable_hgrant1_out
l47 reg_stateG10_5_out
l48 reg_i_hbusreq5_out
l49 reg_controllable_hmaster0_out
o0 o_err
c
amba_6_new_50
This file was written by ABC on Tue May  5 16:50:35 2015
For information about AIGER format, refer to http://fmv.jku.at/aiger
-------------------------------
This AIGER file has been created by the following sequence of commands:
> vl2mv amba6c50.v   ---gives--> amba6c50.mv
> abc -c "read_blif_mv amba6c50.mv; write_aiger -s amba6c50n.aig"   ---gives--> amba6c50n.aig
> aigtoaig amba6c50n.aig amba6c50n.aag   ---gives--> amba6c50n.aag (this file)
Content of amba6c50.v:
module amba_6_new_50(
        o_err,
        i_clk,
        i_hready,
        i_hbusreq0,
        i_hlock0,
        i_hbusreq1,
        i_hlock1,
        i_hbusreq2,
        i_hlock2,
        i_hbusreq3,
        i_hlock3,
        i_hbusreq4,
        i_hlock4,
        i_hbusreq5,
        i_hlock5,
        i_hburst0,
        i_hburst1,
        controllable_hmaster0,
        controllable_hmaster1,
        controllable_hmaster2,
        controllable_hmastlock,
        controllable_nstart,
        controllable_ndecide,
        controllable_locked,
        controllable_nhgrant0,
        controllable_hgrant1,
        controllable_hgrant2,
        controllable_hgrant3,
        controllable_hgrant4,
        controllable_hgrant5,
        controllable_busreq);

input i_clk;
input i_hready;
input i_hbusreq0;
input i_hlock0;
input i_hbusreq1;
input i_hlock1;
input i_hbusreq2;
input i_hlock2;
input i_hbusreq3;
input i_hlock3;
input i_hbusreq4;
input i_hlock4;
input i_hbusreq5;
input i_hlock5;
input i_hburst0;
input i_hburst1;
input controllable_hmaster0;
input controllable_hmaster1;
input controllable_hmaster2;
input controllable_hmastlock;
input controllable_nstart;
input controllable_ndecide;
input controllable_locked;
input controllable_nhgrant0;
input controllable_hgrant1;
input controllable_hgrant2;
input controllable_hgrant3;
input controllable_hgrant4;
input controllable_hgrant5;
input controllable_busreq;
output o_err;

reg reg_i_hready;
reg reg_i_hbusreq0;
reg reg_i_hlock0;
reg reg_i_hbusreq1;
reg reg_i_hlock1;
reg reg_i_hbusreq2;
reg reg_i_hlock2;
reg reg_i_hbusreq3;
reg reg_i_hlock3;
reg reg_i_hbusreq4;
reg reg_i_hlock4;
reg reg_i_hbusreq5;
reg reg_i_hlock5;
reg reg_controllable_hmaster0;
reg reg_controllable_hmaster1;
reg reg_controllable_hmaster2;
reg reg_controllable_hmastlock;
reg reg_controllable_nstart;
reg reg_controllable_ndecide;
reg reg_controllable_locked;
reg reg_controllable_nhgrant0;
reg reg_controllable_hgrant1;
reg reg_controllable_hgrant2;
reg reg_controllable_hgrant3;
reg reg_controllable_hgrant4;
reg reg_controllable_hgrant5;
reg reg_controllable_busreq;
reg reg_stateA1;
reg reg_stateG2;
reg reg_stateG3_0;
reg reg_stateG3_1;
reg reg_stateG3_2;
reg reg_stateG10_1;
reg reg_stateG10_2;
reg reg_stateG10_3;
reg reg_stateG10_4;
reg reg_stateG10_5;
reg env_safe_err_happened;
reg next_env_fair;
reg [5:0] fair_cnt;
reg [3:0] next_sys_fair;

wire env_safe_err0;
wire env_safe_err1;
wire env_safe_err2;
wire env_safe_err3;
wire env_safe_err4;
wire env_safe_err5;
wire env_safe_err;

wire sys_safe_err0;
wire sys_safe_err1;
wire sys_safe_err2;
wire sys_safe_err3;
wire sys_safe_err4;
wire sys_safe_err5;
wire sys_safe_err6;
wire sys_safe_err7;
wire sys_safe_err8;
wire sys_safe_err9;
wire sys_safe_err10;
wire sys_safe_err11;
wire sys_safe_err12;
wire sys_safe_err13;
wire sys_safe_err14;
wire sys_safe_err15;
wire sys_safe_err16;
wire sys_safe_err17;
wire sys_safe_err18;
wire sys_safe_err19;
wire sys_safe_err20;
wire sys_safe_err21;
wire sys_safe_err22;
wire sys_safe_err23;
wire sys_safe_err24;
wire sys_safe_err25;
wire sys_safe_err26;
wire sys_safe_err27;
wire sys_safe_err28;
wire sys_safe_err29;
wire sys_safe_err30;
wire sys_safe_err31;
wire sys_safe_err32;
wire sys_safe_err33;
wire sys_safe_err34;
wire sys_safe_err35;
wire sys_safe_err36;
wire sys_safe_err37;
wire sys_safe_err38;
wire sys_safe_err39;
wire sys_safe_err40;
wire sys_safe_err41;
wire sys_safe_err42;
wire sys_safe_err43;
wire sys_safe_err44;
wire sys_safe_err45;
wire sys_safe_err46;
wire sys_safe_err47;
wire sys_safe_err;

wire env_fair0;
wire env_fair1;

wire sys_fair0;
wire sys_fair1;
wire sys_fair2;
wire sys_fair3;
wire sys_fair4;
wire sys_fair5;
wire sys_fair6;
wire sys_fair7;
wire fair_err;
wire o_err;

// =============================================================
//                        ENV_TRANSITION:
// =============================================================
// Assumption 3:
// G( hlock0=1 -> hbusreq0=1 );
assign env_safe_err0 =  ~(~ i_hlock0 | i_hbusreq0);

// Assumption 3:
// G( hlock1=1 -> hbusreq1=1 );
assign env_safe_err1 =  ~(~ i_hlock1 | i_hbusreq1);

// Assumption 3:
// G( hlock2=1 -> hbusreq2=1 );
assign env_safe_err2 =  ~(~ i_hlock2 | i_hbusreq2);

// Assumption 3:
// G( hlock3=1 -> hbusreq3=1 );
assign env_safe_err3 =  ~(~ i_hlock3 | i_hbusreq3);

// Assumption 3:
// G( hlock4=1 -> hbusreq4=1 );
assign env_safe_err4 =  ~(~ i_hlock4 | i_hbusreq4);

// Assumption 3:
// G( hlock5=1 -> hbusreq5=1 );
assign env_safe_err5 =  ~(~ i_hlock5 | i_hbusreq5);

// collecting together the safety error bits:
assign env_safe_err = env_safe_err0 |
                      env_safe_err1 |
                      env_safe_err2 |
                      env_safe_err3 |
                      env_safe_err4 |
                      env_safe_err5;

// =============================================================
//                        SYS_TRANSITION:
// =============================================================
// G((hmaster0=0) * (hmaster1=0) * (hmaster2=0) -> (hbusreq0=0 <-> busreq=0));
assign sys_safe_err0 =  ~( ~( ~(controllable_hmaster0) & ~(controllable_hmaster1) & ~(controllable_hmaster2) )|(~i_hbusreq0 ^~ (~controllable_busreq)));

// G((hmaster0=1) * (hmaster1=0) * (hmaster2=0) -> (hbusreq1=0 <-> busreq=0));
assign sys_safe_err1 =  ~( ~( controllable_hmaster0 & ~(controllable_hmaster1) & ~(controllable_hmaster2) )|(~i_hbusreq1 ^~ (~controllable_busreq)));

// G((hmaster0=0) * (hmaster1=1) * (hmaster2=0) -> (hbusreq2=0 <-> busreq=0));
assign sys_safe_err2 =  ~( ~( ~(controllable_hmaster0) & controllable_hmaster1 & ~(controllable_hmaster2) )|(~i_hbusreq2 ^~ (~controllable_busreq)));

// G((hmaster0=1) * (hmaster1=1) * (hmaster2=0) -> (hbusreq3=0 <-> busreq=0));
assign sys_safe_err3 =  ~( ~( controllable_hmaster0 & controllable_hmaster1 & ~(controllable_hmaster2) )|(~i_hbusreq3 ^~ (~controllable_busreq)));

// G((hmaster0=0) * (hmaster1=0) * (hmaster2=1) -> (hbusreq4=0 <-> busreq=0));
assign sys_safe_err4 =  ~( ~( ~(controllable_hmaster0) & ~(controllable_hmaster1) & controllable_hmaster2 )|(~i_hbusreq4 ^~ (~controllable_busreq)));

// G((hmaster0=1) * (hmaster1=0) * (hmaster2=1) -> (hbusreq5=0 <-> busreq=0));
assign sys_safe_err5 =  ~( ~( controllable_hmaster0 & ~(controllable_hmaster1) & controllable_hmaster2 )|(~i_hbusreq5 ^~ (~controllable_busreq)));

// Guarantee 1:
// G((hready=0) -> X(start=0));
assign sys_safe_err6 =  ~( reg_i_hready | controllable_nstart );

// G(((stateG2=1) * (start=1)) -> FALSE;
assign sys_safe_err7 =  ~( ~(reg_stateG2 & ~controllable_nstart) | 0 );

// G(((stateG3_0=1) * (stateG3_1=0) * (stateG3_2=0) * ((start=1))) -> FALSE);
// G(((stateG3_0=0) * (stateG3_1=1) * (stateG3_2=0) * ((start=1))) -> FALSE);
// G(((stateG3_0=1) * (stateG3_1=1) * (stateG3_2=0) * ((start=1))) -> FALSE);
// G(((stateG3_0=0) * (stateG3_1=0) * (stateG3_2=1) * ((start=1))) -> FALSE);
// all these rules can be summarized as: only in state 000, start=1 is allowed:
assign sys_safe_err8 =  (reg_stateG3_0 | reg_stateG3_1 | reg_stateG3_2) & ~controllable_nstart;

// G( (hready=1) -> (   (hgrant0=1) <-> (X(hmaster0=0) * X(hmaster1=0) * X(hmaster2=0))  ) );
assign sys_safe_err9 =  ~( ~(reg_i_hready) | ( ~reg_controllable_nhgrant0 ^~ ( ~(controllable_hmaster0) & ~(controllable_hmaster1) & ~(controllable_hmaster2) ) ) );

// G( (hready=1) -> (   (hgrant1=1) <-> (X(hmaster0=1) * X(hmaster1=0) * X(hmaster2=0))  ) );
assign sys_safe_err10 =  ~( ~(reg_i_hready) | ( reg_controllable_hgrant1 ^~ ( controllable_hmaster0 & ~(controllable_hmaster1) & ~(controllable_hmaster2) ) ) );

// G( (hready=1) -> (   (hgrant2=1) <-> (X(hmaster0=0) * X(hmaster1=1) * X(hmaster2=0))  ) );
assign sys_safe_err11 =  ~( ~(reg_i_hready) | ( reg_controllable_hgrant2 ^~ ( ~(controllable_hmaster0) & controllable_hmaster1 & ~(controllable_hmaster2) ) ) );

// G( (hready=1) -> (   (hgrant3=1) <-> (X(hmaster0=1) * X(hmaster1=1) * X(hmaster2=0))  ) );
assign sys_safe_err12 =  ~( ~(reg_i_hready) | ( reg_controllable_hgrant3 ^~ ( controllable_hmaster0 & controllable_hmaster1 & ~(controllable_hmaster2) ) ) );

// G( (hready=1) -> (   (hgrant4=1) <-> (X(hmaster0=0) * X(hmaster1=0) * X(hmaster2=1))  ) );
assign sys_safe_err13 =  ~( ~(reg_i_hready) | ( reg_controllable_hgrant4 ^~ ( ~(controllable_hmaster0) & ~(controllable_hmaster1) & controllable_hmaster2 ) ) );

// G( (hready=1) -> (   (hgrant5=1) <-> (X(hmaster0=1) * X(hmaster1=0) * X(hmaster2=1))  ) );
assign sys_safe_err14 =  ~( ~(reg_i_hready) | ( reg_controllable_hgrant5 ^~ ( controllable_hmaster0 & ~(controllable_hmaster1) & controllable_hmaster2 ) ) );

// HMASTLOCK:
// G(  (hready=1) -> (locked=0 <-> X(hmastlock=0) ) );
assign sys_safe_err15 =  ~( ~(reg_i_hready) | (~reg_controllable_locked ^~ ~controllable_hmastlock) );

// Master 0:
// G( X(start=0) -> ( ((hmaster0=0) * (hmaster1=0) * (hmaster2=0)) <-> (X(hmaster0=0) * X(hmaster1=0) * X(hmaster2=0)) ) );
assign sys_safe_err16 =  ~( ~(controllable_nstart) | ( ( ~(reg_controllable_hmaster0) & ~(reg_controllable_hmaster1) & ~(reg_controllable_hmaster2) ) ^~ ( ~(controllable_hmaster0) & ~(controllable_hmaster1) & ~(controllable_hmaster2) )) );

// Master 1:
// G( X(start=0) -> ( ((hmaster0=1) * (hmaster1=0) * (hmaster2=0)) <-> (X(hmaster0=1) * X(hmaster1=0) * X(hmaster2=0)) ) );
assign sys_safe_err17 =  ~( ~(controllable_nstart) | ( ( reg_controllable_hmaster0 & ~(reg_controllable_hmaster1) & ~(reg_controllable_hmaster2) ) ^~ ( controllable_hmaster0 & ~(controllable_hmaster1) & ~(controllable_hmaster2) )) );

// Master 2:
// G( X(start=0) -> ( ((hmaster0=0) * (hmaster1=1) * (hmaster2=0)) <-> (X(hmaster0=0) * X(hmaster1=1) * X(hmaster2=0)) ) );
assign sys_safe_err18 =  ~( ~(controllable_nstart) | ( ( ~(reg_controllable_hmaster0) & reg_controllable_hmaster1 & ~(reg_controllable_hmaster2) ) ^~ ( ~(controllable_hmaster0) & controllable_hmaster1 & ~(controllable_hmaster2) )) );

// Master 3:
// G( X(start=0) -> ( ((hmaster0=1) * (hmaster1=1) * (hmaster2=0)) <-> (X(hmaster0=1) * X(hmaster1=1) * X(hmaster2=0)) ) );
assign sys_safe_err19 =  ~( ~(controllable_nstart) | ( ( reg_controllable_hmaster0 & reg_controllable_hmaster1 & ~(reg_controllable_hmaster2) ) ^~ ( controllable_hmaster0 & controllable_hmaster1 & ~(controllable_hmaster2) )) );

// Master 4:
// G( X(start=0) -> ( ((hmaster0=0) * (hmaster1=0) * (hmaster2=1)) <-> (X(hmaster0=0) * X(hmaster1=0) * X(hmaster2=1)) ) );
assign sys_safe_err20 =  ~( ~(controllable_nstart) | ( ( ~(reg_controllable_hmaster0) & ~(reg_controllable_hmaster1) & reg_controllable_hmaster2 ) ^~ ( ~(controllable_hmaster0) & ~(controllable_hmaster1) & controllable_hmaster2 )) );

// Master 5:
// G( X(start=0) -> ( ((hmaster0=1) * (hmaster1=0) * (hmaster2=1)) <-> (X(hmaster0=1) * X(hmaster1=0) * X(hmaster2=1)) ) );
assign sys_safe_err21 =  ~( ~(controllable_nstart) | ( ( reg_controllable_hmaster0 & ~(reg_controllable_hmaster1) & reg_controllable_hmaster2 ) ^~ ( controllable_hmaster0 & ~(controllable_hmaster1) & controllable_hmaster2 )) );

// Guarantee 6.2:
// G( ((X(start=0))) -> ( (hmastlock=1) <-> X(hmastlock=1)) );
assign sys_safe_err22 =  ~( ~(controllable_nstart) | ( reg_controllable_hmastlock ^~ controllable_hmastlock) );

// G( (decide=1  *  hlock0=1  *  X(hgrant0=1) )->X(locked=1));
assign sys_safe_err23 =  ~( ~(~reg_controllable_ndecide & reg_i_hlock0 & ~controllable_nhgrant0) | (controllable_locked) );

// G((decide=1  *  hlock0=0  *  X(hgrant0=1))->X(locked=0));
assign sys_safe_err24 =  ~( ~(~reg_controllable_ndecide & ~reg_i_hlock0 & ~controllable_nhgrant0) | (~controllable_locked) );

// G( (decide=1  *  hlock1=1  *  X(hgrant1=1) )->X(locked=1));
assign sys_safe_err25 =  ~( ~(~reg_controllable_ndecide & reg_i_hlock1 & controllable_hgrant1) | (controllable_locked) );

// G((decide=1  *  hlock1=0  *  X(hgrant1=1))->X(locked=0));
assign sys_safe_err26 =  ~( ~(~reg_controllable_ndecide & ~reg_i_hlock1 & controllable_hgrant1) | (~controllable_locked) );

// G( (decide=1  *  hlock2=1  *  X(hgrant2=1) )->X(locked=1));
assign sys_safe_err27 =  ~( ~(~reg_controllable_ndecide & reg_i_hlock2 & controllable_hgrant2) | (controllable_locked) );

// G((decide=1  *  hlock2=0  *  X(hgrant2=1))->X(locked=0));
assign sys_safe_err28 =  ~( ~(~reg_controllable_ndecide & ~reg_i_hlock2 & controllable_hgrant2) | (~controllable_locked) );

// G( (decide=1  *  hlock3=1  *  X(hgrant3=1) )->X(locked=1));
assign sys_safe_err29 =  ~( ~(~reg_controllable_ndecide & reg_i_hlock3 & controllable_hgrant3) | (controllable_locked) );

// G((decide=1  *  hlock3=0  *  X(hgrant3=1))->X(locked=0));
assign sys_safe_err30 =  ~( ~(~reg_controllable_ndecide & ~reg_i_hlock3 & controllable_hgrant3) | (~controllable_locked) );

// G( (decide=1  *  hlock4=1  *  X(hgrant4=1) )->X(locked=1));
assign sys_safe_err31 =  ~( ~(~reg_controllable_ndecide & reg_i_hlock4 & controllable_hgrant4) | (controllable_locked) );

// G((decide=1  *  hlock4=0  *  X(hgrant4=1))->X(locked=0));
assign sys_safe_err32 =  ~( ~(~reg_controllable_ndecide & ~reg_i_hlock4 & controllable_hgrant4) | (~controllable_locked) );

// G( (decide=1  *  hlock5=1  *  X(hgrant5=1) )->X(locked=1));
assign sys_safe_err33 =  ~( ~(~reg_controllable_ndecide & reg_i_hlock5 & controllable_hgrant5) | (controllable_locked) );

// G((decide=1  *  hlock5=0  *  X(hgrant5=1))->X(locked=0));
assign sys_safe_err34 =  ~( ~(~reg_controllable_ndecide & ~reg_i_hlock5 & controllable_hgrant5) | (~controllable_locked) );

// G( (decide=0) -> (  ((hgrant0=0)<->X(hgrant0=0))  ));
assign sys_safe_err35 =  ~( ~(reg_controllable_ndecide) | (reg_controllable_nhgrant0 ^~ controllable_nhgrant0) );

// G( (decide=0) -> (  ((hgrant1=0)<->X(hgrant1=0))  ));
assign sys_safe_err36 =  ~( ~(reg_controllable_ndecide) | (~reg_controllable_hgrant1 ^~ ~controllable_hgrant1) );

// G( (decide=0) -> (  ((hgrant2=0)<->X(hgrant2=0))  ));
assign sys_safe_err37 =  ~( ~(reg_controllable_ndecide) | (~reg_controllable_hgrant2 ^~ ~controllable_hgrant2) );

// G( (decide=0) -> (  ((hgrant3=0)<->X(hgrant3=0))  ));
assign sys_safe_err38 =  ~( ~(reg_controllable_ndecide) | (~reg_controllable_hgrant3 ^~ ~controllable_hgrant3) );

// G( (decide=0) -> (  ((hgrant4=0)<->X(hgrant4=0))  ));
assign sys_safe_err39 =  ~( ~(reg_controllable_ndecide) | (~reg_controllable_hgrant4 ^~ ~controllable_hgrant4) );

// G( (decide=0) -> (  ((hgrant5=0)<->X(hgrant5=0))  ));
assign sys_safe_err40 =  ~( ~(reg_controllable_ndecide) | (~reg_controllable_hgrant5 ^~ ~controllable_hgrant5) );

// G((decide=0)->(locked=0 <-> X(locked=0)));
assign sys_safe_err41 =  ~( ~(reg_controllable_ndecide) | (~reg_controllable_locked ^~ ~controllable_locked) );

// G(((stateG10_1=1) * (((hgrant1=1)) * (hbusreq1=0)))->FALSE);
assign sys_safe_err42 =  ~( ~(reg_stateG10_1 & (controllable_hgrant1 & ~i_hbusreq1)) | 0 );

// G(((stateG10_2=1) * (((hgrant2=1)) * (hbusreq2=0)))->FALSE);
assign sys_safe_err43 =  ~( ~(reg_stateG10_2 & (controllable_hgrant2 & ~i_hbusreq2)) | 0 );

// G(((stateG10_3=1) * (((hgrant3=1)) * (hbusreq3=0)))->FALSE);
assign sys_safe_err44 =  ~( ~(reg_stateG10_3 & (controllable_hgrant3 & ~i_hbusreq3)) | 0 );

// G(((stateG10_4=1) * (((hgrant4=1)) * (hbusreq4=0)))->FALSE);
assign sys_safe_err45 =  ~( ~(reg_stateG10_4 & (controllable_hgrant4 & ~i_hbusreq4)) | 0 );

// G(((stateG10_5=1) * (((hgrant5=1)) * (hbusreq5=0)))->FALSE);
assign sys_safe_err46 =  ~( ~(reg_stateG10_5 & (controllable_hgrant5 & ~i_hbusreq5)) | 0 );

// default master
// G((decide=1  *  hbusreq0=0  *  hbusreq1=0  *  hbusreq2=0  *  hbusreq3=0  *  hbusreq4=0  *  hbusreq5=0) -> X(hgrant0=1));
assign sys_safe_err47 =  ~( ~(~reg_controllable_ndecide & (~reg_i_hbusreq0 & ~reg_i_hbusreq1 & ~reg_i_hbusreq2 & ~reg_i_hbusreq3 & ~reg_i_hbusreq4 & ~reg_i_hbusreq5)) | (~controllable_nhgrant0) );

// collecting together the safety error bits:
assign sys_safe_err = sys_safe_err0 |
                      sys_safe_err1 |
                      sys_safe_err2 |
                      sys_safe_err3 |
                      sys_safe_err4 |
                      sys_safe_err5 |
                      sys_safe_err6 |
                      sys_safe_err7 |
                      sys_safe_err8 |
                      sys_safe_err9 |
                      sys_safe_err10 |
                      sys_safe_err11 |
                      sys_safe_err12 |
                      sys_safe_err13 |
                      sys_safe_err14 |
                      sys_safe_err15 |
                      sys_safe_err16 |
                      sys_safe_err17 |
                      sys_safe_err18 |
                      sys_safe_err19 |
                      sys_safe_err20 |
                      sys_safe_err21 |
                      sys_safe_err22 |
                      sys_safe_err23 |
                      sys_safe_err24 |
                      sys_safe_err25 |
                      sys_safe_err26 |
                      sys_safe_err27 |
                      sys_safe_err28 |
                      sys_safe_err29 |
                      sys_safe_err30 |
                      sys_safe_err31 |
                      sys_safe_err32 |
                      sys_safe_err33 |
                      sys_safe_err34 |
                      sys_safe_err35 |
                      sys_safe_err36 |
                      sys_safe_err37 |
                      sys_safe_err38 |
                      sys_safe_err39 |
                      sys_safe_err40 |
                      sys_safe_err41 |
                      sys_safe_err42 |
                      sys_safe_err43 |
                      sys_safe_err44 |
                      sys_safe_err45 |
                      sys_safe_err46 |
                      sys_safe_err47;

// =============================================================
//                          ENV_FAIRNESS:
// =============================================================
// Assumption 1: 
// G(F(stateA1=0));
assign env_fair0 =  ~reg_stateA1;

// Assumption 2:
// G(F(hready=1));
assign env_fair1 =  i_hready;


// =============================================================
//                          SYS_FAIRNESS:
// =============================================================
// Guarantee 2:
// G(F(stateG2=0));
assign sys_fair0 = ~reg_stateG2;

// Guarantee 3:
// G(F((stateG3_0=0)  *  (stateG3_1=0)  *  (stateG3_2=0)));
assign sys_fair1 =  (~reg_stateG3_0 & ~reg_stateG3_1 & ~reg_stateG3_2);

// G(F(((hmaster0=0) * (hmaster1=0) * (hmaster2=0))  |  hbusreq0=0));
assign sys_fair2 =  ( ~(controllable_hmaster0) & ~(controllable_hmaster1) & ~(controllable_hmaster2) ) | ~i_hbusreq0;

// G(F(((hmaster0=1) * (hmaster1=0) * (hmaster2=0))  |  hbusreq1=0));
assign sys_fair3 =  ( controllable_hmaster0 & ~(controllable_hmaster1) & ~(controllable_hmaster2) ) | ~i_hbusreq1;

// G(F(((hmaster0=0) * (hmaster1=1) * (hmaster2=0))  |  hbusreq2=0));
assign sys_fair4 =  ( ~(controllable_hmaster0) & controllable_hmaster1 & ~(controllable_hmaster2) ) | ~i_hbusreq2;

// G(F(((hmaster0=1) * (hmaster1=1) * (hmaster2=0))  |  hbusreq3=0));
assign sys_fair5 =  ( controllable_hmaster0 & controllable_hmaster1 & ~(controllable_hmaster2) ) | ~i_hbusreq3;

// G(F(((hmaster0=0) * (hmaster1=0) * (hmaster2=1))  |  hbusreq4=0));
assign sys_fair6 =  ( ~(controllable_hmaster0) & ~(controllable_hmaster1) & controllable_hmaster2 ) | ~i_hbusreq4;

// G(F(((hmaster0=1) * (hmaster1=0) * (hmaster2=1))  |  hbusreq5=0));
assign sys_fair7 =  ( controllable_hmaster0 & ~(controllable_hmaster1) & controllable_hmaster2 ) | ~i_hbusreq5;

assign fair_err = (fair_cnt >= 6'b110010);

// computing the error output bit:
assign o_err = ~env_safe_err & ~env_safe_err_happened & (sys_safe_err | fair_err);

initial
 begin
  reg_i_hready = 0;
  reg_i_hbusreq0 = 0;
  reg_i_hlock0 = 0;
  reg_i_hbusreq1 = 0;
  reg_i_hlock1 = 0;
  reg_i_hbusreq2 = 0;
  reg_i_hlock2 = 0;
  reg_i_hbusreq3 = 0;
  reg_i_hlock3 = 0;
  reg_i_hbusreq4 = 0;
  reg_i_hlock4 = 0;
  reg_i_hbusreq5 = 0;
  reg_i_hlock5 = 0;
  reg_controllable_hmaster0 = 0;
  reg_controllable_hmaster1 = 0;
  reg_controllable_hmaster2 = 0;
  reg_controllable_hmastlock = 0;
  reg_controllable_nstart = 0;
  reg_controllable_ndecide = 0;
  reg_controllable_locked = 0;
  reg_controllable_nhgrant0 = 0;
  reg_controllable_hgrant1 = 0;
  reg_controllable_hgrant2 = 0;
  reg_controllable_hgrant3 = 0;
  reg_controllable_hgrant4 = 0;
  reg_controllable_hgrant5 = 0;
  reg_controllable_busreq = 0;
  reg_stateA1 = 0;
  reg_stateG2 = 0;
  reg_stateG3_0 = 0;
  reg_stateG3_1 = 0;
  reg_stateG3_2 = 0;
  reg_stateG10_1 = 0;
  reg_stateG10_2 = 0;
  reg_stateG10_3 = 0;
  reg_stateG10_4 = 0;
  reg_stateG10_5 = 0;
  env_safe_err_happened = 0;
  next_env_fair = 0;
  fair_cnt = 0;
  next_sys_fair = 0;
 end


always @(posedge i_clk)
 begin
   // We remember if an environment error occurred:
   env_safe_err_happened = env_safe_err_happened | env_safe_err;

   // Updating the fairness counters: 
   if((next_sys_fair == 0) & sys_fair0)
    begin
      next_sys_fair = 1;
      next_env_fair = 0;
      fair_cnt = 0;
    end
   else if((next_sys_fair == 1) & sys_fair1)
    begin
      next_sys_fair = 2;
      next_env_fair = 0;
      fair_cnt = 0;
    end
   else if((next_sys_fair == 2) & sys_fair2)
    begin
      next_sys_fair = 3;
      next_env_fair = 0;
      fair_cnt = 0;
    end
   else if((next_sys_fair == 3) & sys_fair3)
    begin
      next_sys_fair = 4;
      next_env_fair = 0;
      fair_cnt = 0;
    end
   else if((next_sys_fair == 4) & sys_fair4)
    begin
      next_sys_fair = 5;
      next_env_fair = 0;
      fair_cnt = 0;
    end
   else if((next_sys_fair == 5) & sys_fair5)
    begin
      next_sys_fair = 6;
      next_env_fair = 0;
      fair_cnt = 0;
    end
   else if((next_sys_fair == 6) & sys_fair6)
    begin
      next_sys_fair = 7;
      next_env_fair = 0;
      fair_cnt = 0;
    end
   else if((next_sys_fair == 7) & sys_fair7)
    begin
      next_sys_fair = 0;
      next_env_fair = 0;
      fair_cnt = 0;
    end
   else if(~next_env_fair & env_fair0)
    begin
      next_env_fair = 1;
    end
   else if(next_env_fair & env_fair1)
    begin
      next_env_fair = 0;
      fair_cnt = fair_cnt + 1;
    end

   // Updating the automata: 
   // Automaton A1: 
   if(~reg_stateA1 & controllable_hmastlock & ~i_hburst0 & ~i_hburst1)
    begin
      reg_stateA1 = 1'b1;
    end
   else if(reg_stateA1 & ~controllable_busreq)
    begin
      reg_stateA1 = 1'b0;
    end

   // Automaton G2: 
   if(~reg_stateG2)
    begin
      if(controllable_hmastlock & ~controllable_nstart & ~i_hburst0 & ~i_hburst1)
       begin
         reg_stateG2 = 1'b1;
       end
    end
   else // if(reg_stateG2)
    begin
      if(~controllable_busreq)
       begin
         reg_stateG2 = 1'b0;
       end
    end

   // Automaton G3: 
   if(~reg_stateG3_0 & ~reg_stateG3_1 & ~reg_stateG3_2 & controllable_hmastlock & ~controllable_nstart &  ~i_hburst0 & i_hburst1 & ~i_hready)
    begin
      reg_stateG3_0 = 1'b1;
      reg_stateG3_1 = 1'b0;
      reg_stateG3_2 = 1'b0;
    end
   else if(~reg_stateG3_0 & ~reg_stateG3_1 & ~reg_stateG3_2 & controllable_hmastlock & ~controllable_nstart &  ~i_hburst0 & i_hburst1 & i_hready)
    begin
      reg_stateG3_0 = 1'b0;
      reg_stateG3_1 = 1'b1;
      reg_stateG3_2 = 1'b0;
    end
   else if(reg_stateG3_0 & ~reg_stateG3_1 & ~reg_stateG3_2 & i_hready)
    begin
      reg_stateG3_0 = 1'b0;
      reg_stateG3_1 = 1'b1;
      reg_stateG3_2 = 1'b0;
    end
   else if(~reg_stateG3_0 & reg_stateG3_1 & ~reg_stateG3_2 & i_hready)
    begin
      reg_stateG3_0 = 1'b1;
      reg_stateG3_1 = 1'b1;
      reg_stateG3_2 = 1'b0;
    end
   else if(reg_stateG3_0 & reg_stateG3_1 & ~reg_stateG3_2 & i_hready)
    begin
      reg_stateG3_0 = 1'b0;
      reg_stateG3_1 = 1'b0;
      reg_stateG3_2 = 1'b1;
    end
   else if(~reg_stateG3_0 & ~reg_stateG3_1 & reg_stateG3_2 & i_hready)
    begin
      reg_stateG3_0 = 1'b0;
      reg_stateG3_1 = 1'b0;
      reg_stateG3_2 = 1'b0;
    end

   // Automaton G10_1: 
   if(~reg_stateG10_1 & ~controllable_hgrant1 & ~i_hbusreq1)
    begin
      reg_stateG10_1 = 1'b1;
    end
   else if(reg_stateG10_1 & i_hbusreq1)
    begin
      reg_stateG10_1 = 1'b0;
    end

   // Automaton G10_2: 
   if(~reg_stateG10_2 & ~controllable_hgrant2 & ~i_hbusreq2)
    begin
      reg_stateG10_2 = 1'b1;
    end
   else if(reg_stateG10_2 & i_hbusreq2)
    begin
      reg_stateG10_2 = 1'b0;
    end

   // Automaton G10_3: 
   if(~reg_stateG10_3 & ~controllable_hgrant3 & ~i_hbusreq3)
    begin
      reg_stateG10_3 = 1'b1;
    end
   else if(reg_stateG10_3 & i_hbusreq3)
    begin
      reg_stateG10_3 = 1'b0;
    end

   // Automaton G10_4: 
   if(~reg_stateG10_4 & ~controllable_hgrant4 & ~i_hbusreq4)
    begin
      reg_stateG10_4 = 1'b1;
    end
   else if(reg_stateG10_4 & i_hbusreq4)
    begin
      reg_stateG10_4 = 1'b0;
    end

   // Automaton G10_5: 
   if(~reg_stateG10_5 & ~controllable_hgrant5 & ~i_hbusreq5)
    begin
      reg_stateG10_5 = 1'b1;
    end
   else if(reg_stateG10_5 & i_hbusreq5)
    begin
      reg_stateG10_5 = 1'b0;
    end

   // Latching the previous input:
   reg_i_hready =  i_hready;
   reg_i_hbusreq0 =  i_hbusreq0;
   reg_i_hlock0 =  i_hlock0;
   reg_i_hbusreq1 =  i_hbusreq1;
   reg_i_hlock1 =  i_hlock1;
   reg_i_hbusreq2 =  i_hbusreq2;
   reg_i_hlock2 =  i_hlock2;
   reg_i_hbusreq3 =  i_hbusreq3;
   reg_i_hlock3 =  i_hlock3;
   reg_i_hbusreq4 =  i_hbusreq4;
   reg_i_hlock4 =  i_hlock4;
   reg_i_hbusreq5 =  i_hbusreq5;
   reg_i_hlock5 =  i_hlock5;
   reg_controllable_hmaster0 =  controllable_hmaster0;
   reg_controllable_hmaster1 =  controllable_hmaster1;
   reg_controllable_hmaster2 =  controllable_hmaster2;
   reg_controllable_hmastlock =  controllable_hmastlock;
   reg_controllable_nstart =  controllable_nstart;
   reg_controllable_ndecide =  controllable_ndecide;
   reg_controllable_locked =  controllable_locked;
   reg_controllable_nhgrant0 =  controllable_nhgrant0;
   reg_controllable_hgrant1 =  controllable_hgrant1;
   reg_controllable_hgrant2 =  controllable_hgrant2;
   reg_controllable_hgrant3 =  controllable_hgrant3;
   reg_controllable_hgrant4 =  controllable_hgrant4;
   reg_controllable_hgrant5 =  controllable_hgrant5;
   reg_controllable_busreq =  controllable_busreq;

 end
endmodule

-------------------------------
#!SYNTCOMP
STATUS : realizable
SOLVED_BY : 3/3 [2015-pre-classification]
SOLVED_IN : 3.19959 [2015-pre-classification]
#.
