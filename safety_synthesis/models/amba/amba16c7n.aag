aag 1716 60 90 1 1566
2
4
6
8
10
12
14
16
18
20
22
24
26
28
30
32
34
36
38
40
42
44
46
48
50
52
54
56
58
60
62
64
66
68
70
72
74
76
78
80
82
84
86
88
90
92
94
96
98
100
102
104
106
108
110
112
114
116
118
120
122 1
124 72
126 18
128 104
130 102
132 68
134 20
136 108
138 98
140 64
142 22
144 94
146 58
148 24
150 90
152 86
154 26
156 116
158 28
160 2039
162 30
164 2061
166 32
168 2145
170 2167
172 2191
174 2213
176 2233
178 10
180 52
182 2263
184 2285
186 8
188 2795
190 2801
192 2807
194 2829
196 6
198 74
200 2851
202 4
204 2905
206 70
208 2935
210 2957
212 2
214 66
216 2979
218 120
220 60
222 3001
224 36
226 118
228 50
230 34
232 42
234 3023
236 80
238 114
240 48
242 3045
244 112
246 46
248 82
250 3067
252 110
254 44
256 54
258 84
260 3089
262 369
264 40
266 88
268 3111
270 38
272 92
274 78
276 14
278 96
280 76
282 3403
284 3409
286 3415
288 3421
290 3427
292 3433
294 12
296 16
298 100
300 106
2016
302 110 15
304 112 17
306 305 303
308 114 19
310 309 306
312 118 21
314 313 310
316 120 23
318 317 314
320 25 2
322 321 318
324 27 4
326 325 322
328 29 6
330 329 326
332 31 8
334 333 330
336 33 10
338 337 334
340 107 50
342 341 338
344 103 48
346 345 342
348 99 46
350 349 346
352 95 44
354 353 350
356 91 40
358 357 354
360 87 38
362 361 358
364 263 122
366 365 122
368 367 362
370 75 71
372 370 67
374 372 61
376 43 14
378 42 15
380 379 377
382 381 374
384 74 71
386 384 67
388 386 61
390 43 16
392 42 17
394 393 391
396 395 388
398 397 383
400 75 70
402 400 67
404 402 61
406 43 18
408 42 19
410 409 407
412 411 404
414 413 398
416 74 70
418 416 67
420 418 61
422 43 20
424 42 21
426 425 423
428 427 420
430 429 414
432 370 66
434 432 61
436 43 22
438 42 23
440 439 437
442 441 434
444 443 430
446 384 66
448 446 61
450 43 24
452 42 25
454 453 451
456 455 448
458 457 444
460 400 66
462 460 61
464 43 26
466 42 27
468 467 465
470 469 462
472 471 458
474 416 66
476 474 61
478 43 28
480 42 29
482 481 479
484 483 476
486 485 472
488 372 60
490 43 30
492 42 31
494 493 491
496 495 488
498 497 486
500 386 60
502 43 32
504 42 33
506 505 503
508 507 500
510 509 498
512 402 60
514 106 43
516 107 42
518 517 515
520 519 512
522 521 510
524 418 60
526 102 43
528 103 42
530 529 527
532 531 524
534 533 522
536 432 60
538 98 43
540 99 42
542 541 539
544 543 536
546 545 534
548 446 60
550 94 43
552 95 42
554 553 551
556 555 548
558 557 546
560 460 60
562 90 43
564 91 42
566 565 563
568 567 560
570 569 558
572 474 60
574 86 43
576 87 42
578 577 575
580 579 572
582 581 570
584 225 122
586 224 122
588 585 122
590 589 117
592 591 582
594 209 122
596 208 122
598 595 122
600 596 117
602 601 592
604 169 122
606 168 122
608 605 122
610 173 122
612 172 122
614 611 122
616 615 609
618 177 122
620 176 122
622 619 122
624 623 616
626 625 117
628 627 602
630 257 122
632 256 122
634 631 122
636 632 374
638 635 375
640 639 637
642 641 586
644 643 628
646 237 122
648 236 122
650 647 122
652 651 388
654 648 389
656 655 653
658 657 586
660 659 644
662 249 122
664 248 122
666 663 122
668 667 404
670 664 405
672 671 669
674 673 586
676 675 660
678 259 122
680 258 122
682 679 122
684 683 420
686 680 421
688 687 685
690 689 586
692 691 676
694 267 122
696 266 122
698 695 122
700 699 434
702 696 435
704 703 701
706 705 586
708 707 692
710 273 122
712 272 122
714 711 122
716 715 448
718 712 449
720 719 717
722 721 586
724 723 708
726 279 122
728 278 122
730 727 122
732 731 462
734 728 463
736 735 733
738 737 586
740 739 724
742 299 122
744 298 122
746 743 122
748 747 476
750 744 477
752 751 749
754 753 586
756 755 740
758 129 122
760 128 122
762 759 122
764 763 488
766 760 489
768 767 765
770 769 586
772 771 756
774 137 122
776 136 122
778 775 122
780 779 500
782 776 501
784 783 781
786 785 586
788 787 772
790 147 122
792 146 122
794 791 122
796 795 512
798 792 513
800 799 797
802 801 586
804 803 788
806 141 122
808 140 122
810 807 122
812 811 524
814 808 525
816 815 813
818 817 586
820 819 804
822 133 122
824 132 122
826 823 122
828 827 536
830 824 537
832 831 829
834 833 586
836 835 820
838 125 122
840 124 122
842 839 122
844 843 548
846 840 549
848 847 845
850 849 586
852 851 836
854 281 122
856 280 122
858 855 122
860 859 560
862 856 561
864 863 861
866 865 586
868 867 852
870 275 122
872 274 122
874 871 122
876 875 572
878 872 573
880 879 877
882 881 586
884 883 868
886 295 122
888 294 122
890 887 122
892 888 53
894 891 52
896 895 893
898 897 586
900 899 884
902 199 122
904 198 122
906 903 122
908 207 122
910 206 122
912 909 122
914 913 907
916 215 122
918 214 122
920 917 122
922 921 914
924 221 122
926 220 122
928 925 122
930 929 922
932 931 374
934 930 375
936 935 933
938 937 116
940 939 900
942 913 904
944 942 921
946 944 929
948 947 388
950 946 389
952 951 949
954 953 116
956 955 940
958 910 907
960 958 921
962 960 929
964 963 404
966 962 405
968 967 965
970 969 116
972 971 956
974 910 904
976 974 921
978 976 929
980 979 420
982 978 421
984 983 981
986 985 116
988 987 972
990 918 914
992 990 929
994 993 434
996 992 435
998 997 995
1000 999 116
1002 1001 988
1004 942 918
1006 1004 929
1008 1007 448
1010 1006 449
1012 1011 1009
1014 1013 116
1016 1015 1002
1018 958 918
1020 1018 929
1022 1021 462
1024 1020 463
1026 1025 1023
1028 1027 116
1030 1029 1016
1032 974 918
1034 1032 929
1036 1035 476
1038 1034 477
1040 1039 1037
1042 1041 116
1044 1043 1030
1046 926 922
1048 1047 488
1050 1046 489
1052 1051 1049
1054 1053 116
1056 1055 1044
1058 944 926
1060 1059 500
1062 1058 501
1064 1063 1061
1066 1065 116
1068 1067 1056
1070 960 926
1072 1071 512
1074 1070 513
1076 1075 1073
1078 1077 116
1080 1079 1068
1082 976 926
1084 1083 524
1086 1082 525
1088 1087 1085
1090 1089 116
1092 1091 1080
1094 990 926
1096 1095 536
1098 1094 537
1100 1099 1097
1102 1101 116
1104 1103 1092
1106 1004 926
1108 1107 548
1110 1106 549
1112 1111 1109
1114 1113 116
1116 1115 1104
1118 1018 926
1120 1119 560
1122 1118 561
1124 1123 1121
1126 1125 116
1128 1127 1116
1130 1032 926
1132 1131 572
1134 1130 573
1136 1135 1133
1138 1137 116
1140 1139 1128
1142 181 122
1144 180 122
1146 1143 122
1148 1147 52
1150 1144 53
1152 1151 1149
1154 1153 116
1156 1155 1140
1158 231 122
1160 230 122
1162 1159 122
1164 253 122
1166 252 122
1168 1165 122
1170 1166 1163
1172 1170 55
1174 1172 13
1176 1175 1156
1178 1169 1163
1180 1178 55
1182 1180 12
1184 1183 1176
1186 245 122
1188 244 122
1190 1187 122
1192 1188 1163
1194 1192 80
1196 1194 13
1198 1197 1184
1200 1191 1163
1202 1200 80
1204 1202 12
1206 1205 1198
1208 239 122
1210 238 122
1212 1209 122
1214 1210 1163
1216 1214 82
1218 1216 13
1220 1219 1206
1222 1213 1163
1224 1222 82
1226 1224 12
1228 1227 1220
1230 227 122
1232 226 122
1234 1231 122
1236 1232 1163
1238 1236 84
1240 1238 13
1242 1241 1228
1244 1235 1163
1246 1244 84
1248 1246 12
1250 1249 1242
1252 219 122
1254 218 122
1256 1253 122
1258 1254 1163
1260 1258 88
1262 1260 13
1264 1263 1250
1266 1257 1163
1268 1266 88
1270 1268 12
1272 1271 1264
1274 213 122
1276 212 122
1278 1275 122
1280 1276 1163
1282 1280 92
1284 1282 13
1286 1285 1272
1288 1279 1163
1290 1288 92
1292 1290 12
1294 1293 1286
1296 203 122
1298 202 122
1300 1297 122
1302 1298 1163
1304 1302 96
1306 1304 13
1308 1307 1294
1310 1301 1163
1312 1310 96
1314 1312 12
1316 1315 1308
1318 197 122
1320 196 122
1322 1319 122
1324 1320 1163
1326 1324 100
1328 1326 13
1330 1329 1316
1332 1323 1163
1334 1332 100
1336 1334 12
1338 1337 1330
1340 187 122
1342 186 122
1344 1341 122
1346 1342 1163
1348 1346 104
1350 1348 13
1352 1351 1338
1354 1345 1163
1356 1354 104
1358 1356 12
1360 1359 1352
1362 179 122
1364 178 122
1366 1363 122
1368 1364 1163
1370 1368 108
1372 1370 13
1374 1373 1360
1376 1367 1163
1378 1376 108
1380 1378 12
1382 1381 1374
1384 229 122
1386 228 122
1388 1385 122
1390 1386 1163
1392 1390 58
1394 1392 13
1396 1395 1382
1398 1389 1163
1400 1398 58
1402 1400 12
1404 1403 1396
1406 241 122
1408 240 122
1410 1407 122
1412 1408 1163
1414 1412 64
1416 1414 13
1418 1417 1404
1420 1411 1163
1422 1420 64
1424 1422 12
1426 1425 1418
1428 247 122
1430 246 122
1432 1429 122
1434 1430 1163
1436 1434 68
1438 1436 13
1440 1439 1426
1442 1433 1163
1444 1442 68
1446 1444 12
1448 1447 1440
1450 255 122
1452 254 122
1454 1451 122
1456 1452 1163
1458 1456 72
1460 1458 13
1462 1461 1448
1464 1455 1163
1466 1464 72
1468 1466 12
1470 1469 1462
1472 265 122
1474 264 122
1476 1473 122
1478 1474 1163
1480 1478 76
1482 1480 13
1484 1483 1470
1486 1477 1163
1488 1486 76
1490 1488 12
1492 1491 1484
1494 271 122
1496 270 122
1498 1495 122
1500 1496 1163
1502 1500 78
1504 1502 13
1506 1505 1492
1508 1499 1163
1510 1508 78
1512 1510 12
1514 1513 1506
1516 635 54
1518 632 55
1520 1519 1517
1522 1521 1160
1524 1523 1514
1526 648 81
1528 651 80
1530 1529 1527
1532 1531 1160
1534 1533 1524
1536 664 83
1538 667 82
1540 1539 1537
1542 1541 1160
1544 1543 1534
1546 680 85
1548 683 84
1550 1549 1547
1552 1551 1160
1554 1553 1544
1556 696 89
1558 699 88
1560 1559 1557
1562 1561 1160
1564 1563 1554
1566 712 93
1568 715 92
1570 1569 1567
1572 1571 1160
1574 1573 1564
1576 728 97
1578 731 96
1580 1579 1577
1582 1581 1160
1584 1583 1574
1586 744 101
1588 747 100
1590 1589 1587
1592 1591 1160
1594 1593 1584
1596 760 105
1598 763 104
1600 1599 1597
1602 1601 1160
1604 1603 1594
1606 776 109
1608 779 108
1610 1609 1607
1612 1611 1160
1614 1613 1604
1616 792 59
1618 795 58
1620 1619 1617
1622 1621 1160
1624 1623 1614
1626 808 65
1628 811 64
1630 1629 1627
1632 1631 1160
1634 1633 1624
1636 824 69
1638 827 68
1640 1639 1637
1642 1641 1160
1644 1643 1634
1646 840 73
1648 843 72
1650 1649 1647
1652 1651 1160
1654 1653 1644
1656 856 77
1658 859 76
1660 1659 1657
1662 1661 1160
1664 1663 1654
1666 872 79
1668 875 78
1670 1669 1667
1672 1671 1160
1674 1673 1664
1676 888 13
1678 891 12
1680 1679 1677
1682 1681 1160
1684 1683 1674
1686 201 122
1688 200 122
1690 1687 122
1692 80 17
1694 1692 1688
1696 1695 1684
1698 211 122
1700 210 122
1702 1699 122
1704 82 19
1706 1704 1700
1708 1707 1696
1710 217 122
1712 216 122
1714 1711 122
1716 84 21
1718 1716 1712
1720 1719 1708
1722 223 122
1724 222 122
1726 1723 122
1728 88 23
1730 1728 1724
1732 1731 1720
1734 235 122
1736 234 122
1738 1735 122
1740 92 25
1742 1740 1736
1744 1743 1732
1746 243 122
1748 242 122
1750 1747 122
1752 96 27
1754 1752 1748
1756 1755 1744
1758 251 122
1760 250 122
1762 1759 122
1764 100 29
1766 1764 1760
1768 1767 1756
1770 261 122
1772 260 122
1774 1771 122
1776 104 31
1778 1776 1772
1780 1779 1768
1782 269 122
1784 268 122
1786 1783 122
1788 108 33
1790 1788 1784
1792 1791 1780
1794 195 122
1796 194 122
1798 1795 122
1800 107 58
1802 1800 1796
1804 1803 1792
1806 185 122
1808 184 122
1810 1807 122
1812 103 64
1814 1812 1808
1816 1815 1804
1818 175 122
1820 174 122
1822 1819 122
1824 99 68
1826 1824 1820
1828 1827 1816
1830 171 122
1832 170 122
1834 1831 122
1836 95 72
1838 1836 1832
1840 1839 1828
1842 165 122
1844 164 122
1846 1843 122
1848 91 76
1850 1848 1844
1852 1851 1840
1854 161 122
1856 160 122
1858 1855 122
1860 87 78
1862 1860 1856
1864 1863 1852
1866 277 122
1868 1867 122
1870 297 122
1872 1871 122
1874 1873 1869
1876 127 122
1878 1877 122
1880 1879 1874
1882 135 122
1884 1883 122
1886 1885 1880
1888 143 122
1890 1889 122
1892 1891 1886
1894 149 122
1896 1895 122
1898 1897 1892
1900 155 122
1902 1901 122
1904 1903 1898
1906 159 122
1908 1907 122
1910 1909 1904
1912 163 122
1914 1913 122
1916 1915 1910
1918 167 122
1920 1919 122
1922 1921 1916
1924 301 122
1926 1925 122
1928 1927 1922
1930 131 122
1932 1931 122
1934 1933 1928
1936 139 122
1938 1937 122
1940 1939 1934
1942 145 122
1944 1943 122
1946 1945 1940
1948 151 122
1950 1949 122
1952 1951 1946
1954 153 122
1956 1955 122
1958 1957 1952
1960 1958 1163
1962 1960 54
1964 1963 1864
1966 193 122
1968 192 122
1970 1967 122
1972 191 122
1974 190 122
1976 1973 122
1978 189 122
1980 188 122
1982 1979 122
1984 1983 1977
1986 1985 1976
1988 1986 1982
1990 1989 1971
1992 1991 1970
1994 1992 1988
1996 1982 1977
1998 1983 1974
2000 1999 1997
2002 1988 1971
2004 1989 1968
2006 2005 2003
2008 2000 1982
2010 2008 2006
2012 2011 1995
2014 2012 1964
2016 2015 368
2018 1859 79
2020 2018 87
2022 1856 86
2024 2022 2021
2026 2025 2021
2028 2023 1856
2030 2028 2021
2032 2031 2021
2034 2033 2027
2036 2026 1856
2038 2037 2035
2040 1847 77
2042 2040 91
2044 1844 90
2046 2044 2043
2048 2047 2043
2050 2045 1844
2052 2050 2043
2054 2053 2043
2056 2055 2049
2058 2048 1844
2060 2059 2057
2062 624 52
2064 2062 117
2066 2064 63
2068 2066 56
2070 2068 37
2072 2068 36
2074 615 606
2076 2074 623
2078 2076 36
2080 612 609
2082 2080 623
2084 2082 36
2086 612 606
2088 2086 623
2090 2088 36
2092 620 616
2094 2092 36
2096 2072 2071
2098 2097 2071
2100 2073 2071
2102 2100 2078
2104 2103 2098
2106 2100 2079
2108 2106 2084
2110 2109 2104
2112 2106 2085
2114 2112 2090
2116 2115 2110
2118 2112 2091
2120 2118 2094
2122 2121 2116
2124 2095 606
2126 2124 2091
2128 2126 2085
2130 2129 2085
2132 2131 2079
2134 2132 2073
2136 2134 2071
2138 2137 2071
2140 2139 2123
2142 2122 606
2144 2143 2141
2146 1835 73
2148 2146 95
2150 1832 94
2152 2150 2149
2154 2153 2149
2156 2151 1832
2158 2156 2149
2160 2159 2149
2162 2161 2155
2164 2154 1832
2166 2165 2163
2168 2095 612
2170 2168 2091
2172 2170 2085
2174 2173 2085
2176 2175 2079
2178 2177 2079
2180 2179 2073
2182 2181 2073
2184 2183 2071
2186 2184 2123
2188 2122 612
2190 2189 2187
2192 1823 69
2194 2192 99
2196 1820 98
2198 2196 2195
2200 2199 2195
2202 2197 1820
2204 2202 2195
2206 2205 2195
2208 2207 2201
2210 2200 1820
2212 2211 2209
2214 2095 620
2216 2214 2091
2218 2217 2091
2220 2219 2085
2222 2220 2079
2224 2222 2073
2226 2224 2071
2228 2226 2123
2230 2122 620
2232 2231 2229
2234 183 122
2236 182 122
2238 2235 122
2240 2239 52
2242 2240 63
2244 2242 57
2246 2236 43
2248 2246 2245
2250 2249 2245
2252 2247 2236
2254 2252 2245
2256 2255 2245
2258 2257 2251
2260 2250 2236
2262 2261 2259
2264 1811 65
2266 2264 103
2268 1808 102
2270 2268 2267
2272 2271 2267
2274 2269 1808
2276 2274 2267
2278 2277 2267
2280 2279 2273
2282 2272 1808
2284 2283 2281
2286 283 122
2288 282 122
2290 2287 122
2292 285 122
2294 284 122
2296 2293 122
2298 287 122
2300 286 122
2302 2299 122
2304 289 122
2306 288 122
2308 2305 122
2310 291 122
2312 290 122
2314 2311 122
2316 292 122
2318 2295 2289
2320 2318 2301
2322 2320 2307
2324 2322 2313
2326 2324 2317
2328 2326 599
2330 2295 2290
2332 2330 2301
2334 2332 2307
2336 2334 2313
2338 2336 2317
2340 2338 624
2342 2296 2289
2344 2342 2301
2346 2344 2307
2348 2346 2313
2350 2348 2317
2352 375 14
2354 2353 2350
2356 2296 2290
2358 2356 2301
2360 2358 2307
2362 2360 2313
2364 2362 2317
2366 389 16
2368 2367 2364
2370 2318 2302
2372 2370 2307
2374 2372 2313
2376 2374 2317
2378 405 18
2380 2379 2376
2382 2330 2302
2384 2382 2307
2386 2384 2313
2388 2386 2317
2390 421 20
2392 2391 2388
2394 2342 2302
2396 2394 2307
2398 2396 2313
2400 2398 2317
2402 435 22
2404 2403 2400
2406 2356 2302
2408 2406 2307
2410 2408 2313
2412 2410 2317
2414 449 24
2416 2415 2412
2418 2320 2308
2420 2418 2313
2422 2420 2317
2424 463 26
2426 2425 2422
2428 2332 2308
2430 2428 2313
2432 2430 2317
2434 477 28
2436 2435 2432
2438 2344 2308
2440 2438 2313
2442 2440 2317
2444 489 30
2446 2445 2442
2448 2358 2308
2450 2448 2313
2452 2450 2317
2454 501 32
2456 2455 2452
2458 2370 2308
2460 2458 2313
2462 2460 2317
2464 513 106
2466 2465 2462
2468 2382 2308
2470 2468 2313
2472 2470 2317
2474 525 102
2476 2475 2472
2478 2394 2308
2480 2478 2313
2482 2480 2317
2484 537 98
2486 2485 2482
2488 2406 2308
2490 2488 2313
2492 2490 2317
2494 549 94
2496 2495 2492
2498 2322 2314
2500 2498 2317
2502 561 90
2504 2503 2500
2506 2334 2314
2508 2506 2317
2510 573 86
2512 2511 2508
2514 205 122
2516 204 122
2518 2515 122
2520 2519 2239
2522 2516 36
2524 2340 2329
2526 2525 2329
2528 2341 2329
2530 2528 2354
2532 2531 2526
2534 2528 2355
2536 2534 2368
2538 2537 2532
2540 2534 2369
2542 2540 2380
2544 2543 2538
2546 2540 2381
2548 2546 2392
2550 2549 2544
2552 2546 2393
2554 2552 2404
2556 2555 2550
2558 2552 2405
2560 2558 2416
2562 2561 2556
2564 2558 2417
2566 2564 2426
2568 2567 2562
2570 2564 2427
2572 2570 2436
2574 2573 2568
2576 2570 2437
2578 2576 2446
2580 2579 2574
2582 2576 2447
2584 2582 2456
2586 2585 2580
2588 2582 2457
2590 2588 2466
2592 2591 2586
2594 2588 2467
2596 2594 2476
2598 2597 2592
2600 2594 2477
2602 2600 2486
2604 2603 2598
2606 2600 2487
2608 2606 2496
2610 2609 2604
2612 2606 2497
2614 2612 2504
2616 2615 2610
2618 2612 2505
2620 2618 2512
2622 2621 2616
2624 2618 2513
2626 2624 2521
2628 2626 2522
2630 2629 2622
2632 2522 1983
2634 2523 1980
2636 2635 2633
2638 2520 1980
2640 2637 2521
2642 2641 2639
2644 2643 2513
2646 2644 2505
2648 2646 2497
2650 2648 2487
2652 2650 2477
2654 2652 2467
2656 2654 2457
2658 2656 2447
2660 2658 2437
2662 2660 2427
2664 2662 2417
2666 2664 2405
2668 2666 2393
2670 2668 2381
2672 2670 2369
2674 2672 2355
2676 2674 2341
2678 2676 2329
2680 1980 1977
2682 1981 1974
2684 2683 2681
2686 2685 2522
2688 2523 1974
2690 2689 2687
2692 2520 1974
2694 2691 2521
2696 2695 2693
2698 2697 2513
2700 2698 2505
2702 2700 2497
2704 2702 2487
2706 2704 2477
2708 2706 2467
2710 2708 2457
2712 2710 2447
2714 2712 2437
2716 2714 2427
2718 2716 2417
2720 2718 2405
2722 2720 2393
2724 2722 2381
2726 2724 2369
2728 2726 2355
2730 2728 2341
2732 2730 2329
2734 1980 1974
2736 2734 1971
2738 2735 1968
2740 2739 2737
2742 2741 2522
2744 2523 1968
2746 2745 2743
2748 2520 1968
2750 2747 2521
2752 2751 2749
2754 2753 2513
2756 2754 2505
2758 2756 2497
2760 2758 2487
2762 2760 2477
2764 2762 2467
2766 2764 2457
2768 2766 2447
2770 2768 2437
2772 2770 2427
2774 2772 2417
2776 2774 2405
2778 2776 2393
2780 2778 2381
2782 2780 2369
2784 2782 2355
2786 2784 2341
2788 2786 2329
2790 2678 2631
2792 2630 1980
2794 2793 2791
2796 2732 2631
2798 2630 1974
2800 2799 2797
2802 2788 2631
2804 2630 1968
2806 2805 2803
2808 1799 59
2810 2808 107
2812 1796 106
2814 2812 2811
2816 2815 2811
2818 2813 1796
2820 2818 2811
2822 2821 2811
2824 2823 2817
2826 2816 1796
2828 2827 2825
2830 1691 81
2832 2830 17
2834 1688 16
2836 2834 2833
2838 2837 2833
2840 2835 1688
2842 2840 2833
2844 2843 2833
2846 2845 2839
2848 2838 1688
2850 2849 2847
2852 2624 2520
2854 2853 2622
2856 2854 2629
2858 2523 2516
2860 2858 2521
2862 2861 2521
2864 2863 2513
2866 2864 2505
2868 2866 2497
2870 2868 2487
2872 2870 2477
2874 2872 2467
2876 2874 2457
2878 2876 2447
2880 2878 2437
2882 2880 2427
2884 2882 2417
2886 2884 2405
2888 2886 2393
2890 2888 2381
2892 2890 2369
2894 2892 2355
2896 2894 2341
2898 2896 2329
2900 2898 2857
2902 2856 2516
2904 2903 2901
2906 117 52
2908 2906 63
2910 2908 57
2912 2910 599
2914 596 43
2916 2915 2913
2918 2911 596
2920 2919 2911
2922 596 42
2924 2921 599
2926 2922 596
2928 2927 2925
2930 2929 2917
2932 2916 596
2934 2933 2931
2936 1703 83
2938 2936 19
2940 1700 18
2942 2940 2939
2944 2943 2939
2946 2941 1700
2948 2946 2939
2950 2949 2939
2952 2951 2945
2954 2944 1700
2956 2955 2953
2958 1715 85
2960 2958 21
2962 1712 20
2964 2962 2961
2966 2965 2961
2968 2963 1712
2970 2968 2961
2972 2971 2961
2974 2973 2967
2976 2966 1712
2978 2977 2975
2980 1727 89
2982 2980 23
2984 1724 22
2986 2984 2983
2988 2987 2983
2990 2985 1724
2992 2990 2983
2994 2993 2983
2996 2995 2989
2998 2988 1724
3000 2999 2997
3002 1739 93
3004 3002 25
3006 1736 24
3008 3006 3005
3010 3009 3005
3012 3007 1736
3014 3012 3005
3016 3015 3005
3018 3017 3011
3020 3010 1736
3022 3021 3019
3024 1751 97
3026 3024 27
3028 1748 26
3030 3028 3027
3032 3031 3027
3034 3029 1748
3036 3034 3027
3038 3037 3027
3040 3039 3033
3042 3032 1748
3044 3043 3041
3046 1763 101
3048 3046 29
3050 1760 28
3052 3050 3049
3054 3053 3049
3056 3051 1760
3058 3056 3049
3060 3059 3049
3062 3061 3055
3064 3054 1760
3066 3065 3063
3068 1775 105
3070 3068 31
3072 1772 30
3074 3072 3071
3076 3075 3071
3078 3073 1772
3080 3078 3071
3082 3081 3071
3084 3083 3077
3086 3076 1772
3088 3087 3085
3090 1787 109
3092 3090 33
3094 1784 32
3096 3094 3093
3098 3097 3093
3100 3095 1784
3102 3100 3093
3104 3103 3093
3106 3105 3099
3108 3098 1784
3110 3109 3107
3112 2513 2288
3114 3112 2505
3116 3115 2505
3118 3117 2497
3120 3118 2487
3122 3121 2487
3124 3123 2477
3126 3124 2467
3128 3127 2467
3130 3129 2457
3132 3130 2447
3134 3133 2447
3136 3135 2437
3138 3136 2427
3140 3139 2427
3142 3141 2417
3144 3142 2405
3146 3145 2405
3148 3147 2393
3150 3148 2381
3152 3151 2381
3154 3153 2369
3156 3154 2355
3158 3157 2355
3160 3159 2341
3162 3160 2329
3164 3163 2329
3166 2513 2294
3168 3166 2505
3170 3168 2497
3172 3170 2487
3174 3173 2487
3176 3175 2477
3178 3177 2477
3180 3179 2467
3182 3180 2457
3184 3182 2447
3186 3185 2447
3188 3187 2437
3190 3189 2437
3192 3191 2427
3194 3192 2417
3196 3194 2405
3198 3197 2405
3200 3199 2393
3202 3201 2393
3204 3203 2381
3206 3204 2369
3208 3206 2355
3210 3209 2355
3212 3211 2341
3214 3213 2341
3216 3215 2329
3218 2513 2300
3220 3218 2505
3222 3220 2497
3224 3222 2487
3226 3225 2487
3228 3227 2477
3230 3229 2477
3232 3231 2467
3234 3233 2467
3236 3235 2457
3238 3237 2457
3240 3239 2447
3242 3240 2437
3244 3242 2427
3246 3244 2417
3248 3246 2405
3250 3249 2405
3252 3251 2393
3254 3253 2393
3256 3255 2381
3258 3257 2381
3260 3259 2369
3262 3261 2369
3264 3263 2355
3266 3264 2341
3268 3266 2329
3270 2513 2306
3272 3270 2505
3274 3272 2497
3276 3274 2487
3278 3277 2487
3280 3279 2477
3282 3281 2477
3284 3283 2467
3286 3285 2467
3288 3287 2457
3290 3289 2457
3292 3291 2447
3294 3293 2447
3296 3295 2437
3298 3297 2437
3300 3299 2427
3302 3301 2427
3304 3303 2417
3306 3305 2417
3308 3307 2405
3310 3308 2393
3312 3310 2381
3314 3312 2369
3316 3314 2355
3318 3316 2341
3320 3318 2329
3322 2513 2312
3324 3322 2505
3326 3325 2505
3328 3327 2497
3330 3329 2497
3332 3331 2487
3334 3332 2477
3336 3334 2467
3338 3336 2457
3340 3338 2447
3342 3340 2437
3344 3342 2427
3346 3344 2417
3348 3346 2405
3350 3348 2393
3352 3350 2381
3354 3352 2369
3356 3354 2355
3358 3356 2341
3360 3358 2329
3362 2513 2316
3364 3362 2505
3366 3364 2497
3368 3366 2487
3370 3368 2477
3372 3370 2467
3374 3372 2457
3376 3374 2447
3378 3376 2437
3380 3378 2427
3382 3380 2417
3384 3382 2405
3386 3384 2393
3388 3386 2381
3390 3388 2369
3392 3390 2355
3394 3392 2341
3396 3394 2329
3398 3165 2623
3400 2622 2288
3402 3401 3399
3404 3216 2623
3406 2622 2294
3408 3407 3405
3410 3268 2623
3412 2622 2300
3414 3413 3411
3416 3320 2623
3418 2622 2306
3420 3419 3417
3422 3360 2623
3424 2622 2312
3426 3425 3423
3428 3396 2623
3430 2622 2316
3432 3431 3429
i0 i_hlock5
i1 i_hlock6
i2 i_hlock7
i3 i_hlock8
i4 i_hlock9
i5 controllable_locked
i6 i_hbusreq0
i7 i_hbusreq1
i8 i_hbusreq2
i9 i_hbusreq3
i10 i_hbusreq4
i11 i_hbusreq5
i12 i_hbusreq6
i13 i_hbusreq7
i14 i_hbusreq8
i15 i_hbusreq9
i16 controllable_ndecide
i17 i_hready
i18 i_hlock15
i19 i_hlock14
i20 controllable_busreq
i21 i_hlock13
i22 i_hlock12
i23 i_hlock11
i24 i_hlock10
i25 controllable_hmastlock
i26 controllable_nhgrant0
i27 i_hburst1
i28 controllable_hgrant10
i29 controllable_hmaster3
i30 i_hburst0
i31 controllable_hgrant11
i32 controllable_hmaster2
i33 controllable_hgrant12
i34 controllable_hmaster1
i35 controllable_hgrant13
i36 controllable_hmaster0
i37 controllable_hgrant14
i38 controllable_hgrant15
i39 controllable_hgrant1
i40 controllable_hgrant2
i41 controllable_hgrant3
i42 i_hbusreq15
i43 controllable_hgrant4
i44 i_hbusreq14
i45 controllable_hgrant5
i46 i_hbusreq13
i47 controllable_hgrant6
i48 i_hbusreq12
i49 controllable_hgrant7
i50 i_hbusreq11
i51 controllable_hgrant8
i52 i_hbusreq10
i53 controllable_hgrant9
i54 i_hlock0
i55 i_hlock1
i56 i_hlock2
i57 controllable_nstart
i58 i_hlock3
i59 i_hlock4
l0 n123
l1 reg_controllable_hgrant13_out
l2 reg_i_hbusreq2_out
l3 reg_controllable_hgrant8_out
l4 reg_i_hbusreq11_out
l5 reg_controllable_hgrant12_out
l6 reg_i_hbusreq3_out
l7 reg_controllable_hgrant9_out
l8 reg_i_hbusreq12_out
l9 reg_controllable_hgrant11_out
l10 reg_i_hbusreq4_out
l11 reg_i_hbusreq13_out
l12 reg_controllable_hgrant10_out
l13 reg_i_hbusreq5_out
l14 reg_i_hbusreq14_out
l15 reg_i_hbusreq15_out
l16 reg_i_hbusreq6_out
l17 reg_controllable_nstart_out
l18 reg_i_hbusreq7_out
l19 reg_stateG10_15_out
l20 reg_i_hbusreq8_out
l21 reg_stateG10_14_out
l22 reg_i_hbusreq9_out
l23 reg_stateG3_0_out
l24 reg_stateG10_13_out
l25 reg_stateG3_1_out
l26 reg_stateG10_12_out
l27 reg_stateG3_2_out
l28 reg_i_hlock9_out
l29 reg_controllable_hmastlock_out
l30 reg_stateA1_out
l31 reg_stateG10_11_out
l32 reg_i_hlock8_out
l33 fair_cnt<0>_out
l34 fair_cnt<1>_out
l35 fair_cnt<2>_out
l36 reg_stateG10_10_out
l37 reg_i_hlock7_out
l38 reg_controllable_hmaster0_out
l39 reg_stateG10_1_out
l40 reg_i_hlock6_out
l41 next_env_fair_out
l42 reg_controllable_hmaster1_out
l43 reg_stateG2_out
l44 reg_stateG10_2_out
l45 reg_i_hlock5_out
l46 reg_controllable_hmaster2_out
l47 reg_stateG10_3_out
l48 reg_i_hlock4_out
l49 reg_controllable_hmaster3_out
l50 reg_stateG10_4_out
l51 reg_i_hready_out
l52 reg_i_hlock3_out
l53 reg_i_hlock10_out
l54 reg_controllable_ndecide_out
l55 reg_controllable_busreq_out
l56 reg_stateG10_5_out
l57 reg_controllable_hgrant1_out
l58 reg_i_hlock2_out
l59 reg_i_hlock11_out
l60 reg_stateG10_6_out
l61 reg_i_hlock1_out
l62 reg_i_hlock12_out
l63 reg_controllable_hgrant2_out
l64 reg_stateG10_7_out
l65 reg_i_hlock0_out
l66 reg_i_hlock13_out
l67 reg_controllable_nhgrant0_out
l68 reg_controllable_hgrant3_out
l69 reg_stateG10_8_out
l70 env_safe_err_happened_out
l71 reg_i_hlock14_out
l72 reg_controllable_hgrant4_out
l73 reg_stateG10_9_out
l74 reg_i_hlock15_out
l75 reg_controllable_hgrant5_out
l76 reg_controllable_hgrant15_out
l77 reg_i_hbusreq0_out
l78 reg_controllable_hgrant6_out
l79 reg_controllable_hgrant14_out
l80 next_sys_fair<0>_out
l81 next_sys_fair<1>_out
l82 next_sys_fair<2>_out
l83 next_sys_fair<3>_out
l84 next_sys_fair<4>_out
l85 next_sys_fair<5>_out
l86 reg_controllable_locked_out
l87 reg_i_hbusreq1_out
l88 reg_controllable_hgrant7_out
l89 reg_i_hbusreq10_out
o0 o_err
c
amba_16_new_7
This file was written by ABC on Tue May  5 17:02:02 2015
For information about AIGER format, refer to http://fmv.jku.at/aiger
-------------------------------
This AIGER file has been created by the following sequence of commands:
> vl2mv amba16c7.v   ---gives--> amba16c7.mv
> abc -c "read_blif_mv amba16c7.mv; write_aiger -s amba16c7n.aig"   ---gives--> amba16c7n.aig
> aigtoaig amba16c7n.aig amba16c7n.aag   ---gives--> amba16c7n.aag (this file)
Content of amba16c7.v:
module amba_16_new_7(
        o_err,
        i_clk,
        i_hready,
        i_hbusreq0,
        i_hlock0,
        i_hbusreq1,
        i_hlock1,
        i_hbusreq2,
        i_hlock2,
        i_hbusreq3,
        i_hlock3,
        i_hbusreq4,
        i_hlock4,
        i_hbusreq5,
        i_hlock5,
        i_hbusreq6,
        i_hlock6,
        i_hbusreq7,
        i_hlock7,
        i_hbusreq8,
        i_hlock8,
        i_hbusreq9,
        i_hlock9,
        i_hbusreq10,
        i_hlock10,
        i_hbusreq11,
        i_hlock11,
        i_hbusreq12,
        i_hlock12,
        i_hbusreq13,
        i_hlock13,
        i_hbusreq14,
        i_hlock14,
        i_hbusreq15,
        i_hlock15,
        i_hburst0,
        i_hburst1,
        controllable_hmaster0,
        controllable_hmaster1,
        controllable_hmaster2,
        controllable_hmaster3,
        controllable_hmastlock,
        controllable_nstart,
        controllable_ndecide,
        controllable_locked,
        controllable_nhgrant0,
        controllable_hgrant1,
        controllable_hgrant2,
        controllable_hgrant3,
        controllable_hgrant4,
        controllable_hgrant5,
        controllable_hgrant6,
        controllable_hgrant7,
        controllable_hgrant8,
        controllable_hgrant9,
        controllable_hgrant10,
        controllable_hgrant11,
        controllable_hgrant12,
        controllable_hgrant13,
        controllable_hgrant14,
        controllable_hgrant15,
        controllable_busreq);

input i_clk;
input i_hready;
input i_hbusreq0;
input i_hlock0;
input i_hbusreq1;
input i_hlock1;
input i_hbusreq2;
input i_hlock2;
input i_hbusreq3;
input i_hlock3;
input i_hbusreq4;
input i_hlock4;
input i_hbusreq5;
input i_hlock5;
input i_hbusreq6;
input i_hlock6;
input i_hbusreq7;
input i_hlock7;
input i_hbusreq8;
input i_hlock8;
input i_hbusreq9;
input i_hlock9;
input i_hbusreq10;
input i_hlock10;
input i_hbusreq11;
input i_hlock11;
input i_hbusreq12;
input i_hlock12;
input i_hbusreq13;
input i_hlock13;
input i_hbusreq14;
input i_hlock14;
input i_hbusreq15;
input i_hlock15;
input i_hburst0;
input i_hburst1;
input controllable_hmaster0;
input controllable_hmaster1;
input controllable_hmaster2;
input controllable_hmaster3;
input controllable_hmastlock;
input controllable_nstart;
input controllable_ndecide;
input controllable_locked;
input controllable_nhgrant0;
input controllable_hgrant1;
input controllable_hgrant2;
input controllable_hgrant3;
input controllable_hgrant4;
input controllable_hgrant5;
input controllable_hgrant6;
input controllable_hgrant7;
input controllable_hgrant8;
input controllable_hgrant9;
input controllable_hgrant10;
input controllable_hgrant11;
input controllable_hgrant12;
input controllable_hgrant13;
input controllable_hgrant14;
input controllable_hgrant15;
input controllable_busreq;
output o_err;

reg reg_i_hready;
reg reg_i_hbusreq0;
reg reg_i_hlock0;
reg reg_i_hbusreq1;
reg reg_i_hlock1;
reg reg_i_hbusreq2;
reg reg_i_hlock2;
reg reg_i_hbusreq3;
reg reg_i_hlock3;
reg reg_i_hbusreq4;
reg reg_i_hlock4;
reg reg_i_hbusreq5;
reg reg_i_hlock5;
reg reg_i_hbusreq6;
reg reg_i_hlock6;
reg reg_i_hbusreq7;
reg reg_i_hlock7;
reg reg_i_hbusreq8;
reg reg_i_hlock8;
reg reg_i_hbusreq9;
reg reg_i_hlock9;
reg reg_i_hbusreq10;
reg reg_i_hlock10;
reg reg_i_hbusreq11;
reg reg_i_hlock11;
reg reg_i_hbusreq12;
reg reg_i_hlock12;
reg reg_i_hbusreq13;
reg reg_i_hlock13;
reg reg_i_hbusreq14;
reg reg_i_hlock14;
reg reg_i_hbusreq15;
reg reg_i_hlock15;
reg reg_controllable_hmaster0;
reg reg_controllable_hmaster1;
reg reg_controllable_hmaster2;
reg reg_controllable_hmaster3;
reg reg_controllable_hmastlock;
reg reg_controllable_nstart;
reg reg_controllable_ndecide;
reg reg_controllable_locked;
reg reg_controllable_nhgrant0;
reg reg_controllable_hgrant1;
reg reg_controllable_hgrant2;
reg reg_controllable_hgrant3;
reg reg_controllable_hgrant4;
reg reg_controllable_hgrant5;
reg reg_controllable_hgrant6;
reg reg_controllable_hgrant7;
reg reg_controllable_hgrant8;
reg reg_controllable_hgrant9;
reg reg_controllable_hgrant10;
reg reg_controllable_hgrant11;
reg reg_controllable_hgrant12;
reg reg_controllable_hgrant13;
reg reg_controllable_hgrant14;
reg reg_controllable_hgrant15;
reg reg_controllable_busreq;
reg reg_stateA1;
reg reg_stateG2;
reg reg_stateG3_0;
reg reg_stateG3_1;
reg reg_stateG3_2;
reg reg_stateG10_1;
reg reg_stateG10_2;
reg reg_stateG10_3;
reg reg_stateG10_4;
reg reg_stateG10_5;
reg reg_stateG10_6;
reg reg_stateG10_7;
reg reg_stateG10_8;
reg reg_stateG10_9;
reg reg_stateG10_10;
reg reg_stateG10_11;
reg reg_stateG10_12;
reg reg_stateG10_13;
reg reg_stateG10_14;
reg reg_stateG10_15;
reg env_safe_err_happened;
reg next_env_fair;
reg [2:0] fair_cnt;
reg [5:0] next_sys_fair;

wire env_safe_err0;
wire env_safe_err1;
wire env_safe_err2;
wire env_safe_err3;
wire env_safe_err4;
wire env_safe_err5;
wire env_safe_err6;
wire env_safe_err7;
wire env_safe_err8;
wire env_safe_err9;
wire env_safe_err10;
wire env_safe_err11;
wire env_safe_err12;
wire env_safe_err13;
wire env_safe_err14;
wire env_safe_err15;
wire env_safe_err;

wire sys_safe_err0;
wire sys_safe_err1;
wire sys_safe_err2;
wire sys_safe_err3;
wire sys_safe_err4;
wire sys_safe_err5;
wire sys_safe_err6;
wire sys_safe_err7;
wire sys_safe_err8;
wire sys_safe_err9;
wire sys_safe_err10;
wire sys_safe_err11;
wire sys_safe_err12;
wire sys_safe_err13;
wire sys_safe_err14;
wire sys_safe_err15;
wire sys_safe_err16;
wire sys_safe_err17;
wire sys_safe_err18;
wire sys_safe_err19;
wire sys_safe_err20;
wire sys_safe_err21;
wire sys_safe_err22;
wire sys_safe_err23;
wire sys_safe_err24;
wire sys_safe_err25;
wire sys_safe_err26;
wire sys_safe_err27;
wire sys_safe_err28;
wire sys_safe_err29;
wire sys_safe_err30;
wire sys_safe_err31;
wire sys_safe_err32;
wire sys_safe_err33;
wire sys_safe_err34;
wire sys_safe_err35;
wire sys_safe_err36;
wire sys_safe_err37;
wire sys_safe_err38;
wire sys_safe_err39;
wire sys_safe_err40;
wire sys_safe_err41;
wire sys_safe_err42;
wire sys_safe_err43;
wire sys_safe_err44;
wire sys_safe_err45;
wire sys_safe_err46;
wire sys_safe_err47;
wire sys_safe_err48;
wire sys_safe_err49;
wire sys_safe_err50;
wire sys_safe_err51;
wire sys_safe_err52;
wire sys_safe_err53;
wire sys_safe_err54;
wire sys_safe_err55;
wire sys_safe_err56;
wire sys_safe_err57;
wire sys_safe_err58;
wire sys_safe_err59;
wire sys_safe_err60;
wire sys_safe_err61;
wire sys_safe_err62;
wire sys_safe_err63;
wire sys_safe_err64;
wire sys_safe_err65;
wire sys_safe_err66;
wire sys_safe_err67;
wire sys_safe_err68;
wire sys_safe_err69;
wire sys_safe_err70;
wire sys_safe_err71;
wire sys_safe_err72;
wire sys_safe_err73;
wire sys_safe_err74;
wire sys_safe_err75;
wire sys_safe_err76;
wire sys_safe_err77;
wire sys_safe_err78;
wire sys_safe_err79;
wire sys_safe_err80;
wire sys_safe_err81;
wire sys_safe_err82;
wire sys_safe_err83;
wire sys_safe_err84;
wire sys_safe_err85;
wire sys_safe_err86;
wire sys_safe_err87;
wire sys_safe_err88;
wire sys_safe_err89;
wire sys_safe_err90;
wire sys_safe_err91;
wire sys_safe_err92;
wire sys_safe_err93;
wire sys_safe_err94;
wire sys_safe_err95;
wire sys_safe_err96;
wire sys_safe_err97;
wire sys_safe_err98;
wire sys_safe_err99;
wire sys_safe_err100;
wire sys_safe_err101;
wire sys_safe_err102;
wire sys_safe_err103;
wire sys_safe_err104;
wire sys_safe_err105;
wire sys_safe_err106;
wire sys_safe_err107;
wire sys_safe_err108;
wire sys_safe_err109;
wire sys_safe_err110;
wire sys_safe_err111;
wire sys_safe_err112;
wire sys_safe_err113;
wire sys_safe_err114;
wire sys_safe_err115;
wire sys_safe_err116;
wire sys_safe_err117;
wire sys_safe_err;

wire env_fair0;
wire env_fair1;

wire sys_fair0;
wire sys_fair1;
wire sys_fair2;
wire sys_fair3;
wire sys_fair4;
wire sys_fair5;
wire sys_fair6;
wire sys_fair7;
wire sys_fair8;
wire sys_fair9;
wire sys_fair10;
wire sys_fair11;
wire sys_fair12;
wire sys_fair13;
wire sys_fair14;
wire sys_fair15;
wire sys_fair16;
wire sys_fair17;
wire fair_err;
wire o_err;

// =============================================================
//                        ENV_TRANSITION:
// =============================================================
// Assumption 3:
// G( hlock0=1 -> hbusreq0=1 );
assign env_safe_err0 =  ~(~ i_hlock0 | i_hbusreq0);

// Assumption 3:
// G( hlock1=1 -> hbusreq1=1 );
assign env_safe_err1 =  ~(~ i_hlock1 | i_hbusreq1);

// Assumption 3:
// G( hlock2=1 -> hbusreq2=1 );
assign env_safe_err2 =  ~(~ i_hlock2 | i_hbusreq2);

// Assumption 3:
// G( hlock3=1 -> hbusreq3=1 );
assign env_safe_err3 =  ~(~ i_hlock3 | i_hbusreq3);

// Assumption 3:
// G( hlock4=1 -> hbusreq4=1 );
assign env_safe_err4 =  ~(~ i_hlock4 | i_hbusreq4);

// Assumption 3:
// G( hlock5=1 -> hbusreq5=1 );
assign env_safe_err5 =  ~(~ i_hlock5 | i_hbusreq5);

// Assumption 3:
// G( hlock6=1 -> hbusreq6=1 );
assign env_safe_err6 =  ~(~ i_hlock6 | i_hbusreq6);

// Assumption 3:
// G( hlock7=1 -> hbusreq7=1 );
assign env_safe_err7 =  ~(~ i_hlock7 | i_hbusreq7);

// Assumption 3:
// G( hlock8=1 -> hbusreq8=1 );
assign env_safe_err8 =  ~(~ i_hlock8 | i_hbusreq8);

// Assumption 3:
// G( hlock9=1 -> hbusreq9=1 );
assign env_safe_err9 =  ~(~ i_hlock9 | i_hbusreq9);

// Assumption 3:
// G( hlock10=1 -> hbusreq10=1 );
assign env_safe_err10 =  ~(~ i_hlock10 | i_hbusreq10);

// Assumption 3:
// G( hlock11=1 -> hbusreq11=1 );
assign env_safe_err11 =  ~(~ i_hlock11 | i_hbusreq11);

// Assumption 3:
// G( hlock12=1 -> hbusreq12=1 );
assign env_safe_err12 =  ~(~ i_hlock12 | i_hbusreq12);

// Assumption 3:
// G( hlock13=1 -> hbusreq13=1 );
assign env_safe_err13 =  ~(~ i_hlock13 | i_hbusreq13);

// Assumption 3:
// G( hlock14=1 -> hbusreq14=1 );
assign env_safe_err14 =  ~(~ i_hlock14 | i_hbusreq14);

// Assumption 3:
// G( hlock15=1 -> hbusreq15=1 );
assign env_safe_err15 =  ~(~ i_hlock15 | i_hbusreq15);

// collecting together the safety error bits:
assign env_safe_err = env_safe_err0 |
                      env_safe_err1 |
                      env_safe_err2 |
                      env_safe_err3 |
                      env_safe_err4 |
                      env_safe_err5 |
                      env_safe_err6 |
                      env_safe_err7 |
                      env_safe_err8 |
                      env_safe_err9 |
                      env_safe_err10 |
                      env_safe_err11 |
                      env_safe_err12 |
                      env_safe_err13 |
                      env_safe_err14 |
                      env_safe_err15;

// =============================================================
//                        SYS_TRANSITION:
// =============================================================
// G((hmaster0=0) * (hmaster1=0) * (hmaster2=0) * (hmaster3=0) -> (hbusreq0=0 <-> busreq=0));
assign sys_safe_err0 =  ~( ~( ~(controllable_hmaster0) & ~(controllable_hmaster1) & ~(controllable_hmaster2) & ~(controllable_hmaster3) )|(~i_hbusreq0 ^~ (~controllable_busreq)));

// G((hmaster0=1) * (hmaster1=0) * (hmaster2=0) * (hmaster3=0) -> (hbusreq1=0 <-> busreq=0));
assign sys_safe_err1 =  ~( ~( controllable_hmaster0 & ~(controllable_hmaster1) & ~(controllable_hmaster2) & ~(controllable_hmaster3) )|(~i_hbusreq1 ^~ (~controllable_busreq)));

// G((hmaster0=0) * (hmaster1=1) * (hmaster2=0) * (hmaster3=0) -> (hbusreq2=0 <-> busreq=0));
assign sys_safe_err2 =  ~( ~( ~(controllable_hmaster0) & controllable_hmaster1 & ~(controllable_hmaster2) & ~(controllable_hmaster3) )|(~i_hbusreq2 ^~ (~controllable_busreq)));

// G((hmaster0=1) * (hmaster1=1) * (hmaster2=0) * (hmaster3=0) -> (hbusreq3=0 <-> busreq=0));
assign sys_safe_err3 =  ~( ~( controllable_hmaster0 & controllable_hmaster1 & ~(controllable_hmaster2) & ~(controllable_hmaster3) )|(~i_hbusreq3 ^~ (~controllable_busreq)));

// G((hmaster0=0) * (hmaster1=0) * (hmaster2=1) * (hmaster3=0) -> (hbusreq4=0 <-> busreq=0));
assign sys_safe_err4 =  ~( ~( ~(controllable_hmaster0) & ~(controllable_hmaster1) & controllable_hmaster2 & ~(controllable_hmaster3) )|(~i_hbusreq4 ^~ (~controllable_busreq)));

// G((hmaster0=1) * (hmaster1=0) * (hmaster2=1) * (hmaster3=0) -> (hbusreq5=0 <-> busreq=0));
assign sys_safe_err5 =  ~( ~( controllable_hmaster0 & ~(controllable_hmaster1) & controllable_hmaster2 & ~(controllable_hmaster3) )|(~i_hbusreq5 ^~ (~controllable_busreq)));

// G((hmaster0=0) * (hmaster1=1) * (hmaster2=1) * (hmaster3=0) -> (hbusreq6=0 <-> busreq=0));
assign sys_safe_err6 =  ~( ~( ~(controllable_hmaster0) & controllable_hmaster1 & controllable_hmaster2 & ~(controllable_hmaster3) )|(~i_hbusreq6 ^~ (~controllable_busreq)));

// G((hmaster0=1) * (hmaster1=1) * (hmaster2=1) * (hmaster3=0) -> (hbusreq7=0 <-> busreq=0));
assign sys_safe_err7 =  ~( ~( controllable_hmaster0 & controllable_hmaster1 & controllable_hmaster2 & ~(controllable_hmaster3) )|(~i_hbusreq7 ^~ (~controllable_busreq)));

// G((hmaster0=0) * (hmaster1=0) * (hmaster2=0) * (hmaster3=1) -> (hbusreq8=0 <-> busreq=0));
assign sys_safe_err8 =  ~( ~( ~(controllable_hmaster0) & ~(controllable_hmaster1) & ~(controllable_hmaster2) & controllable_hmaster3 )|(~i_hbusreq8 ^~ (~controllable_busreq)));

// G((hmaster0=1) * (hmaster1=0) * (hmaster2=0) * (hmaster3=1) -> (hbusreq9=0 <-> busreq=0));
assign sys_safe_err9 =  ~( ~( controllable_hmaster0 & ~(controllable_hmaster1) & ~(controllable_hmaster2) & controllable_hmaster3 )|(~i_hbusreq9 ^~ (~controllable_busreq)));

// G((hmaster0=0) * (hmaster1=1) * (hmaster2=0) * (hmaster3=1) -> (hbusreq10=0 <-> busreq=0));
assign sys_safe_err10 =  ~( ~( ~(controllable_hmaster0) & controllable_hmaster1 & ~(controllable_hmaster2) & controllable_hmaster3 )|(~i_hbusreq10 ^~ (~controllable_busreq)));

// G((hmaster0=1) * (hmaster1=1) * (hmaster2=0) * (hmaster3=1) -> (hbusreq11=0 <-> busreq=0));
assign sys_safe_err11 =  ~( ~( controllable_hmaster0 & controllable_hmaster1 & ~(controllable_hmaster2) & controllable_hmaster3 )|(~i_hbusreq11 ^~ (~controllable_busreq)));

// G((hmaster0=0) * (hmaster1=0) * (hmaster2=1) * (hmaster3=1) -> (hbusreq12=0 <-> busreq=0));
assign sys_safe_err12 =  ~( ~( ~(controllable_hmaster0) & ~(controllable_hmaster1) & controllable_hmaster2 & controllable_hmaster3 )|(~i_hbusreq12 ^~ (~controllable_busreq)));

// G((hmaster0=1) * (hmaster1=0) * (hmaster2=1) * (hmaster3=1) -> (hbusreq13=0 <-> busreq=0));
assign sys_safe_err13 =  ~( ~( controllable_hmaster0 & ~(controllable_hmaster1) & controllable_hmaster2 & controllable_hmaster3 )|(~i_hbusreq13 ^~ (~controllable_busreq)));

// G((hmaster0=0) * (hmaster1=1) * (hmaster2=1) * (hmaster3=1) -> (hbusreq14=0 <-> busreq=0));
assign sys_safe_err14 =  ~( ~( ~(controllable_hmaster0) & controllable_hmaster1 & controllable_hmaster2 & controllable_hmaster3 )|(~i_hbusreq14 ^~ (~controllable_busreq)));

// G((hmaster0=1) * (hmaster1=1) * (hmaster2=1) * (hmaster3=1) -> (hbusreq15=0 <-> busreq=0));
assign sys_safe_err15 =  ~( ~( controllable_hmaster0 & controllable_hmaster1 & controllable_hmaster2 & controllable_hmaster3 )|(~i_hbusreq15 ^~ (~controllable_busreq)));

// Guarantee 1:
// G((hready=0) -> X(start=0));
assign sys_safe_err16 =  ~( reg_i_hready | controllable_nstart );

// G(((stateG2=1) * (start=1)) -> FALSE;
assign sys_safe_err17 =  ~( ~(reg_stateG2 & ~controllable_nstart) | 0 );

// G(((stateG3_0=1) * (stateG3_1=0) * (stateG3_2=0) * ((start=1))) -> FALSE);
// G(((stateG3_0=0) * (stateG3_1=1) * (stateG3_2=0) * ((start=1))) -> FALSE);
// G(((stateG3_0=1) * (stateG3_1=1) * (stateG3_2=0) * ((start=1))) -> FALSE);
// G(((stateG3_0=0) * (stateG3_1=0) * (stateG3_2=1) * ((start=1))) -> FALSE);
// all these rules can be summarized as: only in state 000, start=1 is allowed:
assign sys_safe_err18 =  (reg_stateG3_0 | reg_stateG3_1 | reg_stateG3_2) & ~controllable_nstart;

// G( (hready=1) -> (   (hgrant0=1) <-> (X(hmaster0=0) * X(hmaster1=0) * X(hmaster2=0) * X(hmaster3=0))  ) );
assign sys_safe_err19 =  ~( ~(reg_i_hready) | ( ~reg_controllable_nhgrant0 ^~ ( ~(controllable_hmaster0) & ~(controllable_hmaster1) & ~(controllable_hmaster2) & ~(controllable_hmaster3) ) ) );

// G( (hready=1) -> (   (hgrant1=1) <-> (X(hmaster0=1) * X(hmaster1=0) * X(hmaster2=0) * X(hmaster3=0))  ) );
assign sys_safe_err20 =  ~( ~(reg_i_hready) | ( reg_controllable_hgrant1 ^~ ( controllable_hmaster0 & ~(controllable_hmaster1) & ~(controllable_hmaster2) & ~(controllable_hmaster3) ) ) );

// G( (hready=1) -> (   (hgrant2=1) <-> (X(hmaster0=0) * X(hmaster1=1) * X(hmaster2=0) * X(hmaster3=0))  ) );
assign sys_safe_err21 =  ~( ~(reg_i_hready) | ( reg_controllable_hgrant2 ^~ ( ~(controllable_hmaster0) & controllable_hmaster1 & ~(controllable_hmaster2) & ~(controllable_hmaster3) ) ) );

// G( (hready=1) -> (   (hgrant3=1) <-> (X(hmaster0=1) * X(hmaster1=1) * X(hmaster2=0) * X(hmaster3=0))  ) );
assign sys_safe_err22 =  ~( ~(reg_i_hready) | ( reg_controllable_hgrant3 ^~ ( controllable_hmaster0 & controllable_hmaster1 & ~(controllable_hmaster2) & ~(controllable_hmaster3) ) ) );

// G( (hready=1) -> (   (hgrant4=1) <-> (X(hmaster0=0) * X(hmaster1=0) * X(hmaster2=1) * X(hmaster3=0))  ) );
assign sys_safe_err23 =  ~( ~(reg_i_hready) | ( reg_controllable_hgrant4 ^~ ( ~(controllable_hmaster0) & ~(controllable_hmaster1) & controllable_hmaster2 & ~(controllable_hmaster3) ) ) );

// G( (hready=1) -> (   (hgrant5=1) <-> (X(hmaster0=1) * X(hmaster1=0) * X(hmaster2=1) * X(hmaster3=0))  ) );
assign sys_safe_err24 =  ~( ~(reg_i_hready) | ( reg_controllable_hgrant5 ^~ ( controllable_hmaster0 & ~(controllable_hmaster1) & controllable_hmaster2 & ~(controllable_hmaster3) ) ) );

// G( (hready=1) -> (   (hgrant6=1) <-> (X(hmaster0=0) * X(hmaster1=1) * X(hmaster2=1) * X(hmaster3=0))  ) );
assign sys_safe_err25 =  ~( ~(reg_i_hready) | ( reg_controllable_hgrant6 ^~ ( ~(controllable_hmaster0) & controllable_hmaster1 & controllable_hmaster2 & ~(controllable_hmaster3) ) ) );

// G( (hready=1) -> (   (hgrant7=1) <-> (X(hmaster0=1) * X(hmaster1=1) * X(hmaster2=1) * X(hmaster3=0))  ) );
assign sys_safe_err26 =  ~( ~(reg_i_hready) | ( reg_controllable_hgrant7 ^~ ( controllable_hmaster0 & controllable_hmaster1 & controllable_hmaster2 & ~(controllable_hmaster3) ) ) );

// G( (hready=1) -> (   (hgrant8=1) <-> (X(hmaster0=0) * X(hmaster1=0) * X(hmaster2=0) * X(hmaster3=1))  ) );
assign sys_safe_err27 =  ~( ~(reg_i_hready) | ( reg_controllable_hgrant8 ^~ ( ~(controllable_hmaster0) & ~(controllable_hmaster1) & ~(controllable_hmaster2) & controllable_hmaster3 ) ) );

// G( (hready=1) -> (   (hgrant9=1) <-> (X(hmaster0=1) * X(hmaster1=0) * X(hmaster2=0) * X(hmaster3=1))  ) );
assign sys_safe_err28 =  ~( ~(reg_i_hready) | ( reg_controllable_hgrant9 ^~ ( controllable_hmaster0 & ~(controllable_hmaster1) & ~(controllable_hmaster2) & controllable_hmaster3 ) ) );

// G( (hready=1) -> (   (hgrant10=1) <-> (X(hmaster0=0) * X(hmaster1=1) * X(hmaster2=0) * X(hmaster3=1))  ) );
assign sys_safe_err29 =  ~( ~(reg_i_hready) | ( reg_controllable_hgrant10 ^~ ( ~(controllable_hmaster0) & controllable_hmaster1 & ~(controllable_hmaster2) & controllable_hmaster3 ) ) );

// G( (hready=1) -> (   (hgrant11=1) <-> (X(hmaster0=1) * X(hmaster1=1) * X(hmaster2=0) * X(hmaster3=1))  ) );
assign sys_safe_err30 =  ~( ~(reg_i_hready) | ( reg_controllable_hgrant11 ^~ ( controllable_hmaster0 & controllable_hmaster1 & ~(controllable_hmaster2) & controllable_hmaster3 ) ) );

// G( (hready=1) -> (   (hgrant12=1) <-> (X(hmaster0=0) * X(hmaster1=0) * X(hmaster2=1) * X(hmaster3=1))  ) );
assign sys_safe_err31 =  ~( ~(reg_i_hready) | ( reg_controllable_hgrant12 ^~ ( ~(controllable_hmaster0) & ~(controllable_hmaster1) & controllable_hmaster2 & controllable_hmaster3 ) ) );

// G( (hready=1) -> (   (hgrant13=1) <-> (X(hmaster0=1) * X(hmaster1=0) * X(hmaster2=1) * X(hmaster3=1))  ) );
assign sys_safe_err32 =  ~( ~(reg_i_hready) | ( reg_controllable_hgrant13 ^~ ( controllable_hmaster0 & ~(controllable_hmaster1) & controllable_hmaster2 & controllable_hmaster3 ) ) );

// G( (hready=1) -> (   (hgrant14=1) <-> (X(hmaster0=0) * X(hmaster1=1) * X(hmaster2=1) * X(hmaster3=1))  ) );
assign sys_safe_err33 =  ~( ~(reg_i_hready) | ( reg_controllable_hgrant14 ^~ ( ~(controllable_hmaster0) & controllable_hmaster1 & controllable_hmaster2 & controllable_hmaster3 ) ) );

// G( (hready=1) -> (   (hgrant15=1) <-> (X(hmaster0=1) * X(hmaster1=1) * X(hmaster2=1) * X(hmaster3=1))  ) );
assign sys_safe_err34 =  ~( ~(reg_i_hready) | ( reg_controllable_hgrant15 ^~ ( controllable_hmaster0 & controllable_hmaster1 & controllable_hmaster2 & controllable_hmaster3 ) ) );

// HMASTLOCK:
// G(  (hready=1) -> (locked=0 <-> X(hmastlock=0) ) );
assign sys_safe_err35 =  ~( ~(reg_i_hready) | (~reg_controllable_locked ^~ ~controllable_hmastlock) );

// Master 0:
// G( X(start=0) -> ( ((hmaster0=0) * (hmaster1=0) * (hmaster2=0) * (hmaster3=0)) <-> (X(hmaster0=0) * X(hmaster1=0) * X(hmaster2=0) * X(hmaster3=0)) ) );
assign sys_safe_err36 =  ~( ~(controllable_nstart) | ( ( ~(reg_controllable_hmaster0) & ~(reg_controllable_hmaster1) & ~(reg_controllable_hmaster2) & ~(reg_controllable_hmaster3) ) ^~ ( ~(controllable_hmaster0) & ~(controllable_hmaster1) & ~(controllable_hmaster2) & ~(controllable_hmaster3) )) );

// Master 1:
// G( X(start=0) -> ( ((hmaster0=1) * (hmaster1=0) * (hmaster2=0) * (hmaster3=0)) <-> (X(hmaster0=1) * X(hmaster1=0) * X(hmaster2=0) * X(hmaster3=0)) ) );
assign sys_safe_err37 =  ~( ~(controllable_nstart) | ( ( reg_controllable_hmaster0 & ~(reg_controllable_hmaster1) & ~(reg_controllable_hmaster2) & ~(reg_controllable_hmaster3) ) ^~ ( controllable_hmaster0 & ~(controllable_hmaster1) & ~(controllable_hmaster2) & ~(controllable_hmaster3) )) );

// Master 2:
// G( X(start=0) -> ( ((hmaster0=0) * (hmaster1=1) * (hmaster2=0) * (hmaster3=0)) <-> (X(hmaster0=0) * X(hmaster1=1) * X(hmaster2=0) * X(hmaster3=0)) ) );
assign sys_safe_err38 =  ~( ~(controllable_nstart) | ( ( ~(reg_controllable_hmaster0) & reg_controllable_hmaster1 & ~(reg_controllable_hmaster2) & ~(reg_controllable_hmaster3) ) ^~ ( ~(controllable_hmaster0) & controllable_hmaster1 & ~(controllable_hmaster2) & ~(controllable_hmaster3) )) );

// Master 3:
// G( X(start=0) -> ( ((hmaster0=1) * (hmaster1=1) * (hmaster2=0) * (hmaster3=0)) <-> (X(hmaster0=1) * X(hmaster1=1) * X(hmaster2=0) * X(hmaster3=0)) ) );
assign sys_safe_err39 =  ~( ~(controllable_nstart) | ( ( reg_controllable_hmaster0 & reg_controllable_hmaster1 & ~(reg_controllable_hmaster2) & ~(reg_controllable_hmaster3) ) ^~ ( controllable_hmaster0 & controllable_hmaster1 & ~(controllable_hmaster2) & ~(controllable_hmaster3) )) );

// Master 4:
// G( X(start=0) -> ( ((hmaster0=0) * (hmaster1=0) * (hmaster2=1) * (hmaster3=0)) <-> (X(hmaster0=0) * X(hmaster1=0) * X(hmaster2=1) * X(hmaster3=0)) ) );
assign sys_safe_err40 =  ~( ~(controllable_nstart) | ( ( ~(reg_controllable_hmaster0) & ~(reg_controllable_hmaster1) & reg_controllable_hmaster2 & ~(reg_controllable_hmaster3) ) ^~ ( ~(controllable_hmaster0) & ~(controllable_hmaster1) & controllable_hmaster2 & ~(controllable_hmaster3) )) );

// Master 5:
// G( X(start=0) -> ( ((hmaster0=1) * (hmaster1=0) * (hmaster2=1) * (hmaster3=0)) <-> (X(hmaster0=1) * X(hmaster1=0) * X(hmaster2=1) * X(hmaster3=0)) ) );
assign sys_safe_err41 =  ~( ~(controllable_nstart) | ( ( reg_controllable_hmaster0 & ~(reg_controllable_hmaster1) & reg_controllable_hmaster2 & ~(reg_controllable_hmaster3) ) ^~ ( controllable_hmaster0 & ~(controllable_hmaster1) & controllable_hmaster2 & ~(controllable_hmaster3) )) );

// Master 6:
// G( X(start=0) -> ( ((hmaster0=0) * (hmaster1=1) * (hmaster2=1) * (hmaster3=0)) <-> (X(hmaster0=0) * X(hmaster1=1) * X(hmaster2=1) * X(hmaster3=0)) ) );
assign sys_safe_err42 =  ~( ~(controllable_nstart) | ( ( ~(reg_controllable_hmaster0) & reg_controllable_hmaster1 & reg_controllable_hmaster2 & ~(reg_controllable_hmaster3) ) ^~ ( ~(controllable_hmaster0) & controllable_hmaster1 & controllable_hmaster2 & ~(controllable_hmaster3) )) );

// Master 7:
// G( X(start=0) -> ( ((hmaster0=1) * (hmaster1=1) * (hmaster2=1) * (hmaster3=0)) <-> (X(hmaster0=1) * X(hmaster1=1) * X(hmaster2=1) * X(hmaster3=0)) ) );
assign sys_safe_err43 =  ~( ~(controllable_nstart) | ( ( reg_controllable_hmaster0 & reg_controllable_hmaster1 & reg_controllable_hmaster2 & ~(reg_controllable_hmaster3) ) ^~ ( controllable_hmaster0 & controllable_hmaster1 & controllable_hmaster2 & ~(controllable_hmaster3) )) );

// Master 8:
// G( X(start=0) -> ( ((hmaster0=0) * (hmaster1=0) * (hmaster2=0) * (hmaster3=1)) <-> (X(hmaster0=0) * X(hmaster1=0) * X(hmaster2=0) * X(hmaster3=1)) ) );
assign sys_safe_err44 =  ~( ~(controllable_nstart) | ( ( ~(reg_controllable_hmaster0) & ~(reg_controllable_hmaster1) & ~(reg_controllable_hmaster2) & reg_controllable_hmaster3 ) ^~ ( ~(controllable_hmaster0) & ~(controllable_hmaster1) & ~(controllable_hmaster2) & controllable_hmaster3 )) );

// Master 9:
// G( X(start=0) -> ( ((hmaster0=1) * (hmaster1=0) * (hmaster2=0) * (hmaster3=1)) <-> (X(hmaster0=1) * X(hmaster1=0) * X(hmaster2=0) * X(hmaster3=1)) ) );
assign sys_safe_err45 =  ~( ~(controllable_nstart) | ( ( reg_controllable_hmaster0 & ~(reg_controllable_hmaster1) & ~(reg_controllable_hmaster2) & reg_controllable_hmaster3 ) ^~ ( controllable_hmaster0 & ~(controllable_hmaster1) & ~(controllable_hmaster2) & controllable_hmaster3 )) );

// Master 10:
// G( X(start=0) -> ( ((hmaster0=0) * (hmaster1=1) * (hmaster2=0) * (hmaster3=1)) <-> (X(hmaster0=0) * X(hmaster1=1) * X(hmaster2=0) * X(hmaster3=1)) ) );
assign sys_safe_err46 =  ~( ~(controllable_nstart) | ( ( ~(reg_controllable_hmaster0) & reg_controllable_hmaster1 & ~(reg_controllable_hmaster2) & reg_controllable_hmaster3 ) ^~ ( ~(controllable_hmaster0) & controllable_hmaster1 & ~(controllable_hmaster2) & controllable_hmaster3 )) );

// Master 11:
// G( X(start=0) -> ( ((hmaster0=1) * (hmaster1=1) * (hmaster2=0) * (hmaster3=1)) <-> (X(hmaster0=1) * X(hmaster1=1) * X(hmaster2=0) * X(hmaster3=1)) ) );
assign sys_safe_err47 =  ~( ~(controllable_nstart) | ( ( reg_controllable_hmaster0 & reg_controllable_hmaster1 & ~(reg_controllable_hmaster2) & reg_controllable_hmaster3 ) ^~ ( controllable_hmaster0 & controllable_hmaster1 & ~(controllable_hmaster2) & controllable_hmaster3 )) );

// Master 12:
// G( X(start=0) -> ( ((hmaster0=0) * (hmaster1=0) * (hmaster2=1) * (hmaster3=1)) <-> (X(hmaster0=0) * X(hmaster1=0) * X(hmaster2=1) * X(hmaster3=1)) ) );
assign sys_safe_err48 =  ~( ~(controllable_nstart) | ( ( ~(reg_controllable_hmaster0) & ~(reg_controllable_hmaster1) & reg_controllable_hmaster2 & reg_controllable_hmaster3 ) ^~ ( ~(controllable_hmaster0) & ~(controllable_hmaster1) & controllable_hmaster2 & controllable_hmaster3 )) );

// Master 13:
// G( X(start=0) -> ( ((hmaster0=1) * (hmaster1=0) * (hmaster2=1) * (hmaster3=1)) <-> (X(hmaster0=1) * X(hmaster1=0) * X(hmaster2=1) * X(hmaster3=1)) ) );
assign sys_safe_err49 =  ~( ~(controllable_nstart) | ( ( reg_controllable_hmaster0 & ~(reg_controllable_hmaster1) & reg_controllable_hmaster2 & reg_controllable_hmaster3 ) ^~ ( controllable_hmaster0 & ~(controllable_hmaster1) & controllable_hmaster2 & controllable_hmaster3 )) );

// Master 14:
// G( X(start=0) -> ( ((hmaster0=0) * (hmaster1=1) * (hmaster2=1) * (hmaster3=1)) <-> (X(hmaster0=0) * X(hmaster1=1) * X(hmaster2=1) * X(hmaster3=1)) ) );
assign sys_safe_err50 =  ~( ~(controllable_nstart) | ( ( ~(reg_controllable_hmaster0) & reg_controllable_hmaster1 & reg_controllable_hmaster2 & reg_controllable_hmaster3 ) ^~ ( ~(controllable_hmaster0) & controllable_hmaster1 & controllable_hmaster2 & controllable_hmaster3 )) );

// Master 15:
// G( X(start=0) -> ( ((hmaster0=1) * (hmaster1=1) * (hmaster2=1) * (hmaster3=1)) <-> (X(hmaster0=1) * X(hmaster1=1) * X(hmaster2=1) * X(hmaster3=1)) ) );
assign sys_safe_err51 =  ~( ~(controllable_nstart) | ( ( reg_controllable_hmaster0 & reg_controllable_hmaster1 & reg_controllable_hmaster2 & reg_controllable_hmaster3 ) ^~ ( controllable_hmaster0 & controllable_hmaster1 & controllable_hmaster2 & controllable_hmaster3 )) );

// Guarantee 6.2:
// G( ((X(start=0))) -> ( (hmastlock=1) <-> X(hmastlock=1)) );
assign sys_safe_err52 =  ~( ~(controllable_nstart) | ( reg_controllable_hmastlock ^~ controllable_hmastlock) );

// G( (decide=1  *  hlock0=1  *  X(hgrant0=1) )->X(locked=1));
assign sys_safe_err53 =  ~( ~(~reg_controllable_ndecide & reg_i_hlock0 & ~controllable_nhgrant0) | (controllable_locked) );

// G((decide=1  *  hlock0=0  *  X(hgrant0=1))->X(locked=0));
assign sys_safe_err54 =  ~( ~(~reg_controllable_ndecide & ~reg_i_hlock0 & ~controllable_nhgrant0) | (~controllable_locked) );

// G( (decide=1  *  hlock1=1  *  X(hgrant1=1) )->X(locked=1));
assign sys_safe_err55 =  ~( ~(~reg_controllable_ndecide & reg_i_hlock1 & controllable_hgrant1) | (controllable_locked) );

// G((decide=1  *  hlock1=0  *  X(hgrant1=1))->X(locked=0));
assign sys_safe_err56 =  ~( ~(~reg_controllable_ndecide & ~reg_i_hlock1 & controllable_hgrant1) | (~controllable_locked) );

// G( (decide=1  *  hlock2=1  *  X(hgrant2=1) )->X(locked=1));
assign sys_safe_err57 =  ~( ~(~reg_controllable_ndecide & reg_i_hlock2 & controllable_hgrant2) | (controllable_locked) );

// G((decide=1  *  hlock2=0  *  X(hgrant2=1))->X(locked=0));
assign sys_safe_err58 =  ~( ~(~reg_controllable_ndecide & ~reg_i_hlock2 & controllable_hgrant2) | (~controllable_locked) );

// G( (decide=1  *  hlock3=1  *  X(hgrant3=1) )->X(locked=1));
assign sys_safe_err59 =  ~( ~(~reg_controllable_ndecide & reg_i_hlock3 & controllable_hgrant3) | (controllable_locked) );

// G((decide=1  *  hlock3=0  *  X(hgrant3=1))->X(locked=0));
assign sys_safe_err60 =  ~( ~(~reg_controllable_ndecide & ~reg_i_hlock3 & controllable_hgrant3) | (~controllable_locked) );

// G( (decide=1  *  hlock4=1  *  X(hgrant4=1) )->X(locked=1));
assign sys_safe_err61 =  ~( ~(~reg_controllable_ndecide & reg_i_hlock4 & controllable_hgrant4) | (controllable_locked) );

// G((decide=1  *  hlock4=0  *  X(hgrant4=1))->X(locked=0));
assign sys_safe_err62 =  ~( ~(~reg_controllable_ndecide & ~reg_i_hlock4 & controllable_hgrant4) | (~controllable_locked) );

// G( (decide=1  *  hlock5=1  *  X(hgrant5=1) )->X(locked=1));
assign sys_safe_err63 =  ~( ~(~reg_controllable_ndecide & reg_i_hlock5 & controllable_hgrant5) | (controllable_locked) );

// G((decide=1  *  hlock5=0  *  X(hgrant5=1))->X(locked=0));
assign sys_safe_err64 =  ~( ~(~reg_controllable_ndecide & ~reg_i_hlock5 & controllable_hgrant5) | (~controllable_locked) );

// G( (decide=1  *  hlock6=1  *  X(hgrant6=1) )->X(locked=1));
assign sys_safe_err65 =  ~( ~(~reg_controllable_ndecide & reg_i_hlock6 & controllable_hgrant6) | (controllable_locked) );

// G((decide=1  *  hlock6=0  *  X(hgrant6=1))->X(locked=0));
assign sys_safe_err66 =  ~( ~(~reg_controllable_ndecide & ~reg_i_hlock6 & controllable_hgrant6) | (~controllable_locked) );

// G( (decide=1  *  hlock7=1  *  X(hgrant7=1) )->X(locked=1));
assign sys_safe_err67 =  ~( ~(~reg_controllable_ndecide & reg_i_hlock7 & controllable_hgrant7) | (controllable_locked) );

// G((decide=1  *  hlock7=0  *  X(hgrant7=1))->X(locked=0));
assign sys_safe_err68 =  ~( ~(~reg_controllable_ndecide & ~reg_i_hlock7 & controllable_hgrant7) | (~controllable_locked) );

// G( (decide=1  *  hlock8=1  *  X(hgrant8=1) )->X(locked=1));
assign sys_safe_err69 =  ~( ~(~reg_controllable_ndecide & reg_i_hlock8 & controllable_hgrant8) | (controllable_locked) );

// G((decide=1  *  hlock8=0  *  X(hgrant8=1))->X(locked=0));
assign sys_safe_err70 =  ~( ~(~reg_controllable_ndecide & ~reg_i_hlock8 & controllable_hgrant8) | (~controllable_locked) );

// G( (decide=1  *  hlock9=1  *  X(hgrant9=1) )->X(locked=1));
assign sys_safe_err71 =  ~( ~(~reg_controllable_ndecide & reg_i_hlock9 & controllable_hgrant9) | (controllable_locked) );

// G((decide=1  *  hlock9=0  *  X(hgrant9=1))->X(locked=0));
assign sys_safe_err72 =  ~( ~(~reg_controllable_ndecide & ~reg_i_hlock9 & controllable_hgrant9) | (~controllable_locked) );

// G( (decide=1  *  hlock10=1  *  X(hgrant10=1) )->X(locked=1));
assign sys_safe_err73 =  ~( ~(~reg_controllable_ndecide & reg_i_hlock10 & controllable_hgrant10) | (controllable_locked) );

// G((decide=1  *  hlock10=0  *  X(hgrant10=1))->X(locked=0));
assign sys_safe_err74 =  ~( ~(~reg_controllable_ndecide & ~reg_i_hlock10 & controllable_hgrant10) | (~controllable_locked) );

// G( (decide=1  *  hlock11=1  *  X(hgrant11=1) )->X(locked=1));
assign sys_safe_err75 =  ~( ~(~reg_controllable_ndecide & reg_i_hlock11 & controllable_hgrant11) | (controllable_locked) );

// G((decide=1  *  hlock11=0  *  X(hgrant11=1))->X(locked=0));
assign sys_safe_err76 =  ~( ~(~reg_controllable_ndecide & ~reg_i_hlock11 & controllable_hgrant11) | (~controllable_locked) );

// G( (decide=1  *  hlock12=1  *  X(hgrant12=1) )->X(locked=1));
assign sys_safe_err77 =  ~( ~(~reg_controllable_ndecide & reg_i_hlock12 & controllable_hgrant12) | (controllable_locked) );

// G((decide=1  *  hlock12=0  *  X(hgrant12=1))->X(locked=0));
assign sys_safe_err78 =  ~( ~(~reg_controllable_ndecide & ~reg_i_hlock12 & controllable_hgrant12) | (~controllable_locked) );

// G( (decide=1  *  hlock13=1  *  X(hgrant13=1) )->X(locked=1));
assign sys_safe_err79 =  ~( ~(~reg_controllable_ndecide & reg_i_hlock13 & controllable_hgrant13) | (controllable_locked) );

// G((decide=1  *  hlock13=0  *  X(hgrant13=1))->X(locked=0));
assign sys_safe_err80 =  ~( ~(~reg_controllable_ndecide & ~reg_i_hlock13 & controllable_hgrant13) | (~controllable_locked) );

// G( (decide=1  *  hlock14=1  *  X(hgrant14=1) )->X(locked=1));
assign sys_safe_err81 =  ~( ~(~reg_controllable_ndecide & reg_i_hlock14 & controllable_hgrant14) | (controllable_locked) );

// G((decide=1  *  hlock14=0  *  X(hgrant14=1))->X(locked=0));
assign sys_safe_err82 =  ~( ~(~reg_controllable_ndecide & ~reg_i_hlock14 & controllable_hgrant14) | (~controllable_locked) );

// G( (decide=1  *  hlock15=1  *  X(hgrant15=1) )->X(locked=1));
assign sys_safe_err83 =  ~( ~(~reg_controllable_ndecide & reg_i_hlock15 & controllable_hgrant15) | (controllable_locked) );

// G((decide=1  *  hlock15=0  *  X(hgrant15=1))->X(locked=0));
assign sys_safe_err84 =  ~( ~(~reg_controllable_ndecide & ~reg_i_hlock15 & controllable_hgrant15) | (~controllable_locked) );

// G( (decide=0) -> (  ((hgrant0=0)<->X(hgrant0=0))  ));
assign sys_safe_err85 =  ~( ~(reg_controllable_ndecide) | (reg_controllable_nhgrant0 ^~ controllable_nhgrant0) );

// G( (decide=0) -> (  ((hgrant1=0)<->X(hgrant1=0))  ));
assign sys_safe_err86 =  ~( ~(reg_controllable_ndecide) | (~reg_controllable_hgrant1 ^~ ~controllable_hgrant1) );

// G( (decide=0) -> (  ((hgrant2=0)<->X(hgrant2=0))  ));
assign sys_safe_err87 =  ~( ~(reg_controllable_ndecide) | (~reg_controllable_hgrant2 ^~ ~controllable_hgrant2) );

// G( (decide=0) -> (  ((hgrant3=0)<->X(hgrant3=0))  ));
assign sys_safe_err88 =  ~( ~(reg_controllable_ndecide) | (~reg_controllable_hgrant3 ^~ ~controllable_hgrant3) );

// G( (decide=0) -> (  ((hgrant4=0)<->X(hgrant4=0))  ));
assign sys_safe_err89 =  ~( ~(reg_controllable_ndecide) | (~reg_controllable_hgrant4 ^~ ~controllable_hgrant4) );

// G( (decide=0) -> (  ((hgrant5=0)<->X(hgrant5=0))  ));
assign sys_safe_err90 =  ~( ~(reg_controllable_ndecide) | (~reg_controllable_hgrant5 ^~ ~controllable_hgrant5) );

// G( (decide=0) -> (  ((hgrant6=0)<->X(hgrant6=0))  ));
assign sys_safe_err91 =  ~( ~(reg_controllable_ndecide) | (~reg_controllable_hgrant6 ^~ ~controllable_hgrant6) );

// G( (decide=0) -> (  ((hgrant7=0)<->X(hgrant7=0))  ));
assign sys_safe_err92 =  ~( ~(reg_controllable_ndecide) | (~reg_controllable_hgrant7 ^~ ~controllable_hgrant7) );

// G( (decide=0) -> (  ((hgrant8=0)<->X(hgrant8=0))  ));
assign sys_safe_err93 =  ~( ~(reg_controllable_ndecide) | (~reg_controllable_hgrant8 ^~ ~controllable_hgrant8) );

// G( (decide=0) -> (  ((hgrant9=0)<->X(hgrant9=0))  ));
assign sys_safe_err94 =  ~( ~(reg_controllable_ndecide) | (~reg_controllable_hgrant9 ^~ ~controllable_hgrant9) );

// G( (decide=0) -> (  ((hgrant10=0)<->X(hgrant10=0))  ));
assign sys_safe_err95 =  ~( ~(reg_controllable_ndecide) | (~reg_controllable_hgrant10 ^~ ~controllable_hgrant10) );

// G( (decide=0) -> (  ((hgrant11=0)<->X(hgrant11=0))  ));
assign sys_safe_err96 =  ~( ~(reg_controllable_ndecide) | (~reg_controllable_hgrant11 ^~ ~controllable_hgrant11) );

// G( (decide=0) -> (  ((hgrant12=0)<->X(hgrant12=0))  ));
assign sys_safe_err97 =  ~( ~(reg_controllable_ndecide) | (~reg_controllable_hgrant12 ^~ ~controllable_hgrant12) );

// G( (decide=0) -> (  ((hgrant13=0)<->X(hgrant13=0))  ));
assign sys_safe_err98 =  ~( ~(reg_controllable_ndecide) | (~reg_controllable_hgrant13 ^~ ~controllable_hgrant13) );

// G( (decide=0) -> (  ((hgrant14=0)<->X(hgrant14=0))  ));
assign sys_safe_err99 =  ~( ~(reg_controllable_ndecide) | (~reg_controllable_hgrant14 ^~ ~controllable_hgrant14) );

// G( (decide=0) -> (  ((hgrant15=0)<->X(hgrant15=0))  ));
assign sys_safe_err100 =  ~( ~(reg_controllable_ndecide) | (~reg_controllable_hgrant15 ^~ ~controllable_hgrant15) );

// G((decide=0)->(locked=0 <-> X(locked=0)));
assign sys_safe_err101 =  ~( ~(reg_controllable_ndecide) | (~reg_controllable_locked ^~ ~controllable_locked) );

// G(((stateG10_1=1) * (((hgrant1=1)) * (hbusreq1=0)))->FALSE);
assign sys_safe_err102 =  ~( ~(reg_stateG10_1 & (controllable_hgrant1 & ~i_hbusreq1)) | 0 );

// G(((stateG10_2=1) * (((hgrant2=1)) * (hbusreq2=0)))->FALSE);
assign sys_safe_err103 =  ~( ~(reg_stateG10_2 & (controllable_hgrant2 & ~i_hbusreq2)) | 0 );

// G(((stateG10_3=1) * (((hgrant3=1)) * (hbusreq3=0)))->FALSE);
assign sys_safe_err104 =  ~( ~(reg_stateG10_3 & (controllable_hgrant3 & ~i_hbusreq3)) | 0 );

// G(((stateG10_4=1) * (((hgrant4=1)) * (hbusreq4=0)))->FALSE);
assign sys_safe_err105 =  ~( ~(reg_stateG10_4 & (controllable_hgrant4 & ~i_hbusreq4)) | 0 );

// G(((stateG10_5=1) * (((hgrant5=1)) * (hbusreq5=0)))->FALSE);
assign sys_safe_err106 =  ~( ~(reg_stateG10_5 & (controllable_hgrant5 & ~i_hbusreq5)) | 0 );

// G(((stateG10_6=1) * (((hgrant6=1)) * (hbusreq6=0)))->FALSE);
assign sys_safe_err107 =  ~( ~(reg_stateG10_6 & (controllable_hgrant6 & ~i_hbusreq6)) | 0 );

// G(((stateG10_7=1) * (((hgrant7=1)) * (hbusreq7=0)))->FALSE);
assign sys_safe_err108 =  ~( ~(reg_stateG10_7 & (controllable_hgrant7 & ~i_hbusreq7)) | 0 );

// G(((stateG10_8=1) * (((hgrant8=1)) * (hbusreq8=0)))->FALSE);
assign sys_safe_err109 =  ~( ~(reg_stateG10_8 & (controllable_hgrant8 & ~i_hbusreq8)) | 0 );

// G(((stateG10_9=1) * (((hgrant9=1)) * (hbusreq9=0)))->FALSE);
assign sys_safe_err110 =  ~( ~(reg_stateG10_9 & (controllable_hgrant9 & ~i_hbusreq9)) | 0 );

// G(((stateG10_10=1) * (((hgrant10=1)) * (hbusreq10=0)))->FALSE);
assign sys_safe_err111 =  ~( ~(reg_stateG10_10 & (controllable_hgrant10 & ~i_hbusreq10)) | 0 );

// G(((stateG10_11=1) * (((hgrant11=1)) * (hbusreq11=0)))->FALSE);
assign sys_safe_err112 =  ~( ~(reg_stateG10_11 & (controllable_hgrant11 & ~i_hbusreq11)) | 0 );

// G(((stateG10_12=1) * (((hgrant12=1)) * (hbusreq12=0)))->FALSE);
assign sys_safe_err113 =  ~( ~(reg_stateG10_12 & (controllable_hgrant12 & ~i_hbusreq12)) | 0 );

// G(((stateG10_13=1) * (((hgrant13=1)) * (hbusreq13=0)))->FALSE);
assign sys_safe_err114 =  ~( ~(reg_stateG10_13 & (controllable_hgrant13 & ~i_hbusreq13)) | 0 );

// G(((stateG10_14=1) * (((hgrant14=1)) * (hbusreq14=0)))->FALSE);
assign sys_safe_err115 =  ~( ~(reg_stateG10_14 & (controllable_hgrant14 & ~i_hbusreq14)) | 0 );

// G(((stateG10_15=1) * (((hgrant15=1)) * (hbusreq15=0)))->FALSE);
assign sys_safe_err116 =  ~( ~(reg_stateG10_15 & (controllable_hgrant15 & ~i_hbusreq15)) | 0 );

// default master
// G((decide=1  *  hbusreq0=0  *  hbusreq1=0  *  hbusreq2=0  *  hbusreq3=0  *  hbusreq4=0  *  hbusreq5=0  *  hbusreq6=0  *  hbusreq7=0  *  hbusreq8=0  *  hbusreq9=0  *  hbusreq10=0  *  hbusreq11=0  *  hbusreq12=0  *  hbusreq13=0  *  hbusreq14=0  *  hbusreq15=0) -> X(hgrant0=1));
assign sys_safe_err117 =  ~( ~(~reg_controllable_ndecide & (~reg_i_hbusreq0 & ~reg_i_hbusreq1 & ~reg_i_hbusreq2 & ~reg_i_hbusreq3 & ~reg_i_hbusreq4 & ~reg_i_hbusreq5 & ~reg_i_hbusreq6 & ~reg_i_hbusreq7 & ~reg_i_hbusreq8 & ~reg_i_hbusreq9 & ~reg_i_hbusreq10 & ~reg_i_hbusreq11 & ~reg_i_hbusreq12 & ~reg_i_hbusreq13 & ~reg_i_hbusreq14 & ~reg_i_hbusreq15)) | (~controllable_nhgrant0) );

// collecting together the safety error bits:
assign sys_safe_err = sys_safe_err0 |
                      sys_safe_err1 |
                      sys_safe_err2 |
                      sys_safe_err3 |
                      sys_safe_err4 |
                      sys_safe_err5 |
                      sys_safe_err6 |
                      sys_safe_err7 |
                      sys_safe_err8 |
                      sys_safe_err9 |
                      sys_safe_err10 |
                      sys_safe_err11 |
                      sys_safe_err12 |
                      sys_safe_err13 |
                      sys_safe_err14 |
                      sys_safe_err15 |
                      sys_safe_err16 |
                      sys_safe_err17 |
                      sys_safe_err18 |
                      sys_safe_err19 |
                      sys_safe_err20 |
                      sys_safe_err21 |
                      sys_safe_err22 |
                      sys_safe_err23 |
                      sys_safe_err24 |
                      sys_safe_err25 |
                      sys_safe_err26 |
                      sys_safe_err27 |
                      sys_safe_err28 |
                      sys_safe_err29 |
                      sys_safe_err30 |
                      sys_safe_err31 |
                      sys_safe_err32 |
                      sys_safe_err33 |
                      sys_safe_err34 |
                      sys_safe_err35 |
                      sys_safe_err36 |
                      sys_safe_err37 |
                      sys_safe_err38 |
                      sys_safe_err39 |
                      sys_safe_err40 |
                      sys_safe_err41 |
                      sys_safe_err42 |
                      sys_safe_err43 |
                      sys_safe_err44 |
                      sys_safe_err45 |
                      sys_safe_err46 |
                      sys_safe_err47 |
                      sys_safe_err48 |
                      sys_safe_err49 |
                      sys_safe_err50 |
                      sys_safe_err51 |
                      sys_safe_err52 |
                      sys_safe_err53 |
                      sys_safe_err54 |
                      sys_safe_err55 |
                      sys_safe_err56 |
                      sys_safe_err57 |
                      sys_safe_err58 |
                      sys_safe_err59 |
                      sys_safe_err60 |
                      sys_safe_err61 |
                      sys_safe_err62 |
                      sys_safe_err63 |
                      sys_safe_err64 |
                      sys_safe_err65 |
                      sys_safe_err66 |
                      sys_safe_err67 |
                      sys_safe_err68 |
                      sys_safe_err69 |
                      sys_safe_err70 |
                      sys_safe_err71 |
                      sys_safe_err72 |
                      sys_safe_err73 |
                      sys_safe_err74 |
                      sys_safe_err75 |
                      sys_safe_err76 |
                      sys_safe_err77 |
                      sys_safe_err78 |
                      sys_safe_err79 |
                      sys_safe_err80 |
                      sys_safe_err81 |
                      sys_safe_err82 |
                      sys_safe_err83 |
                      sys_safe_err84 |
                      sys_safe_err85 |
                      sys_safe_err86 |
                      sys_safe_err87 |
                      sys_safe_err88 |
                      sys_safe_err89 |
                      sys_safe_err90 |
                      sys_safe_err91 |
                      sys_safe_err92 |
                      sys_safe_err93 |
                      sys_safe_err94 |
                      sys_safe_err95 |
                      sys_safe_err96 |
                      sys_safe_err97 |
                      sys_safe_err98 |
                      sys_safe_err99 |
                      sys_safe_err100 |
                      sys_safe_err101 |
                      sys_safe_err102 |
                      sys_safe_err103 |
                      sys_safe_err104 |
                      sys_safe_err105 |
                      sys_safe_err106 |
                      sys_safe_err107 |
                      sys_safe_err108 |
                      sys_safe_err109 |
                      sys_safe_err110 |
                      sys_safe_err111 |
                      sys_safe_err112 |
                      sys_safe_err113 |
                      sys_safe_err114 |
                      sys_safe_err115 |
                      sys_safe_err116 |
                      sys_safe_err117;

// =============================================================
//                          ENV_FAIRNESS:
// =============================================================
// Assumption 1: 
// G(F(stateA1=0));
assign env_fair0 =  ~reg_stateA1;

// Assumption 2:
// G(F(hready=1));
assign env_fair1 =  i_hready;


// =============================================================
//                          SYS_FAIRNESS:
// =============================================================
// Guarantee 2:
// G(F(stateG2=0));
assign sys_fair0 = ~reg_stateG2;

// Guarantee 3:
// G(F((stateG3_0=0)  *  (stateG3_1=0)  *  (stateG3_2=0)));
assign sys_fair1 =  (~reg_stateG3_0 & ~reg_stateG3_1 & ~reg_stateG3_2);

// G(F(((hmaster0=0) * (hmaster1=0) * (hmaster2=0) * (hmaster3=0))  |  hbusreq0=0));
assign sys_fair2 =  ( ~(controllable_hmaster0) & ~(controllable_hmaster1) & ~(controllable_hmaster2) & ~(controllable_hmaster3) ) | ~i_hbusreq0;

// G(F(((hmaster0=1) * (hmaster1=0) * (hmaster2=0) * (hmaster3=0))  |  hbusreq1=0));
assign sys_fair3 =  ( controllable_hmaster0 & ~(controllable_hmaster1) & ~(controllable_hmaster2) & ~(controllable_hmaster3) ) | ~i_hbusreq1;

// G(F(((hmaster0=0) * (hmaster1=1) * (hmaster2=0) * (hmaster3=0))  |  hbusreq2=0));
assign sys_fair4 =  ( ~(controllable_hmaster0) & controllable_hmaster1 & ~(controllable_hmaster2) & ~(controllable_hmaster3) ) | ~i_hbusreq2;

// G(F(((hmaster0=1) * (hmaster1=1) * (hmaster2=0) * (hmaster3=0))  |  hbusreq3=0));
assign sys_fair5 =  ( controllable_hmaster0 & controllable_hmaster1 & ~(controllable_hmaster2) & ~(controllable_hmaster3) ) | ~i_hbusreq3;

// G(F(((hmaster0=0) * (hmaster1=0) * (hmaster2=1) * (hmaster3=0))  |  hbusreq4=0));
assign sys_fair6 =  ( ~(controllable_hmaster0) & ~(controllable_hmaster1) & controllable_hmaster2 & ~(controllable_hmaster3) ) | ~i_hbusreq4;

// G(F(((hmaster0=1) * (hmaster1=0) * (hmaster2=1) * (hmaster3=0))  |  hbusreq5=0));
assign sys_fair7 =  ( controllable_hmaster0 & ~(controllable_hmaster1) & controllable_hmaster2 & ~(controllable_hmaster3) ) | ~i_hbusreq5;

// G(F(((hmaster0=0) * (hmaster1=1) * (hmaster2=1) * (hmaster3=0))  |  hbusreq6=0));
assign sys_fair8 =  ( ~(controllable_hmaster0) & controllable_hmaster1 & controllable_hmaster2 & ~(controllable_hmaster3) ) | ~i_hbusreq6;

// G(F(((hmaster0=1) * (hmaster1=1) * (hmaster2=1) * (hmaster3=0))  |  hbusreq7=0));
assign sys_fair9 =  ( controllable_hmaster0 & controllable_hmaster1 & controllable_hmaster2 & ~(controllable_hmaster3) ) | ~i_hbusreq7;

// G(F(((hmaster0=0) * (hmaster1=0) * (hmaster2=0) * (hmaster3=1))  |  hbusreq8=0));
assign sys_fair10 =  ( ~(controllable_hmaster0) & ~(controllable_hmaster1) & ~(controllable_hmaster2) & controllable_hmaster3 ) | ~i_hbusreq8;

// G(F(((hmaster0=1) * (hmaster1=0) * (hmaster2=0) * (hmaster3=1))  |  hbusreq9=0));
assign sys_fair11 =  ( controllable_hmaster0 & ~(controllable_hmaster1) & ~(controllable_hmaster2) & controllable_hmaster3 ) | ~i_hbusreq9;

// G(F(((hmaster0=0) * (hmaster1=1) * (hmaster2=0) * (hmaster3=1))  |  hbusreq10=0));
assign sys_fair12 =  ( ~(controllable_hmaster0) & controllable_hmaster1 & ~(controllable_hmaster2) & controllable_hmaster3 ) | ~i_hbusreq10;

// G(F(((hmaster0=1) * (hmaster1=1) * (hmaster2=0) * (hmaster3=1))  |  hbusreq11=0));
assign sys_fair13 =  ( controllable_hmaster0 & controllable_hmaster1 & ~(controllable_hmaster2) & controllable_hmaster3 ) | ~i_hbusreq11;

// G(F(((hmaster0=0) * (hmaster1=0) * (hmaster2=1) * (hmaster3=1))  |  hbusreq12=0));
assign sys_fair14 =  ( ~(controllable_hmaster0) & ~(controllable_hmaster1) & controllable_hmaster2 & controllable_hmaster3 ) | ~i_hbusreq12;

// G(F(((hmaster0=1) * (hmaster1=0) * (hmaster2=1) * (hmaster3=1))  |  hbusreq13=0));
assign sys_fair15 =  ( controllable_hmaster0 & ~(controllable_hmaster1) & controllable_hmaster2 & controllable_hmaster3 ) | ~i_hbusreq13;

// G(F(((hmaster0=0) * (hmaster1=1) * (hmaster2=1) * (hmaster3=1))  |  hbusreq14=0));
assign sys_fair16 =  ( ~(controllable_hmaster0) & controllable_hmaster1 & controllable_hmaster2 & controllable_hmaster3 ) | ~i_hbusreq14;

// G(F(((hmaster0=1) * (hmaster1=1) * (hmaster2=1) * (hmaster3=1))  |  hbusreq15=0));
assign sys_fair17 =  ( controllable_hmaster0 & controllable_hmaster1 & controllable_hmaster2 & controllable_hmaster3 ) | ~i_hbusreq15;

assign fair_err = (fair_cnt >= 3'b111);

// computing the error output bit:
assign o_err = ~env_safe_err & ~env_safe_err_happened & (sys_safe_err | fair_err);

initial
 begin
  reg_i_hready = 0;
  reg_i_hbusreq0 = 0;
  reg_i_hlock0 = 0;
  reg_i_hbusreq1 = 0;
  reg_i_hlock1 = 0;
  reg_i_hbusreq2 = 0;
  reg_i_hlock2 = 0;
  reg_i_hbusreq3 = 0;
  reg_i_hlock3 = 0;
  reg_i_hbusreq4 = 0;
  reg_i_hlock4 = 0;
  reg_i_hbusreq5 = 0;
  reg_i_hlock5 = 0;
  reg_i_hbusreq6 = 0;
  reg_i_hlock6 = 0;
  reg_i_hbusreq7 = 0;
  reg_i_hlock7 = 0;
  reg_i_hbusreq8 = 0;
  reg_i_hlock8 = 0;
  reg_i_hbusreq9 = 0;
  reg_i_hlock9 = 0;
  reg_i_hbusreq10 = 0;
  reg_i_hlock10 = 0;
  reg_i_hbusreq11 = 0;
  reg_i_hlock11 = 0;
  reg_i_hbusreq12 = 0;
  reg_i_hlock12 = 0;
  reg_i_hbusreq13 = 0;
  reg_i_hlock13 = 0;
  reg_i_hbusreq14 = 0;
  reg_i_hlock14 = 0;
  reg_i_hbusreq15 = 0;
  reg_i_hlock15 = 0;
  reg_controllable_hmaster0 = 0;
  reg_controllable_hmaster1 = 0;
  reg_controllable_hmaster2 = 0;
  reg_controllable_hmaster3 = 0;
  reg_controllable_hmastlock = 0;
  reg_controllable_nstart = 0;
  reg_controllable_ndecide = 0;
  reg_controllable_locked = 0;
  reg_controllable_nhgrant0 = 0;
  reg_controllable_hgrant1 = 0;
  reg_controllable_hgrant2 = 0;
  reg_controllable_hgrant3 = 0;
  reg_controllable_hgrant4 = 0;
  reg_controllable_hgrant5 = 0;
  reg_controllable_hgrant6 = 0;
  reg_controllable_hgrant7 = 0;
  reg_controllable_hgrant8 = 0;
  reg_controllable_hgrant9 = 0;
  reg_controllable_hgrant10 = 0;
  reg_controllable_hgrant11 = 0;
  reg_controllable_hgrant12 = 0;
  reg_controllable_hgrant13 = 0;
  reg_controllable_hgrant14 = 0;
  reg_controllable_hgrant15 = 0;
  reg_controllable_busreq = 0;
  reg_stateA1 = 0;
  reg_stateG2 = 0;
  reg_stateG3_0 = 0;
  reg_stateG3_1 = 0;
  reg_stateG3_2 = 0;
  reg_stateG10_1 = 0;
  reg_stateG10_2 = 0;
  reg_stateG10_3 = 0;
  reg_stateG10_4 = 0;
  reg_stateG10_5 = 0;
  reg_stateG10_6 = 0;
  reg_stateG10_7 = 0;
  reg_stateG10_8 = 0;
  reg_stateG10_9 = 0;
  reg_stateG10_10 = 0;
  reg_stateG10_11 = 0;
  reg_stateG10_12 = 0;
  reg_stateG10_13 = 0;
  reg_stateG10_14 = 0;
  reg_stateG10_15 = 0;
  env_safe_err_happened = 0;
  next_env_fair = 0;
  fair_cnt = 0;
  next_sys_fair = 0;
 end


always @(posedge i_clk)
 begin
   // We remember if an environment error occurred:
   env_safe_err_happened = env_safe_err_happened | env_safe_err;

   // Updating the fairness counters: 
   if((next_sys_fair == 0) & sys_fair0)
    begin
      next_sys_fair = 1;
      next_env_fair = 0;
      fair_cnt = 0;
    end
   else if((next_sys_fair == 1) & sys_fair1)
    begin
      next_sys_fair = 2;
      next_env_fair = 0;
      fair_cnt = 0;
    end
   else if((next_sys_fair == 2) & sys_fair2)
    begin
      next_sys_fair = 3;
      next_env_fair = 0;
      fair_cnt = 0;
    end
   else if((next_sys_fair == 3) & sys_fair3)
    begin
      next_sys_fair = 4;
      next_env_fair = 0;
      fair_cnt = 0;
    end
   else if((next_sys_fair == 4) & sys_fair4)
    begin
      next_sys_fair = 5;
      next_env_fair = 0;
      fair_cnt = 0;
    end
   else if((next_sys_fair == 5) & sys_fair5)
    begin
      next_sys_fair = 6;
      next_env_fair = 0;
      fair_cnt = 0;
    end
   else if((next_sys_fair == 6) & sys_fair6)
    begin
      next_sys_fair = 7;
      next_env_fair = 0;
      fair_cnt = 0;
    end
   else if((next_sys_fair == 7) & sys_fair7)
    begin
      next_sys_fair = 8;
      next_env_fair = 0;
      fair_cnt = 0;
    end
   else if((next_sys_fair == 8) & sys_fair8)
    begin
      next_sys_fair = 9;
      next_env_fair = 0;
      fair_cnt = 0;
    end
   else if((next_sys_fair == 9) & sys_fair9)
    begin
      next_sys_fair = 10;
      next_env_fair = 0;
      fair_cnt = 0;
    end
   else if((next_sys_fair == 10) & sys_fair10)
    begin
      next_sys_fair = 11;
      next_env_fair = 0;
      fair_cnt = 0;
    end
   else if((next_sys_fair == 11) & sys_fair11)
    begin
      next_sys_fair = 12;
      next_env_fair = 0;
      fair_cnt = 0;
    end
   else if((next_sys_fair == 12) & sys_fair12)
    begin
      next_sys_fair = 13;
      next_env_fair = 0;
      fair_cnt = 0;
    end
   else if((next_sys_fair == 13) & sys_fair13)
    begin
      next_sys_fair = 14;
      next_env_fair = 0;
      fair_cnt = 0;
    end
   else if((next_sys_fair == 14) & sys_fair14)
    begin
      next_sys_fair = 15;
      next_env_fair = 0;
      fair_cnt = 0;
    end
   else if((next_sys_fair == 15) & sys_fair15)
    begin
      next_sys_fair = 16;
      next_env_fair = 0;
      fair_cnt = 0;
    end
   else if((next_sys_fair == 16) & sys_fair16)
    begin
      next_sys_fair = 17;
      next_env_fair = 0;
      fair_cnt = 0;
    end
   else if((next_sys_fair == 17) & sys_fair17)
    begin
      next_sys_fair = 0;
      next_env_fair = 0;
      fair_cnt = 0;
    end
   else if(~next_env_fair & env_fair0)
    begin
      next_env_fair = 1;
    end
   else if(next_env_fair & env_fair1)
    begin
      next_env_fair = 0;
      fair_cnt = fair_cnt + 1;
    end

   // Updating the automata: 
   // Automaton A1: 
   if(~reg_stateA1 & controllable_hmastlock & ~i_hburst0 & ~i_hburst1)
    begin
      reg_stateA1 = 1'b1;
    end
   else if(reg_stateA1 & ~controllable_busreq)
    begin
      reg_stateA1 = 1'b0;
    end

   // Automaton G2: 
   if(~reg_stateG2)
    begin
      if(controllable_hmastlock & ~controllable_nstart & ~i_hburst0 & ~i_hburst1)
       begin
         reg_stateG2 = 1'b1;
       end
    end
   else // if(reg_stateG2)
    begin
      if(~controllable_busreq)
       begin
         reg_stateG2 = 1'b0;
       end
    end

   // Automaton G3: 
   if(~reg_stateG3_0 & ~reg_stateG3_1 & ~reg_stateG3_2 & controllable_hmastlock & ~controllable_nstart &  ~i_hburst0 & i_hburst1 & ~i_hready)
    begin
      reg_stateG3_0 = 1'b1;
      reg_stateG3_1 = 1'b0;
      reg_stateG3_2 = 1'b0;
    end
   else if(~reg_stateG3_0 & ~reg_stateG3_1 & ~reg_stateG3_2 & controllable_hmastlock & ~controllable_nstart &  ~i_hburst0 & i_hburst1 & i_hready)
    begin
      reg_stateG3_0 = 1'b0;
      reg_stateG3_1 = 1'b1;
      reg_stateG3_2 = 1'b0;
    end
   else if(reg_stateG3_0 & ~reg_stateG3_1 & ~reg_stateG3_2 & i_hready)
    begin
      reg_stateG3_0 = 1'b0;
      reg_stateG3_1 = 1'b1;
      reg_stateG3_2 = 1'b0;
    end
   else if(~reg_stateG3_0 & reg_stateG3_1 & ~reg_stateG3_2 & i_hready)
    begin
      reg_stateG3_0 = 1'b1;
      reg_stateG3_1 = 1'b1;
      reg_stateG3_2 = 1'b0;
    end
   else if(reg_stateG3_0 & reg_stateG3_1 & ~reg_stateG3_2 & i_hready)
    begin
      reg_stateG3_0 = 1'b0;
      reg_stateG3_1 = 1'b0;
      reg_stateG3_2 = 1'b1;
    end
   else if(~reg_stateG3_0 & ~reg_stateG3_1 & reg_stateG3_2 & i_hready)
    begin
      reg_stateG3_0 = 1'b0;
      reg_stateG3_1 = 1'b0;
      reg_stateG3_2 = 1'b0;
    end

   // Automaton G10_1: 
   if(~reg_stateG10_1 & ~controllable_hgrant1 & ~i_hbusreq1)
    begin
      reg_stateG10_1 = 1'b1;
    end
   else if(reg_stateG10_1 & i_hbusreq1)
    begin
      reg_stateG10_1 = 1'b0;
    end

   // Automaton G10_2: 
   if(~reg_stateG10_2 & ~controllable_hgrant2 & ~i_hbusreq2)
    begin
      reg_stateG10_2 = 1'b1;
    end
   else if(reg_stateG10_2 & i_hbusreq2)
    begin
      reg_stateG10_2 = 1'b0;
    end

   // Automaton G10_3: 
   if(~reg_stateG10_3 & ~controllable_hgrant3 & ~i_hbusreq3)
    begin
      reg_stateG10_3 = 1'b1;
    end
   else if(reg_stateG10_3 & i_hbusreq3)
    begin
      reg_stateG10_3 = 1'b0;
    end

   // Automaton G10_4: 
   if(~reg_stateG10_4 & ~controllable_hgrant4 & ~i_hbusreq4)
    begin
      reg_stateG10_4 = 1'b1;
    end
   else if(reg_stateG10_4 & i_hbusreq4)
    begin
      reg_stateG10_4 = 1'b0;
    end

   // Automaton G10_5: 
   if(~reg_stateG10_5 & ~controllable_hgrant5 & ~i_hbusreq5)
    begin
      reg_stateG10_5 = 1'b1;
    end
   else if(reg_stateG10_5 & i_hbusreq5)
    begin
      reg_stateG10_5 = 1'b0;
    end

   // Automaton G10_6: 
   if(~reg_stateG10_6 & ~controllable_hgrant6 & ~i_hbusreq6)
    begin
      reg_stateG10_6 = 1'b1;
    end
   else if(reg_stateG10_6 & i_hbusreq6)
    begin
      reg_stateG10_6 = 1'b0;
    end

   // Automaton G10_7: 
   if(~reg_stateG10_7 & ~controllable_hgrant7 & ~i_hbusreq7)
    begin
      reg_stateG10_7 = 1'b1;
    end
   else if(reg_stateG10_7 & i_hbusreq7)
    begin
      reg_stateG10_7 = 1'b0;
    end

   // Automaton G10_8: 
   if(~reg_stateG10_8 & ~controllable_hgrant8 & ~i_hbusreq8)
    begin
      reg_stateG10_8 = 1'b1;
    end
   else if(reg_stateG10_8 & i_hbusreq8)
    begin
      reg_stateG10_8 = 1'b0;
    end

   // Automaton G10_9: 
   if(~reg_stateG10_9 & ~controllable_hgrant9 & ~i_hbusreq9)
    begin
      reg_stateG10_9 = 1'b1;
    end
   else if(reg_stateG10_9 & i_hbusreq9)
    begin
      reg_stateG10_9 = 1'b0;
    end

   // Automaton G10_10: 
   if(~reg_stateG10_10 & ~controllable_hgrant10 & ~i_hbusreq10)
    begin
      reg_stateG10_10 = 1'b1;
    end
   else if(reg_stateG10_10 & i_hbusreq10)
    begin
      reg_stateG10_10 = 1'b0;
    end

   // Automaton G10_11: 
   if(~reg_stateG10_11 & ~controllable_hgrant11 & ~i_hbusreq11)
    begin
      reg_stateG10_11 = 1'b1;
    end
   else if(reg_stateG10_11 & i_hbusreq11)
    begin
      reg_stateG10_11 = 1'b0;
    end

   // Automaton G10_12: 
   if(~reg_stateG10_12 & ~controllable_hgrant12 & ~i_hbusreq12)
    begin
      reg_stateG10_12 = 1'b1;
    end
   else if(reg_stateG10_12 & i_hbusreq12)
    begin
      reg_stateG10_12 = 1'b0;
    end

   // Automaton G10_13: 
   if(~reg_stateG10_13 & ~controllable_hgrant13 & ~i_hbusreq13)
    begin
      reg_stateG10_13 = 1'b1;
    end
   else if(reg_stateG10_13 & i_hbusreq13)
    begin
      reg_stateG10_13 = 1'b0;
    end

   // Automaton G10_14: 
   if(~reg_stateG10_14 & ~controllable_hgrant14 & ~i_hbusreq14)
    begin
      reg_stateG10_14 = 1'b1;
    end
   else if(reg_stateG10_14 & i_hbusreq14)
    begin
      reg_stateG10_14 = 1'b0;
    end

   // Automaton G10_15: 
   if(~reg_stateG10_15 & ~controllable_hgrant15 & ~i_hbusreq15)
    begin
      reg_stateG10_15 = 1'b1;
    end
   else if(reg_stateG10_15 & i_hbusreq15)
    begin
      reg_stateG10_15 = 1'b0;
    end

   // Latching the previous input:
   reg_i_hready =  i_hready;
   reg_i_hbusreq0 =  i_hbusreq0;
   reg_i_hlock0 =  i_hlock0;
   reg_i_hbusreq1 =  i_hbusreq1;
   reg_i_hlock1 =  i_hlock1;
   reg_i_hbusreq2 =  i_hbusreq2;
   reg_i_hlock2 =  i_hlock2;
   reg_i_hbusreq3 =  i_hbusreq3;
   reg_i_hlock3 =  i_hlock3;
   reg_i_hbusreq4 =  i_hbusreq4;
   reg_i_hlock4 =  i_hlock4;
   reg_i_hbusreq5 =  i_hbusreq5;
   reg_i_hlock5 =  i_hlock5;
   reg_i_hbusreq6 =  i_hbusreq6;
   reg_i_hlock6 =  i_hlock6;
   reg_i_hbusreq7 =  i_hbusreq7;
   reg_i_hlock7 =  i_hlock7;
   reg_i_hbusreq8 =  i_hbusreq8;
   reg_i_hlock8 =  i_hlock8;
   reg_i_hbusreq9 =  i_hbusreq9;
   reg_i_hlock9 =  i_hlock9;
   reg_i_hbusreq10 =  i_hbusreq10;
   reg_i_hlock10 =  i_hlock10;
   reg_i_hbusreq11 =  i_hbusreq11;
   reg_i_hlock11 =  i_hlock11;
   reg_i_hbusreq12 =  i_hbusreq12;
   reg_i_hlock12 =  i_hlock12;
   reg_i_hbusreq13 =  i_hbusreq13;
   reg_i_hlock13 =  i_hlock13;
   reg_i_hbusreq14 =  i_hbusreq14;
   reg_i_hlock14 =  i_hlock14;
   reg_i_hbusreq15 =  i_hbusreq15;
   reg_i_hlock15 =  i_hlock15;
   reg_controllable_hmaster0 =  controllable_hmaster0;
   reg_controllable_hmaster1 =  controllable_hmaster1;
   reg_controllable_hmaster2 =  controllable_hmaster2;
   reg_controllable_hmaster3 =  controllable_hmaster3;
   reg_controllable_hmastlock =  controllable_hmastlock;
   reg_controllable_nstart =  controllable_nstart;
   reg_controllable_ndecide =  controllable_ndecide;
   reg_controllable_locked =  controllable_locked;
   reg_controllable_nhgrant0 =  controllable_nhgrant0;
   reg_controllable_hgrant1 =  controllable_hgrant1;
   reg_controllable_hgrant2 =  controllable_hgrant2;
   reg_controllable_hgrant3 =  controllable_hgrant3;
   reg_controllable_hgrant4 =  controllable_hgrant4;
   reg_controllable_hgrant5 =  controllable_hgrant5;
   reg_controllable_hgrant6 =  controllable_hgrant6;
   reg_controllable_hgrant7 =  controllable_hgrant7;
   reg_controllable_hgrant8 =  controllable_hgrant8;
   reg_controllable_hgrant9 =  controllable_hgrant9;
   reg_controllable_hgrant10 =  controllable_hgrant10;
   reg_controllable_hgrant11 =  controllable_hgrant11;
   reg_controllable_hgrant12 =  controllable_hgrant12;
   reg_controllable_hgrant13 =  controllable_hgrant13;
   reg_controllable_hgrant14 =  controllable_hgrant14;
   reg_controllable_hgrant15 =  controllable_hgrant15;
   reg_controllable_busreq =  controllable_busreq;

 end
endmodule

-------------------------------
#!SYNTCOMP
STATUS : realizable
SOLVED_BY : 3/3 [2015-pre-classification]
SOLVED_IN : 251.523 [2015-pre-classification]
#.
