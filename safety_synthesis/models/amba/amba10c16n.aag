aag 1222 42 67 1 1113
2
4
6
8
10
12
14
16
18
20
22
24
26
28
30
32
34
36
38
40
42
44
46
48
50
52
54
56
58
60
62
64
66
68
70
72
74
76
78
80
82
84
86 1
88 58
90 36
92 60
94 38
96 64
98 66
100 68
102 8
104 70
106 72
108 74
110 1447
112 1471
114 1491
116 46
118 1521
120 84
122 42
124 1961
126 1967
128 1973
130 1979
132 1985
134 40
136 82
138 2007
140 34
142 2049
144 2071
146 2101
148 30
150 80
152 2123
154 28
156 78
158 62
160 2145
162 48
164 24
166 76
168 2167
170 4
172 20
174 44
176 16
178 2189
180 10
182 12
184 2
186 2211
188 14
190 263
192 2233
194 18
196 2255
198 22
200 54
202 26
204 2421
206 2427
208 2433
210 2439
212 2445
214 56
216 32
218 6
1362
220 55 12
222 57 16
224 223 221
226 59 20
228 227 224
230 61 24
232 231 228
234 65 28
236 235 232
238 67 30
240 239 236
242 69 34
244 243 240
246 71 40
248 247 244
250 73 42
252 251 248
254 75 46
256 255 252
258 191 86
260 259 86
262 261 256
264 83 81
266 264 79
268 266 77
270 54 45
272 55 44
274 273 271
276 275 268
278 82 81
280 278 79
282 280 77
284 56 45
286 57 44
288 287 285
290 289 282
292 291 277
294 83 80
296 294 79
298 296 77
300 58 45
302 59 44
304 303 301
306 305 298
308 307 292
310 82 80
312 310 79
314 312 77
316 60 45
318 61 44
320 319 317
322 321 314
324 323 308
326 264 78
328 326 77
330 64 45
332 65 44
334 333 331
336 335 328
338 337 324
340 278 78
342 340 77
344 66 45
346 67 44
348 347 345
350 349 342
352 351 338
354 294 78
356 354 77
358 68 45
360 69 44
362 361 359
364 363 356
366 365 352
368 310 78
370 368 77
372 70 45
374 71 44
376 375 373
378 377 370
380 379 366
382 266 76
384 72 45
386 73 44
388 387 385
390 389 382
392 391 380
394 280 76
396 74 45
398 75 44
400 399 397
402 401 394
404 403 392
406 163 86
408 162 86
410 407 86
412 411 9
414 413 404
416 147 86
418 146 86
420 417 86
422 418 9
424 423 414
426 111 86
428 110 86
430 427 86
432 113 86
434 112 86
436 433 86
438 437 431
440 115 86
442 114 86
444 441 86
446 445 438
448 447 9
450 449 424
452 185 86
454 184 86
456 453 86
458 454 268
460 457 269
462 461 459
464 463 408
466 465 450
468 171 86
470 170 86
472 469 86
474 473 282
476 470 283
478 477 475
480 479 408
482 481 466
484 181 86
486 180 86
488 485 86
490 489 298
492 486 299
494 493 491
496 495 408
498 497 482
500 189 86
502 188 86
504 501 86
506 505 314
508 502 315
510 509 507
512 511 408
514 513 498
516 195 86
518 194 86
520 517 86
522 521 328
524 518 329
526 525 523
528 527 408
530 529 514
532 199 86
534 198 86
536 533 86
538 537 342
540 534 343
542 541 539
544 543 408
546 545 530
548 203 86
550 202 86
552 549 86
554 553 356
556 550 357
558 557 555
560 559 408
562 561 546
564 217 86
566 216 86
568 565 86
570 569 370
572 566 371
574 573 571
576 575 408
578 577 562
580 91 86
582 90 86
584 581 86
586 585 382
588 582 383
590 589 587
592 591 408
594 593 578
596 95 86
598 94 86
600 597 86
602 601 394
604 598 395
606 605 603
608 607 408
610 609 594
612 219 86
614 218 86
616 613 86
618 614 85
620 617 84
622 621 619
624 623 408
626 625 610
628 137 86
630 136 86
632 629 86
634 151 86
636 150 86
638 635 86
640 639 633
642 157 86
644 156 86
646 643 86
648 647 640
650 167 86
652 166 86
654 651 86
656 655 648
658 657 268
660 656 269
662 661 659
664 663 8
666 665 626
668 639 630
670 668 647
672 670 655
674 673 282
676 672 283
678 677 675
680 679 8
682 681 666
684 636 633
686 684 647
688 686 655
690 689 298
692 688 299
694 693 691
696 695 8
698 697 682
700 636 630
702 700 647
704 702 655
706 705 314
708 704 315
710 709 707
712 711 8
714 713 698
716 644 640
718 716 655
720 719 328
722 718 329
724 723 721
726 725 8
728 727 714
730 668 644
732 730 655
734 733 342
736 732 343
738 737 735
740 739 8
742 741 728
744 684 644
746 744 655
748 747 356
750 746 357
752 751 749
754 753 8
756 755 742
758 700 644
760 758 655
762 761 370
764 760 371
766 765 763
768 767 8
770 769 756
772 652 648
774 773 382
776 772 383
778 777 775
780 779 8
782 781 770
784 670 652
786 785 394
788 784 395
790 789 787
792 791 8
794 793 782
796 121 86
798 120 86
800 797 86
802 801 84
804 798 85
806 805 803
808 807 8
810 809 794
812 159 86
814 158 86
816 813 86
818 183 86
820 182 86
822 819 86
824 820 817
826 824 3
828 826 7
830 829 810
832 823 817
834 832 3
836 834 6
838 837 830
840 177 86
842 176 86
844 841 86
846 842 817
848 846 4
850 848 7
852 851 838
854 845 817
856 854 4
858 856 6
860 859 852
862 173 86
864 172 86
866 863 86
868 864 817
870 868 10
872 870 7
874 873 860
876 867 817
878 876 10
880 878 6
882 881 874
884 165 86
886 164 86
888 885 86
890 886 817
892 890 14
894 892 7
896 895 882
898 889 817
900 898 14
902 900 6
904 903 896
906 155 86
908 154 86
910 907 86
912 908 817
914 912 18
916 914 7
918 917 904
920 911 817
922 920 18
924 922 6
926 925 918
928 149 86
930 148 86
932 929 86
934 930 817
936 934 22
938 936 7
940 939 926
942 933 817
944 942 22
946 944 6
948 947 940
950 141 86
952 140 86
954 951 86
956 952 817
958 956 26
960 958 7
962 961 948
964 955 817
966 964 26
968 966 6
970 969 962
972 135 86
974 134 86
976 973 86
978 974 817
980 978 32
982 980 7
984 983 970
986 977 817
988 986 32
990 988 6
992 991 984
994 123 86
996 122 86
998 995 86
1000 996 817
1002 1000 36
1004 1002 7
1006 1005 992
1008 999 817
1010 1008 36
1012 1010 6
1014 1013 1006
1016 117 86
1018 116 86
1020 1017 86
1022 1018 817
1024 1022 38
1026 1024 7
1028 1027 1014
1030 1021 817
1032 1030 38
1034 1032 6
1036 1035 1028
1038 457 2
1040 454 3
1042 1041 1039
1044 1043 814
1046 1045 1036
1048 470 5
1050 473 4
1052 1051 1049
1054 1053 814
1056 1055 1046
1058 486 11
1060 489 10
1062 1061 1059
1064 1063 814
1066 1065 1056
1068 502 15
1070 505 14
1072 1071 1069
1074 1073 814
1076 1075 1066
1078 518 19
1080 521 18
1082 1081 1079
1084 1083 814
1086 1085 1076
1088 534 23
1090 537 22
1092 1091 1089
1094 1093 814
1096 1095 1086
1098 550 27
1100 553 26
1102 1101 1099
1104 1103 814
1106 1105 1096
1108 566 33
1110 569 32
1112 1111 1109
1114 1113 814
1116 1115 1106
1118 582 37
1120 585 36
1122 1121 1119
1124 1123 814
1126 1125 1116
1128 598 39
1130 601 38
1132 1131 1129
1134 1133 814
1136 1135 1126
1138 614 7
1140 617 6
1142 1141 1139
1144 1143 814
1146 1145 1136
1148 139 86
1150 138 86
1152 1149 86
1154 57 4
1156 1154 1150
1158 1157 1146
1160 145 86
1162 144 86
1164 1161 86
1166 59 10
1168 1166 1162
1170 1169 1158
1172 153 86
1174 152 86
1176 1173 86
1178 61 14
1180 1178 1174
1182 1181 1170
1184 161 86
1186 160 86
1188 1185 86
1190 65 18
1192 1190 1186
1194 1193 1182
1196 169 86
1198 168 86
1200 1197 86
1202 67 22
1204 1202 1198
1206 1205 1194
1208 179 86
1210 178 86
1212 1209 86
1214 69 26
1216 1214 1210
1218 1217 1206
1220 187 86
1222 186 86
1224 1221 86
1226 71 32
1228 1226 1222
1230 1229 1218
1232 193 86
1234 192 86
1236 1233 86
1238 73 36
1240 1238 1234
1242 1241 1230
1244 197 86
1246 196 86
1248 1245 86
1250 75 38
1252 1250 1246
1254 1253 1242
1256 201 86
1258 1257 86
1260 215 86
1262 1261 86
1264 1263 1259
1266 89 86
1268 1267 86
1270 1269 1264
1272 93 86
1274 1273 86
1276 1275 1270
1278 97 86
1280 1279 86
1282 1281 1276
1284 99 86
1286 1285 86
1288 1287 1282
1290 101 86
1292 1291 86
1294 1293 1288
1296 105 86
1298 1297 86
1300 1299 1294
1302 107 86
1304 1303 86
1306 1305 1300
1308 109 86
1310 1309 86
1312 1311 1306
1314 1312 817
1316 1314 2
1318 1317 1254
1320 133 86
1322 132 86
1324 1321 86
1326 131 86
1328 130 86
1330 1327 86
1332 129 86
1334 128 86
1336 1333 86
1338 127 86
1340 126 86
1342 1339 86
1344 125 86
1346 124 86
1348 1345 86
1350 1347 1341
1352 1350 1335
1354 1352 1329
1356 1354 1324
1358 1357 1325
1360 1358 1318
1362 1361 262
1364 446 84
1366 1364 9
1368 1366 53
1370 1368 50
1372 1370 49
1374 1370 48
1376 437 428
1378 1376 445
1380 1378 48
1382 434 431
1384 1382 445
1386 1384 48
1388 434 428
1390 1388 445
1392 1390 48
1394 442 438
1396 1394 48
1398 1374 1373
1400 1399 1373
1402 1375 1373
1404 1402 1380
1406 1405 1400
1408 1402 1381
1410 1408 1386
1412 1411 1406
1414 1408 1387
1416 1414 1392
1418 1417 1412
1420 1414 1393
1422 1420 1396
1424 1423 1418
1426 1397 428
1428 1426 1393
1430 1428 1387
1432 1431 1387
1434 1433 1381
1436 1434 1375
1438 1436 1373
1440 1439 1373
1442 1441 1425
1444 1424 428
1446 1445 1443
1448 1397 434
1450 1448 1393
1452 1450 1387
1454 1453 1387
1456 1455 1381
1458 1457 1381
1460 1459 1375
1462 1461 1375
1464 1463 1373
1466 1464 1425
1468 1424 434
1470 1469 1467
1472 1397 442
1474 1472 1393
1476 1475 1393
1478 1477 1387
1480 1478 1381
1482 1480 1375
1484 1482 1373
1486 1484 1425
1488 1424 442
1490 1489 1487
1492 119 86
1494 118 86
1496 1493 86
1498 1497 84
1500 1498 53
1502 1500 51
1504 1494 45
1506 1504 1503
1508 1507 1503
1510 1505 1494
1512 1510 1503
1514 1513 1503
1516 1515 1509
1518 1508 1494
1520 1519 1517
1522 205 86
1524 204 86
1526 1523 86
1528 207 86
1530 206 86
1532 1529 86
1534 209 86
1536 208 86
1538 1535 86
1540 211 86
1542 210 86
1544 1541 86
1546 212 86
1548 1531 1525
1550 1548 1537
1552 1550 1543
1554 1552 1547
1556 1554 421
1558 1531 1526
1560 1558 1537
1562 1560 1543
1564 1562 1547
1566 1564 446
1568 1532 1525
1570 1568 1537
1572 1570 1543
1574 1572 1547
1576 269 54
1578 1577 1574
1580 1532 1526
1582 1580 1537
1584 1582 1543
1586 1584 1547
1588 283 56
1590 1589 1586
1592 1548 1538
1594 1592 1543
1596 1594 1547
1598 299 58
1600 1599 1596
1602 1558 1538
1604 1602 1543
1606 1604 1547
1608 315 60
1610 1609 1606
1612 1568 1538
1614 1612 1543
1616 1614 1547
1618 329 64
1620 1619 1616
1622 1580 1538
1624 1622 1543
1626 1624 1547
1628 343 66
1630 1629 1626
1632 1550 1544
1634 1632 1547
1636 357 68
1638 1637 1634
1640 1560 1544
1642 1640 1547
1644 371 70
1646 1645 1642
1648 1570 1544
1650 1648 1547
1652 383 72
1654 1653 1650
1656 1582 1544
1658 1656 1547
1660 395 74
1662 1661 1658
1664 143 86
1666 142 86
1668 1665 86
1670 1669 1497
1672 1666 48
1674 1566 1557
1676 1675 1557
1678 1567 1557
1680 1678 1578
1682 1681 1676
1684 1678 1579
1686 1684 1590
1688 1687 1682
1690 1684 1591
1692 1690 1600
1694 1693 1688
1696 1690 1601
1698 1696 1610
1700 1699 1694
1702 1696 1611
1704 1702 1620
1706 1705 1700
1708 1702 1621
1710 1708 1630
1712 1711 1706
1714 1708 1631
1716 1714 1638
1718 1717 1712
1720 1714 1639
1722 1720 1646
1724 1723 1718
1726 1720 1647
1728 1726 1654
1730 1729 1724
1732 1726 1655
1734 1732 1662
1736 1735 1730
1738 1732 1663
1740 1738 1671
1742 1740 1672
1744 1743 1736
1746 1672 1349
1748 1673 1346
1750 1749 1747
1752 1670 1346
1754 1751 1671
1756 1755 1753
1758 1757 1663
1760 1758 1655
1762 1760 1647
1764 1762 1639
1766 1764 1631
1768 1766 1621
1770 1768 1611
1772 1770 1601
1774 1772 1591
1776 1774 1579
1778 1776 1567
1780 1778 1557
1782 1346 1343
1784 1347 1340
1786 1785 1783
1788 1787 1672
1790 1673 1340
1792 1791 1789
1794 1670 1340
1796 1793 1671
1798 1797 1795
1800 1799 1663
1802 1800 1655
1804 1802 1647
1806 1804 1639
1808 1806 1631
1810 1808 1621
1812 1810 1611
1814 1812 1601
1816 1814 1591
1818 1816 1579
1820 1818 1567
1822 1820 1557
1824 1346 1340
1826 1824 1337
1828 1825 1334
1830 1829 1827
1832 1831 1672
1834 1673 1334
1836 1835 1833
1838 1670 1334
1840 1837 1671
1842 1841 1839
1844 1843 1663
1846 1844 1655
1848 1846 1647
1850 1848 1639
1852 1850 1631
1854 1852 1621
1856 1854 1611
1858 1856 1601
1860 1858 1591
1862 1860 1579
1864 1862 1567
1866 1864 1557
1868 1824 1334
1870 1868 1331
1872 1869 1328
1874 1873 1871
1876 1875 1672
1878 1673 1328
1880 1879 1877
1882 1670 1328
1884 1881 1671
1886 1885 1883
1888 1887 1663
1890 1888 1655
1892 1890 1647
1894 1892 1639
1896 1894 1631
1898 1896 1621
1900 1898 1611
1902 1900 1601
1904 1902 1591
1906 1904 1579
1908 1906 1567
1910 1908 1557
1912 1868 1328
1914 1912 1325
1916 1913 1322
1918 1917 1915
1920 1919 1672
1922 1673 1322
1924 1923 1921
1926 1670 1322
1928 1925 1671
1930 1929 1927
1932 1931 1663
1934 1932 1655
1936 1934 1647
1938 1936 1639
1940 1938 1631
1942 1940 1621
1944 1942 1611
1946 1944 1601
1948 1946 1591
1950 1948 1579
1952 1950 1567
1954 1952 1557
1956 1780 1745
1958 1744 1346
1960 1959 1957
1962 1822 1745
1964 1744 1340
1966 1965 1963
1968 1866 1745
1970 1744 1334
1972 1971 1969
1974 1910 1745
1976 1744 1328
1978 1977 1975
1980 1954 1745
1982 1744 1322
1984 1983 1981
1986 1153 5
1988 1986 57
1990 1150 56
1992 1990 1989
1994 1993 1989
1996 1991 1150
1998 1996 1989
2000 1999 1989
2002 2001 1995
2004 1994 1150
2006 2005 2003
2008 1738 1670
2010 2009 1736
2012 2010 1743
2014 1673 1666
2016 2014 1671
2018 2017 1671
2020 2019 1663
2022 2020 1655
2024 2022 1647
2026 2024 1639
2028 2026 1631
2030 2028 1621
2032 2030 1611
2034 2032 1601
2036 2034 1591
2038 2036 1579
2040 2038 1567
2042 2040 1557
2044 2042 2013
2046 2012 1666
2048 2047 2045
2050 1165 11
2052 2050 59
2054 1162 58
2056 2054 2053
2058 2057 2053
2060 2055 1162
2062 2060 2053
2064 2063 2053
2066 2065 2059
2068 2058 1162
2070 2069 2067
2072 84 9
2074 2072 53
2076 2074 51
2078 2076 421
2080 418 45
2082 2081 2079
2084 2077 418
2086 2085 2077
2088 418 44
2090 2087 421
2092 2088 418
2094 2093 2091
2096 2095 2083
2098 2082 418
2100 2099 2097
2102 1177 15
2104 2102 61
2106 1174 60
2108 2106 2105
2110 2109 2105
2112 2107 1174
2114 2112 2105
2116 2115 2105
2118 2117 2111
2120 2110 1174
2122 2121 2119
2124 1189 19
2126 2124 65
2128 1186 64
2130 2128 2127
2132 2131 2127
2134 2129 1186
2136 2134 2127
2138 2137 2127
2140 2139 2133
2142 2132 1186
2144 2143 2141
2146 1201 23
2148 2146 67
2150 1198 66
2152 2150 2149
2154 2153 2149
2156 2151 1198
2158 2156 2149
2160 2159 2149
2162 2161 2155
2164 2154 1198
2166 2165 2163
2168 1213 27
2170 2168 69
2172 1210 68
2174 2172 2171
2176 2175 2171
2178 2173 1210
2180 2178 2171
2182 2181 2171
2184 2183 2177
2186 2176 1210
2188 2187 2185
2190 1225 33
2192 2190 71
2194 1222 70
2196 2194 2193
2198 2197 2193
2200 2195 1222
2202 2200 2193
2204 2203 2193
2206 2205 2199
2208 2198 1222
2210 2209 2207
2212 1237 37
2214 2212 73
2216 1234 72
2218 2216 2215
2220 2219 2215
2222 2217 1234
2224 2222 2215
2226 2225 2215
2228 2227 2221
2230 2220 1234
2232 2231 2229
2234 1249 39
2236 2234 75
2238 1246 74
2240 2238 2237
2242 2241 2237
2244 2239 1246
2246 2244 2237
2248 2247 2237
2250 2249 2243
2252 2242 1246
2254 2253 2251
2256 1663 1524
2258 2256 1655
2260 2259 1655
2262 2261 1647
2264 2262 1639
2266 2265 1639
2268 2267 1631
2270 2268 1621
2272 2271 1621
2274 2273 1611
2276 2274 1601
2278 2277 1601
2280 2279 1591
2282 2280 1579
2284 2283 1579
2286 2285 1567
2288 2286 1557
2290 2289 1557
2292 1663 1530
2294 2292 1655
2296 2295 1655
2298 2297 1647
2300 2299 1647
2302 2301 1639
2304 2302 1631
2306 2304 1621
2308 2307 1621
2310 2309 1611
2312 2311 1611
2314 2313 1601
2316 2314 1591
2318 2316 1579
2320 2319 1579
2322 2321 1567
2324 2323 1567
2326 2325 1557
2328 1663 1536
2330 2328 1655
2332 2330 1647
2334 2332 1639
2336 2334 1631
2338 2336 1621
2340 2339 1621
2342 2341 1611
2344 2343 1611
2346 2345 1601
2348 2347 1601
2350 2349 1591
2352 2351 1591
2354 2353 1579
2356 2354 1567
2358 2356 1557
2360 1663 1542
2362 2360 1655
2364 2363 1655
2366 2365 1647
2368 2367 1647
2370 2369 1639
2372 2371 1639
2374 2373 1631
2376 2375 1631
2378 2377 1621
2380 2378 1611
2382 2380 1601
2384 2382 1591
2386 2384 1579
2388 2386 1567
2390 2388 1557
2392 1663 1546
2394 2392 1655
2396 2394 1647
2398 2396 1639
2400 2398 1631
2402 2400 1621
2404 2402 1611
2406 2404 1601
2408 2406 1591
2410 2408 1579
2412 2410 1567
2414 2412 1557
2416 2291 1737
2418 1736 1524
2420 2419 2417
2422 2326 1737
2424 1736 1530
2426 2425 2423
2428 2358 1737
2430 1736 1536
2432 2431 2429
2434 2390 1737
2436 1736 1542
2438 2437 2435
2440 2414 1737
2442 1736 1546
2444 2443 2441
i0 controllable_nhgrant0
i1 controllable_hgrant1
i2 controllable_locked
i3 controllable_nstart
i4 controllable_hgrant2
i5 i_hlock0
i6 controllable_hgrant3
i7 i_hlock1
i8 controllable_hgrant4
i9 i_hlock2
i10 controllable_hgrant5
i11 i_hlock3
i12 controllable_hgrant6
i13 i_hlock4
i14 i_hlock5
i15 controllable_hgrant7
i16 i_hlock6
i17 controllable_hgrant8
i18 controllable_hgrant9
i19 i_hlock7
i20 i_hlock8
i21 controllable_busreq
i22 i_hlock9
i23 i_hready
i24 i_hburst1
i25 i_hburst0
i26 i_hbusreq0
i27 i_hbusreq1
i28 i_hbusreq2
i29 i_hbusreq3
i30 controllable_ndecide
i31 i_hbusreq4
i32 i_hbusreq5
i33 i_hbusreq6
i34 i_hbusreq7
i35 i_hbusreq8
i36 i_hbusreq9
i37 controllable_hmaster3
i38 controllable_hmaster2
i39 controllable_hmaster1
i40 controllable_hmaster0
i41 controllable_hmastlock
l0 n87
l1 reg_i_hbusreq2_out
l2 reg_controllable_hgrant8_out
l3 reg_i_hbusreq3_out
l4 reg_controllable_hgrant9_out
l5 reg_i_hbusreq4_out
l6 reg_i_hbusreq5_out
l7 reg_i_hbusreq6_out
l8 reg_controllable_nstart_out
l9 reg_i_hbusreq7_out
l10 reg_i_hbusreq8_out
l11 reg_i_hbusreq9_out
l12 reg_stateG3_0_out
l13 reg_stateG3_1_out
l14 reg_stateG3_2_out
l15 reg_i_hlock9_out
l16 reg_stateA1_out
l17 reg_controllable_hmastlock_out
l18 reg_i_hlock8_out
l19 fair_cnt<0>_out
l20 fair_cnt<1>_out
l21 fair_cnt<2>_out
l22 fair_cnt<3>_out
l23 fair_cnt<4>_out
l24 reg_i_hlock7_out
l25 reg_controllable_hmaster0_out
l26 reg_stateG10_1_out
l27 reg_i_hlock6_out
l28 next_env_fair_out
l29 reg_stateG10_2_out
l30 reg_stateG2_out
l31 reg_i_hlock5_out
l32 reg_controllable_hmaster1_out
l33 reg_stateG10_3_out
l34 reg_i_hlock4_out
l35 reg_controllable_hmaster2_out
l36 reg_controllable_ndecide_out
l37 reg_stateG10_4_out
l38 reg_i_hready_out
l39 reg_i_hlock3_out
l40 reg_controllable_hmaster3_out
l41 reg_stateG10_5_out
l42 reg_controllable_hgrant1_out
l43 reg_i_hlock2_out
l44 reg_controllable_busreq_out
l45 reg_i_hlock1_out
l46 reg_stateG10_6_out
l47 reg_controllable_hgrant2_out
l48 reg_i_hlock0_out
l49 reg_controllable_nhgrant0_out
l50 reg_stateG10_7_out
l51 reg_controllable_hgrant3_out
l52 env_safe_err_happened_out
l53 reg_stateG10_8_out
l54 reg_controllable_hgrant4_out
l55 reg_stateG10_9_out
l56 reg_controllable_hgrant5_out
l57 reg_i_hbusreq0_out
l58 reg_controllable_hgrant6_out
l59 next_sys_fair<0>_out
l60 next_sys_fair<1>_out
l61 next_sys_fair<2>_out
l62 next_sys_fair<3>_out
l63 next_sys_fair<4>_out
l64 reg_i_hbusreq1_out
l65 reg_controllable_hgrant7_out
l66 reg_controllable_locked_out
o0 o_err
c
amba_10_new_16
This file was written by ABC on Tue May  5 16:55:14 2015
For information about AIGER format, refer to http://fmv.jku.at/aiger
-------------------------------
This AIGER file has been created by the following sequence of commands:
> vl2mv amba10c16.v   ---gives--> amba10c16.mv
> abc -c "read_blif_mv amba10c16.mv; write_aiger -s amba10c16n.aig"   ---gives--> amba10c16n.aig
> aigtoaig amba10c16n.aig amba10c16n.aag   ---gives--> amba10c16n.aag (this file)
Content of amba10c16.v:
module amba_10_new_16(
        o_err,
        i_clk,
        i_hready,
        i_hbusreq0,
        i_hlock0,
        i_hbusreq1,
        i_hlock1,
        i_hbusreq2,
        i_hlock2,
        i_hbusreq3,
        i_hlock3,
        i_hbusreq4,
        i_hlock4,
        i_hbusreq5,
        i_hlock5,
        i_hbusreq6,
        i_hlock6,
        i_hbusreq7,
        i_hlock7,
        i_hbusreq8,
        i_hlock8,
        i_hbusreq9,
        i_hlock9,
        i_hburst0,
        i_hburst1,
        controllable_hmaster0,
        controllable_hmaster1,
        controllable_hmaster2,
        controllable_hmaster3,
        controllable_hmastlock,
        controllable_nstart,
        controllable_ndecide,
        controllable_locked,
        controllable_nhgrant0,
        controllable_hgrant1,
        controllable_hgrant2,
        controllable_hgrant3,
        controllable_hgrant4,
        controllable_hgrant5,
        controllable_hgrant6,
        controllable_hgrant7,
        controllable_hgrant8,
        controllable_hgrant9,
        controllable_busreq);

input i_clk;
input i_hready;
input i_hbusreq0;
input i_hlock0;
input i_hbusreq1;
input i_hlock1;
input i_hbusreq2;
input i_hlock2;
input i_hbusreq3;
input i_hlock3;
input i_hbusreq4;
input i_hlock4;
input i_hbusreq5;
input i_hlock5;
input i_hbusreq6;
input i_hlock6;
input i_hbusreq7;
input i_hlock7;
input i_hbusreq8;
input i_hlock8;
input i_hbusreq9;
input i_hlock9;
input i_hburst0;
input i_hburst1;
input controllable_hmaster0;
input controllable_hmaster1;
input controllable_hmaster2;
input controllable_hmaster3;
input controllable_hmastlock;
input controllable_nstart;
input controllable_ndecide;
input controllable_locked;
input controllable_nhgrant0;
input controllable_hgrant1;
input controllable_hgrant2;
input controllable_hgrant3;
input controllable_hgrant4;
input controllable_hgrant5;
input controllable_hgrant6;
input controllable_hgrant7;
input controllable_hgrant8;
input controllable_hgrant9;
input controllable_busreq;
output o_err;

reg reg_i_hready;
reg reg_i_hbusreq0;
reg reg_i_hlock0;
reg reg_i_hbusreq1;
reg reg_i_hlock1;
reg reg_i_hbusreq2;
reg reg_i_hlock2;
reg reg_i_hbusreq3;
reg reg_i_hlock3;
reg reg_i_hbusreq4;
reg reg_i_hlock4;
reg reg_i_hbusreq5;
reg reg_i_hlock5;
reg reg_i_hbusreq6;
reg reg_i_hlock6;
reg reg_i_hbusreq7;
reg reg_i_hlock7;
reg reg_i_hbusreq8;
reg reg_i_hlock8;
reg reg_i_hbusreq9;
reg reg_i_hlock9;
reg reg_controllable_hmaster0;
reg reg_controllable_hmaster1;
reg reg_controllable_hmaster2;
reg reg_controllable_hmaster3;
reg reg_controllable_hmastlock;
reg reg_controllable_nstart;
reg reg_controllable_ndecide;
reg reg_controllable_locked;
reg reg_controllable_nhgrant0;
reg reg_controllable_hgrant1;
reg reg_controllable_hgrant2;
reg reg_controllable_hgrant3;
reg reg_controllable_hgrant4;
reg reg_controllable_hgrant5;
reg reg_controllable_hgrant6;
reg reg_controllable_hgrant7;
reg reg_controllable_hgrant8;
reg reg_controllable_hgrant9;
reg reg_controllable_busreq;
reg reg_stateA1;
reg reg_stateG2;
reg reg_stateG3_0;
reg reg_stateG3_1;
reg reg_stateG3_2;
reg reg_stateG10_1;
reg reg_stateG10_2;
reg reg_stateG10_3;
reg reg_stateG10_4;
reg reg_stateG10_5;
reg reg_stateG10_6;
reg reg_stateG10_7;
reg reg_stateG10_8;
reg reg_stateG10_9;
reg env_safe_err_happened;
reg next_env_fair;
reg [4:0] fair_cnt;
reg [4:0] next_sys_fair;

wire env_safe_err0;
wire env_safe_err1;
wire env_safe_err2;
wire env_safe_err3;
wire env_safe_err4;
wire env_safe_err5;
wire env_safe_err6;
wire env_safe_err7;
wire env_safe_err8;
wire env_safe_err9;
wire env_safe_err;

wire sys_safe_err0;
wire sys_safe_err1;
wire sys_safe_err2;
wire sys_safe_err3;
wire sys_safe_err4;
wire sys_safe_err5;
wire sys_safe_err6;
wire sys_safe_err7;
wire sys_safe_err8;
wire sys_safe_err9;
wire sys_safe_err10;
wire sys_safe_err11;
wire sys_safe_err12;
wire sys_safe_err13;
wire sys_safe_err14;
wire sys_safe_err15;
wire sys_safe_err16;
wire sys_safe_err17;
wire sys_safe_err18;
wire sys_safe_err19;
wire sys_safe_err20;
wire sys_safe_err21;
wire sys_safe_err22;
wire sys_safe_err23;
wire sys_safe_err24;
wire sys_safe_err25;
wire sys_safe_err26;
wire sys_safe_err27;
wire sys_safe_err28;
wire sys_safe_err29;
wire sys_safe_err30;
wire sys_safe_err31;
wire sys_safe_err32;
wire sys_safe_err33;
wire sys_safe_err34;
wire sys_safe_err35;
wire sys_safe_err36;
wire sys_safe_err37;
wire sys_safe_err38;
wire sys_safe_err39;
wire sys_safe_err40;
wire sys_safe_err41;
wire sys_safe_err42;
wire sys_safe_err43;
wire sys_safe_err44;
wire sys_safe_err45;
wire sys_safe_err46;
wire sys_safe_err47;
wire sys_safe_err48;
wire sys_safe_err49;
wire sys_safe_err50;
wire sys_safe_err51;
wire sys_safe_err52;
wire sys_safe_err53;
wire sys_safe_err54;
wire sys_safe_err55;
wire sys_safe_err56;
wire sys_safe_err57;
wire sys_safe_err58;
wire sys_safe_err59;
wire sys_safe_err60;
wire sys_safe_err61;
wire sys_safe_err62;
wire sys_safe_err63;
wire sys_safe_err64;
wire sys_safe_err65;
wire sys_safe_err66;
wire sys_safe_err67;
wire sys_safe_err68;
wire sys_safe_err69;
wire sys_safe_err70;
wire sys_safe_err71;
wire sys_safe_err72;
wire sys_safe_err73;
wire sys_safe_err74;
wire sys_safe_err75;
wire sys_safe_err;

wire env_fair0;
wire env_fair1;

wire sys_fair0;
wire sys_fair1;
wire sys_fair2;
wire sys_fair3;
wire sys_fair4;
wire sys_fair5;
wire sys_fair6;
wire sys_fair7;
wire sys_fair8;
wire sys_fair9;
wire sys_fair10;
wire sys_fair11;
wire fair_err;
wire o_err;

// =============================================================
//                        ENV_TRANSITION:
// =============================================================
// Assumption 3:
// G( hlock0=1 -> hbusreq0=1 );
assign env_safe_err0 =  ~(~ i_hlock0 | i_hbusreq0);

// Assumption 3:
// G( hlock1=1 -> hbusreq1=1 );
assign env_safe_err1 =  ~(~ i_hlock1 | i_hbusreq1);

// Assumption 3:
// G( hlock2=1 -> hbusreq2=1 );
assign env_safe_err2 =  ~(~ i_hlock2 | i_hbusreq2);

// Assumption 3:
// G( hlock3=1 -> hbusreq3=1 );
assign env_safe_err3 =  ~(~ i_hlock3 | i_hbusreq3);

// Assumption 3:
// G( hlock4=1 -> hbusreq4=1 );
assign env_safe_err4 =  ~(~ i_hlock4 | i_hbusreq4);

// Assumption 3:
// G( hlock5=1 -> hbusreq5=1 );
assign env_safe_err5 =  ~(~ i_hlock5 | i_hbusreq5);

// Assumption 3:
// G( hlock6=1 -> hbusreq6=1 );
assign env_safe_err6 =  ~(~ i_hlock6 | i_hbusreq6);

// Assumption 3:
// G( hlock7=1 -> hbusreq7=1 );
assign env_safe_err7 =  ~(~ i_hlock7 | i_hbusreq7);

// Assumption 3:
// G( hlock8=1 -> hbusreq8=1 );
assign env_safe_err8 =  ~(~ i_hlock8 | i_hbusreq8);

// Assumption 3:
// G( hlock9=1 -> hbusreq9=1 );
assign env_safe_err9 =  ~(~ i_hlock9 | i_hbusreq9);

// collecting together the safety error bits:
assign env_safe_err = env_safe_err0 |
                      env_safe_err1 |
                      env_safe_err2 |
                      env_safe_err3 |
                      env_safe_err4 |
                      env_safe_err5 |
                      env_safe_err6 |
                      env_safe_err7 |
                      env_safe_err8 |
                      env_safe_err9;

// =============================================================
//                        SYS_TRANSITION:
// =============================================================
// G((hmaster0=0) * (hmaster1=0) * (hmaster2=0) * (hmaster3=0) -> (hbusreq0=0 <-> busreq=0));
assign sys_safe_err0 =  ~( ~( ~(controllable_hmaster0) & ~(controllable_hmaster1) & ~(controllable_hmaster2) & ~(controllable_hmaster3) )|(~i_hbusreq0 ^~ (~controllable_busreq)));

// G((hmaster0=1) * (hmaster1=0) * (hmaster2=0) * (hmaster3=0) -> (hbusreq1=0 <-> busreq=0));
assign sys_safe_err1 =  ~( ~( controllable_hmaster0 & ~(controllable_hmaster1) & ~(controllable_hmaster2) & ~(controllable_hmaster3) )|(~i_hbusreq1 ^~ (~controllable_busreq)));

// G((hmaster0=0) * (hmaster1=1) * (hmaster2=0) * (hmaster3=0) -> (hbusreq2=0 <-> busreq=0));
assign sys_safe_err2 =  ~( ~( ~(controllable_hmaster0) & controllable_hmaster1 & ~(controllable_hmaster2) & ~(controllable_hmaster3) )|(~i_hbusreq2 ^~ (~controllable_busreq)));

// G((hmaster0=1) * (hmaster1=1) * (hmaster2=0) * (hmaster3=0) -> (hbusreq3=0 <-> busreq=0));
assign sys_safe_err3 =  ~( ~( controllable_hmaster0 & controllable_hmaster1 & ~(controllable_hmaster2) & ~(controllable_hmaster3) )|(~i_hbusreq3 ^~ (~controllable_busreq)));

// G((hmaster0=0) * (hmaster1=0) * (hmaster2=1) * (hmaster3=0) -> (hbusreq4=0 <-> busreq=0));
assign sys_safe_err4 =  ~( ~( ~(controllable_hmaster0) & ~(controllable_hmaster1) & controllable_hmaster2 & ~(controllable_hmaster3) )|(~i_hbusreq4 ^~ (~controllable_busreq)));

// G((hmaster0=1) * (hmaster1=0) * (hmaster2=1) * (hmaster3=0) -> (hbusreq5=0 <-> busreq=0));
assign sys_safe_err5 =  ~( ~( controllable_hmaster0 & ~(controllable_hmaster1) & controllable_hmaster2 & ~(controllable_hmaster3) )|(~i_hbusreq5 ^~ (~controllable_busreq)));

// G((hmaster0=0) * (hmaster1=1) * (hmaster2=1) * (hmaster3=0) -> (hbusreq6=0 <-> busreq=0));
assign sys_safe_err6 =  ~( ~( ~(controllable_hmaster0) & controllable_hmaster1 & controllable_hmaster2 & ~(controllable_hmaster3) )|(~i_hbusreq6 ^~ (~controllable_busreq)));

// G((hmaster0=1) * (hmaster1=1) * (hmaster2=1) * (hmaster3=0) -> (hbusreq7=0 <-> busreq=0));
assign sys_safe_err7 =  ~( ~( controllable_hmaster0 & controllable_hmaster1 & controllable_hmaster2 & ~(controllable_hmaster3) )|(~i_hbusreq7 ^~ (~controllable_busreq)));

// G((hmaster0=0) * (hmaster1=0) * (hmaster2=0) * (hmaster3=1) -> (hbusreq8=0 <-> busreq=0));
assign sys_safe_err8 =  ~( ~( ~(controllable_hmaster0) & ~(controllable_hmaster1) & ~(controllable_hmaster2) & controllable_hmaster3 )|(~i_hbusreq8 ^~ (~controllable_busreq)));

// G((hmaster0=1) * (hmaster1=0) * (hmaster2=0) * (hmaster3=1) -> (hbusreq9=0 <-> busreq=0));
assign sys_safe_err9 =  ~( ~( controllable_hmaster0 & ~(controllable_hmaster1) & ~(controllable_hmaster2) & controllable_hmaster3 )|(~i_hbusreq9 ^~ (~controllable_busreq)));

// Guarantee 1:
// G((hready=0) -> X(start=0));
assign sys_safe_err10 =  ~( reg_i_hready | controllable_nstart );

// G(((stateG2=1) * (start=1)) -> FALSE;
assign sys_safe_err11 =  ~( ~(reg_stateG2 & ~controllable_nstart) | 0 );

// G(((stateG3_0=1) * (stateG3_1=0) * (stateG3_2=0) * ((start=1))) -> FALSE);
// G(((stateG3_0=0) * (stateG3_1=1) * (stateG3_2=0) * ((start=1))) -> FALSE);
// G(((stateG3_0=1) * (stateG3_1=1) * (stateG3_2=0) * ((start=1))) -> FALSE);
// G(((stateG3_0=0) * (stateG3_1=0) * (stateG3_2=1) * ((start=1))) -> FALSE);
// all these rules can be summarized as: only in state 000, start=1 is allowed:
assign sys_safe_err12 =  (reg_stateG3_0 | reg_stateG3_1 | reg_stateG3_2) & ~controllable_nstart;

// G( (hready=1) -> (   (hgrant0=1) <-> (X(hmaster0=0) * X(hmaster1=0) * X(hmaster2=0) * X(hmaster3=0))  ) );
assign sys_safe_err13 =  ~( ~(reg_i_hready) | ( ~reg_controllable_nhgrant0 ^~ ( ~(controllable_hmaster0) & ~(controllable_hmaster1) & ~(controllable_hmaster2) & ~(controllable_hmaster3) ) ) );

// G( (hready=1) -> (   (hgrant1=1) <-> (X(hmaster0=1) * X(hmaster1=0) * X(hmaster2=0) * X(hmaster3=0))  ) );
assign sys_safe_err14 =  ~( ~(reg_i_hready) | ( reg_controllable_hgrant1 ^~ ( controllable_hmaster0 & ~(controllable_hmaster1) & ~(controllable_hmaster2) & ~(controllable_hmaster3) ) ) );

// G( (hready=1) -> (   (hgrant2=1) <-> (X(hmaster0=0) * X(hmaster1=1) * X(hmaster2=0) * X(hmaster3=0))  ) );
assign sys_safe_err15 =  ~( ~(reg_i_hready) | ( reg_controllable_hgrant2 ^~ ( ~(controllable_hmaster0) & controllable_hmaster1 & ~(controllable_hmaster2) & ~(controllable_hmaster3) ) ) );

// G( (hready=1) -> (   (hgrant3=1) <-> (X(hmaster0=1) * X(hmaster1=1) * X(hmaster2=0) * X(hmaster3=0))  ) );
assign sys_safe_err16 =  ~( ~(reg_i_hready) | ( reg_controllable_hgrant3 ^~ ( controllable_hmaster0 & controllable_hmaster1 & ~(controllable_hmaster2) & ~(controllable_hmaster3) ) ) );

// G( (hready=1) -> (   (hgrant4=1) <-> (X(hmaster0=0) * X(hmaster1=0) * X(hmaster2=1) * X(hmaster3=0))  ) );
assign sys_safe_err17 =  ~( ~(reg_i_hready) | ( reg_controllable_hgrant4 ^~ ( ~(controllable_hmaster0) & ~(controllable_hmaster1) & controllable_hmaster2 & ~(controllable_hmaster3) ) ) );

// G( (hready=1) -> (   (hgrant5=1) <-> (X(hmaster0=1) * X(hmaster1=0) * X(hmaster2=1) * X(hmaster3=0))  ) );
assign sys_safe_err18 =  ~( ~(reg_i_hready) | ( reg_controllable_hgrant5 ^~ ( controllable_hmaster0 & ~(controllable_hmaster1) & controllable_hmaster2 & ~(controllable_hmaster3) ) ) );

// G( (hready=1) -> (   (hgrant6=1) <-> (X(hmaster0=0) * X(hmaster1=1) * X(hmaster2=1) * X(hmaster3=0))  ) );
assign sys_safe_err19 =  ~( ~(reg_i_hready) | ( reg_controllable_hgrant6 ^~ ( ~(controllable_hmaster0) & controllable_hmaster1 & controllable_hmaster2 & ~(controllable_hmaster3) ) ) );

// G( (hready=1) -> (   (hgrant7=1) <-> (X(hmaster0=1) * X(hmaster1=1) * X(hmaster2=1) * X(hmaster3=0))  ) );
assign sys_safe_err20 =  ~( ~(reg_i_hready) | ( reg_controllable_hgrant7 ^~ ( controllable_hmaster0 & controllable_hmaster1 & controllable_hmaster2 & ~(controllable_hmaster3) ) ) );

// G( (hready=1) -> (   (hgrant8=1) <-> (X(hmaster0=0) * X(hmaster1=0) * X(hmaster2=0) * X(hmaster3=1))  ) );
assign sys_safe_err21 =  ~( ~(reg_i_hready) | ( reg_controllable_hgrant8 ^~ ( ~(controllable_hmaster0) & ~(controllable_hmaster1) & ~(controllable_hmaster2) & controllable_hmaster3 ) ) );

// G( (hready=1) -> (   (hgrant9=1) <-> (X(hmaster0=1) * X(hmaster1=0) * X(hmaster2=0) * X(hmaster3=1))  ) );
assign sys_safe_err22 =  ~( ~(reg_i_hready) | ( reg_controllable_hgrant9 ^~ ( controllable_hmaster0 & ~(controllable_hmaster1) & ~(controllable_hmaster2) & controllable_hmaster3 ) ) );

// HMASTLOCK:
// G(  (hready=1) -> (locked=0 <-> X(hmastlock=0) ) );
assign sys_safe_err23 =  ~( ~(reg_i_hready) | (~reg_controllable_locked ^~ ~controllable_hmastlock) );

// Master 0:
// G( X(start=0) -> ( ((hmaster0=0) * (hmaster1=0) * (hmaster2=0) * (hmaster3=0)) <-> (X(hmaster0=0) * X(hmaster1=0) * X(hmaster2=0) * X(hmaster3=0)) ) );
assign sys_safe_err24 =  ~( ~(controllable_nstart) | ( ( ~(reg_controllable_hmaster0) & ~(reg_controllable_hmaster1) & ~(reg_controllable_hmaster2) & ~(reg_controllable_hmaster3) ) ^~ ( ~(controllable_hmaster0) & ~(controllable_hmaster1) & ~(controllable_hmaster2) & ~(controllable_hmaster3) )) );

// Master 1:
// G( X(start=0) -> ( ((hmaster0=1) * (hmaster1=0) * (hmaster2=0) * (hmaster3=0)) <-> (X(hmaster0=1) * X(hmaster1=0) * X(hmaster2=0) * X(hmaster3=0)) ) );
assign sys_safe_err25 =  ~( ~(controllable_nstart) | ( ( reg_controllable_hmaster0 & ~(reg_controllable_hmaster1) & ~(reg_controllable_hmaster2) & ~(reg_controllable_hmaster3) ) ^~ ( controllable_hmaster0 & ~(controllable_hmaster1) & ~(controllable_hmaster2) & ~(controllable_hmaster3) )) );

// Master 2:
// G( X(start=0) -> ( ((hmaster0=0) * (hmaster1=1) * (hmaster2=0) * (hmaster3=0)) <-> (X(hmaster0=0) * X(hmaster1=1) * X(hmaster2=0) * X(hmaster3=0)) ) );
assign sys_safe_err26 =  ~( ~(controllable_nstart) | ( ( ~(reg_controllable_hmaster0) & reg_controllable_hmaster1 & ~(reg_controllable_hmaster2) & ~(reg_controllable_hmaster3) ) ^~ ( ~(controllable_hmaster0) & controllable_hmaster1 & ~(controllable_hmaster2) & ~(controllable_hmaster3) )) );

// Master 3:
// G( X(start=0) -> ( ((hmaster0=1) * (hmaster1=1) * (hmaster2=0) * (hmaster3=0)) <-> (X(hmaster0=1) * X(hmaster1=1) * X(hmaster2=0) * X(hmaster3=0)) ) );
assign sys_safe_err27 =  ~( ~(controllable_nstart) | ( ( reg_controllable_hmaster0 & reg_controllable_hmaster1 & ~(reg_controllable_hmaster2) & ~(reg_controllable_hmaster3) ) ^~ ( controllable_hmaster0 & controllable_hmaster1 & ~(controllable_hmaster2) & ~(controllable_hmaster3) )) );

// Master 4:
// G( X(start=0) -> ( ((hmaster0=0) * (hmaster1=0) * (hmaster2=1) * (hmaster3=0)) <-> (X(hmaster0=0) * X(hmaster1=0) * X(hmaster2=1) * X(hmaster3=0)) ) );
assign sys_safe_err28 =  ~( ~(controllable_nstart) | ( ( ~(reg_controllable_hmaster0) & ~(reg_controllable_hmaster1) & reg_controllable_hmaster2 & ~(reg_controllable_hmaster3) ) ^~ ( ~(controllable_hmaster0) & ~(controllable_hmaster1) & controllable_hmaster2 & ~(controllable_hmaster3) )) );

// Master 5:
// G( X(start=0) -> ( ((hmaster0=1) * (hmaster1=0) * (hmaster2=1) * (hmaster3=0)) <-> (X(hmaster0=1) * X(hmaster1=0) * X(hmaster2=1) * X(hmaster3=0)) ) );
assign sys_safe_err29 =  ~( ~(controllable_nstart) | ( ( reg_controllable_hmaster0 & ~(reg_controllable_hmaster1) & reg_controllable_hmaster2 & ~(reg_controllable_hmaster3) ) ^~ ( controllable_hmaster0 & ~(controllable_hmaster1) & controllable_hmaster2 & ~(controllable_hmaster3) )) );

// Master 6:
// G( X(start=0) -> ( ((hmaster0=0) * (hmaster1=1) * (hmaster2=1) * (hmaster3=0)) <-> (X(hmaster0=0) * X(hmaster1=1) * X(hmaster2=1) * X(hmaster3=0)) ) );
assign sys_safe_err30 =  ~( ~(controllable_nstart) | ( ( ~(reg_controllable_hmaster0) & reg_controllable_hmaster1 & reg_controllable_hmaster2 & ~(reg_controllable_hmaster3) ) ^~ ( ~(controllable_hmaster0) & controllable_hmaster1 & controllable_hmaster2 & ~(controllable_hmaster3) )) );

// Master 7:
// G( X(start=0) -> ( ((hmaster0=1) * (hmaster1=1) * (hmaster2=1) * (hmaster3=0)) <-> (X(hmaster0=1) * X(hmaster1=1) * X(hmaster2=1) * X(hmaster3=0)) ) );
assign sys_safe_err31 =  ~( ~(controllable_nstart) | ( ( reg_controllable_hmaster0 & reg_controllable_hmaster1 & reg_controllable_hmaster2 & ~(reg_controllable_hmaster3) ) ^~ ( controllable_hmaster0 & controllable_hmaster1 & controllable_hmaster2 & ~(controllable_hmaster3) )) );

// Master 8:
// G( X(start=0) -> ( ((hmaster0=0) * (hmaster1=0) * (hmaster2=0) * (hmaster3=1)) <-> (X(hmaster0=0) * X(hmaster1=0) * X(hmaster2=0) * X(hmaster3=1)) ) );
assign sys_safe_err32 =  ~( ~(controllable_nstart) | ( ( ~(reg_controllable_hmaster0) & ~(reg_controllable_hmaster1) & ~(reg_controllable_hmaster2) & reg_controllable_hmaster3 ) ^~ ( ~(controllable_hmaster0) & ~(controllable_hmaster1) & ~(controllable_hmaster2) & controllable_hmaster3 )) );

// Master 9:
// G( X(start=0) -> ( ((hmaster0=1) * (hmaster1=0) * (hmaster2=0) * (hmaster3=1)) <-> (X(hmaster0=1) * X(hmaster1=0) * X(hmaster2=0) * X(hmaster3=1)) ) );
assign sys_safe_err33 =  ~( ~(controllable_nstart) | ( ( reg_controllable_hmaster0 & ~(reg_controllable_hmaster1) & ~(reg_controllable_hmaster2) & reg_controllable_hmaster3 ) ^~ ( controllable_hmaster0 & ~(controllable_hmaster1) & ~(controllable_hmaster2) & controllable_hmaster3 )) );

// Guarantee 6.2:
// G( ((X(start=0))) -> ( (hmastlock=1) <-> X(hmastlock=1)) );
assign sys_safe_err34 =  ~( ~(controllable_nstart) | ( reg_controllable_hmastlock ^~ controllable_hmastlock) );

// G( (decide=1  *  hlock0=1  *  X(hgrant0=1) )->X(locked=1));
assign sys_safe_err35 =  ~( ~(~reg_controllable_ndecide & reg_i_hlock0 & ~controllable_nhgrant0) | (controllable_locked) );

// G((decide=1  *  hlock0=0  *  X(hgrant0=1))->X(locked=0));
assign sys_safe_err36 =  ~( ~(~reg_controllable_ndecide & ~reg_i_hlock0 & ~controllable_nhgrant0) | (~controllable_locked) );

// G( (decide=1  *  hlock1=1  *  X(hgrant1=1) )->X(locked=1));
assign sys_safe_err37 =  ~( ~(~reg_controllable_ndecide & reg_i_hlock1 & controllable_hgrant1) | (controllable_locked) );

// G((decide=1  *  hlock1=0  *  X(hgrant1=1))->X(locked=0));
assign sys_safe_err38 =  ~( ~(~reg_controllable_ndecide & ~reg_i_hlock1 & controllable_hgrant1) | (~controllable_locked) );

// G( (decide=1  *  hlock2=1  *  X(hgrant2=1) )->X(locked=1));
assign sys_safe_err39 =  ~( ~(~reg_controllable_ndecide & reg_i_hlock2 & controllable_hgrant2) | (controllable_locked) );

// G((decide=1  *  hlock2=0  *  X(hgrant2=1))->X(locked=0));
assign sys_safe_err40 =  ~( ~(~reg_controllable_ndecide & ~reg_i_hlock2 & controllable_hgrant2) | (~controllable_locked) );

// G( (decide=1  *  hlock3=1  *  X(hgrant3=1) )->X(locked=1));
assign sys_safe_err41 =  ~( ~(~reg_controllable_ndecide & reg_i_hlock3 & controllable_hgrant3) | (controllable_locked) );

// G((decide=1  *  hlock3=0  *  X(hgrant3=1))->X(locked=0));
assign sys_safe_err42 =  ~( ~(~reg_controllable_ndecide & ~reg_i_hlock3 & controllable_hgrant3) | (~controllable_locked) );

// G( (decide=1  *  hlock4=1  *  X(hgrant4=1) )->X(locked=1));
assign sys_safe_err43 =  ~( ~(~reg_controllable_ndecide & reg_i_hlock4 & controllable_hgrant4) | (controllable_locked) );

// G((decide=1  *  hlock4=0  *  X(hgrant4=1))->X(locked=0));
assign sys_safe_err44 =  ~( ~(~reg_controllable_ndecide & ~reg_i_hlock4 & controllable_hgrant4) | (~controllable_locked) );

// G( (decide=1  *  hlock5=1  *  X(hgrant5=1) )->X(locked=1));
assign sys_safe_err45 =  ~( ~(~reg_controllable_ndecide & reg_i_hlock5 & controllable_hgrant5) | (controllable_locked) );

// G((decide=1  *  hlock5=0  *  X(hgrant5=1))->X(locked=0));
assign sys_safe_err46 =  ~( ~(~reg_controllable_ndecide & ~reg_i_hlock5 & controllable_hgrant5) | (~controllable_locked) );

// G( (decide=1  *  hlock6=1  *  X(hgrant6=1) )->X(locked=1));
assign sys_safe_err47 =  ~( ~(~reg_controllable_ndecide & reg_i_hlock6 & controllable_hgrant6) | (controllable_locked) );

// G((decide=1  *  hlock6=0  *  X(hgrant6=1))->X(locked=0));
assign sys_safe_err48 =  ~( ~(~reg_controllable_ndecide & ~reg_i_hlock6 & controllable_hgrant6) | (~controllable_locked) );

// G( (decide=1  *  hlock7=1  *  X(hgrant7=1) )->X(locked=1));
assign sys_safe_err49 =  ~( ~(~reg_controllable_ndecide & reg_i_hlock7 & controllable_hgrant7) | (controllable_locked) );

// G((decide=1  *  hlock7=0  *  X(hgrant7=1))->X(locked=0));
assign sys_safe_err50 =  ~( ~(~reg_controllable_ndecide & ~reg_i_hlock7 & controllable_hgrant7) | (~controllable_locked) );

// G( (decide=1  *  hlock8=1  *  X(hgrant8=1) )->X(locked=1));
assign sys_safe_err51 =  ~( ~(~reg_controllable_ndecide & reg_i_hlock8 & controllable_hgrant8) | (controllable_locked) );

// G((decide=1  *  hlock8=0  *  X(hgrant8=1))->X(locked=0));
assign sys_safe_err52 =  ~( ~(~reg_controllable_ndecide & ~reg_i_hlock8 & controllable_hgrant8) | (~controllable_locked) );

// G( (decide=1  *  hlock9=1  *  X(hgrant9=1) )->X(locked=1));
assign sys_safe_err53 =  ~( ~(~reg_controllable_ndecide & reg_i_hlock9 & controllable_hgrant9) | (controllable_locked) );

// G((decide=1  *  hlock9=0  *  X(hgrant9=1))->X(locked=0));
assign sys_safe_err54 =  ~( ~(~reg_controllable_ndecide & ~reg_i_hlock9 & controllable_hgrant9) | (~controllable_locked) );

// G( (decide=0) -> (  ((hgrant0=0)<->X(hgrant0=0))  ));
assign sys_safe_err55 =  ~( ~(reg_controllable_ndecide) | (reg_controllable_nhgrant0 ^~ controllable_nhgrant0) );

// G( (decide=0) -> (  ((hgrant1=0)<->X(hgrant1=0))  ));
assign sys_safe_err56 =  ~( ~(reg_controllable_ndecide) | (~reg_controllable_hgrant1 ^~ ~controllable_hgrant1) );

// G( (decide=0) -> (  ((hgrant2=0)<->X(hgrant2=0))  ));
assign sys_safe_err57 =  ~( ~(reg_controllable_ndecide) | (~reg_controllable_hgrant2 ^~ ~controllable_hgrant2) );

// G( (decide=0) -> (  ((hgrant3=0)<->X(hgrant3=0))  ));
assign sys_safe_err58 =  ~( ~(reg_controllable_ndecide) | (~reg_controllable_hgrant3 ^~ ~controllable_hgrant3) );

// G( (decide=0) -> (  ((hgrant4=0)<->X(hgrant4=0))  ));
assign sys_safe_err59 =  ~( ~(reg_controllable_ndecide) | (~reg_controllable_hgrant4 ^~ ~controllable_hgrant4) );

// G( (decide=0) -> (  ((hgrant5=0)<->X(hgrant5=0))  ));
assign sys_safe_err60 =  ~( ~(reg_controllable_ndecide) | (~reg_controllable_hgrant5 ^~ ~controllable_hgrant5) );

// G( (decide=0) -> (  ((hgrant6=0)<->X(hgrant6=0))  ));
assign sys_safe_err61 =  ~( ~(reg_controllable_ndecide) | (~reg_controllable_hgrant6 ^~ ~controllable_hgrant6) );

// G( (decide=0) -> (  ((hgrant7=0)<->X(hgrant7=0))  ));
assign sys_safe_err62 =  ~( ~(reg_controllable_ndecide) | (~reg_controllable_hgrant7 ^~ ~controllable_hgrant7) );

// G( (decide=0) -> (  ((hgrant8=0)<->X(hgrant8=0))  ));
assign sys_safe_err63 =  ~( ~(reg_controllable_ndecide) | (~reg_controllable_hgrant8 ^~ ~controllable_hgrant8) );

// G( (decide=0) -> (  ((hgrant9=0)<->X(hgrant9=0))  ));
assign sys_safe_err64 =  ~( ~(reg_controllable_ndecide) | (~reg_controllable_hgrant9 ^~ ~controllable_hgrant9) );

// G((decide=0)->(locked=0 <-> X(locked=0)));
assign sys_safe_err65 =  ~( ~(reg_controllable_ndecide) | (~reg_controllable_locked ^~ ~controllable_locked) );

// G(((stateG10_1=1) * (((hgrant1=1)) * (hbusreq1=0)))->FALSE);
assign sys_safe_err66 =  ~( ~(reg_stateG10_1 & (controllable_hgrant1 & ~i_hbusreq1)) | 0 );

// G(((stateG10_2=1) * (((hgrant2=1)) * (hbusreq2=0)))->FALSE);
assign sys_safe_err67 =  ~( ~(reg_stateG10_2 & (controllable_hgrant2 & ~i_hbusreq2)) | 0 );

// G(((stateG10_3=1) * (((hgrant3=1)) * (hbusreq3=0)))->FALSE);
assign sys_safe_err68 =  ~( ~(reg_stateG10_3 & (controllable_hgrant3 & ~i_hbusreq3)) | 0 );

// G(((stateG10_4=1) * (((hgrant4=1)) * (hbusreq4=0)))->FALSE);
assign sys_safe_err69 =  ~( ~(reg_stateG10_4 & (controllable_hgrant4 & ~i_hbusreq4)) | 0 );

// G(((stateG10_5=1) * (((hgrant5=1)) * (hbusreq5=0)))->FALSE);
assign sys_safe_err70 =  ~( ~(reg_stateG10_5 & (controllable_hgrant5 & ~i_hbusreq5)) | 0 );

// G(((stateG10_6=1) * (((hgrant6=1)) * (hbusreq6=0)))->FALSE);
assign sys_safe_err71 =  ~( ~(reg_stateG10_6 & (controllable_hgrant6 & ~i_hbusreq6)) | 0 );

// G(((stateG10_7=1) * (((hgrant7=1)) * (hbusreq7=0)))->FALSE);
assign sys_safe_err72 =  ~( ~(reg_stateG10_7 & (controllable_hgrant7 & ~i_hbusreq7)) | 0 );

// G(((stateG10_8=1) * (((hgrant8=1)) * (hbusreq8=0)))->FALSE);
assign sys_safe_err73 =  ~( ~(reg_stateG10_8 & (controllable_hgrant8 & ~i_hbusreq8)) | 0 );

// G(((stateG10_9=1) * (((hgrant9=1)) * (hbusreq9=0)))->FALSE);
assign sys_safe_err74 =  ~( ~(reg_stateG10_9 & (controllable_hgrant9 & ~i_hbusreq9)) | 0 );

// default master
// G((decide=1  *  hbusreq0=0  *  hbusreq1=0  *  hbusreq2=0  *  hbusreq3=0  *  hbusreq4=0  *  hbusreq5=0  *  hbusreq6=0  *  hbusreq7=0  *  hbusreq8=0  *  hbusreq9=0) -> X(hgrant0=1));
assign sys_safe_err75 =  ~( ~(~reg_controllable_ndecide & (~reg_i_hbusreq0 & ~reg_i_hbusreq1 & ~reg_i_hbusreq2 & ~reg_i_hbusreq3 & ~reg_i_hbusreq4 & ~reg_i_hbusreq5 & ~reg_i_hbusreq6 & ~reg_i_hbusreq7 & ~reg_i_hbusreq8 & ~reg_i_hbusreq9)) | (~controllable_nhgrant0) );

// collecting together the safety error bits:
assign sys_safe_err = sys_safe_err0 |
                      sys_safe_err1 |
                      sys_safe_err2 |
                      sys_safe_err3 |
                      sys_safe_err4 |
                      sys_safe_err5 |
                      sys_safe_err6 |
                      sys_safe_err7 |
                      sys_safe_err8 |
                      sys_safe_err9 |
                      sys_safe_err10 |
                      sys_safe_err11 |
                      sys_safe_err12 |
                      sys_safe_err13 |
                      sys_safe_err14 |
                      sys_safe_err15 |
                      sys_safe_err16 |
                      sys_safe_err17 |
                      sys_safe_err18 |
                      sys_safe_err19 |
                      sys_safe_err20 |
                      sys_safe_err21 |
                      sys_safe_err22 |
                      sys_safe_err23 |
                      sys_safe_err24 |
                      sys_safe_err25 |
                      sys_safe_err26 |
                      sys_safe_err27 |
                      sys_safe_err28 |
                      sys_safe_err29 |
                      sys_safe_err30 |
                      sys_safe_err31 |
                      sys_safe_err32 |
                      sys_safe_err33 |
                      sys_safe_err34 |
                      sys_safe_err35 |
                      sys_safe_err36 |
                      sys_safe_err37 |
                      sys_safe_err38 |
                      sys_safe_err39 |
                      sys_safe_err40 |
                      sys_safe_err41 |
                      sys_safe_err42 |
                      sys_safe_err43 |
                      sys_safe_err44 |
                      sys_safe_err45 |
                      sys_safe_err46 |
                      sys_safe_err47 |
                      sys_safe_err48 |
                      sys_safe_err49 |
                      sys_safe_err50 |
                      sys_safe_err51 |
                      sys_safe_err52 |
                      sys_safe_err53 |
                      sys_safe_err54 |
                      sys_safe_err55 |
                      sys_safe_err56 |
                      sys_safe_err57 |
                      sys_safe_err58 |
                      sys_safe_err59 |
                      sys_safe_err60 |
                      sys_safe_err61 |
                      sys_safe_err62 |
                      sys_safe_err63 |
                      sys_safe_err64 |
                      sys_safe_err65 |
                      sys_safe_err66 |
                      sys_safe_err67 |
                      sys_safe_err68 |
                      sys_safe_err69 |
                      sys_safe_err70 |
                      sys_safe_err71 |
                      sys_safe_err72 |
                      sys_safe_err73 |
                      sys_safe_err74 |
                      sys_safe_err75;

// =============================================================
//                          ENV_FAIRNESS:
// =============================================================
// Assumption 1: 
// G(F(stateA1=0));
assign env_fair0 =  ~reg_stateA1;

// Assumption 2:
// G(F(hready=1));
assign env_fair1 =  i_hready;


// =============================================================
//                          SYS_FAIRNESS:
// =============================================================
// Guarantee 2:
// G(F(stateG2=0));
assign sys_fair0 = ~reg_stateG2;

// Guarantee 3:
// G(F((stateG3_0=0)  *  (stateG3_1=0)  *  (stateG3_2=0)));
assign sys_fair1 =  (~reg_stateG3_0 & ~reg_stateG3_1 & ~reg_stateG3_2);

// G(F(((hmaster0=0) * (hmaster1=0) * (hmaster2=0) * (hmaster3=0))  |  hbusreq0=0));
assign sys_fair2 =  ( ~(controllable_hmaster0) & ~(controllable_hmaster1) & ~(controllable_hmaster2) & ~(controllable_hmaster3) ) | ~i_hbusreq0;

// G(F(((hmaster0=1) * (hmaster1=0) * (hmaster2=0) * (hmaster3=0))  |  hbusreq1=0));
assign sys_fair3 =  ( controllable_hmaster0 & ~(controllable_hmaster1) & ~(controllable_hmaster2) & ~(controllable_hmaster3) ) | ~i_hbusreq1;

// G(F(((hmaster0=0) * (hmaster1=1) * (hmaster2=0) * (hmaster3=0))  |  hbusreq2=0));
assign sys_fair4 =  ( ~(controllable_hmaster0) & controllable_hmaster1 & ~(controllable_hmaster2) & ~(controllable_hmaster3) ) | ~i_hbusreq2;

// G(F(((hmaster0=1) * (hmaster1=1) * (hmaster2=0) * (hmaster3=0))  |  hbusreq3=0));
assign sys_fair5 =  ( controllable_hmaster0 & controllable_hmaster1 & ~(controllable_hmaster2) & ~(controllable_hmaster3) ) | ~i_hbusreq3;

// G(F(((hmaster0=0) * (hmaster1=0) * (hmaster2=1) * (hmaster3=0))  |  hbusreq4=0));
assign sys_fair6 =  ( ~(controllable_hmaster0) & ~(controllable_hmaster1) & controllable_hmaster2 & ~(controllable_hmaster3) ) | ~i_hbusreq4;

// G(F(((hmaster0=1) * (hmaster1=0) * (hmaster2=1) * (hmaster3=0))  |  hbusreq5=0));
assign sys_fair7 =  ( controllable_hmaster0 & ~(controllable_hmaster1) & controllable_hmaster2 & ~(controllable_hmaster3) ) | ~i_hbusreq5;

// G(F(((hmaster0=0) * (hmaster1=1) * (hmaster2=1) * (hmaster3=0))  |  hbusreq6=0));
assign sys_fair8 =  ( ~(controllable_hmaster0) & controllable_hmaster1 & controllable_hmaster2 & ~(controllable_hmaster3) ) | ~i_hbusreq6;

// G(F(((hmaster0=1) * (hmaster1=1) * (hmaster2=1) * (hmaster3=0))  |  hbusreq7=0));
assign sys_fair9 =  ( controllable_hmaster0 & controllable_hmaster1 & controllable_hmaster2 & ~(controllable_hmaster3) ) | ~i_hbusreq7;

// G(F(((hmaster0=0) * (hmaster1=0) * (hmaster2=0) * (hmaster3=1))  |  hbusreq8=0));
assign sys_fair10 =  ( ~(controllable_hmaster0) & ~(controllable_hmaster1) & ~(controllable_hmaster2) & controllable_hmaster3 ) | ~i_hbusreq8;

// G(F(((hmaster0=1) * (hmaster1=0) * (hmaster2=0) * (hmaster3=1))  |  hbusreq9=0));
assign sys_fair11 =  ( controllable_hmaster0 & ~(controllable_hmaster1) & ~(controllable_hmaster2) & controllable_hmaster3 ) | ~i_hbusreq9;

assign fair_err = (fair_cnt >= 5'b10000);

// computing the error output bit:
assign o_err = ~env_safe_err & ~env_safe_err_happened & (sys_safe_err | fair_err);

initial
 begin
  reg_i_hready = 0;
  reg_i_hbusreq0 = 0;
  reg_i_hlock0 = 0;
  reg_i_hbusreq1 = 0;
  reg_i_hlock1 = 0;
  reg_i_hbusreq2 = 0;
  reg_i_hlock2 = 0;
  reg_i_hbusreq3 = 0;
  reg_i_hlock3 = 0;
  reg_i_hbusreq4 = 0;
  reg_i_hlock4 = 0;
  reg_i_hbusreq5 = 0;
  reg_i_hlock5 = 0;
  reg_i_hbusreq6 = 0;
  reg_i_hlock6 = 0;
  reg_i_hbusreq7 = 0;
  reg_i_hlock7 = 0;
  reg_i_hbusreq8 = 0;
  reg_i_hlock8 = 0;
  reg_i_hbusreq9 = 0;
  reg_i_hlock9 = 0;
  reg_controllable_hmaster0 = 0;
  reg_controllable_hmaster1 = 0;
  reg_controllable_hmaster2 = 0;
  reg_controllable_hmaster3 = 0;
  reg_controllable_hmastlock = 0;
  reg_controllable_nstart = 0;
  reg_controllable_ndecide = 0;
  reg_controllable_locked = 0;
  reg_controllable_nhgrant0 = 0;
  reg_controllable_hgrant1 = 0;
  reg_controllable_hgrant2 = 0;
  reg_controllable_hgrant3 = 0;
  reg_controllable_hgrant4 = 0;
  reg_controllable_hgrant5 = 0;
  reg_controllable_hgrant6 = 0;
  reg_controllable_hgrant7 = 0;
  reg_controllable_hgrant8 = 0;
  reg_controllable_hgrant9 = 0;
  reg_controllable_busreq = 0;
  reg_stateA1 = 0;
  reg_stateG2 = 0;
  reg_stateG3_0 = 0;
  reg_stateG3_1 = 0;
  reg_stateG3_2 = 0;
  reg_stateG10_1 = 0;
  reg_stateG10_2 = 0;
  reg_stateG10_3 = 0;
  reg_stateG10_4 = 0;
  reg_stateG10_5 = 0;
  reg_stateG10_6 = 0;
  reg_stateG10_7 = 0;
  reg_stateG10_8 = 0;
  reg_stateG10_9 = 0;
  env_safe_err_happened = 0;
  next_env_fair = 0;
  fair_cnt = 0;
  next_sys_fair = 0;
 end


always @(posedge i_clk)
 begin
   // We remember if an environment error occurred:
   env_safe_err_happened = env_safe_err_happened | env_safe_err;

   // Updating the fairness counters: 
   if((next_sys_fair == 0) & sys_fair0)
    begin
      next_sys_fair = 1;
      next_env_fair = 0;
      fair_cnt = 0;
    end
   else if((next_sys_fair == 1) & sys_fair1)
    begin
      next_sys_fair = 2;
      next_env_fair = 0;
      fair_cnt = 0;
    end
   else if((next_sys_fair == 2) & sys_fair2)
    begin
      next_sys_fair = 3;
      next_env_fair = 0;
      fair_cnt = 0;
    end
   else if((next_sys_fair == 3) & sys_fair3)
    begin
      next_sys_fair = 4;
      next_env_fair = 0;
      fair_cnt = 0;
    end
   else if((next_sys_fair == 4) & sys_fair4)
    begin
      next_sys_fair = 5;
      next_env_fair = 0;
      fair_cnt = 0;
    end
   else if((next_sys_fair == 5) & sys_fair5)
    begin
      next_sys_fair = 6;
      next_env_fair = 0;
      fair_cnt = 0;
    end
   else if((next_sys_fair == 6) & sys_fair6)
    begin
      next_sys_fair = 7;
      next_env_fair = 0;
      fair_cnt = 0;
    end
   else if((next_sys_fair == 7) & sys_fair7)
    begin
      next_sys_fair = 8;
      next_env_fair = 0;
      fair_cnt = 0;
    end
   else if((next_sys_fair == 8) & sys_fair8)
    begin
      next_sys_fair = 9;
      next_env_fair = 0;
      fair_cnt = 0;
    end
   else if((next_sys_fair == 9) & sys_fair9)
    begin
      next_sys_fair = 10;
      next_env_fair = 0;
      fair_cnt = 0;
    end
   else if((next_sys_fair == 10) & sys_fair10)
    begin
      next_sys_fair = 11;
      next_env_fair = 0;
      fair_cnt = 0;
    end
   else if((next_sys_fair == 11) & sys_fair11)
    begin
      next_sys_fair = 0;
      next_env_fair = 0;
      fair_cnt = 0;
    end
   else if(~next_env_fair & env_fair0)
    begin
      next_env_fair = 1;
    end
   else if(next_env_fair & env_fair1)
    begin
      next_env_fair = 0;
      fair_cnt = fair_cnt + 1;
    end

   // Updating the automata: 
   // Automaton A1: 
   if(~reg_stateA1 & controllable_hmastlock & ~i_hburst0 & ~i_hburst1)
    begin
      reg_stateA1 = 1'b1;
    end
   else if(reg_stateA1 & ~controllable_busreq)
    begin
      reg_stateA1 = 1'b0;
    end

   // Automaton G2: 
   if(~reg_stateG2)
    begin
      if(controllable_hmastlock & ~controllable_nstart & ~i_hburst0 & ~i_hburst1)
       begin
         reg_stateG2 = 1'b1;
       end
    end
   else // if(reg_stateG2)
    begin
      if(~controllable_busreq)
       begin
         reg_stateG2 = 1'b0;
       end
    end

   // Automaton G3: 
   if(~reg_stateG3_0 & ~reg_stateG3_1 & ~reg_stateG3_2 & controllable_hmastlock & ~controllable_nstart &  ~i_hburst0 & i_hburst1 & ~i_hready)
    begin
      reg_stateG3_0 = 1'b1;
      reg_stateG3_1 = 1'b0;
      reg_stateG3_2 = 1'b0;
    end
   else if(~reg_stateG3_0 & ~reg_stateG3_1 & ~reg_stateG3_2 & controllable_hmastlock & ~controllable_nstart &  ~i_hburst0 & i_hburst1 & i_hready)
    begin
      reg_stateG3_0 = 1'b0;
      reg_stateG3_1 = 1'b1;
      reg_stateG3_2 = 1'b0;
    end
   else if(reg_stateG3_0 & ~reg_stateG3_1 & ~reg_stateG3_2 & i_hready)
    begin
      reg_stateG3_0 = 1'b0;
      reg_stateG3_1 = 1'b1;
      reg_stateG3_2 = 1'b0;
    end
   else if(~reg_stateG3_0 & reg_stateG3_1 & ~reg_stateG3_2 & i_hready)
    begin
      reg_stateG3_0 = 1'b1;
      reg_stateG3_1 = 1'b1;
      reg_stateG3_2 = 1'b0;
    end
   else if(reg_stateG3_0 & reg_stateG3_1 & ~reg_stateG3_2 & i_hready)
    begin
      reg_stateG3_0 = 1'b0;
      reg_stateG3_1 = 1'b0;
      reg_stateG3_2 = 1'b1;
    end
   else if(~reg_stateG3_0 & ~reg_stateG3_1 & reg_stateG3_2 & i_hready)
    begin
      reg_stateG3_0 = 1'b0;
      reg_stateG3_1 = 1'b0;
      reg_stateG3_2 = 1'b0;
    end

   // Automaton G10_1: 
   if(~reg_stateG10_1 & ~controllable_hgrant1 & ~i_hbusreq1)
    begin
      reg_stateG10_1 = 1'b1;
    end
   else if(reg_stateG10_1 & i_hbusreq1)
    begin
      reg_stateG10_1 = 1'b0;
    end

   // Automaton G10_2: 
   if(~reg_stateG10_2 & ~controllable_hgrant2 & ~i_hbusreq2)
    begin
      reg_stateG10_2 = 1'b1;
    end
   else if(reg_stateG10_2 & i_hbusreq2)
    begin
      reg_stateG10_2 = 1'b0;
    end

   // Automaton G10_3: 
   if(~reg_stateG10_3 & ~controllable_hgrant3 & ~i_hbusreq3)
    begin
      reg_stateG10_3 = 1'b1;
    end
   else if(reg_stateG10_3 & i_hbusreq3)
    begin
      reg_stateG10_3 = 1'b0;
    end

   // Automaton G10_4: 
   if(~reg_stateG10_4 & ~controllable_hgrant4 & ~i_hbusreq4)
    begin
      reg_stateG10_4 = 1'b1;
    end
   else if(reg_stateG10_4 & i_hbusreq4)
    begin
      reg_stateG10_4 = 1'b0;
    end

   // Automaton G10_5: 
   if(~reg_stateG10_5 & ~controllable_hgrant5 & ~i_hbusreq5)
    begin
      reg_stateG10_5 = 1'b1;
    end
   else if(reg_stateG10_5 & i_hbusreq5)
    begin
      reg_stateG10_5 = 1'b0;
    end

   // Automaton G10_6: 
   if(~reg_stateG10_6 & ~controllable_hgrant6 & ~i_hbusreq6)
    begin
      reg_stateG10_6 = 1'b1;
    end
   else if(reg_stateG10_6 & i_hbusreq6)
    begin
      reg_stateG10_6 = 1'b0;
    end

   // Automaton G10_7: 
   if(~reg_stateG10_7 & ~controllable_hgrant7 & ~i_hbusreq7)
    begin
      reg_stateG10_7 = 1'b1;
    end
   else if(reg_stateG10_7 & i_hbusreq7)
    begin
      reg_stateG10_7 = 1'b0;
    end

   // Automaton G10_8: 
   if(~reg_stateG10_8 & ~controllable_hgrant8 & ~i_hbusreq8)
    begin
      reg_stateG10_8 = 1'b1;
    end
   else if(reg_stateG10_8 & i_hbusreq8)
    begin
      reg_stateG10_8 = 1'b0;
    end

   // Automaton G10_9: 
   if(~reg_stateG10_9 & ~controllable_hgrant9 & ~i_hbusreq9)
    begin
      reg_stateG10_9 = 1'b1;
    end
   else if(reg_stateG10_9 & i_hbusreq9)
    begin
      reg_stateG10_9 = 1'b0;
    end

   // Latching the previous input:
   reg_i_hready =  i_hready;
   reg_i_hbusreq0 =  i_hbusreq0;
   reg_i_hlock0 =  i_hlock0;
   reg_i_hbusreq1 =  i_hbusreq1;
   reg_i_hlock1 =  i_hlock1;
   reg_i_hbusreq2 =  i_hbusreq2;
   reg_i_hlock2 =  i_hlock2;
   reg_i_hbusreq3 =  i_hbusreq3;
   reg_i_hlock3 =  i_hlock3;
   reg_i_hbusreq4 =  i_hbusreq4;
   reg_i_hlock4 =  i_hlock4;
   reg_i_hbusreq5 =  i_hbusreq5;
   reg_i_hlock5 =  i_hlock5;
   reg_i_hbusreq6 =  i_hbusreq6;
   reg_i_hlock6 =  i_hlock6;
   reg_i_hbusreq7 =  i_hbusreq7;
   reg_i_hlock7 =  i_hlock7;
   reg_i_hbusreq8 =  i_hbusreq8;
   reg_i_hlock8 =  i_hlock8;
   reg_i_hbusreq9 =  i_hbusreq9;
   reg_i_hlock9 =  i_hlock9;
   reg_controllable_hmaster0 =  controllable_hmaster0;
   reg_controllable_hmaster1 =  controllable_hmaster1;
   reg_controllable_hmaster2 =  controllable_hmaster2;
   reg_controllable_hmaster3 =  controllable_hmaster3;
   reg_controllable_hmastlock =  controllable_hmastlock;
   reg_controllable_nstart =  controllable_nstart;
   reg_controllable_ndecide =  controllable_ndecide;
   reg_controllable_locked =  controllable_locked;
   reg_controllable_nhgrant0 =  controllable_nhgrant0;
   reg_controllable_hgrant1 =  controllable_hgrant1;
   reg_controllable_hgrant2 =  controllable_hgrant2;
   reg_controllable_hgrant3 =  controllable_hgrant3;
   reg_controllable_hgrant4 =  controllable_hgrant4;
   reg_controllable_hgrant5 =  controllable_hgrant5;
   reg_controllable_hgrant6 =  controllable_hgrant6;
   reg_controllable_hgrant7 =  controllable_hgrant7;
   reg_controllable_hgrant8 =  controllable_hgrant8;
   reg_controllable_hgrant9 =  controllable_hgrant9;
   reg_controllable_busreq =  controllable_busreq;

 end
endmodule

-------------------------------
