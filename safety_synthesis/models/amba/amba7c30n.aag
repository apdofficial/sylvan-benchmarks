aag 963 32 54 1 877
2
4
6
8
10
12
14
16
18
20
22
24
26
28
30
32
34
36
38
40
42
44
46
48
50
52
54
56
58
60
62
64
66 1
68 10
70 1055
72 56
74 60
76 14
78 1277
80 58
82 18
84 1361
86 32
88 22
90 1385
92 6
94 50
96 30
98 26
100 1405
102 34
104 28
106 8
108 42
110 24
112 1435
114 1457
116 44
118 20
120 64
122 1479
124 2
126 46
128 1503
130 16
132 1691
134 1697
136 1703
138 1709
140 1715
142 1837
144 1843
146 1849
148 1855
150 1861
152 1883
154 48
156 12
158 36
160 205
162 1905
164 52
166 4
168 1927
170 54
172 62
1032
174 43 12
176 45 16
178 177 175
180 47 20
182 181 178
184 49 24
186 185 182
188 53 28
190 189 186
192 55 30
194 193 190
196 57 32
198 197 194
200 161 66
202 201 66
204 203 198
206 63 61
208 206 59
210 42 35
212 43 34
214 213 211
216 215 208
218 62 61
220 218 59
222 44 35
224 45 34
226 225 223
228 227 220
230 229 217
232 63 60
234 232 59
236 46 35
238 47 34
240 239 237
242 241 234
244 243 230
246 62 60
248 246 59
250 48 35
252 49 34
254 253 251
256 255 248
258 257 244
260 206 58
262 52 35
264 53 34
266 265 263
268 267 260
270 269 258
272 218 58
274 54 35
276 55 34
278 277 275
280 279 272
282 281 270
284 232 58
286 56 35
288 57 34
290 289 287
292 291 284
294 293 282
296 159 66
298 158 66
300 297 66
302 301 9
304 303 294
306 113 66
308 112 66
310 307 66
312 308 9
314 313 304
316 85 66
318 84 66
320 317 66
322 91 66
324 90 66
326 323 66
328 327 321
330 101 66
332 100 66
334 331 66
336 335 328
338 337 9
340 339 314
342 125 66
344 124 66
346 343 66
348 344 208
350 347 209
352 351 349
354 353 298
356 355 340
358 167 66
360 166 66
362 359 66
364 363 220
366 360 221
368 367 365
370 369 298
372 371 356
374 69 66
376 68 66
378 375 66
380 379 234
382 376 235
384 383 381
386 385 298
388 387 372
390 77 66
392 76 66
394 391 66
396 395 248
398 392 249
400 399 397
402 401 298
404 403 388
406 83 66
408 82 66
410 407 66
412 411 260
414 408 261
416 415 413
418 417 298
420 419 404
422 89 66
424 88 66
426 423 66
428 427 272
430 424 273
432 431 429
434 433 298
436 435 420
438 99 66
440 98 66
442 439 66
444 443 284
446 440 285
448 447 445
450 449 298
452 451 436
454 93 66
456 92 66
458 455 66
460 456 65
462 459 64
464 463 461
466 465 298
468 467 452
470 173 66
472 172 66
474 471 66
476 75 66
478 74 66
480 477 66
482 481 475
484 81 66
486 80 66
488 485 66
490 489 482
492 491 208
494 490 209
496 495 493
498 497 8
500 499 468
502 481 472
504 502 489
506 505 220
508 504 221
510 509 507
512 511 8
514 513 500
516 478 475
518 516 489
520 519 234
522 518 235
524 523 521
526 525 8
528 527 514
530 478 472
532 530 489
534 533 248
536 532 249
538 537 535
540 539 8
542 541 528
544 486 482
546 545 260
548 544 261
550 549 547
552 551 8
554 553 542
556 502 486
558 557 272
560 556 273
562 561 559
564 563 8
566 565 554
568 516 486
570 569 284
572 568 285
574 573 571
576 575 8
578 577 566
580 121 66
582 120 66
584 581 66
586 585 64
588 582 65
590 589 587
592 591 8
594 593 578
596 95 66
598 94 66
600 597 66
602 157 66
604 156 66
606 603 66
608 604 601
610 608 3
612 610 7
614 613 594
616 607 601
618 616 3
620 618 6
622 621 614
624 131 66
626 130 66
628 625 66
630 626 601
632 630 4
634 632 7
636 635 622
638 629 601
640 638 4
642 640 6
644 643 636
646 119 66
648 118 66
650 647 66
652 648 601
654 652 10
656 654 7
658 657 644
660 651 601
662 660 10
664 662 6
666 665 658
668 111 66
670 110 66
672 669 66
674 670 601
676 674 14
678 676 7
680 679 666
682 673 601
684 682 14
686 684 6
688 687 680
690 105 66
692 104 66
694 691 66
696 692 601
698 696 18
700 698 7
702 701 688
704 695 601
706 704 18
708 706 6
710 709 702
712 97 66
714 96 66
716 713 66
718 714 601
720 718 22
722 720 7
724 723 710
726 717 601
728 726 22
730 728 6
732 731 724
734 87 66
736 86 66
738 735 66
740 736 601
742 740 26
744 742 7
746 745 732
748 739 601
750 748 26
752 750 6
754 753 746
756 347 2
758 344 3
760 759 757
762 761 598
764 763 754
766 360 5
768 363 4
770 769 767
772 771 598
774 773 764
776 376 11
778 379 10
780 779 777
782 781 598
784 783 774
786 392 15
788 395 14
790 789 787
792 791 598
794 793 784
796 408 19
798 411 18
800 799 797
802 801 598
804 803 794
806 424 23
808 427 22
810 809 807
812 811 598
814 813 804
816 440 27
818 443 26
820 819 817
822 821 598
824 823 814
826 456 7
828 459 6
830 829 827
832 831 598
834 833 824
836 115 66
838 114 66
840 837 66
842 45 4
844 842 838
846 845 834
848 123 66
850 122 66
852 849 66
854 47 10
856 854 850
858 857 846
860 153 66
862 152 66
864 861 66
866 49 14
868 866 862
870 869 858
872 163 66
874 162 66
876 873 66
878 53 18
880 878 874
882 881 870
884 169 66
886 168 66
888 885 66
890 55 22
892 890 886
894 893 882
896 71 66
898 70 66
900 897 66
902 57 26
904 902 898
906 905 894
908 109 66
910 909 66
912 117 66
914 913 66
916 915 911
918 127 66
920 919 66
922 921 916
924 155 66
926 925 66
928 927 922
930 165 66
932 931 66
934 933 928
936 171 66
938 937 66
940 939 934
942 73 66
944 943 66
946 945 940
948 946 601
950 948 2
952 951 906
954 141 66
956 140 66
958 955 66
960 139 66
962 138 66
964 961 66
966 137 66
968 136 66
970 967 66
972 135 66
974 134 66
976 973 66
978 133 66
980 132 66
982 979 66
984 977 971
986 985 970
988 986 976
990 989 965
992 991 964
994 992 988
996 995 959
998 997 958
1000 998 994
1002 976 971
1004 977 968
1006 1005 1003
1008 988 965
1010 989 962
1012 1011 1009
1014 994 959
1016 995 956
1018 1017 1015
1020 981 976
1022 1020 1006
1024 1022 1012
1026 1024 1018
1028 1027 1001
1030 1028 952
1032 1031 204
1034 901 27
1036 1034 57
1038 898 56
1040 1038 1037
1042 1041 1037
1044 1039 898
1046 1044 1037
1048 1047 1037
1050 1049 1043
1052 1042 898
1054 1053 1051
1056 143 66
1058 142 66
1060 1057 66
1062 145 66
1064 144 66
1066 1063 66
1068 147 66
1070 146 66
1072 1069 66
1074 149 66
1076 148 66
1078 1075 66
1080 150 66
1082 1065 1059
1084 1082 1071
1086 1084 1077
1088 1086 1081
1090 1088 311
1092 1065 1060
1094 1092 1071
1096 1094 1077
1098 1096 1081
1100 1098 336
1102 1066 1059
1104 1102 1071
1106 1104 1077
1108 1106 1081
1110 209 42
1112 1111 1108
1114 1066 1060
1116 1114 1071
1118 1116 1077
1120 1118 1081
1122 221 44
1124 1123 1120
1126 1082 1072
1128 1126 1077
1130 1128 1081
1132 235 46
1134 1133 1130
1136 1092 1072
1138 1136 1077
1140 1138 1081
1142 249 48
1144 1143 1140
1146 1102 1072
1148 1146 1077
1150 1148 1081
1152 261 52
1154 1153 1150
1156 1114 1072
1158 1156 1077
1160 1158 1081
1162 273 54
1164 1163 1160
1166 1084 1078
1168 1166 1081
1170 285 56
1172 1171 1168
1174 79 66
1176 78 66
1178 1175 66
1180 129 66
1182 128 66
1184 1181 66
1186 1185 1179
1188 1176 36
1190 1100 1091
1192 1191 1091
1194 1101 1091
1196 1194 1112
1198 1197 1192
1200 1194 1113
1202 1200 1124
1204 1203 1198
1206 1200 1125
1208 1206 1134
1210 1209 1204
1212 1206 1135
1214 1212 1144
1216 1215 1210
1218 1212 1145
1220 1218 1154
1222 1221 1216
1224 1218 1155
1226 1224 1164
1228 1227 1222
1230 1224 1165
1232 1230 1172
1234 1233 1228
1236 1230 1173
1238 1236 1186
1240 1239 1234
1242 1236 1187
1244 1242 1188
1246 1245 1240
1248 1189 1176
1250 1248 1187
1252 1251 1187
1254 1253 1173
1256 1254 1165
1258 1256 1155
1260 1258 1145
1262 1260 1135
1264 1262 1125
1266 1264 1113
1268 1266 1101
1270 1268 1091
1272 1270 1247
1274 1246 1176
1276 1275 1273
1278 336 64
1280 1278 9
1282 1280 41
1284 1282 38
1286 1284 37
1288 1284 36
1290 327 318
1292 1290 335
1294 1292 36
1296 324 321
1298 1296 335
1300 1298 36
1302 324 318
1304 1302 335
1306 1304 36
1308 332 328
1310 1308 36
1312 1288 1287
1314 1313 1287
1316 1289 1287
1318 1316 1294
1320 1319 1314
1322 1316 1295
1324 1322 1300
1326 1325 1320
1328 1322 1301
1330 1328 1306
1332 1331 1326
1334 1328 1307
1336 1334 1310
1338 1337 1332
1340 1311 318
1342 1340 1307
1344 1342 1301
1346 1345 1301
1348 1347 1295
1350 1348 1289
1352 1350 1287
1354 1353 1287
1356 1355 1339
1358 1338 318
1360 1359 1357
1362 1311 324
1364 1362 1307
1366 1364 1301
1368 1367 1301
1370 1369 1295
1372 1371 1295
1374 1373 1289
1376 1375 1289
1378 1377 1287
1380 1378 1339
1382 1338 324
1384 1383 1381
1386 1311 332
1388 1386 1307
1390 1389 1307
1392 1391 1301
1394 1392 1295
1396 1394 1289
1398 1396 1287
1400 1398 1339
1402 1338 332
1404 1403 1401
1406 64 9
1408 1406 41
1410 1408 39
1412 1410 311
1414 308 35
1416 1415 1413
1418 1411 308
1420 1419 1411
1422 308 34
1424 1421 311
1426 1422 308
1428 1427 1425
1430 1429 1417
1432 1416 308
1434 1433 1431
1436 841 5
1438 1436 45
1440 838 44
1442 1440 1439
1444 1443 1439
1446 1441 838
1448 1446 1439
1450 1449 1439
1452 1451 1445
1454 1444 838
1456 1455 1453
1458 853 11
1460 1458 47
1462 850 46
1464 1462 1461
1466 1465 1461
1468 1463 850
1470 1468 1461
1472 1471 1461
1474 1473 1467
1476 1466 850
1478 1477 1475
1480 1185 64
1482 1480 41
1484 1482 39
1486 1182 35
1488 1486 1485
1490 1489 1485
1492 1487 1182
1494 1492 1485
1496 1495 1485
1498 1497 1491
1500 1490 1182
1502 1501 1499
1504 1245 1234
1506 1188 983
1508 1189 980
1510 1509 1507
1512 1186 980
1514 1511 1187
1516 1515 1513
1518 1517 1173
1520 1518 1165
1522 1520 1155
1524 1522 1145
1526 1524 1135
1528 1526 1125
1530 1528 1113
1532 1530 1101
1534 1532 1091
1536 980 977
1538 981 974
1540 1539 1537
1542 1541 1188
1544 1189 974
1546 1545 1543
1548 1186 974
1550 1547 1187
1552 1551 1549
1554 1553 1173
1556 1554 1165
1558 1556 1155
1560 1558 1145
1562 1560 1135
1564 1562 1125
1566 1564 1113
1568 1566 1101
1570 1568 1091
1572 980 974
1574 1572 971
1576 1573 968
1578 1577 1575
1580 1579 1188
1582 1189 968
1584 1583 1581
1586 1186 968
1588 1585 1187
1590 1589 1587
1592 1591 1173
1594 1592 1165
1596 1594 1155
1598 1596 1145
1600 1598 1135
1602 1600 1125
1604 1602 1113
1606 1604 1101
1608 1606 1091
1610 1572 968
1612 1610 965
1614 1611 962
1616 1615 1613
1618 1617 1188
1620 1189 962
1622 1621 1619
1624 1186 962
1626 1623 1187
1628 1627 1625
1630 1629 1173
1632 1630 1165
1634 1632 1155
1636 1634 1145
1638 1636 1135
1640 1638 1125
1642 1640 1113
1644 1642 1101
1646 1644 1091
1648 1610 962
1650 1648 959
1652 1649 956
1654 1653 1651
1656 1655 1188
1658 1189 956
1660 1659 1657
1662 1186 956
1664 1661 1187
1666 1665 1663
1668 1667 1173
1670 1668 1165
1672 1670 1155
1674 1672 1145
1676 1674 1135
1678 1676 1125
1680 1678 1113
1682 1680 1101
1684 1682 1091
1686 1534 1505
1688 1504 980
1690 1689 1687
1692 1570 1505
1694 1504 974
1696 1695 1693
1698 1608 1505
1700 1504 968
1702 1701 1699
1704 1646 1505
1706 1504 962
1708 1707 1705
1710 1684 1505
1712 1504 956
1714 1713 1711
1716 1173 1058
1718 1716 1165
1720 1718 1155
1722 1721 1155
1724 1723 1145
1726 1724 1135
1728 1727 1135
1730 1729 1125
1732 1730 1113
1734 1733 1113
1736 1735 1101
1738 1736 1091
1740 1739 1091
1742 1173 1064
1744 1742 1165
1746 1744 1155
1748 1747 1155
1750 1749 1145
1752 1751 1145
1754 1753 1135
1756 1754 1125
1758 1756 1113
1760 1759 1113
1762 1761 1101
1764 1763 1101
1766 1765 1091
1768 1173 1070
1770 1768 1165
1772 1770 1155
1774 1773 1155
1776 1775 1145
1778 1777 1145
1780 1779 1135
1782 1781 1135
1784 1783 1125
1786 1785 1125
1788 1787 1113
1790 1788 1101
1792 1790 1091
1794 1173 1076
1796 1794 1165
1798 1797 1165
1800 1799 1155
1802 1800 1145
1804 1802 1135
1806 1804 1125
1808 1806 1113
1810 1808 1101
1812 1810 1091
1814 1173 1080
1816 1814 1165
1818 1816 1155
1820 1818 1145
1822 1820 1135
1824 1822 1125
1826 1824 1113
1828 1826 1101
1830 1828 1091
1832 1741 1235
1834 1234 1058
1836 1835 1833
1838 1766 1235
1840 1234 1064
1842 1841 1839
1844 1792 1235
1846 1234 1070
1848 1847 1845
1850 1812 1235
1852 1234 1076
1854 1853 1851
1856 1830 1235
1858 1234 1080
1860 1859 1857
1862 865 15
1864 1862 49
1866 862 48
1868 1866 1865
1870 1869 1865
1872 1867 862
1874 1872 1865
1876 1875 1865
1878 1877 1871
1880 1870 862
1882 1881 1879
1884 877 19
1886 1884 53
1888 874 52
1890 1888 1887
1892 1891 1887
1894 1889 874
1896 1894 1887
1898 1897 1887
1900 1899 1893
1902 1892 874
1904 1903 1901
1906 889 23
1908 1906 55
1910 886 54
1912 1910 1909
1914 1913 1909
1916 1911 886
1918 1916 1909
1920 1919 1909
1922 1921 1915
1924 1914 886
1926 1925 1923
i0 controllable_nhgrant0
i1 controllable_hgrant1
i2 controllable_locked
i3 controllable_nstart
i4 controllable_hgrant2
i5 i_hlock0
i6 controllable_hgrant3
i7 i_hlock1
i8 controllable_hgrant4
i9 i_hlock2
i10 controllable_hgrant5
i11 i_hlock3
i12 controllable_hgrant6
i13 i_hlock4
i14 i_hlock5
i15 i_hlock6
i16 controllable_busreq
i17 i_hready
i18 i_hburst1
i19 i_hburst0
i20 i_hbusreq0
i21 i_hbusreq1
i22 i_hbusreq2
i23 i_hbusreq3
i24 controllable_ndecide
i25 i_hbusreq4
i26 i_hbusreq5
i27 i_hbusreq6
i28 controllable_hmaster2
i29 controllable_hmaster1
i30 controllable_hmaster0
i31 controllable_hmastlock
l0 n67
l1 reg_controllable_hgrant2_out
l2 reg_stateG10_6_out
l3 reg_i_hbusreq6_out
l4 reg_controllable_hmaster1_out
l5 reg_controllable_hgrant3_out
l6 next_env_fair_out
l7 reg_controllable_hmaster2_out
l8 reg_controllable_hgrant4_out
l9 reg_stateG3_0_out
l10 reg_i_hlock6_out
l11 reg_controllable_hgrant5_out
l12 reg_stateG3_1_out
l13 reg_controllable_locked_out
l14 reg_controllable_ndecide_out
l15 reg_i_hlock5_out
l16 reg_controllable_hgrant6_out
l17 reg_stateG3_2_out
l18 reg_controllable_busreq_out
l19 reg_i_hlock4_out
l20 reg_controllable_nstart_out
l21 reg_i_hbusreq0_out
l22 reg_i_hlock3_out
l23 reg_stateG2_out
l24 reg_stateG10_1_out
l25 reg_i_hbusreq1_out
l26 reg_i_hlock2_out
l27 reg_controllable_hmastlock_out
l28 reg_stateG10_2_out
l29 reg_controllable_nhgrant0_out
l30 reg_i_hbusreq2_out
l31 reg_stateA1_out
l32 reg_i_hlock1_out
l33 fair_cnt<0>_out
l34 fair_cnt<1>_out
l35 fair_cnt<2>_out
l36 fair_cnt<3>_out
l37 fair_cnt<4>_out
l38 next_sys_fair<0>_out
l39 next_sys_fair<1>_out
l40 next_sys_fair<2>_out
l41 next_sys_fair<3>_out
l42 next_sys_fair<4>_out
l43 reg_stateG10_3_out
l44 reg_i_hbusreq3_out
l45 reg_i_hlock0_out
l46 reg_i_hready_out
l47 env_safe_err_happened_out
l48 reg_stateG10_4_out
l49 reg_i_hbusreq4_out
l50 reg_controllable_hgrant1_out
l51 reg_stateG10_5_out
l52 reg_i_hbusreq5_out
l53 reg_controllable_hmaster0_out
o0 o_err
c
amba_7_new_30
This file was written by ABC on Tue May  5 16:50:35 2015
For information about AIGER format, refer to http://fmv.jku.at/aiger
-------------------------------
This AIGER file has been created by the following sequence of commands:
> vl2mv amba7c30.v   ---gives--> amba7c30.mv
> abc -c "read_blif_mv amba7c30.mv; write_aiger -s amba7c30n.aig"   ---gives--> amba7c30n.aig
> aigtoaig amba7c30n.aig amba7c30n.aag   ---gives--> amba7c30n.aag (this file)
Content of amba7c30.v:
module amba_7_new_30(
        o_err,
        i_clk,
        i_hready,
        i_hbusreq0,
        i_hlock0,
        i_hbusreq1,
        i_hlock1,
        i_hbusreq2,
        i_hlock2,
        i_hbusreq3,
        i_hlock3,
        i_hbusreq4,
        i_hlock4,
        i_hbusreq5,
        i_hlock5,
        i_hbusreq6,
        i_hlock6,
        i_hburst0,
        i_hburst1,
        controllable_hmaster0,
        controllable_hmaster1,
        controllable_hmaster2,
        controllable_hmastlock,
        controllable_nstart,
        controllable_ndecide,
        controllable_locked,
        controllable_nhgrant0,
        controllable_hgrant1,
        controllable_hgrant2,
        controllable_hgrant3,
        controllable_hgrant4,
        controllable_hgrant5,
        controllable_hgrant6,
        controllable_busreq);

input i_clk;
input i_hready;
input i_hbusreq0;
input i_hlock0;
input i_hbusreq1;
input i_hlock1;
input i_hbusreq2;
input i_hlock2;
input i_hbusreq3;
input i_hlock3;
input i_hbusreq4;
input i_hlock4;
input i_hbusreq5;
input i_hlock5;
input i_hbusreq6;
input i_hlock6;
input i_hburst0;
input i_hburst1;
input controllable_hmaster0;
input controllable_hmaster1;
input controllable_hmaster2;
input controllable_hmastlock;
input controllable_nstart;
input controllable_ndecide;
input controllable_locked;
input controllable_nhgrant0;
input controllable_hgrant1;
input controllable_hgrant2;
input controllable_hgrant3;
input controllable_hgrant4;
input controllable_hgrant5;
input controllable_hgrant6;
input controllable_busreq;
output o_err;

reg reg_i_hready;
reg reg_i_hbusreq0;
reg reg_i_hlock0;
reg reg_i_hbusreq1;
reg reg_i_hlock1;
reg reg_i_hbusreq2;
reg reg_i_hlock2;
reg reg_i_hbusreq3;
reg reg_i_hlock3;
reg reg_i_hbusreq4;
reg reg_i_hlock4;
reg reg_i_hbusreq5;
reg reg_i_hlock5;
reg reg_i_hbusreq6;
reg reg_i_hlock6;
reg reg_controllable_hmaster0;
reg reg_controllable_hmaster1;
reg reg_controllable_hmaster2;
reg reg_controllable_hmastlock;
reg reg_controllable_nstart;
reg reg_controllable_ndecide;
reg reg_controllable_locked;
reg reg_controllable_nhgrant0;
reg reg_controllable_hgrant1;
reg reg_controllable_hgrant2;
reg reg_controllable_hgrant3;
reg reg_controllable_hgrant4;
reg reg_controllable_hgrant5;
reg reg_controllable_hgrant6;
reg reg_controllable_busreq;
reg reg_stateA1;
reg reg_stateG2;
reg reg_stateG3_0;
reg reg_stateG3_1;
reg reg_stateG3_2;
reg reg_stateG10_1;
reg reg_stateG10_2;
reg reg_stateG10_3;
reg reg_stateG10_4;
reg reg_stateG10_5;
reg reg_stateG10_6;
reg env_safe_err_happened;
reg next_env_fair;
reg [4:0] fair_cnt;
reg [4:0] next_sys_fair;

wire env_safe_err0;
wire env_safe_err1;
wire env_safe_err2;
wire env_safe_err3;
wire env_safe_err4;
wire env_safe_err5;
wire env_safe_err6;
wire env_safe_err;

wire sys_safe_err0;
wire sys_safe_err1;
wire sys_safe_err2;
wire sys_safe_err3;
wire sys_safe_err4;
wire sys_safe_err5;
wire sys_safe_err6;
wire sys_safe_err7;
wire sys_safe_err8;
wire sys_safe_err9;
wire sys_safe_err10;
wire sys_safe_err11;
wire sys_safe_err12;
wire sys_safe_err13;
wire sys_safe_err14;
wire sys_safe_err15;
wire sys_safe_err16;
wire sys_safe_err17;
wire sys_safe_err18;
wire sys_safe_err19;
wire sys_safe_err20;
wire sys_safe_err21;
wire sys_safe_err22;
wire sys_safe_err23;
wire sys_safe_err24;
wire sys_safe_err25;
wire sys_safe_err26;
wire sys_safe_err27;
wire sys_safe_err28;
wire sys_safe_err29;
wire sys_safe_err30;
wire sys_safe_err31;
wire sys_safe_err32;
wire sys_safe_err33;
wire sys_safe_err34;
wire sys_safe_err35;
wire sys_safe_err36;
wire sys_safe_err37;
wire sys_safe_err38;
wire sys_safe_err39;
wire sys_safe_err40;
wire sys_safe_err41;
wire sys_safe_err42;
wire sys_safe_err43;
wire sys_safe_err44;
wire sys_safe_err45;
wire sys_safe_err46;
wire sys_safe_err47;
wire sys_safe_err48;
wire sys_safe_err49;
wire sys_safe_err50;
wire sys_safe_err51;
wire sys_safe_err52;
wire sys_safe_err53;
wire sys_safe_err54;
wire sys_safe_err;

wire env_fair0;
wire env_fair1;

wire sys_fair0;
wire sys_fair1;
wire sys_fair2;
wire sys_fair3;
wire sys_fair4;
wire sys_fair5;
wire sys_fair6;
wire sys_fair7;
wire sys_fair8;
wire fair_err;
wire o_err;

// =============================================================
//                        ENV_TRANSITION:
// =============================================================
// Assumption 3:
// G( hlock0=1 -> hbusreq0=1 );
assign env_safe_err0 =  ~(~ i_hlock0 | i_hbusreq0);

// Assumption 3:
// G( hlock1=1 -> hbusreq1=1 );
assign env_safe_err1 =  ~(~ i_hlock1 | i_hbusreq1);

// Assumption 3:
// G( hlock2=1 -> hbusreq2=1 );
assign env_safe_err2 =  ~(~ i_hlock2 | i_hbusreq2);

// Assumption 3:
// G( hlock3=1 -> hbusreq3=1 );
assign env_safe_err3 =  ~(~ i_hlock3 | i_hbusreq3);

// Assumption 3:
// G( hlock4=1 -> hbusreq4=1 );
assign env_safe_err4 =  ~(~ i_hlock4 | i_hbusreq4);

// Assumption 3:
// G( hlock5=1 -> hbusreq5=1 );
assign env_safe_err5 =  ~(~ i_hlock5 | i_hbusreq5);

// Assumption 3:
// G( hlock6=1 -> hbusreq6=1 );
assign env_safe_err6 =  ~(~ i_hlock6 | i_hbusreq6);

// collecting together the safety error bits:
assign env_safe_err = env_safe_err0 |
                      env_safe_err1 |
                      env_safe_err2 |
                      env_safe_err3 |
                      env_safe_err4 |
                      env_safe_err5 |
                      env_safe_err6;

// =============================================================
//                        SYS_TRANSITION:
// =============================================================
// G((hmaster0=0) * (hmaster1=0) * (hmaster2=0) -> (hbusreq0=0 <-> busreq=0));
assign sys_safe_err0 =  ~( ~( ~(controllable_hmaster0) & ~(controllable_hmaster1) & ~(controllable_hmaster2) )|(~i_hbusreq0 ^~ (~controllable_busreq)));

// G((hmaster0=1) * (hmaster1=0) * (hmaster2=0) -> (hbusreq1=0 <-> busreq=0));
assign sys_safe_err1 =  ~( ~( controllable_hmaster0 & ~(controllable_hmaster1) & ~(controllable_hmaster2) )|(~i_hbusreq1 ^~ (~controllable_busreq)));

// G((hmaster0=0) * (hmaster1=1) * (hmaster2=0) -> (hbusreq2=0 <-> busreq=0));
assign sys_safe_err2 =  ~( ~( ~(controllable_hmaster0) & controllable_hmaster1 & ~(controllable_hmaster2) )|(~i_hbusreq2 ^~ (~controllable_busreq)));

// G((hmaster0=1) * (hmaster1=1) * (hmaster2=0) -> (hbusreq3=0 <-> busreq=0));
assign sys_safe_err3 =  ~( ~( controllable_hmaster0 & controllable_hmaster1 & ~(controllable_hmaster2) )|(~i_hbusreq3 ^~ (~controllable_busreq)));

// G((hmaster0=0) * (hmaster1=0) * (hmaster2=1) -> (hbusreq4=0 <-> busreq=0));
assign sys_safe_err4 =  ~( ~( ~(controllable_hmaster0) & ~(controllable_hmaster1) & controllable_hmaster2 )|(~i_hbusreq4 ^~ (~controllable_busreq)));

// G((hmaster0=1) * (hmaster1=0) * (hmaster2=1) -> (hbusreq5=0 <-> busreq=0));
assign sys_safe_err5 =  ~( ~( controllable_hmaster0 & ~(controllable_hmaster1) & controllable_hmaster2 )|(~i_hbusreq5 ^~ (~controllable_busreq)));

// G((hmaster0=0) * (hmaster1=1) * (hmaster2=1) -> (hbusreq6=0 <-> busreq=0));
assign sys_safe_err6 =  ~( ~( ~(controllable_hmaster0) & controllable_hmaster1 & controllable_hmaster2 )|(~i_hbusreq6 ^~ (~controllable_busreq)));

// Guarantee 1:
// G((hready=0) -> X(start=0));
assign sys_safe_err7 =  ~( reg_i_hready | controllable_nstart );

// G(((stateG2=1) * (start=1)) -> FALSE;
assign sys_safe_err8 =  ~( ~(reg_stateG2 & ~controllable_nstart) | 0 );

// G(((stateG3_0=1) * (stateG3_1=0) * (stateG3_2=0) * ((start=1))) -> FALSE);
// G(((stateG3_0=0) * (stateG3_1=1) * (stateG3_2=0) * ((start=1))) -> FALSE);
// G(((stateG3_0=1) * (stateG3_1=1) * (stateG3_2=0) * ((start=1))) -> FALSE);
// G(((stateG3_0=0) * (stateG3_1=0) * (stateG3_2=1) * ((start=1))) -> FALSE);
// all these rules can be summarized as: only in state 000, start=1 is allowed:
assign sys_safe_err9 =  (reg_stateG3_0 | reg_stateG3_1 | reg_stateG3_2) & ~controllable_nstart;

// G( (hready=1) -> (   (hgrant0=1) <-> (X(hmaster0=0) * X(hmaster1=0) * X(hmaster2=0))  ) );
assign sys_safe_err10 =  ~( ~(reg_i_hready) | ( ~reg_controllable_nhgrant0 ^~ ( ~(controllable_hmaster0) & ~(controllable_hmaster1) & ~(controllable_hmaster2) ) ) );

// G( (hready=1) -> (   (hgrant1=1) <-> (X(hmaster0=1) * X(hmaster1=0) * X(hmaster2=0))  ) );
assign sys_safe_err11 =  ~( ~(reg_i_hready) | ( reg_controllable_hgrant1 ^~ ( controllable_hmaster0 & ~(controllable_hmaster1) & ~(controllable_hmaster2) ) ) );

// G( (hready=1) -> (   (hgrant2=1) <-> (X(hmaster0=0) * X(hmaster1=1) * X(hmaster2=0))  ) );
assign sys_safe_err12 =  ~( ~(reg_i_hready) | ( reg_controllable_hgrant2 ^~ ( ~(controllable_hmaster0) & controllable_hmaster1 & ~(controllable_hmaster2) ) ) );

// G( (hready=1) -> (   (hgrant3=1) <-> (X(hmaster0=1) * X(hmaster1=1) * X(hmaster2=0))  ) );
assign sys_safe_err13 =  ~( ~(reg_i_hready) | ( reg_controllable_hgrant3 ^~ ( controllable_hmaster0 & controllable_hmaster1 & ~(controllable_hmaster2) ) ) );

// G( (hready=1) -> (   (hgrant4=1) <-> (X(hmaster0=0) * X(hmaster1=0) * X(hmaster2=1))  ) );
assign sys_safe_err14 =  ~( ~(reg_i_hready) | ( reg_controllable_hgrant4 ^~ ( ~(controllable_hmaster0) & ~(controllable_hmaster1) & controllable_hmaster2 ) ) );

// G( (hready=1) -> (   (hgrant5=1) <-> (X(hmaster0=1) * X(hmaster1=0) * X(hmaster2=1))  ) );
assign sys_safe_err15 =  ~( ~(reg_i_hready) | ( reg_controllable_hgrant5 ^~ ( controllable_hmaster0 & ~(controllable_hmaster1) & controllable_hmaster2 ) ) );

// G( (hready=1) -> (   (hgrant6=1) <-> (X(hmaster0=0) * X(hmaster1=1) * X(hmaster2=1))  ) );
assign sys_safe_err16 =  ~( ~(reg_i_hready) | ( reg_controllable_hgrant6 ^~ ( ~(controllable_hmaster0) & controllable_hmaster1 & controllable_hmaster2 ) ) );

// HMASTLOCK:
// G(  (hready=1) -> (locked=0 <-> X(hmastlock=0) ) );
assign sys_safe_err17 =  ~( ~(reg_i_hready) | (~reg_controllable_locked ^~ ~controllable_hmastlock) );

// Master 0:
// G( X(start=0) -> ( ((hmaster0=0) * (hmaster1=0) * (hmaster2=0)) <-> (X(hmaster0=0) * X(hmaster1=0) * X(hmaster2=0)) ) );
assign sys_safe_err18 =  ~( ~(controllable_nstart) | ( ( ~(reg_controllable_hmaster0) & ~(reg_controllable_hmaster1) & ~(reg_controllable_hmaster2) ) ^~ ( ~(controllable_hmaster0) & ~(controllable_hmaster1) & ~(controllable_hmaster2) )) );

// Master 1:
// G( X(start=0) -> ( ((hmaster0=1) * (hmaster1=0) * (hmaster2=0)) <-> (X(hmaster0=1) * X(hmaster1=0) * X(hmaster2=0)) ) );
assign sys_safe_err19 =  ~( ~(controllable_nstart) | ( ( reg_controllable_hmaster0 & ~(reg_controllable_hmaster1) & ~(reg_controllable_hmaster2) ) ^~ ( controllable_hmaster0 & ~(controllable_hmaster1) & ~(controllable_hmaster2) )) );

// Master 2:
// G( X(start=0) -> ( ((hmaster0=0) * (hmaster1=1) * (hmaster2=0)) <-> (X(hmaster0=0) * X(hmaster1=1) * X(hmaster2=0)) ) );
assign sys_safe_err20 =  ~( ~(controllable_nstart) | ( ( ~(reg_controllable_hmaster0) & reg_controllable_hmaster1 & ~(reg_controllable_hmaster2) ) ^~ ( ~(controllable_hmaster0) & controllable_hmaster1 & ~(controllable_hmaster2) )) );

// Master 3:
// G( X(start=0) -> ( ((hmaster0=1) * (hmaster1=1) * (hmaster2=0)) <-> (X(hmaster0=1) * X(hmaster1=1) * X(hmaster2=0)) ) );
assign sys_safe_err21 =  ~( ~(controllable_nstart) | ( ( reg_controllable_hmaster0 & reg_controllable_hmaster1 & ~(reg_controllable_hmaster2) ) ^~ ( controllable_hmaster0 & controllable_hmaster1 & ~(controllable_hmaster2) )) );

// Master 4:
// G( X(start=0) -> ( ((hmaster0=0) * (hmaster1=0) * (hmaster2=1)) <-> (X(hmaster0=0) * X(hmaster1=0) * X(hmaster2=1)) ) );
assign sys_safe_err22 =  ~( ~(controllable_nstart) | ( ( ~(reg_controllable_hmaster0) & ~(reg_controllable_hmaster1) & reg_controllable_hmaster2 ) ^~ ( ~(controllable_hmaster0) & ~(controllable_hmaster1) & controllable_hmaster2 )) );

// Master 5:
// G( X(start=0) -> ( ((hmaster0=1) * (hmaster1=0) * (hmaster2=1)) <-> (X(hmaster0=1) * X(hmaster1=0) * X(hmaster2=1)) ) );
assign sys_safe_err23 =  ~( ~(controllable_nstart) | ( ( reg_controllable_hmaster0 & ~(reg_controllable_hmaster1) & reg_controllable_hmaster2 ) ^~ ( controllable_hmaster0 & ~(controllable_hmaster1) & controllable_hmaster2 )) );

// Master 6:
// G( X(start=0) -> ( ((hmaster0=0) * (hmaster1=1) * (hmaster2=1)) <-> (X(hmaster0=0) * X(hmaster1=1) * X(hmaster2=1)) ) );
assign sys_safe_err24 =  ~( ~(controllable_nstart) | ( ( ~(reg_controllable_hmaster0) & reg_controllable_hmaster1 & reg_controllable_hmaster2 ) ^~ ( ~(controllable_hmaster0) & controllable_hmaster1 & controllable_hmaster2 )) );

// Guarantee 6.2:
// G( ((X(start=0))) -> ( (hmastlock=1) <-> X(hmastlock=1)) );
assign sys_safe_err25 =  ~( ~(controllable_nstart) | ( reg_controllable_hmastlock ^~ controllable_hmastlock) );

// G( (decide=1  *  hlock0=1  *  X(hgrant0=1) )->X(locked=1));
assign sys_safe_err26 =  ~( ~(~reg_controllable_ndecide & reg_i_hlock0 & ~controllable_nhgrant0) | (controllable_locked) );

// G((decide=1  *  hlock0=0  *  X(hgrant0=1))->X(locked=0));
assign sys_safe_err27 =  ~( ~(~reg_controllable_ndecide & ~reg_i_hlock0 & ~controllable_nhgrant0) | (~controllable_locked) );

// G( (decide=1  *  hlock1=1  *  X(hgrant1=1) )->X(locked=1));
assign sys_safe_err28 =  ~( ~(~reg_controllable_ndecide & reg_i_hlock1 & controllable_hgrant1) | (controllable_locked) );

// G((decide=1  *  hlock1=0  *  X(hgrant1=1))->X(locked=0));
assign sys_safe_err29 =  ~( ~(~reg_controllable_ndecide & ~reg_i_hlock1 & controllable_hgrant1) | (~controllable_locked) );

// G( (decide=1  *  hlock2=1  *  X(hgrant2=1) )->X(locked=1));
assign sys_safe_err30 =  ~( ~(~reg_controllable_ndecide & reg_i_hlock2 & controllable_hgrant2) | (controllable_locked) );

// G((decide=1  *  hlock2=0  *  X(hgrant2=1))->X(locked=0));
assign sys_safe_err31 =  ~( ~(~reg_controllable_ndecide & ~reg_i_hlock2 & controllable_hgrant2) | (~controllable_locked) );

// G( (decide=1  *  hlock3=1  *  X(hgrant3=1) )->X(locked=1));
assign sys_safe_err32 =  ~( ~(~reg_controllable_ndecide & reg_i_hlock3 & controllable_hgrant3) | (controllable_locked) );

// G((decide=1  *  hlock3=0  *  X(hgrant3=1))->X(locked=0));
assign sys_safe_err33 =  ~( ~(~reg_controllable_ndecide & ~reg_i_hlock3 & controllable_hgrant3) | (~controllable_locked) );

// G( (decide=1  *  hlock4=1  *  X(hgrant4=1) )->X(locked=1));
assign sys_safe_err34 =  ~( ~(~reg_controllable_ndecide & reg_i_hlock4 & controllable_hgrant4) | (controllable_locked) );

// G((decide=1  *  hlock4=0  *  X(hgrant4=1))->X(locked=0));
assign sys_safe_err35 =  ~( ~(~reg_controllable_ndecide & ~reg_i_hlock4 & controllable_hgrant4) | (~controllable_locked) );

// G( (decide=1  *  hlock5=1  *  X(hgrant5=1) )->X(locked=1));
assign sys_safe_err36 =  ~( ~(~reg_controllable_ndecide & reg_i_hlock5 & controllable_hgrant5) | (controllable_locked) );

// G((decide=1  *  hlock5=0  *  X(hgrant5=1))->X(locked=0));
assign sys_safe_err37 =  ~( ~(~reg_controllable_ndecide & ~reg_i_hlock5 & controllable_hgrant5) | (~controllable_locked) );

// G( (decide=1  *  hlock6=1  *  X(hgrant6=1) )->X(locked=1));
assign sys_safe_err38 =  ~( ~(~reg_controllable_ndecide & reg_i_hlock6 & controllable_hgrant6) | (controllable_locked) );

// G((decide=1  *  hlock6=0  *  X(hgrant6=1))->X(locked=0));
assign sys_safe_err39 =  ~( ~(~reg_controllable_ndecide & ~reg_i_hlock6 & controllable_hgrant6) | (~controllable_locked) );

// G( (decide=0) -> (  ((hgrant0=0)<->X(hgrant0=0))  ));
assign sys_safe_err40 =  ~( ~(reg_controllable_ndecide) | (reg_controllable_nhgrant0 ^~ controllable_nhgrant0) );

// G( (decide=0) -> (  ((hgrant1=0)<->X(hgrant1=0))  ));
assign sys_safe_err41 =  ~( ~(reg_controllable_ndecide) | (~reg_controllable_hgrant1 ^~ ~controllable_hgrant1) );

// G( (decide=0) -> (  ((hgrant2=0)<->X(hgrant2=0))  ));
assign sys_safe_err42 =  ~( ~(reg_controllable_ndecide) | (~reg_controllable_hgrant2 ^~ ~controllable_hgrant2) );

// G( (decide=0) -> (  ((hgrant3=0)<->X(hgrant3=0))  ));
assign sys_safe_err43 =  ~( ~(reg_controllable_ndecide) | (~reg_controllable_hgrant3 ^~ ~controllable_hgrant3) );

// G( (decide=0) -> (  ((hgrant4=0)<->X(hgrant4=0))  ));
assign sys_safe_err44 =  ~( ~(reg_controllable_ndecide) | (~reg_controllable_hgrant4 ^~ ~controllable_hgrant4) );

// G( (decide=0) -> (  ((hgrant5=0)<->X(hgrant5=0))  ));
assign sys_safe_err45 =  ~( ~(reg_controllable_ndecide) | (~reg_controllable_hgrant5 ^~ ~controllable_hgrant5) );

// G( (decide=0) -> (  ((hgrant6=0)<->X(hgrant6=0))  ));
assign sys_safe_err46 =  ~( ~(reg_controllable_ndecide) | (~reg_controllable_hgrant6 ^~ ~controllable_hgrant6) );

// G((decide=0)->(locked=0 <-> X(locked=0)));
assign sys_safe_err47 =  ~( ~(reg_controllable_ndecide) | (~reg_controllable_locked ^~ ~controllable_locked) );

// G(((stateG10_1=1) * (((hgrant1=1)) * (hbusreq1=0)))->FALSE);
assign sys_safe_err48 =  ~( ~(reg_stateG10_1 & (controllable_hgrant1 & ~i_hbusreq1)) | 0 );

// G(((stateG10_2=1) * (((hgrant2=1)) * (hbusreq2=0)))->FALSE);
assign sys_safe_err49 =  ~( ~(reg_stateG10_2 & (controllable_hgrant2 & ~i_hbusreq2)) | 0 );

// G(((stateG10_3=1) * (((hgrant3=1)) * (hbusreq3=0)))->FALSE);
assign sys_safe_err50 =  ~( ~(reg_stateG10_3 & (controllable_hgrant3 & ~i_hbusreq3)) | 0 );

// G(((stateG10_4=1) * (((hgrant4=1)) * (hbusreq4=0)))->FALSE);
assign sys_safe_err51 =  ~( ~(reg_stateG10_4 & (controllable_hgrant4 & ~i_hbusreq4)) | 0 );

// G(((stateG10_5=1) * (((hgrant5=1)) * (hbusreq5=0)))->FALSE);
assign sys_safe_err52 =  ~( ~(reg_stateG10_5 & (controllable_hgrant5 & ~i_hbusreq5)) | 0 );

// G(((stateG10_6=1) * (((hgrant6=1)) * (hbusreq6=0)))->FALSE);
assign sys_safe_err53 =  ~( ~(reg_stateG10_6 & (controllable_hgrant6 & ~i_hbusreq6)) | 0 );

// default master
// G((decide=1  *  hbusreq0=0  *  hbusreq1=0  *  hbusreq2=0  *  hbusreq3=0  *  hbusreq4=0  *  hbusreq5=0  *  hbusreq6=0) -> X(hgrant0=1));
assign sys_safe_err54 =  ~( ~(~reg_controllable_ndecide & (~reg_i_hbusreq0 & ~reg_i_hbusreq1 & ~reg_i_hbusreq2 & ~reg_i_hbusreq3 & ~reg_i_hbusreq4 & ~reg_i_hbusreq5 & ~reg_i_hbusreq6)) | (~controllable_nhgrant0) );

// collecting together the safety error bits:
assign sys_safe_err = sys_safe_err0 |
                      sys_safe_err1 |
                      sys_safe_err2 |
                      sys_safe_err3 |
                      sys_safe_err4 |
                      sys_safe_err5 |
                      sys_safe_err6 |
                      sys_safe_err7 |
                      sys_safe_err8 |
                      sys_safe_err9 |
                      sys_safe_err10 |
                      sys_safe_err11 |
                      sys_safe_err12 |
                      sys_safe_err13 |
                      sys_safe_err14 |
                      sys_safe_err15 |
                      sys_safe_err16 |
                      sys_safe_err17 |
                      sys_safe_err18 |
                      sys_safe_err19 |
                      sys_safe_err20 |
                      sys_safe_err21 |
                      sys_safe_err22 |
                      sys_safe_err23 |
                      sys_safe_err24 |
                      sys_safe_err25 |
                      sys_safe_err26 |
                      sys_safe_err27 |
                      sys_safe_err28 |
                      sys_safe_err29 |
                      sys_safe_err30 |
                      sys_safe_err31 |
                      sys_safe_err32 |
                      sys_safe_err33 |
                      sys_safe_err34 |
                      sys_safe_err35 |
                      sys_safe_err36 |
                      sys_safe_err37 |
                      sys_safe_err38 |
                      sys_safe_err39 |
                      sys_safe_err40 |
                      sys_safe_err41 |
                      sys_safe_err42 |
                      sys_safe_err43 |
                      sys_safe_err44 |
                      sys_safe_err45 |
                      sys_safe_err46 |
                      sys_safe_err47 |
                      sys_safe_err48 |
                      sys_safe_err49 |
                      sys_safe_err50 |
                      sys_safe_err51 |
                      sys_safe_err52 |
                      sys_safe_err53 |
                      sys_safe_err54;

// =============================================================
//                          ENV_FAIRNESS:
// =============================================================
// Assumption 1: 
// G(F(stateA1=0));
assign env_fair0 =  ~reg_stateA1;

// Assumption 2:
// G(F(hready=1));
assign env_fair1 =  i_hready;


// =============================================================
//                          SYS_FAIRNESS:
// =============================================================
// Guarantee 2:
// G(F(stateG2=0));
assign sys_fair0 = ~reg_stateG2;

// Guarantee 3:
// G(F((stateG3_0=0)  *  (stateG3_1=0)  *  (stateG3_2=0)));
assign sys_fair1 =  (~reg_stateG3_0 & ~reg_stateG3_1 & ~reg_stateG3_2);

// G(F(((hmaster0=0) * (hmaster1=0) * (hmaster2=0))  |  hbusreq0=0));
assign sys_fair2 =  ( ~(controllable_hmaster0) & ~(controllable_hmaster1) & ~(controllable_hmaster2) ) | ~i_hbusreq0;

// G(F(((hmaster0=1) * (hmaster1=0) * (hmaster2=0))  |  hbusreq1=0));
assign sys_fair3 =  ( controllable_hmaster0 & ~(controllable_hmaster1) & ~(controllable_hmaster2) ) | ~i_hbusreq1;

// G(F(((hmaster0=0) * (hmaster1=1) * (hmaster2=0))  |  hbusreq2=0));
assign sys_fair4 =  ( ~(controllable_hmaster0) & controllable_hmaster1 & ~(controllable_hmaster2) ) | ~i_hbusreq2;

// G(F(((hmaster0=1) * (hmaster1=1) * (hmaster2=0))  |  hbusreq3=0));
assign sys_fair5 =  ( controllable_hmaster0 & controllable_hmaster1 & ~(controllable_hmaster2) ) | ~i_hbusreq3;

// G(F(((hmaster0=0) * (hmaster1=0) * (hmaster2=1))  |  hbusreq4=0));
assign sys_fair6 =  ( ~(controllable_hmaster0) & ~(controllable_hmaster1) & controllable_hmaster2 ) | ~i_hbusreq4;

// G(F(((hmaster0=1) * (hmaster1=0) * (hmaster2=1))  |  hbusreq5=0));
assign sys_fair7 =  ( controllable_hmaster0 & ~(controllable_hmaster1) & controllable_hmaster2 ) | ~i_hbusreq5;

// G(F(((hmaster0=0) * (hmaster1=1) * (hmaster2=1))  |  hbusreq6=0));
assign sys_fair8 =  ( ~(controllable_hmaster0) & controllable_hmaster1 & controllable_hmaster2 ) | ~i_hbusreq6;

assign fair_err = (fair_cnt >= 5'b11110);

// computing the error output bit:
assign o_err = ~env_safe_err & ~env_safe_err_happened & (sys_safe_err | fair_err);

initial
 begin
  reg_i_hready = 0;
  reg_i_hbusreq0 = 0;
  reg_i_hlock0 = 0;
  reg_i_hbusreq1 = 0;
  reg_i_hlock1 = 0;
  reg_i_hbusreq2 = 0;
  reg_i_hlock2 = 0;
  reg_i_hbusreq3 = 0;
  reg_i_hlock3 = 0;
  reg_i_hbusreq4 = 0;
  reg_i_hlock4 = 0;
  reg_i_hbusreq5 = 0;
  reg_i_hlock5 = 0;
  reg_i_hbusreq6 = 0;
  reg_i_hlock6 = 0;
  reg_controllable_hmaster0 = 0;
  reg_controllable_hmaster1 = 0;
  reg_controllable_hmaster2 = 0;
  reg_controllable_hmastlock = 0;
  reg_controllable_nstart = 0;
  reg_controllable_ndecide = 0;
  reg_controllable_locked = 0;
  reg_controllable_nhgrant0 = 0;
  reg_controllable_hgrant1 = 0;
  reg_controllable_hgrant2 = 0;
  reg_controllable_hgrant3 = 0;
  reg_controllable_hgrant4 = 0;
  reg_controllable_hgrant5 = 0;
  reg_controllable_hgrant6 = 0;
  reg_controllable_busreq = 0;
  reg_stateA1 = 0;
  reg_stateG2 = 0;
  reg_stateG3_0 = 0;
  reg_stateG3_1 = 0;
  reg_stateG3_2 = 0;
  reg_stateG10_1 = 0;
  reg_stateG10_2 = 0;
  reg_stateG10_3 = 0;
  reg_stateG10_4 = 0;
  reg_stateG10_5 = 0;
  reg_stateG10_6 = 0;
  env_safe_err_happened = 0;
  next_env_fair = 0;
  fair_cnt = 0;
  next_sys_fair = 0;
 end


always @(posedge i_clk)
 begin
   // We remember if an environment error occurred:
   env_safe_err_happened = env_safe_err_happened | env_safe_err;

   // Updating the fairness counters: 
   if((next_sys_fair == 0) & sys_fair0)
    begin
      next_sys_fair = 1;
      next_env_fair = 0;
      fair_cnt = 0;
    end
   else if((next_sys_fair == 1) & sys_fair1)
    begin
      next_sys_fair = 2;
      next_env_fair = 0;
      fair_cnt = 0;
    end
   else if((next_sys_fair == 2) & sys_fair2)
    begin
      next_sys_fair = 3;
      next_env_fair = 0;
      fair_cnt = 0;
    end
   else if((next_sys_fair == 3) & sys_fair3)
    begin
      next_sys_fair = 4;
      next_env_fair = 0;
      fair_cnt = 0;
    end
   else if((next_sys_fair == 4) & sys_fair4)
    begin
      next_sys_fair = 5;
      next_env_fair = 0;
      fair_cnt = 0;
    end
   else if((next_sys_fair == 5) & sys_fair5)
    begin
      next_sys_fair = 6;
      next_env_fair = 0;
      fair_cnt = 0;
    end
   else if((next_sys_fair == 6) & sys_fair6)
    begin
      next_sys_fair = 7;
      next_env_fair = 0;
      fair_cnt = 0;
    end
   else if((next_sys_fair == 7) & sys_fair7)
    begin
      next_sys_fair = 8;
      next_env_fair = 0;
      fair_cnt = 0;
    end
   else if((next_sys_fair == 8) & sys_fair8)
    begin
      next_sys_fair = 0;
      next_env_fair = 0;
      fair_cnt = 0;
    end
   else if(~next_env_fair & env_fair0)
    begin
      next_env_fair = 1;
    end
   else if(next_env_fair & env_fair1)
    begin
      next_env_fair = 0;
      fair_cnt = fair_cnt + 1;
    end

   // Updating the automata: 
   // Automaton A1: 
   if(~reg_stateA1 & controllable_hmastlock & ~i_hburst0 & ~i_hburst1)
    begin
      reg_stateA1 = 1'b1;
    end
   else if(reg_stateA1 & ~controllable_busreq)
    begin
      reg_stateA1 = 1'b0;
    end

   // Automaton G2: 
   if(~reg_stateG2)
    begin
      if(controllable_hmastlock & ~controllable_nstart & ~i_hburst0 & ~i_hburst1)
       begin
         reg_stateG2 = 1'b1;
       end
    end
   else // if(reg_stateG2)
    begin
      if(~controllable_busreq)
       begin
         reg_stateG2 = 1'b0;
       end
    end

   // Automaton G3: 
   if(~reg_stateG3_0 & ~reg_stateG3_1 & ~reg_stateG3_2 & controllable_hmastlock & ~controllable_nstart &  ~i_hburst0 & i_hburst1 & ~i_hready)
    begin
      reg_stateG3_0 = 1'b1;
      reg_stateG3_1 = 1'b0;
      reg_stateG3_2 = 1'b0;
    end
   else if(~reg_stateG3_0 & ~reg_stateG3_1 & ~reg_stateG3_2 & controllable_hmastlock & ~controllable_nstart &  ~i_hburst0 & i_hburst1 & i_hready)
    begin
      reg_stateG3_0 = 1'b0;
      reg_stateG3_1 = 1'b1;
      reg_stateG3_2 = 1'b0;
    end
   else if(reg_stateG3_0 & ~reg_stateG3_1 & ~reg_stateG3_2 & i_hready)
    begin
      reg_stateG3_0 = 1'b0;
      reg_stateG3_1 = 1'b1;
      reg_stateG3_2 = 1'b0;
    end
   else if(~reg_stateG3_0 & reg_stateG3_1 & ~reg_stateG3_2 & i_hready)
    begin
      reg_stateG3_0 = 1'b1;
      reg_stateG3_1 = 1'b1;
      reg_stateG3_2 = 1'b0;
    end
   else if(reg_stateG3_0 & reg_stateG3_1 & ~reg_stateG3_2 & i_hready)
    begin
      reg_stateG3_0 = 1'b0;
      reg_stateG3_1 = 1'b0;
      reg_stateG3_2 = 1'b1;
    end
   else if(~reg_stateG3_0 & ~reg_stateG3_1 & reg_stateG3_2 & i_hready)
    begin
      reg_stateG3_0 = 1'b0;
      reg_stateG3_1 = 1'b0;
      reg_stateG3_2 = 1'b0;
    end

   // Automaton G10_1: 
   if(~reg_stateG10_1 & ~controllable_hgrant1 & ~i_hbusreq1)
    begin
      reg_stateG10_1 = 1'b1;
    end
   else if(reg_stateG10_1 & i_hbusreq1)
    begin
      reg_stateG10_1 = 1'b0;
    end

   // Automaton G10_2: 
   if(~reg_stateG10_2 & ~controllable_hgrant2 & ~i_hbusreq2)
    begin
      reg_stateG10_2 = 1'b1;
    end
   else if(reg_stateG10_2 & i_hbusreq2)
    begin
      reg_stateG10_2 = 1'b0;
    end

   // Automaton G10_3: 
   if(~reg_stateG10_3 & ~controllable_hgrant3 & ~i_hbusreq3)
    begin
      reg_stateG10_3 = 1'b1;
    end
   else if(reg_stateG10_3 & i_hbusreq3)
    begin
      reg_stateG10_3 = 1'b0;
    end

   // Automaton G10_4: 
   if(~reg_stateG10_4 & ~controllable_hgrant4 & ~i_hbusreq4)
    begin
      reg_stateG10_4 = 1'b1;
    end
   else if(reg_stateG10_4 & i_hbusreq4)
    begin
      reg_stateG10_4 = 1'b0;
    end

   // Automaton G10_5: 
   if(~reg_stateG10_5 & ~controllable_hgrant5 & ~i_hbusreq5)
    begin
      reg_stateG10_5 = 1'b1;
    end
   else if(reg_stateG10_5 & i_hbusreq5)
    begin
      reg_stateG10_5 = 1'b0;
    end

   // Automaton G10_6: 
   if(~reg_stateG10_6 & ~controllable_hgrant6 & ~i_hbusreq6)
    begin
      reg_stateG10_6 = 1'b1;
    end
   else if(reg_stateG10_6 & i_hbusreq6)
    begin
      reg_stateG10_6 = 1'b0;
    end

   // Latching the previous input:
   reg_i_hready =  i_hready;
   reg_i_hbusreq0 =  i_hbusreq0;
   reg_i_hlock0 =  i_hlock0;
   reg_i_hbusreq1 =  i_hbusreq1;
   reg_i_hlock1 =  i_hlock1;
   reg_i_hbusreq2 =  i_hbusreq2;
   reg_i_hlock2 =  i_hlock2;
   reg_i_hbusreq3 =  i_hbusreq3;
   reg_i_hlock3 =  i_hlock3;
   reg_i_hbusreq4 =  i_hbusreq4;
   reg_i_hlock4 =  i_hlock4;
   reg_i_hbusreq5 =  i_hbusreq5;
   reg_i_hlock5 =  i_hlock5;
   reg_i_hbusreq6 =  i_hbusreq6;
   reg_i_hlock6 =  i_hlock6;
   reg_controllable_hmaster0 =  controllable_hmaster0;
   reg_controllable_hmaster1 =  controllable_hmaster1;
   reg_controllable_hmaster2 =  controllable_hmaster2;
   reg_controllable_hmastlock =  controllable_hmastlock;
   reg_controllable_nstart =  controllable_nstart;
   reg_controllable_ndecide =  controllable_ndecide;
   reg_controllable_locked =  controllable_locked;
   reg_controllable_nhgrant0 =  controllable_nhgrant0;
   reg_controllable_hgrant1 =  controllable_hgrant1;
   reg_controllable_hgrant2 =  controllable_hgrant2;
   reg_controllable_hgrant3 =  controllable_hgrant3;
   reg_controllable_hgrant4 =  controllable_hgrant4;
   reg_controllable_hgrant5 =  controllable_hgrant5;
   reg_controllable_hgrant6 =  controllable_hgrant6;
   reg_controllable_busreq =  controllable_busreq;

 end
endmodule

-------------------------------
#!SYNTCOMP
STATUS : realizable
SOLVED_BY : 3/3 [2015-pre-classification]
SOLVED_IN : 4.33912 [2015-pre-classification]
#.
