aag 1030 35 58 1 937
2
4
6
8
10
12
14
16
18
20
22
24
26
28
30
32
34
36
38
40
42
44
46
48
50
52
54
56
58
60
62
64
66
68
70
72 1
74 10
76 1127
78 60
80 66
82 14
84 1149
86 62
88 1387
90 64
92 36
94 18
96 1471
98 34
100 22
102 1495
104 6
106 54
108 30
110 26
112 1515
114 38
116 28
118 8
120 32
122 46
124 24
126 1545
128 1567
130 48
132 20
134 70
136 1589
138 2
140 50
142 1613
144 16
146 1811
148 1817
150 1823
152 1829
154 1835
156 1971
158 1977
160 1983
162 1989
164 1995
166 2017
168 52
170 12
172 40
174 223
176 2039
178 56
180 4
182 2061
184 58
186 68
1104
188 47 12
190 49 16
192 191 189
194 51 20
196 195 192
198 53 24
200 199 196
202 57 28
204 203 200
206 59 30
208 207 204
210 61 34
212 211 208
214 63 36
216 215 212
218 175 72
220 219 72
222 221 216
224 69 67
226 224 65
228 46 39
230 47 38
232 231 229
234 233 226
236 68 67
238 236 65
240 48 39
242 49 38
244 243 241
246 245 238
248 247 235
250 69 66
252 250 65
254 50 39
256 51 38
258 257 255
260 259 252
262 261 248
264 68 66
266 264 65
268 52 39
270 53 38
272 271 269
274 273 266
276 275 262
278 224 64
280 56 39
282 57 38
284 283 281
286 285 278
288 287 276
290 236 64
292 58 39
294 59 38
296 295 293
298 297 290
300 299 288
302 250 64
304 60 39
306 61 38
308 307 305
310 309 302
312 311 300
314 264 64
316 62 39
318 63 38
320 319 317
322 321 314
324 323 312
326 173 72
328 172 72
330 327 72
332 331 9
334 333 324
336 127 72
338 126 72
340 337 72
342 338 9
344 343 334
346 97 72
348 96 72
350 347 72
352 103 72
354 102 72
356 353 72
358 357 351
360 113 72
362 112 72
364 361 72
366 365 358
368 367 9
370 369 344
372 139 72
374 138 72
376 373 72
378 374 226
380 377 227
382 381 379
384 383 328
386 385 370
388 181 72
390 180 72
392 389 72
394 393 238
396 390 239
398 397 395
400 399 328
402 401 386
404 75 72
406 74 72
408 405 72
410 409 252
412 406 253
414 413 411
416 415 328
418 417 402
420 83 72
422 82 72
424 421 72
426 425 266
428 422 267
430 429 427
432 431 328
434 433 418
436 95 72
438 94 72
440 437 72
442 441 278
444 438 279
446 445 443
448 447 328
450 449 434
452 101 72
454 100 72
456 453 72
458 457 290
460 454 291
462 461 459
464 463 328
466 465 450
468 111 72
470 110 72
472 469 72
474 473 302
476 470 303
478 477 475
480 479 328
482 481 466
484 121 72
486 120 72
488 485 72
490 489 314
492 486 315
494 493 491
496 495 328
498 497 482
500 105 72
502 104 72
504 501 72
506 502 71
508 505 70
510 509 507
512 511 328
514 513 498
516 187 72
518 186 72
520 517 72
522 81 72
524 80 72
526 523 72
528 527 521
530 91 72
532 90 72
534 531 72
536 535 528
538 537 226
540 536 227
542 541 539
544 543 8
546 545 514
548 527 518
550 548 535
552 551 238
554 550 239
556 555 553
558 557 8
560 559 546
562 524 521
564 562 535
566 565 252
568 564 253
570 569 567
572 571 8
574 573 560
576 524 518
578 576 535
580 579 266
582 578 267
584 583 581
586 585 8
588 587 574
590 532 528
592 591 278
594 590 279
596 595 593
598 597 8
600 599 588
602 548 532
604 603 290
606 602 291
608 607 605
610 609 8
612 611 600
614 562 532
616 615 302
618 614 303
620 619 617
622 621 8
624 623 612
626 576 532
628 627 314
630 626 315
632 631 629
634 633 8
636 635 624
638 135 72
640 134 72
642 639 72
644 643 70
646 640 71
648 647 645
650 649 8
652 651 636
654 107 72
656 106 72
658 655 72
660 171 72
662 170 72
664 661 72
666 662 659
668 666 3
670 668 7
672 671 652
674 665 659
676 674 3
678 676 6
680 679 672
682 145 72
684 144 72
686 683 72
688 684 659
690 688 4
692 690 7
694 693 680
696 687 659
698 696 4
700 698 6
702 701 694
704 133 72
706 132 72
708 705 72
710 706 659
712 710 10
714 712 7
716 715 702
718 709 659
720 718 10
722 720 6
724 723 716
726 125 72
728 124 72
730 727 72
732 728 659
734 732 14
736 734 7
738 737 724
740 731 659
742 740 14
744 742 6
746 745 738
748 117 72
750 116 72
752 749 72
754 750 659
756 754 18
758 756 7
760 759 746
762 753 659
764 762 18
766 764 6
768 767 760
770 109 72
772 108 72
774 771 72
776 772 659
778 776 22
780 778 7
782 781 768
784 775 659
786 784 22
788 786 6
790 789 782
792 99 72
794 98 72
796 793 72
798 794 659
800 798 26
802 800 7
804 803 790
806 797 659
808 806 26
810 808 6
812 811 804
814 93 72
816 92 72
818 815 72
820 816 659
822 820 32
824 822 7
826 825 812
828 819 659
830 828 32
832 830 6
834 833 826
836 377 2
838 374 3
840 839 837
842 841 656
844 843 834
846 390 5
848 393 4
850 849 847
852 851 656
854 853 844
856 406 11
858 409 10
860 859 857
862 861 656
864 863 854
866 422 15
868 425 14
870 869 867
872 871 656
874 873 864
876 438 19
878 441 18
880 879 877
882 881 656
884 883 874
886 454 23
888 457 22
890 889 887
892 891 656
894 893 884
896 470 27
898 473 26
900 899 897
902 901 656
904 903 894
906 486 33
908 489 32
910 909 907
912 911 656
914 913 904
916 502 7
918 505 6
920 919 917
922 921 656
924 923 914
926 129 72
928 128 72
930 927 72
932 49 4
934 932 928
936 935 924
938 137 72
940 136 72
942 939 72
944 51 10
946 944 940
948 947 936
950 167 72
952 166 72
954 951 72
956 53 14
958 956 952
960 959 948
962 177 72
964 176 72
966 963 72
968 57 18
970 968 964
972 971 960
974 183 72
976 182 72
978 975 72
980 59 22
982 980 976
984 983 972
986 77 72
988 76 72
990 987 72
992 61 26
994 992 988
996 995 984
998 85 72
1000 84 72
1002 999 72
1004 63 32
1006 1004 1000
1008 1007 996
1010 123 72
1012 1011 72
1014 131 72
1016 1015 72
1018 1017 1013
1020 141 72
1022 1021 72
1024 1023 1018
1026 169 72
1028 1027 72
1030 1029 1024
1032 179 72
1034 1033 72
1036 1035 1030
1038 185 72
1040 1039 72
1042 1041 1036
1044 79 72
1046 1045 72
1048 1047 1042
1050 87 72
1052 1051 72
1054 1053 1048
1056 1054 659
1058 1056 2
1060 1059 1008
1062 155 72
1064 154 72
1066 1063 72
1068 153 72
1070 152 72
1072 1069 72
1074 151 72
1076 150 72
1078 1075 72
1080 149 72
1082 148 72
1084 1081 72
1086 147 72
1088 146 72
1090 1087 72
1092 1089 1083
1094 1092 1077
1096 1094 1071
1098 1096 1066
1100 1099 1067
1102 1100 1060
1104 1103 222
1106 991 27
1108 1106 61
1110 988 60
1112 1110 1109
1114 1113 1109
1116 1111 988
1118 1116 1109
1120 1119 1109
1122 1121 1115
1124 1114 988
1126 1125 1123
1128 1003 33
1130 1128 63
1132 1000 62
1134 1132 1131
1136 1135 1131
1138 1133 1000
1140 1138 1131
1142 1141 1131
1144 1143 1137
1146 1136 1000
1148 1147 1145
1150 157 72
1152 156 72
1154 1151 72
1156 159 72
1158 158 72
1160 1157 72
1162 161 72
1164 160 72
1166 1163 72
1168 163 72
1170 162 72
1172 1169 72
1174 164 72
1176 1159 1153
1178 1176 1165
1180 1178 1171
1182 1180 1175
1184 1182 341
1186 1159 1154
1188 1186 1165
1190 1188 1171
1192 1190 1175
1194 1192 366
1196 1160 1153
1198 1196 1165
1200 1198 1171
1202 1200 1175
1204 227 46
1206 1205 1202
1208 1160 1154
1210 1208 1165
1212 1210 1171
1214 1212 1175
1216 239 48
1218 1217 1214
1220 1176 1166
1222 1220 1171
1224 1222 1175
1226 253 50
1228 1227 1224
1230 1186 1166
1232 1230 1171
1234 1232 1175
1236 267 52
1238 1237 1234
1240 1196 1166
1242 1240 1171
1244 1242 1175
1246 279 56
1248 1247 1244
1250 1208 1166
1252 1250 1171
1254 1252 1175
1256 291 58
1258 1257 1254
1260 1178 1172
1262 1260 1175
1264 303 60
1266 1265 1262
1268 1188 1172
1270 1268 1175
1272 315 62
1274 1273 1270
1276 89 72
1278 88 72
1280 1277 72
1282 143 72
1284 142 72
1286 1283 72
1288 1287 1281
1290 1278 40
1292 1194 1185
1294 1293 1185
1296 1195 1185
1298 1296 1206
1300 1299 1294
1302 1296 1207
1304 1302 1218
1306 1305 1300
1308 1302 1219
1310 1308 1228
1312 1311 1306
1314 1308 1229
1316 1314 1238
1318 1317 1312
1320 1314 1239
1322 1320 1248
1324 1323 1318
1326 1320 1249
1328 1326 1258
1330 1329 1324
1332 1326 1259
1334 1332 1266
1336 1335 1330
1338 1332 1267
1340 1338 1274
1342 1341 1336
1344 1338 1275
1346 1344 1288
1348 1347 1342
1350 1344 1289
1352 1350 1290
1354 1353 1348
1356 1291 1278
1358 1356 1289
1360 1359 1289
1362 1361 1275
1364 1362 1267
1366 1364 1259
1368 1366 1249
1370 1368 1239
1372 1370 1229
1374 1372 1219
1376 1374 1207
1378 1376 1195
1380 1378 1185
1382 1380 1355
1384 1354 1278
1386 1385 1383
1388 366 70
1390 1388 9
1392 1390 45
1394 1392 42
1396 1394 41
1398 1394 40
1400 357 348
1402 1400 365
1404 1402 40
1406 354 351
1408 1406 365
1410 1408 40
1412 354 348
1414 1412 365
1416 1414 40
1418 362 358
1420 1418 40
1422 1398 1397
1424 1423 1397
1426 1399 1397
1428 1426 1404
1430 1429 1424
1432 1426 1405
1434 1432 1410
1436 1435 1430
1438 1432 1411
1440 1438 1416
1442 1441 1436
1444 1438 1417
1446 1444 1420
1448 1447 1442
1450 1421 348
1452 1450 1417
1454 1452 1411
1456 1455 1411
1458 1457 1405
1460 1458 1399
1462 1460 1397
1464 1463 1397
1466 1465 1449
1468 1448 348
1470 1469 1467
1472 1421 354
1474 1472 1417
1476 1474 1411
1478 1477 1411
1480 1479 1405
1482 1481 1405
1484 1483 1399
1486 1485 1399
1488 1487 1397
1490 1488 1449
1492 1448 354
1494 1493 1491
1496 1421 362
1498 1496 1417
1500 1499 1417
1502 1501 1411
1504 1502 1405
1506 1504 1399
1508 1506 1397
1510 1508 1449
1512 1448 362
1514 1513 1511
1516 70 9
1518 1516 45
1520 1518 43
1522 1520 341
1524 338 39
1526 1525 1523
1528 1521 338
1530 1529 1521
1532 338 38
1534 1531 341
1536 1532 338
1538 1537 1535
1540 1539 1527
1542 1526 338
1544 1543 1541
1546 931 5
1548 1546 49
1550 928 48
1552 1550 1549
1554 1553 1549
1556 1551 928
1558 1556 1549
1560 1559 1549
1562 1561 1555
1564 1554 928
1566 1565 1563
1568 943 11
1570 1568 51
1572 940 50
1574 1572 1571
1576 1575 1571
1578 1573 940
1580 1578 1571
1582 1581 1571
1584 1583 1577
1586 1576 940
1588 1587 1585
1590 1287 70
1592 1590 45
1594 1592 43
1596 1284 39
1598 1596 1595
1600 1599 1595
1602 1597 1284
1604 1602 1595
1606 1605 1595
1608 1607 1601
1610 1600 1284
1612 1611 1609
1614 1353 1342
1616 1290 1091
1618 1291 1088
1620 1619 1617
1622 1288 1088
1624 1621 1289
1626 1625 1623
1628 1627 1275
1630 1628 1267
1632 1630 1259
1634 1632 1249
1636 1634 1239
1638 1636 1229
1640 1638 1219
1642 1640 1207
1644 1642 1195
1646 1644 1185
1648 1088 1085
1650 1089 1082
1652 1651 1649
1654 1653 1290
1656 1291 1082
1658 1657 1655
1660 1288 1082
1662 1659 1289
1664 1663 1661
1666 1665 1275
1668 1666 1267
1670 1668 1259
1672 1670 1249
1674 1672 1239
1676 1674 1229
1678 1676 1219
1680 1678 1207
1682 1680 1195
1684 1682 1185
1686 1088 1082
1688 1686 1079
1690 1687 1076
1692 1691 1689
1694 1693 1290
1696 1291 1076
1698 1697 1695
1700 1288 1076
1702 1699 1289
1704 1703 1701
1706 1705 1275
1708 1706 1267
1710 1708 1259
1712 1710 1249
1714 1712 1239
1716 1714 1229
1718 1716 1219
1720 1718 1207
1722 1720 1195
1724 1722 1185
1726 1686 1076
1728 1726 1073
1730 1727 1070
1732 1731 1729
1734 1733 1290
1736 1291 1070
1738 1737 1735
1740 1288 1070
1742 1739 1289
1744 1743 1741
1746 1745 1275
1748 1746 1267
1750 1748 1259
1752 1750 1249
1754 1752 1239
1756 1754 1229
1758 1756 1219
1760 1758 1207
1762 1760 1195
1764 1762 1185
1766 1726 1070
1768 1766 1067
1770 1767 1064
1772 1771 1769
1774 1773 1290
1776 1291 1064
1778 1777 1775
1780 1288 1064
1782 1779 1289
1784 1783 1781
1786 1785 1275
1788 1786 1267
1790 1788 1259
1792 1790 1249
1794 1792 1239
1796 1794 1229
1798 1796 1219
1800 1798 1207
1802 1800 1195
1804 1802 1185
1806 1646 1615
1808 1614 1088
1810 1809 1807
1812 1684 1615
1814 1614 1082
1816 1815 1813
1818 1724 1615
1820 1614 1076
1822 1821 1819
1824 1764 1615
1826 1614 1070
1828 1827 1825
1830 1804 1615
1832 1614 1064
1834 1833 1831
1836 1275 1152
1838 1836 1267
1840 1839 1267
1842 1841 1259
1844 1842 1249
1846 1845 1249
1848 1847 1239
1850 1848 1229
1852 1851 1229
1854 1853 1219
1856 1854 1207
1858 1857 1207
1860 1859 1195
1862 1860 1185
1864 1863 1185
1866 1275 1158
1868 1866 1267
1870 1868 1259
1872 1870 1249
1874 1873 1249
1876 1875 1239
1878 1877 1239
1880 1879 1229
1882 1880 1219
1884 1882 1207
1886 1885 1207
1888 1887 1195
1890 1889 1195
1892 1891 1185
1894 1275 1164
1896 1894 1267
1898 1896 1259
1900 1898 1249
1902 1901 1249
1904 1903 1239
1906 1905 1239
1908 1907 1229
1910 1909 1229
1912 1911 1219
1914 1913 1219
1916 1915 1207
1918 1916 1195
1920 1918 1185
1922 1275 1170
1924 1922 1267
1926 1925 1267
1928 1927 1259
1930 1929 1259
1932 1931 1249
1934 1932 1239
1936 1934 1229
1938 1936 1219
1940 1938 1207
1942 1940 1195
1944 1942 1185
1946 1275 1174
1948 1946 1267
1950 1948 1259
1952 1950 1249
1954 1952 1239
1956 1954 1229
1958 1956 1219
1960 1958 1207
1962 1960 1195
1964 1962 1185
1966 1865 1343
1968 1342 1152
1970 1969 1967
1972 1892 1343
1974 1342 1158
1976 1975 1973
1978 1920 1343
1980 1342 1164
1982 1981 1979
1984 1944 1343
1986 1342 1170
1988 1987 1985
1990 1964 1343
1992 1342 1174
1994 1993 1991
1996 955 15
1998 1996 53
2000 952 52
2002 2000 1999
2004 2003 1999
2006 2001 952
2008 2006 1999
2010 2009 1999
2012 2011 2005
2014 2004 952
2016 2015 2013
2018 967 19
2020 2018 57
2022 964 56
2024 2022 2021
2026 2025 2021
2028 2023 964
2030 2028 2021
2032 2031 2021
2034 2033 2027
2036 2026 964
2038 2037 2035
2040 979 23
2042 2040 59
2044 976 58
2046 2044 2043
2048 2047 2043
2050 2045 976
2052 2050 2043
2054 2053 2043
2056 2055 2049
2058 2048 976
2060 2059 2057
i0 controllable_nhgrant0
i1 controllable_hgrant1
i2 controllable_locked
i3 controllable_nstart
i4 controllable_hgrant2
i5 i_hlock0
i6 controllable_hgrant3
i7 i_hlock1
i8 controllable_hgrant4
i9 i_hlock2
i10 controllable_hgrant5
i11 i_hlock3
i12 controllable_hgrant6
i13 i_hlock4
i14 i_hlock5
i15 controllable_hgrant7
i16 i_hlock6
i17 i_hlock7
i18 controllable_busreq
i19 i_hready
i20 i_hburst1
i21 i_hburst0
i22 i_hbusreq0
i23 i_hbusreq1
i24 i_hbusreq2
i25 i_hbusreq3
i26 controllable_ndecide
i27 i_hbusreq4
i28 i_hbusreq5
i29 i_hbusreq6
i30 i_hbusreq7
i31 controllable_hmaster2
i32 controllable_hmaster1
i33 controllable_hmaster0
i34 controllable_hmastlock
l0 n73
l1 reg_controllable_hgrant2_out
l2 reg_stateG10_6_out
l3 reg_i_hbusreq6_out
l4 reg_controllable_hmaster1_out
l5 reg_controllable_hgrant3_out
l6 reg_stateG10_7_out
l7 reg_i_hbusreq7_out
l8 next_env_fair_out
l9 reg_controllable_hmaster2_out
l10 reg_i_hlock7_out
l11 reg_controllable_hgrant4_out
l12 reg_stateG3_0_out
l13 reg_i_hlock6_out
l14 reg_controllable_hgrant5_out
l15 reg_stateG3_1_out
l16 reg_controllable_locked_out
l17 reg_controllable_ndecide_out
l18 reg_i_hlock5_out
l19 reg_controllable_hgrant6_out
l20 reg_stateG3_2_out
l21 reg_controllable_busreq_out
l22 reg_i_hlock4_out
l23 reg_controllable_nstart_out
l24 reg_controllable_hgrant7_out
l25 reg_i_hbusreq0_out
l26 reg_i_hlock3_out
l27 reg_stateG2_out
l28 reg_stateG10_1_out
l29 reg_i_hbusreq1_out
l30 reg_i_hlock2_out
l31 reg_controllable_hmastlock_out
l32 reg_stateG10_2_out
l33 reg_controllable_nhgrant0_out
l34 reg_i_hbusreq2_out
l35 reg_stateA1_out
l36 reg_i_hlock1_out
l37 fair_cnt<0>_out
l38 fair_cnt<1>_out
l39 fair_cnt<2>_out
l40 fair_cnt<3>_out
l41 fair_cnt<4>_out
l42 next_sys_fair<0>_out
l43 next_sys_fair<1>_out
l44 next_sys_fair<2>_out
l45 next_sys_fair<3>_out
l46 next_sys_fair<4>_out
l47 reg_stateG10_3_out
l48 reg_i_hbusreq3_out
l49 reg_i_hlock0_out
l50 reg_i_hready_out
l51 env_safe_err_happened_out
l52 reg_stateG10_4_out
l53 reg_i_hbusreq4_out
l54 reg_controllable_hgrant1_out
l55 reg_stateG10_5_out
l56 reg_i_hbusreq5_out
l57 reg_controllable_hmaster0_out
o0 o_err
c
amba_8_new_16
This file was written by ABC on Tue May  5 16:53:39 2015
For information about AIGER format, refer to http://fmv.jku.at/aiger
-------------------------------
This AIGER file has been created by the following sequence of commands:
> vl2mv amba8c16.v   ---gives--> amba8c16.mv
> abc -c "read_blif_mv amba8c16.mv; write_aiger -s amba8c16n.aig"   ---gives--> amba8c16n.aig
> aigtoaig amba8c16n.aig amba8c16n.aag   ---gives--> amba8c16n.aag (this file)
Content of amba8c16.v:
module amba_8_new_16(
        o_err,
        i_clk,
        i_hready,
        i_hbusreq0,
        i_hlock0,
        i_hbusreq1,
        i_hlock1,
        i_hbusreq2,
        i_hlock2,
        i_hbusreq3,
        i_hlock3,
        i_hbusreq4,
        i_hlock4,
        i_hbusreq5,
        i_hlock5,
        i_hbusreq6,
        i_hlock6,
        i_hbusreq7,
        i_hlock7,
        i_hburst0,
        i_hburst1,
        controllable_hmaster0,
        controllable_hmaster1,
        controllable_hmaster2,
        controllable_hmastlock,
        controllable_nstart,
        controllable_ndecide,
        controllable_locked,
        controllable_nhgrant0,
        controllable_hgrant1,
        controllable_hgrant2,
        controllable_hgrant3,
        controllable_hgrant4,
        controllable_hgrant5,
        controllable_hgrant6,
        controllable_hgrant7,
        controllable_busreq);

input i_clk;
input i_hready;
input i_hbusreq0;
input i_hlock0;
input i_hbusreq1;
input i_hlock1;
input i_hbusreq2;
input i_hlock2;
input i_hbusreq3;
input i_hlock3;
input i_hbusreq4;
input i_hlock4;
input i_hbusreq5;
input i_hlock5;
input i_hbusreq6;
input i_hlock6;
input i_hbusreq7;
input i_hlock7;
input i_hburst0;
input i_hburst1;
input controllable_hmaster0;
input controllable_hmaster1;
input controllable_hmaster2;
input controllable_hmastlock;
input controllable_nstart;
input controllable_ndecide;
input controllable_locked;
input controllable_nhgrant0;
input controllable_hgrant1;
input controllable_hgrant2;
input controllable_hgrant3;
input controllable_hgrant4;
input controllable_hgrant5;
input controllable_hgrant6;
input controllable_hgrant7;
input controllable_busreq;
output o_err;

reg reg_i_hready;
reg reg_i_hbusreq0;
reg reg_i_hlock0;
reg reg_i_hbusreq1;
reg reg_i_hlock1;
reg reg_i_hbusreq2;
reg reg_i_hlock2;
reg reg_i_hbusreq3;
reg reg_i_hlock3;
reg reg_i_hbusreq4;
reg reg_i_hlock4;
reg reg_i_hbusreq5;
reg reg_i_hlock5;
reg reg_i_hbusreq6;
reg reg_i_hlock6;
reg reg_i_hbusreq7;
reg reg_i_hlock7;
reg reg_controllable_hmaster0;
reg reg_controllable_hmaster1;
reg reg_controllable_hmaster2;
reg reg_controllable_hmastlock;
reg reg_controllable_nstart;
reg reg_controllable_ndecide;
reg reg_controllable_locked;
reg reg_controllable_nhgrant0;
reg reg_controllable_hgrant1;
reg reg_controllable_hgrant2;
reg reg_controllable_hgrant3;
reg reg_controllable_hgrant4;
reg reg_controllable_hgrant5;
reg reg_controllable_hgrant6;
reg reg_controllable_hgrant7;
reg reg_controllable_busreq;
reg reg_stateA1;
reg reg_stateG2;
reg reg_stateG3_0;
reg reg_stateG3_1;
reg reg_stateG3_2;
reg reg_stateG10_1;
reg reg_stateG10_2;
reg reg_stateG10_3;
reg reg_stateG10_4;
reg reg_stateG10_5;
reg reg_stateG10_6;
reg reg_stateG10_7;
reg env_safe_err_happened;
reg next_env_fair;
reg [4:0] fair_cnt;
reg [4:0] next_sys_fair;

wire env_safe_err0;
wire env_safe_err1;
wire env_safe_err2;
wire env_safe_err3;
wire env_safe_err4;
wire env_safe_err5;
wire env_safe_err6;
wire env_safe_err7;
wire env_safe_err;

wire sys_safe_err0;
wire sys_safe_err1;
wire sys_safe_err2;
wire sys_safe_err3;
wire sys_safe_err4;
wire sys_safe_err5;
wire sys_safe_err6;
wire sys_safe_err7;
wire sys_safe_err8;
wire sys_safe_err9;
wire sys_safe_err10;
wire sys_safe_err11;
wire sys_safe_err12;
wire sys_safe_err13;
wire sys_safe_err14;
wire sys_safe_err15;
wire sys_safe_err16;
wire sys_safe_err17;
wire sys_safe_err18;
wire sys_safe_err19;
wire sys_safe_err20;
wire sys_safe_err21;
wire sys_safe_err22;
wire sys_safe_err23;
wire sys_safe_err24;
wire sys_safe_err25;
wire sys_safe_err26;
wire sys_safe_err27;
wire sys_safe_err28;
wire sys_safe_err29;
wire sys_safe_err30;
wire sys_safe_err31;
wire sys_safe_err32;
wire sys_safe_err33;
wire sys_safe_err34;
wire sys_safe_err35;
wire sys_safe_err36;
wire sys_safe_err37;
wire sys_safe_err38;
wire sys_safe_err39;
wire sys_safe_err40;
wire sys_safe_err41;
wire sys_safe_err42;
wire sys_safe_err43;
wire sys_safe_err44;
wire sys_safe_err45;
wire sys_safe_err46;
wire sys_safe_err47;
wire sys_safe_err48;
wire sys_safe_err49;
wire sys_safe_err50;
wire sys_safe_err51;
wire sys_safe_err52;
wire sys_safe_err53;
wire sys_safe_err54;
wire sys_safe_err55;
wire sys_safe_err56;
wire sys_safe_err57;
wire sys_safe_err58;
wire sys_safe_err59;
wire sys_safe_err60;
wire sys_safe_err61;
wire sys_safe_err;

wire env_fair0;
wire env_fair1;

wire sys_fair0;
wire sys_fair1;
wire sys_fair2;
wire sys_fair3;
wire sys_fair4;
wire sys_fair5;
wire sys_fair6;
wire sys_fair7;
wire sys_fair8;
wire sys_fair9;
wire fair_err;
wire o_err;

// =============================================================
//                        ENV_TRANSITION:
// =============================================================
// Assumption 3:
// G( hlock0=1 -> hbusreq0=1 );
assign env_safe_err0 =  ~(~ i_hlock0 | i_hbusreq0);

// Assumption 3:
// G( hlock1=1 -> hbusreq1=1 );
assign env_safe_err1 =  ~(~ i_hlock1 | i_hbusreq1);

// Assumption 3:
// G( hlock2=1 -> hbusreq2=1 );
assign env_safe_err2 =  ~(~ i_hlock2 | i_hbusreq2);

// Assumption 3:
// G( hlock3=1 -> hbusreq3=1 );
assign env_safe_err3 =  ~(~ i_hlock3 | i_hbusreq3);

// Assumption 3:
// G( hlock4=1 -> hbusreq4=1 );
assign env_safe_err4 =  ~(~ i_hlock4 | i_hbusreq4);

// Assumption 3:
// G( hlock5=1 -> hbusreq5=1 );
assign env_safe_err5 =  ~(~ i_hlock5 | i_hbusreq5);

// Assumption 3:
// G( hlock6=1 -> hbusreq6=1 );
assign env_safe_err6 =  ~(~ i_hlock6 | i_hbusreq6);

// Assumption 3:
// G( hlock7=1 -> hbusreq7=1 );
assign env_safe_err7 =  ~(~ i_hlock7 | i_hbusreq7);

// collecting together the safety error bits:
assign env_safe_err = env_safe_err0 |
                      env_safe_err1 |
                      env_safe_err2 |
                      env_safe_err3 |
                      env_safe_err4 |
                      env_safe_err5 |
                      env_safe_err6 |
                      env_safe_err7;

// =============================================================
//                        SYS_TRANSITION:
// =============================================================
// G((hmaster0=0) * (hmaster1=0) * (hmaster2=0) -> (hbusreq0=0 <-> busreq=0));
assign sys_safe_err0 =  ~( ~( ~(controllable_hmaster0) & ~(controllable_hmaster1) & ~(controllable_hmaster2) )|(~i_hbusreq0 ^~ (~controllable_busreq)));

// G((hmaster0=1) * (hmaster1=0) * (hmaster2=0) -> (hbusreq1=0 <-> busreq=0));
assign sys_safe_err1 =  ~( ~( controllable_hmaster0 & ~(controllable_hmaster1) & ~(controllable_hmaster2) )|(~i_hbusreq1 ^~ (~controllable_busreq)));

// G((hmaster0=0) * (hmaster1=1) * (hmaster2=0) -> (hbusreq2=0 <-> busreq=0));
assign sys_safe_err2 =  ~( ~( ~(controllable_hmaster0) & controllable_hmaster1 & ~(controllable_hmaster2) )|(~i_hbusreq2 ^~ (~controllable_busreq)));

// G((hmaster0=1) * (hmaster1=1) * (hmaster2=0) -> (hbusreq3=0 <-> busreq=0));
assign sys_safe_err3 =  ~( ~( controllable_hmaster0 & controllable_hmaster1 & ~(controllable_hmaster2) )|(~i_hbusreq3 ^~ (~controllable_busreq)));

// G((hmaster0=0) * (hmaster1=0) * (hmaster2=1) -> (hbusreq4=0 <-> busreq=0));
assign sys_safe_err4 =  ~( ~( ~(controllable_hmaster0) & ~(controllable_hmaster1) & controllable_hmaster2 )|(~i_hbusreq4 ^~ (~controllable_busreq)));

// G((hmaster0=1) * (hmaster1=0) * (hmaster2=1) -> (hbusreq5=0 <-> busreq=0));
assign sys_safe_err5 =  ~( ~( controllable_hmaster0 & ~(controllable_hmaster1) & controllable_hmaster2 )|(~i_hbusreq5 ^~ (~controllable_busreq)));

// G((hmaster0=0) * (hmaster1=1) * (hmaster2=1) -> (hbusreq6=0 <-> busreq=0));
assign sys_safe_err6 =  ~( ~( ~(controllable_hmaster0) & controllable_hmaster1 & controllable_hmaster2 )|(~i_hbusreq6 ^~ (~controllable_busreq)));

// G((hmaster0=1) * (hmaster1=1) * (hmaster2=1) -> (hbusreq7=0 <-> busreq=0));
assign sys_safe_err7 =  ~( ~( controllable_hmaster0 & controllable_hmaster1 & controllable_hmaster2 )|(~i_hbusreq7 ^~ (~controllable_busreq)));

// Guarantee 1:
// G((hready=0) -> X(start=0));
assign sys_safe_err8 =  ~( reg_i_hready | controllable_nstart );

// G(((stateG2=1) * (start=1)) -> FALSE;
assign sys_safe_err9 =  ~( ~(reg_stateG2 & ~controllable_nstart) | 0 );

// G(((stateG3_0=1) * (stateG3_1=0) * (stateG3_2=0) * ((start=1))) -> FALSE);
// G(((stateG3_0=0) * (stateG3_1=1) * (stateG3_2=0) * ((start=1))) -> FALSE);
// G(((stateG3_0=1) * (stateG3_1=1) * (stateG3_2=0) * ((start=1))) -> FALSE);
// G(((stateG3_0=0) * (stateG3_1=0) * (stateG3_2=1) * ((start=1))) -> FALSE);
// all these rules can be summarized as: only in state 000, start=1 is allowed:
assign sys_safe_err10 =  (reg_stateG3_0 | reg_stateG3_1 | reg_stateG3_2) & ~controllable_nstart;

// G( (hready=1) -> (   (hgrant0=1) <-> (X(hmaster0=0) * X(hmaster1=0) * X(hmaster2=0))  ) );
assign sys_safe_err11 =  ~( ~(reg_i_hready) | ( ~reg_controllable_nhgrant0 ^~ ( ~(controllable_hmaster0) & ~(controllable_hmaster1) & ~(controllable_hmaster2) ) ) );

// G( (hready=1) -> (   (hgrant1=1) <-> (X(hmaster0=1) * X(hmaster1=0) * X(hmaster2=0))  ) );
assign sys_safe_err12 =  ~( ~(reg_i_hready) | ( reg_controllable_hgrant1 ^~ ( controllable_hmaster0 & ~(controllable_hmaster1) & ~(controllable_hmaster2) ) ) );

// G( (hready=1) -> (   (hgrant2=1) <-> (X(hmaster0=0) * X(hmaster1=1) * X(hmaster2=0))  ) );
assign sys_safe_err13 =  ~( ~(reg_i_hready) | ( reg_controllable_hgrant2 ^~ ( ~(controllable_hmaster0) & controllable_hmaster1 & ~(controllable_hmaster2) ) ) );

// G( (hready=1) -> (   (hgrant3=1) <-> (X(hmaster0=1) * X(hmaster1=1) * X(hmaster2=0))  ) );
assign sys_safe_err14 =  ~( ~(reg_i_hready) | ( reg_controllable_hgrant3 ^~ ( controllable_hmaster0 & controllable_hmaster1 & ~(controllable_hmaster2) ) ) );

// G( (hready=1) -> (   (hgrant4=1) <-> (X(hmaster0=0) * X(hmaster1=0) * X(hmaster2=1))  ) );
assign sys_safe_err15 =  ~( ~(reg_i_hready) | ( reg_controllable_hgrant4 ^~ ( ~(controllable_hmaster0) & ~(controllable_hmaster1) & controllable_hmaster2 ) ) );

// G( (hready=1) -> (   (hgrant5=1) <-> (X(hmaster0=1) * X(hmaster1=0) * X(hmaster2=1))  ) );
assign sys_safe_err16 =  ~( ~(reg_i_hready) | ( reg_controllable_hgrant5 ^~ ( controllable_hmaster0 & ~(controllable_hmaster1) & controllable_hmaster2 ) ) );

// G( (hready=1) -> (   (hgrant6=1) <-> (X(hmaster0=0) * X(hmaster1=1) * X(hmaster2=1))  ) );
assign sys_safe_err17 =  ~( ~(reg_i_hready) | ( reg_controllable_hgrant6 ^~ ( ~(controllable_hmaster0) & controllable_hmaster1 & controllable_hmaster2 ) ) );

// G( (hready=1) -> (   (hgrant7=1) <-> (X(hmaster0=1) * X(hmaster1=1) * X(hmaster2=1))  ) );
assign sys_safe_err18 =  ~( ~(reg_i_hready) | ( reg_controllable_hgrant7 ^~ ( controllable_hmaster0 & controllable_hmaster1 & controllable_hmaster2 ) ) );

// HMASTLOCK:
// G(  (hready=1) -> (locked=0 <-> X(hmastlock=0) ) );
assign sys_safe_err19 =  ~( ~(reg_i_hready) | (~reg_controllable_locked ^~ ~controllable_hmastlock) );

// Master 0:
// G( X(start=0) -> ( ((hmaster0=0) * (hmaster1=0) * (hmaster2=0)) <-> (X(hmaster0=0) * X(hmaster1=0) * X(hmaster2=0)) ) );
assign sys_safe_err20 =  ~( ~(controllable_nstart) | ( ( ~(reg_controllable_hmaster0) & ~(reg_controllable_hmaster1) & ~(reg_controllable_hmaster2) ) ^~ ( ~(controllable_hmaster0) & ~(controllable_hmaster1) & ~(controllable_hmaster2) )) );

// Master 1:
// G( X(start=0) -> ( ((hmaster0=1) * (hmaster1=0) * (hmaster2=0)) <-> (X(hmaster0=1) * X(hmaster1=0) * X(hmaster2=0)) ) );
assign sys_safe_err21 =  ~( ~(controllable_nstart) | ( ( reg_controllable_hmaster0 & ~(reg_controllable_hmaster1) & ~(reg_controllable_hmaster2) ) ^~ ( controllable_hmaster0 & ~(controllable_hmaster1) & ~(controllable_hmaster2) )) );

// Master 2:
// G( X(start=0) -> ( ((hmaster0=0) * (hmaster1=1) * (hmaster2=0)) <-> (X(hmaster0=0) * X(hmaster1=1) * X(hmaster2=0)) ) );
assign sys_safe_err22 =  ~( ~(controllable_nstart) | ( ( ~(reg_controllable_hmaster0) & reg_controllable_hmaster1 & ~(reg_controllable_hmaster2) ) ^~ ( ~(controllable_hmaster0) & controllable_hmaster1 & ~(controllable_hmaster2) )) );

// Master 3:
// G( X(start=0) -> ( ((hmaster0=1) * (hmaster1=1) * (hmaster2=0)) <-> (X(hmaster0=1) * X(hmaster1=1) * X(hmaster2=0)) ) );
assign sys_safe_err23 =  ~( ~(controllable_nstart) | ( ( reg_controllable_hmaster0 & reg_controllable_hmaster1 & ~(reg_controllable_hmaster2) ) ^~ ( controllable_hmaster0 & controllable_hmaster1 & ~(controllable_hmaster2) )) );

// Master 4:
// G( X(start=0) -> ( ((hmaster0=0) * (hmaster1=0) * (hmaster2=1)) <-> (X(hmaster0=0) * X(hmaster1=0) * X(hmaster2=1)) ) );
assign sys_safe_err24 =  ~( ~(controllable_nstart) | ( ( ~(reg_controllable_hmaster0) & ~(reg_controllable_hmaster1) & reg_controllable_hmaster2 ) ^~ ( ~(controllable_hmaster0) & ~(controllable_hmaster1) & controllable_hmaster2 )) );

// Master 5:
// G( X(start=0) -> ( ((hmaster0=1) * (hmaster1=0) * (hmaster2=1)) <-> (X(hmaster0=1) * X(hmaster1=0) * X(hmaster2=1)) ) );
assign sys_safe_err25 =  ~( ~(controllable_nstart) | ( ( reg_controllable_hmaster0 & ~(reg_controllable_hmaster1) & reg_controllable_hmaster2 ) ^~ ( controllable_hmaster0 & ~(controllable_hmaster1) & controllable_hmaster2 )) );

// Master 6:
// G( X(start=0) -> ( ((hmaster0=0) * (hmaster1=1) * (hmaster2=1)) <-> (X(hmaster0=0) * X(hmaster1=1) * X(hmaster2=1)) ) );
assign sys_safe_err26 =  ~( ~(controllable_nstart) | ( ( ~(reg_controllable_hmaster0) & reg_controllable_hmaster1 & reg_controllable_hmaster2 ) ^~ ( ~(controllable_hmaster0) & controllable_hmaster1 & controllable_hmaster2 )) );

// Master 7:
// G( X(start=0) -> ( ((hmaster0=1) * (hmaster1=1) * (hmaster2=1)) <-> (X(hmaster0=1) * X(hmaster1=1) * X(hmaster2=1)) ) );
assign sys_safe_err27 =  ~( ~(controllable_nstart) | ( ( reg_controllable_hmaster0 & reg_controllable_hmaster1 & reg_controllable_hmaster2 ) ^~ ( controllable_hmaster0 & controllable_hmaster1 & controllable_hmaster2 )) );

// Guarantee 6.2:
// G( ((X(start=0))) -> ( (hmastlock=1) <-> X(hmastlock=1)) );
assign sys_safe_err28 =  ~( ~(controllable_nstart) | ( reg_controllable_hmastlock ^~ controllable_hmastlock) );

// G( (decide=1  *  hlock0=1  *  X(hgrant0=1) )->X(locked=1));
assign sys_safe_err29 =  ~( ~(~reg_controllable_ndecide & reg_i_hlock0 & ~controllable_nhgrant0) | (controllable_locked) );

// G((decide=1  *  hlock0=0  *  X(hgrant0=1))->X(locked=0));
assign sys_safe_err30 =  ~( ~(~reg_controllable_ndecide & ~reg_i_hlock0 & ~controllable_nhgrant0) | (~controllable_locked) );

// G( (decide=1  *  hlock1=1  *  X(hgrant1=1) )->X(locked=1));
assign sys_safe_err31 =  ~( ~(~reg_controllable_ndecide & reg_i_hlock1 & controllable_hgrant1) | (controllable_locked) );

// G((decide=1  *  hlock1=0  *  X(hgrant1=1))->X(locked=0));
assign sys_safe_err32 =  ~( ~(~reg_controllable_ndecide & ~reg_i_hlock1 & controllable_hgrant1) | (~controllable_locked) );

// G( (decide=1  *  hlock2=1  *  X(hgrant2=1) )->X(locked=1));
assign sys_safe_err33 =  ~( ~(~reg_controllable_ndecide & reg_i_hlock2 & controllable_hgrant2) | (controllable_locked) );

// G((decide=1  *  hlock2=0  *  X(hgrant2=1))->X(locked=0));
assign sys_safe_err34 =  ~( ~(~reg_controllable_ndecide & ~reg_i_hlock2 & controllable_hgrant2) | (~controllable_locked) );

// G( (decide=1  *  hlock3=1  *  X(hgrant3=1) )->X(locked=1));
assign sys_safe_err35 =  ~( ~(~reg_controllable_ndecide & reg_i_hlock3 & controllable_hgrant3) | (controllable_locked) );

// G((decide=1  *  hlock3=0  *  X(hgrant3=1))->X(locked=0));
assign sys_safe_err36 =  ~( ~(~reg_controllable_ndecide & ~reg_i_hlock3 & controllable_hgrant3) | (~controllable_locked) );

// G( (decide=1  *  hlock4=1  *  X(hgrant4=1) )->X(locked=1));
assign sys_safe_err37 =  ~( ~(~reg_controllable_ndecide & reg_i_hlock4 & controllable_hgrant4) | (controllable_locked) );

// G((decide=1  *  hlock4=0  *  X(hgrant4=1))->X(locked=0));
assign sys_safe_err38 =  ~( ~(~reg_controllable_ndecide & ~reg_i_hlock4 & controllable_hgrant4) | (~controllable_locked) );

// G( (decide=1  *  hlock5=1  *  X(hgrant5=1) )->X(locked=1));
assign sys_safe_err39 =  ~( ~(~reg_controllable_ndecide & reg_i_hlock5 & controllable_hgrant5) | (controllable_locked) );

// G((decide=1  *  hlock5=0  *  X(hgrant5=1))->X(locked=0));
assign sys_safe_err40 =  ~( ~(~reg_controllable_ndecide & ~reg_i_hlock5 & controllable_hgrant5) | (~controllable_locked) );

// G( (decide=1  *  hlock6=1  *  X(hgrant6=1) )->X(locked=1));
assign sys_safe_err41 =  ~( ~(~reg_controllable_ndecide & reg_i_hlock6 & controllable_hgrant6) | (controllable_locked) );

// G((decide=1  *  hlock6=0  *  X(hgrant6=1))->X(locked=0));
assign sys_safe_err42 =  ~( ~(~reg_controllable_ndecide & ~reg_i_hlock6 & controllable_hgrant6) | (~controllable_locked) );

// G( (decide=1  *  hlock7=1  *  X(hgrant7=1) )->X(locked=1));
assign sys_safe_err43 =  ~( ~(~reg_controllable_ndecide & reg_i_hlock7 & controllable_hgrant7) | (controllable_locked) );

// G((decide=1  *  hlock7=0  *  X(hgrant7=1))->X(locked=0));
assign sys_safe_err44 =  ~( ~(~reg_controllable_ndecide & ~reg_i_hlock7 & controllable_hgrant7) | (~controllable_locked) );

// G( (decide=0) -> (  ((hgrant0=0)<->X(hgrant0=0))  ));
assign sys_safe_err45 =  ~( ~(reg_controllable_ndecide) | (reg_controllable_nhgrant0 ^~ controllable_nhgrant0) );

// G( (decide=0) -> (  ((hgrant1=0)<->X(hgrant1=0))  ));
assign sys_safe_err46 =  ~( ~(reg_controllable_ndecide) | (~reg_controllable_hgrant1 ^~ ~controllable_hgrant1) );

// G( (decide=0) -> (  ((hgrant2=0)<->X(hgrant2=0))  ));
assign sys_safe_err47 =  ~( ~(reg_controllable_ndecide) | (~reg_controllable_hgrant2 ^~ ~controllable_hgrant2) );

// G( (decide=0) -> (  ((hgrant3=0)<->X(hgrant3=0))  ));
assign sys_safe_err48 =  ~( ~(reg_controllable_ndecide) | (~reg_controllable_hgrant3 ^~ ~controllable_hgrant3) );

// G( (decide=0) -> (  ((hgrant4=0)<->X(hgrant4=0))  ));
assign sys_safe_err49 =  ~( ~(reg_controllable_ndecide) | (~reg_controllable_hgrant4 ^~ ~controllable_hgrant4) );

// G( (decide=0) -> (  ((hgrant5=0)<->X(hgrant5=0))  ));
assign sys_safe_err50 =  ~( ~(reg_controllable_ndecide) | (~reg_controllable_hgrant5 ^~ ~controllable_hgrant5) );

// G( (decide=0) -> (  ((hgrant6=0)<->X(hgrant6=0))  ));
assign sys_safe_err51 =  ~( ~(reg_controllable_ndecide) | (~reg_controllable_hgrant6 ^~ ~controllable_hgrant6) );

// G( (decide=0) -> (  ((hgrant7=0)<->X(hgrant7=0))  ));
assign sys_safe_err52 =  ~( ~(reg_controllable_ndecide) | (~reg_controllable_hgrant7 ^~ ~controllable_hgrant7) );

// G((decide=0)->(locked=0 <-> X(locked=0)));
assign sys_safe_err53 =  ~( ~(reg_controllable_ndecide) | (~reg_controllable_locked ^~ ~controllable_locked) );

// G(((stateG10_1=1) * (((hgrant1=1)) * (hbusreq1=0)))->FALSE);
assign sys_safe_err54 =  ~( ~(reg_stateG10_1 & (controllable_hgrant1 & ~i_hbusreq1)) | 0 );

// G(((stateG10_2=1) * (((hgrant2=1)) * (hbusreq2=0)))->FALSE);
assign sys_safe_err55 =  ~( ~(reg_stateG10_2 & (controllable_hgrant2 & ~i_hbusreq2)) | 0 );

// G(((stateG10_3=1) * (((hgrant3=1)) * (hbusreq3=0)))->FALSE);
assign sys_safe_err56 =  ~( ~(reg_stateG10_3 & (controllable_hgrant3 & ~i_hbusreq3)) | 0 );

// G(((stateG10_4=1) * (((hgrant4=1)) * (hbusreq4=0)))->FALSE);
assign sys_safe_err57 =  ~( ~(reg_stateG10_4 & (controllable_hgrant4 & ~i_hbusreq4)) | 0 );

// G(((stateG10_5=1) * (((hgrant5=1)) * (hbusreq5=0)))->FALSE);
assign sys_safe_err58 =  ~( ~(reg_stateG10_5 & (controllable_hgrant5 & ~i_hbusreq5)) | 0 );

// G(((stateG10_6=1) * (((hgrant6=1)) * (hbusreq6=0)))->FALSE);
assign sys_safe_err59 =  ~( ~(reg_stateG10_6 & (controllable_hgrant6 & ~i_hbusreq6)) | 0 );

// G(((stateG10_7=1) * (((hgrant7=1)) * (hbusreq7=0)))->FALSE);
assign sys_safe_err60 =  ~( ~(reg_stateG10_7 & (controllable_hgrant7 & ~i_hbusreq7)) | 0 );

// default master
// G((decide=1  *  hbusreq0=0  *  hbusreq1=0  *  hbusreq2=0  *  hbusreq3=0  *  hbusreq4=0  *  hbusreq5=0  *  hbusreq6=0  *  hbusreq7=0) -> X(hgrant0=1));
assign sys_safe_err61 =  ~( ~(~reg_controllable_ndecide & (~reg_i_hbusreq0 & ~reg_i_hbusreq1 & ~reg_i_hbusreq2 & ~reg_i_hbusreq3 & ~reg_i_hbusreq4 & ~reg_i_hbusreq5 & ~reg_i_hbusreq6 & ~reg_i_hbusreq7)) | (~controllable_nhgrant0) );

// collecting together the safety error bits:
assign sys_safe_err = sys_safe_err0 |
                      sys_safe_err1 |
                      sys_safe_err2 |
                      sys_safe_err3 |
                      sys_safe_err4 |
                      sys_safe_err5 |
                      sys_safe_err6 |
                      sys_safe_err7 |
                      sys_safe_err8 |
                      sys_safe_err9 |
                      sys_safe_err10 |
                      sys_safe_err11 |
                      sys_safe_err12 |
                      sys_safe_err13 |
                      sys_safe_err14 |
                      sys_safe_err15 |
                      sys_safe_err16 |
                      sys_safe_err17 |
                      sys_safe_err18 |
                      sys_safe_err19 |
                      sys_safe_err20 |
                      sys_safe_err21 |
                      sys_safe_err22 |
                      sys_safe_err23 |
                      sys_safe_err24 |
                      sys_safe_err25 |
                      sys_safe_err26 |
                      sys_safe_err27 |
                      sys_safe_err28 |
                      sys_safe_err29 |
                      sys_safe_err30 |
                      sys_safe_err31 |
                      sys_safe_err32 |
                      sys_safe_err33 |
                      sys_safe_err34 |
                      sys_safe_err35 |
                      sys_safe_err36 |
                      sys_safe_err37 |
                      sys_safe_err38 |
                      sys_safe_err39 |
                      sys_safe_err40 |
                      sys_safe_err41 |
                      sys_safe_err42 |
                      sys_safe_err43 |
                      sys_safe_err44 |
                      sys_safe_err45 |
                      sys_safe_err46 |
                      sys_safe_err47 |
                      sys_safe_err48 |
                      sys_safe_err49 |
                      sys_safe_err50 |
                      sys_safe_err51 |
                      sys_safe_err52 |
                      sys_safe_err53 |
                      sys_safe_err54 |
                      sys_safe_err55 |
                      sys_safe_err56 |
                      sys_safe_err57 |
                      sys_safe_err58 |
                      sys_safe_err59 |
                      sys_safe_err60 |
                      sys_safe_err61;

// =============================================================
//                          ENV_FAIRNESS:
// =============================================================
// Assumption 1: 
// G(F(stateA1=0));
assign env_fair0 =  ~reg_stateA1;

// Assumption 2:
// G(F(hready=1));
assign env_fair1 =  i_hready;


// =============================================================
//                          SYS_FAIRNESS:
// =============================================================
// Guarantee 2:
// G(F(stateG2=0));
assign sys_fair0 = ~reg_stateG2;

// Guarantee 3:
// G(F((stateG3_0=0)  *  (stateG3_1=0)  *  (stateG3_2=0)));
assign sys_fair1 =  (~reg_stateG3_0 & ~reg_stateG3_1 & ~reg_stateG3_2);

// G(F(((hmaster0=0) * (hmaster1=0) * (hmaster2=0))  |  hbusreq0=0));
assign sys_fair2 =  ( ~(controllable_hmaster0) & ~(controllable_hmaster1) & ~(controllable_hmaster2) ) | ~i_hbusreq0;

// G(F(((hmaster0=1) * (hmaster1=0) * (hmaster2=0))  |  hbusreq1=0));
assign sys_fair3 =  ( controllable_hmaster0 & ~(controllable_hmaster1) & ~(controllable_hmaster2) ) | ~i_hbusreq1;

// G(F(((hmaster0=0) * (hmaster1=1) * (hmaster2=0))  |  hbusreq2=0));
assign sys_fair4 =  ( ~(controllable_hmaster0) & controllable_hmaster1 & ~(controllable_hmaster2) ) | ~i_hbusreq2;

// G(F(((hmaster0=1) * (hmaster1=1) * (hmaster2=0))  |  hbusreq3=0));
assign sys_fair5 =  ( controllable_hmaster0 & controllable_hmaster1 & ~(controllable_hmaster2) ) | ~i_hbusreq3;

// G(F(((hmaster0=0) * (hmaster1=0) * (hmaster2=1))  |  hbusreq4=0));
assign sys_fair6 =  ( ~(controllable_hmaster0) & ~(controllable_hmaster1) & controllable_hmaster2 ) | ~i_hbusreq4;

// G(F(((hmaster0=1) * (hmaster1=0) * (hmaster2=1))  |  hbusreq5=0));
assign sys_fair7 =  ( controllable_hmaster0 & ~(controllable_hmaster1) & controllable_hmaster2 ) | ~i_hbusreq5;

// G(F(((hmaster0=0) * (hmaster1=1) * (hmaster2=1))  |  hbusreq6=0));
assign sys_fair8 =  ( ~(controllable_hmaster0) & controllable_hmaster1 & controllable_hmaster2 ) | ~i_hbusreq6;

// G(F(((hmaster0=1) * (hmaster1=1) * (hmaster2=1))  |  hbusreq7=0));
assign sys_fair9 =  ( controllable_hmaster0 & controllable_hmaster1 & controllable_hmaster2 ) | ~i_hbusreq7;

assign fair_err = (fair_cnt >= 5'b10000);

// computing the error output bit:
assign o_err = ~env_safe_err & ~env_safe_err_happened & (sys_safe_err | fair_err);

initial
 begin
  reg_i_hready = 0;
  reg_i_hbusreq0 = 0;
  reg_i_hlock0 = 0;
  reg_i_hbusreq1 = 0;
  reg_i_hlock1 = 0;
  reg_i_hbusreq2 = 0;
  reg_i_hlock2 = 0;
  reg_i_hbusreq3 = 0;
  reg_i_hlock3 = 0;
  reg_i_hbusreq4 = 0;
  reg_i_hlock4 = 0;
  reg_i_hbusreq5 = 0;
  reg_i_hlock5 = 0;
  reg_i_hbusreq6 = 0;
  reg_i_hlock6 = 0;
  reg_i_hbusreq7 = 0;
  reg_i_hlock7 = 0;
  reg_controllable_hmaster0 = 0;
  reg_controllable_hmaster1 = 0;
  reg_controllable_hmaster2 = 0;
  reg_controllable_hmastlock = 0;
  reg_controllable_nstart = 0;
  reg_controllable_ndecide = 0;
  reg_controllable_locked = 0;
  reg_controllable_nhgrant0 = 0;
  reg_controllable_hgrant1 = 0;
  reg_controllable_hgrant2 = 0;
  reg_controllable_hgrant3 = 0;
  reg_controllable_hgrant4 = 0;
  reg_controllable_hgrant5 = 0;
  reg_controllable_hgrant6 = 0;
  reg_controllable_hgrant7 = 0;
  reg_controllable_busreq = 0;
  reg_stateA1 = 0;
  reg_stateG2 = 0;
  reg_stateG3_0 = 0;
  reg_stateG3_1 = 0;
  reg_stateG3_2 = 0;
  reg_stateG10_1 = 0;
  reg_stateG10_2 = 0;
  reg_stateG10_3 = 0;
  reg_stateG10_4 = 0;
  reg_stateG10_5 = 0;
  reg_stateG10_6 = 0;
  reg_stateG10_7 = 0;
  env_safe_err_happened = 0;
  next_env_fair = 0;
  fair_cnt = 0;
  next_sys_fair = 0;
 end


always @(posedge i_clk)
 begin
   // We remember if an environment error occurred:
   env_safe_err_happened = env_safe_err_happened | env_safe_err;

   // Updating the fairness counters: 
   if((next_sys_fair == 0) & sys_fair0)
    begin
      next_sys_fair = 1;
      next_env_fair = 0;
      fair_cnt = 0;
    end
   else if((next_sys_fair == 1) & sys_fair1)
    begin
      next_sys_fair = 2;
      next_env_fair = 0;
      fair_cnt = 0;
    end
   else if((next_sys_fair == 2) & sys_fair2)
    begin
      next_sys_fair = 3;
      next_env_fair = 0;
      fair_cnt = 0;
    end
   else if((next_sys_fair == 3) & sys_fair3)
    begin
      next_sys_fair = 4;
      next_env_fair = 0;
      fair_cnt = 0;
    end
   else if((next_sys_fair == 4) & sys_fair4)
    begin
      next_sys_fair = 5;
      next_env_fair = 0;
      fair_cnt = 0;
    end
   else if((next_sys_fair == 5) & sys_fair5)
    begin
      next_sys_fair = 6;
      next_env_fair = 0;
      fair_cnt = 0;
    end
   else if((next_sys_fair == 6) & sys_fair6)
    begin
      next_sys_fair = 7;
      next_env_fair = 0;
      fair_cnt = 0;
    end
   else if((next_sys_fair == 7) & sys_fair7)
    begin
      next_sys_fair = 8;
      next_env_fair = 0;
      fair_cnt = 0;
    end
   else if((next_sys_fair == 8) & sys_fair8)
    begin
      next_sys_fair = 9;
      next_env_fair = 0;
      fair_cnt = 0;
    end
   else if((next_sys_fair == 9) & sys_fair9)
    begin
      next_sys_fair = 0;
      next_env_fair = 0;
      fair_cnt = 0;
    end
   else if(~next_env_fair & env_fair0)
    begin
      next_env_fair = 1;
    end
   else if(next_env_fair & env_fair1)
    begin
      next_env_fair = 0;
      fair_cnt = fair_cnt + 1;
    end

   // Updating the automata: 
   // Automaton A1: 
   if(~reg_stateA1 & controllable_hmastlock & ~i_hburst0 & ~i_hburst1)
    begin
      reg_stateA1 = 1'b1;
    end
   else if(reg_stateA1 & ~controllable_busreq)
    begin
      reg_stateA1 = 1'b0;
    end

   // Automaton G2: 
   if(~reg_stateG2)
    begin
      if(controllable_hmastlock & ~controllable_nstart & ~i_hburst0 & ~i_hburst1)
       begin
         reg_stateG2 = 1'b1;
       end
    end
   else // if(reg_stateG2)
    begin
      if(~controllable_busreq)
       begin
         reg_stateG2 = 1'b0;
       end
    end

   // Automaton G3: 
   if(~reg_stateG3_0 & ~reg_stateG3_1 & ~reg_stateG3_2 & controllable_hmastlock & ~controllable_nstart &  ~i_hburst0 & i_hburst1 & ~i_hready)
    begin
      reg_stateG3_0 = 1'b1;
      reg_stateG3_1 = 1'b0;
      reg_stateG3_2 = 1'b0;
    end
   else if(~reg_stateG3_0 & ~reg_stateG3_1 & ~reg_stateG3_2 & controllable_hmastlock & ~controllable_nstart &  ~i_hburst0 & i_hburst1 & i_hready)
    begin
      reg_stateG3_0 = 1'b0;
      reg_stateG3_1 = 1'b1;
      reg_stateG3_2 = 1'b0;
    end
   else if(reg_stateG3_0 & ~reg_stateG3_1 & ~reg_stateG3_2 & i_hready)
    begin
      reg_stateG3_0 = 1'b0;
      reg_stateG3_1 = 1'b1;
      reg_stateG3_2 = 1'b0;
    end
   else if(~reg_stateG3_0 & reg_stateG3_1 & ~reg_stateG3_2 & i_hready)
    begin
      reg_stateG3_0 = 1'b1;
      reg_stateG3_1 = 1'b1;
      reg_stateG3_2 = 1'b0;
    end
   else if(reg_stateG3_0 & reg_stateG3_1 & ~reg_stateG3_2 & i_hready)
    begin
      reg_stateG3_0 = 1'b0;
      reg_stateG3_1 = 1'b0;
      reg_stateG3_2 = 1'b1;
    end
   else if(~reg_stateG3_0 & ~reg_stateG3_1 & reg_stateG3_2 & i_hready)
    begin
      reg_stateG3_0 = 1'b0;
      reg_stateG3_1 = 1'b0;
      reg_stateG3_2 = 1'b0;
    end

   // Automaton G10_1: 
   if(~reg_stateG10_1 & ~controllable_hgrant1 & ~i_hbusreq1)
    begin
      reg_stateG10_1 = 1'b1;
    end
   else if(reg_stateG10_1 & i_hbusreq1)
    begin
      reg_stateG10_1 = 1'b0;
    end

   // Automaton G10_2: 
   if(~reg_stateG10_2 & ~controllable_hgrant2 & ~i_hbusreq2)
    begin
      reg_stateG10_2 = 1'b1;
    end
   else if(reg_stateG10_2 & i_hbusreq2)
    begin
      reg_stateG10_2 = 1'b0;
    end

   // Automaton G10_3: 
   if(~reg_stateG10_3 & ~controllable_hgrant3 & ~i_hbusreq3)
    begin
      reg_stateG10_3 = 1'b1;
    end
   else if(reg_stateG10_3 & i_hbusreq3)
    begin
      reg_stateG10_3 = 1'b0;
    end

   // Automaton G10_4: 
   if(~reg_stateG10_4 & ~controllable_hgrant4 & ~i_hbusreq4)
    begin
      reg_stateG10_4 = 1'b1;
    end
   else if(reg_stateG10_4 & i_hbusreq4)
    begin
      reg_stateG10_4 = 1'b0;
    end

   // Automaton G10_5: 
   if(~reg_stateG10_5 & ~controllable_hgrant5 & ~i_hbusreq5)
    begin
      reg_stateG10_5 = 1'b1;
    end
   else if(reg_stateG10_5 & i_hbusreq5)
    begin
      reg_stateG10_5 = 1'b0;
    end

   // Automaton G10_6: 
   if(~reg_stateG10_6 & ~controllable_hgrant6 & ~i_hbusreq6)
    begin
      reg_stateG10_6 = 1'b1;
    end
   else if(reg_stateG10_6 & i_hbusreq6)
    begin
      reg_stateG10_6 = 1'b0;
    end

   // Automaton G10_7: 
   if(~reg_stateG10_7 & ~controllable_hgrant7 & ~i_hbusreq7)
    begin
      reg_stateG10_7 = 1'b1;
    end
   else if(reg_stateG10_7 & i_hbusreq7)
    begin
      reg_stateG10_7 = 1'b0;
    end

   // Latching the previous input:
   reg_i_hready =  i_hready;
   reg_i_hbusreq0 =  i_hbusreq0;
   reg_i_hlock0 =  i_hlock0;
   reg_i_hbusreq1 =  i_hbusreq1;
   reg_i_hlock1 =  i_hlock1;
   reg_i_hbusreq2 =  i_hbusreq2;
   reg_i_hlock2 =  i_hlock2;
   reg_i_hbusreq3 =  i_hbusreq3;
   reg_i_hlock3 =  i_hlock3;
   reg_i_hbusreq4 =  i_hbusreq4;
   reg_i_hlock4 =  i_hlock4;
   reg_i_hbusreq5 =  i_hbusreq5;
   reg_i_hlock5 =  i_hlock5;
   reg_i_hbusreq6 =  i_hbusreq6;
   reg_i_hlock6 =  i_hlock6;
   reg_i_hbusreq7 =  i_hbusreq7;
   reg_i_hlock7 =  i_hlock7;
   reg_controllable_hmaster0 =  controllable_hmaster0;
   reg_controllable_hmaster1 =  controllable_hmaster1;
   reg_controllable_hmaster2 =  controllable_hmaster2;
   reg_controllable_hmastlock =  controllable_hmastlock;
   reg_controllable_nstart =  controllable_nstart;
   reg_controllable_ndecide =  controllable_ndecide;
   reg_controllable_locked =  controllable_locked;
   reg_controllable_nhgrant0 =  controllable_nhgrant0;
   reg_controllable_hgrant1 =  controllable_hgrant1;
   reg_controllable_hgrant2 =  controllable_hgrant2;
   reg_controllable_hgrant3 =  controllable_hgrant3;
   reg_controllable_hgrant4 =  controllable_hgrant4;
   reg_controllable_hgrant5 =  controllable_hgrant5;
   reg_controllable_hgrant6 =  controllable_hgrant6;
   reg_controllable_hgrant7 =  controllable_hgrant7;
   reg_controllable_busreq =  controllable_busreq;

 end
endmodule

-------------------------------
