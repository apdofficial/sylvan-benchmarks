aag 856 29 49 1 778
2
4
6
8
10
12
14
16
18
20
22
24
26
28
30
32
34
36
38
40
42
44
46
48
50
52
54
56
58
60 1
62 10
64 54
66 14
68 1107
70 52
72 18
74 1191
76 22
78 1215
80 6
82 46
84 28
86 1235
88 30
90 26
92 8
94 38
96 24
98 1265
100 1287
102 40
104 20
106 58
108 1309
110 2
112 42
114 1333
116 16
118 1511
120 1517
122 1523
124 1529
126 1535
128 1629
130 1635
132 1641
134 1647
136 1669
138 44
140 12
142 32
144 185
146 1691
148 48
150 4
152 1713
154 50
156 56
922
158 39 12
160 41 16
162 161 159
164 43 20
166 165 162
168 45 24
170 169 166
172 49 26
174 173 170
176 51 28
178 177 174
180 145 60
182 181 60
184 183 178
186 57 55
188 186 53
190 38 31
192 39 30
194 193 191
196 195 188
198 56 55
200 198 53
202 40 31
204 41 30
206 205 203
208 207 200
210 209 197
212 57 54
214 212 53
216 42 31
218 43 30
220 219 217
222 221 214
224 223 210
226 56 54
228 226 53
230 44 31
232 45 30
234 233 231
236 235 228
238 237 224
240 186 52
242 48 31
244 49 30
246 245 243
248 247 240
250 249 238
252 198 52
254 50 31
256 51 30
258 257 255
260 259 252
262 261 250
264 143 60
266 142 60
268 265 60
270 269 9
272 271 262
274 99 60
276 98 60
278 275 60
280 276 9
282 281 272
284 75 60
286 74 60
288 285 60
290 79 60
292 78 60
294 291 60
296 295 289
298 87 60
300 86 60
302 299 60
304 303 296
306 305 9
308 307 282
310 111 60
312 110 60
314 311 60
316 312 188
318 315 189
320 319 317
322 321 266
324 323 308
326 151 60
328 150 60
330 327 60
332 331 200
334 328 201
336 335 333
338 337 266
340 339 324
342 63 60
344 62 60
346 343 60
348 347 214
350 344 215
352 351 349
354 353 266
356 355 340
358 67 60
360 66 60
362 359 60
364 363 228
366 360 229
368 367 365
370 369 266
372 371 356
374 73 60
376 72 60
378 375 60
380 379 240
382 376 241
384 383 381
386 385 266
388 387 372
390 77 60
392 76 60
394 391 60
396 395 252
398 392 253
400 399 397
402 401 266
404 403 388
406 81 60
408 80 60
410 407 60
412 408 59
414 411 58
416 415 413
418 417 266
420 419 404
422 157 60
424 156 60
426 423 60
428 65 60
430 64 60
432 429 60
434 433 427
436 71 60
438 70 60
440 437 60
442 441 434
444 443 188
446 442 189
448 447 445
450 449 8
452 451 420
454 433 424
456 454 441
458 457 200
460 456 201
462 461 459
464 463 8
466 465 452
468 430 427
470 468 441
472 471 214
474 470 215
476 475 473
478 477 8
480 479 466
482 430 424
484 482 441
486 485 228
488 484 229
490 489 487
492 491 8
494 493 480
496 438 434
498 497 240
500 496 241
502 501 499
504 503 8
506 505 494
508 454 438
510 509 252
512 508 253
514 513 511
516 515 8
518 517 506
520 107 60
522 106 60
524 521 60
526 525 58
528 522 59
530 529 527
532 531 8
534 533 518
536 83 60
538 82 60
540 537 60
542 141 60
544 140 60
546 543 60
548 544 541
550 548 3
552 550 7
554 553 534
556 547 541
558 556 3
560 558 6
562 561 554
564 117 60
566 116 60
568 565 60
570 566 541
572 570 4
574 572 7
576 575 562
578 569 541
580 578 4
582 580 6
584 583 576
586 105 60
588 104 60
590 587 60
592 588 541
594 592 10
596 594 7
598 597 584
600 591 541
602 600 10
604 602 6
606 605 598
608 97 60
610 96 60
612 609 60
614 610 541
616 614 14
618 616 7
620 619 606
622 613 541
624 622 14
626 624 6
628 627 620
630 91 60
632 90 60
634 631 60
636 632 541
638 636 18
640 638 7
642 641 628
644 635 541
646 644 18
648 646 6
650 649 642
652 85 60
654 84 60
656 653 60
658 654 541
660 658 22
662 660 7
664 663 650
666 657 541
668 666 22
670 668 6
672 671 664
674 315 2
676 312 3
678 677 675
680 679 538
682 681 672
684 328 5
686 331 4
688 687 685
690 689 538
692 691 682
694 344 11
696 347 10
698 697 695
700 699 538
702 701 692
704 360 15
706 363 14
708 707 705
710 709 538
712 711 702
714 376 19
716 379 18
718 717 715
720 719 538
722 721 712
724 392 23
726 395 22
728 727 725
730 729 538
732 731 722
734 408 7
736 411 6
738 737 735
740 739 538
742 741 732
744 101 60
746 100 60
748 745 60
750 41 4
752 750 746
754 753 742
756 109 60
758 108 60
760 757 60
762 43 10
764 762 758
766 765 754
768 137 60
770 136 60
772 769 60
774 45 14
776 774 770
778 777 766
780 147 60
782 146 60
784 781 60
786 49 18
788 786 782
790 789 778
792 153 60
794 152 60
796 793 60
798 51 22
800 798 794
802 801 790
804 95 60
806 805 60
808 103 60
810 809 60
812 811 807
814 113 60
816 815 60
818 817 812
820 139 60
822 821 60
824 823 818
826 149 60
828 827 60
830 829 824
832 155 60
834 833 60
836 835 830
838 836 541
840 838 2
842 841 802
844 127 60
846 126 60
848 845 60
850 125 60
852 124 60
854 851 60
856 123 60
858 122 60
860 857 60
862 121 60
864 120 60
866 863 60
868 119 60
870 118 60
872 869 60
874 867 861
876 875 860
878 876 866
880 879 855
882 881 854
884 882 878
886 885 849
888 887 848
890 888 884
892 866 861
894 867 858
896 895 893
898 878 855
900 879 852
902 901 899
904 884 849
906 885 846
908 907 905
910 871 866
912 910 896
914 912 902
916 914 908
918 917 891
920 918 842
922 921 184
924 129 60
926 128 60
928 925 60
930 131 60
932 130 60
934 931 60
936 133 60
938 132 60
940 937 60
942 134 60
944 933 927
946 944 939
948 946 943
950 948 279
952 933 928
954 952 939
956 954 943
958 956 304
960 934 927
962 960 939
964 962 943
966 189 38
968 967 964
970 934 928
972 970 939
974 972 943
976 201 40
978 977 974
980 944 940
982 980 943
984 215 42
986 985 982
988 952 940
990 988 943
992 229 44
994 993 990
996 960 940
998 996 943
1000 241 48
1002 1001 998
1004 970 940
1006 1004 943
1008 253 50
1010 1009 1006
1012 69 60
1014 68 60
1016 1013 60
1018 115 60
1020 114 60
1022 1019 60
1024 1023 1017
1026 1014 32
1028 958 951
1030 1029 951
1032 959 951
1034 1032 968
1036 1035 1030
1038 1032 969
1040 1038 978
1042 1041 1036
1044 1038 979
1046 1044 986
1048 1047 1042
1050 1044 987
1052 1050 994
1054 1053 1048
1056 1050 995
1058 1056 1002
1060 1059 1054
1062 1056 1003
1064 1062 1010
1066 1065 1060
1068 1062 1011
1070 1068 1024
1072 1071 1066
1074 1068 1025
1076 1074 1026
1078 1077 1072
1080 1027 1014
1082 1080 1025
1084 1083 1025
1086 1085 1011
1088 1086 1003
1090 1088 995
1092 1090 987
1094 1092 979
1096 1094 969
1098 1096 959
1100 1098 951
1102 1100 1079
1104 1078 1014
1106 1105 1103
1108 304 58
1110 1108 9
1112 1110 37
1114 1112 34
1116 1114 33
1118 1114 32
1120 295 286
1122 1120 303
1124 1122 32
1126 292 289
1128 1126 303
1130 1128 32
1132 292 286
1134 1132 303
1136 1134 32
1138 300 296
1140 1138 32
1142 1118 1117
1144 1143 1117
1146 1119 1117
1148 1146 1124
1150 1149 1144
1152 1146 1125
1154 1152 1130
1156 1155 1150
1158 1152 1131
1160 1158 1136
1162 1161 1156
1164 1158 1137
1166 1164 1140
1168 1167 1162
1170 1141 286
1172 1170 1137
1174 1172 1131
1176 1175 1131
1178 1177 1125
1180 1178 1119
1182 1180 1117
1184 1183 1117
1186 1185 1169
1188 1168 286
1190 1189 1187
1192 1141 292
1194 1192 1137
1196 1194 1131
1198 1197 1131
1200 1199 1125
1202 1201 1125
1204 1203 1119
1206 1205 1119
1208 1207 1117
1210 1208 1169
1212 1168 292
1214 1213 1211
1216 1141 300
1218 1216 1137
1220 1219 1137
1222 1221 1131
1224 1222 1125
1226 1224 1119
1228 1226 1117
1230 1228 1169
1232 1168 300
1234 1233 1231
1236 58 9
1238 1236 37
1240 1238 35
1242 1240 279
1244 276 31
1246 1245 1243
1248 1241 276
1250 1249 1241
1252 276 30
1254 1251 279
1256 1252 276
1258 1257 1255
1260 1259 1247
1262 1246 276
1264 1263 1261
1266 749 5
1268 1266 41
1270 746 40
1272 1270 1269
1274 1273 1269
1276 1271 746
1278 1276 1269
1280 1279 1269
1282 1281 1275
1284 1274 746
1286 1285 1283
1288 761 11
1290 1288 43
1292 758 42
1294 1292 1291
1296 1295 1291
1298 1293 758
1300 1298 1291
1302 1301 1291
1304 1303 1297
1306 1296 758
1308 1307 1305
1310 1023 58
1312 1310 37
1314 1312 35
1316 1020 31
1318 1316 1315
1320 1319 1315
1322 1317 1020
1324 1322 1315
1326 1325 1315
1328 1327 1321
1330 1320 1020
1332 1331 1329
1334 1077 1066
1336 1026 873
1338 1027 870
1340 1339 1337
1342 1024 870
1344 1341 1025
1346 1345 1343
1348 1347 1011
1350 1348 1003
1352 1350 995
1354 1352 987
1356 1354 979
1358 1356 969
1360 1358 959
1362 1360 951
1364 870 867
1366 871 864
1368 1367 1365
1370 1369 1026
1372 1027 864
1374 1373 1371
1376 1024 864
1378 1375 1025
1380 1379 1377
1382 1381 1011
1384 1382 1003
1386 1384 995
1388 1386 987
1390 1388 979
1392 1390 969
1394 1392 959
1396 1394 951
1398 870 864
1400 1398 861
1402 1399 858
1404 1403 1401
1406 1405 1026
1408 1027 858
1410 1409 1407
1412 1024 858
1414 1411 1025
1416 1415 1413
1418 1417 1011
1420 1418 1003
1422 1420 995
1424 1422 987
1426 1424 979
1428 1426 969
1430 1428 959
1432 1430 951
1434 1398 858
1436 1434 855
1438 1435 852
1440 1439 1437
1442 1441 1026
1444 1027 852
1446 1445 1443
1448 1024 852
1450 1447 1025
1452 1451 1449
1454 1453 1011
1456 1454 1003
1458 1456 995
1460 1458 987
1462 1460 979
1464 1462 969
1466 1464 959
1468 1466 951
1470 1434 852
1472 1470 849
1474 1471 846
1476 1475 1473
1478 1477 1026
1480 1027 846
1482 1481 1479
1484 1024 846
1486 1483 1025
1488 1487 1485
1490 1489 1011
1492 1490 1003
1494 1492 995
1496 1494 987
1498 1496 979
1500 1498 969
1502 1500 959
1504 1502 951
1506 1362 1335
1508 1334 870
1510 1509 1507
1512 1396 1335
1514 1334 864
1516 1515 1513
1518 1432 1335
1520 1334 858
1522 1521 1519
1524 1468 1335
1526 1334 852
1528 1527 1525
1530 1504 1335
1532 1334 846
1534 1533 1531
1536 1011 926
1538 1536 1003
1540 1539 1003
1542 1541 995
1544 1542 987
1546 1545 987
1548 1547 979
1550 1548 969
1552 1551 969
1554 1553 959
1556 1554 951
1558 1557 951
1560 1011 932
1562 1560 1003
1564 1563 1003
1566 1565 995
1568 1567 995
1570 1569 987
1572 1570 979
1574 1572 969
1576 1575 969
1578 1577 959
1580 1579 959
1582 1581 951
1584 1011 938
1586 1584 1003
1588 1587 1003
1590 1589 995
1592 1591 995
1594 1593 987
1596 1595 987
1598 1597 979
1600 1599 979
1602 1601 969
1604 1602 959
1606 1604 951
1608 1011 942
1610 1608 1003
1612 1610 995
1614 1612 987
1616 1614 979
1618 1616 969
1620 1618 959
1622 1620 951
1624 1559 1067
1626 1066 926
1628 1627 1625
1630 1582 1067
1632 1066 932
1634 1633 1631
1636 1606 1067
1638 1066 938
1640 1639 1637
1642 1622 1067
1644 1066 942
1646 1645 1643
1648 773 15
1650 1648 45
1652 770 44
1654 1652 1651
1656 1655 1651
1658 1653 770
1660 1658 1651
1662 1661 1651
1664 1663 1657
1666 1656 770
1668 1667 1665
1670 785 19
1672 1670 49
1674 782 48
1676 1674 1673
1678 1677 1673
1680 1675 782
1682 1680 1673
1684 1683 1673
1686 1685 1679
1688 1678 782
1690 1689 1687
1692 797 23
1694 1692 51
1696 794 50
1698 1696 1695
1700 1699 1695
1702 1697 794
1704 1702 1695
1706 1705 1695
1708 1707 1701
1710 1700 794
1712 1711 1709
i0 controllable_nhgrant0
i1 controllable_hgrant1
i2 controllable_locked
i3 controllable_nstart
i4 controllable_hgrant2
i5 i_hlock0
i6 controllable_hgrant3
i7 i_hlock1
i8 controllable_hgrant4
i9 i_hlock2
i10 controllable_hgrant5
i11 i_hlock3
i12 i_hlock4
i13 i_hlock5
i14 controllable_busreq
i15 i_hready
i16 i_hburst1
i17 i_hburst0
i18 i_hbusreq0
i19 i_hbusreq1
i20 i_hbusreq2
i21 i_hbusreq3
i22 controllable_ndecide
i23 i_hbusreq4
i24 i_hbusreq5
i25 controllable_hmaster2
i26 controllable_hmaster1
i27 controllable_hmaster0
i28 controllable_hmastlock
l0 n61
l1 reg_controllable_hgrant2_out
l2 reg_controllable_hmaster1_out
l3 reg_controllable_hgrant3_out
l4 next_env_fair_out
l5 reg_controllable_hmaster2_out
l6 reg_controllable_hgrant4_out
l7 reg_stateG3_0_out
l8 reg_controllable_hgrant5_out
l9 reg_stateG3_1_out
l10 reg_controllable_locked_out
l11 reg_controllable_ndecide_out
l12 reg_i_hlock5_out
l13 reg_stateG3_2_out
l14 reg_controllable_busreq_out
l15 reg_i_hlock4_out
l16 reg_controllable_nstart_out
l17 reg_i_hbusreq0_out
l18 reg_i_hlock3_out
l19 reg_stateG2_out
l20 reg_stateG10_1_out
l21 reg_i_hbusreq1_out
l22 reg_i_hlock2_out
l23 reg_controllable_hmastlock_out
l24 reg_stateG10_2_out
l25 reg_controllable_nhgrant0_out
l26 reg_i_hbusreq2_out
l27 reg_stateA1_out
l28 reg_i_hlock1_out
l29 fair_cnt<0>_out
l30 fair_cnt<1>_out
l31 fair_cnt<2>_out
l32 fair_cnt<3>_out
l33 fair_cnt<4>_out
l34 next_sys_fair<0>_out
l35 next_sys_fair<1>_out
l36 next_sys_fair<2>_out
l37 next_sys_fair<3>_out
l38 reg_stateG10_3_out
l39 reg_i_hbusreq3_out
l40 reg_i_hlock0_out
l41 reg_i_hready_out
l42 env_safe_err_happened_out
l43 reg_stateG10_4_out
l44 reg_i_hbusreq4_out
l45 reg_controllable_hgrant1_out
l46 reg_stateG10_5_out
l47 reg_i_hbusreq5_out
l48 reg_controllable_hmaster0_out
o0 o_err
c
amba_6_new_30
This file was written by ABC on Tue May  5 16:50:26 2015
For information about AIGER format, refer to http://fmv.jku.at/aiger
-------------------------------
This AIGER file has been created by the following sequence of commands:
> vl2mv amba6c30.v   ---gives--> amba6c30.mv
> abc -c "read_blif_mv amba6c30.mv; write_aiger -s amba6c30n.aig"   ---gives--> amba6c30n.aig
> aigtoaig amba6c30n.aig amba6c30n.aag   ---gives--> amba6c30n.aag (this file)
Content of amba6c30.v:
module amba_6_new_30(
        o_err,
        i_clk,
        i_hready,
        i_hbusreq0,
        i_hlock0,
        i_hbusreq1,
        i_hlock1,
        i_hbusreq2,
        i_hlock2,
        i_hbusreq3,
        i_hlock3,
        i_hbusreq4,
        i_hlock4,
        i_hbusreq5,
        i_hlock5,
        i_hburst0,
        i_hburst1,
        controllable_hmaster0,
        controllable_hmaster1,
        controllable_hmaster2,
        controllable_hmastlock,
        controllable_nstart,
        controllable_ndecide,
        controllable_locked,
        controllable_nhgrant0,
        controllable_hgrant1,
        controllable_hgrant2,
        controllable_hgrant3,
        controllable_hgrant4,
        controllable_hgrant5,
        controllable_busreq);

input i_clk;
input i_hready;
input i_hbusreq0;
input i_hlock0;
input i_hbusreq1;
input i_hlock1;
input i_hbusreq2;
input i_hlock2;
input i_hbusreq3;
input i_hlock3;
input i_hbusreq4;
input i_hlock4;
input i_hbusreq5;
input i_hlock5;
input i_hburst0;
input i_hburst1;
input controllable_hmaster0;
input controllable_hmaster1;
input controllable_hmaster2;
input controllable_hmastlock;
input controllable_nstart;
input controllable_ndecide;
input controllable_locked;
input controllable_nhgrant0;
input controllable_hgrant1;
input controllable_hgrant2;
input controllable_hgrant3;
input controllable_hgrant4;
input controllable_hgrant5;
input controllable_busreq;
output o_err;

reg reg_i_hready;
reg reg_i_hbusreq0;
reg reg_i_hlock0;
reg reg_i_hbusreq1;
reg reg_i_hlock1;
reg reg_i_hbusreq2;
reg reg_i_hlock2;
reg reg_i_hbusreq3;
reg reg_i_hlock3;
reg reg_i_hbusreq4;
reg reg_i_hlock4;
reg reg_i_hbusreq5;
reg reg_i_hlock5;
reg reg_controllable_hmaster0;
reg reg_controllable_hmaster1;
reg reg_controllable_hmaster2;
reg reg_controllable_hmastlock;
reg reg_controllable_nstart;
reg reg_controllable_ndecide;
reg reg_controllable_locked;
reg reg_controllable_nhgrant0;
reg reg_controllable_hgrant1;
reg reg_controllable_hgrant2;
reg reg_controllable_hgrant3;
reg reg_controllable_hgrant4;
reg reg_controllable_hgrant5;
reg reg_controllable_busreq;
reg reg_stateA1;
reg reg_stateG2;
reg reg_stateG3_0;
reg reg_stateG3_1;
reg reg_stateG3_2;
reg reg_stateG10_1;
reg reg_stateG10_2;
reg reg_stateG10_3;
reg reg_stateG10_4;
reg reg_stateG10_5;
reg env_safe_err_happened;
reg next_env_fair;
reg [4:0] fair_cnt;
reg [3:0] next_sys_fair;

wire env_safe_err0;
wire env_safe_err1;
wire env_safe_err2;
wire env_safe_err3;
wire env_safe_err4;
wire env_safe_err5;
wire env_safe_err;

wire sys_safe_err0;
wire sys_safe_err1;
wire sys_safe_err2;
wire sys_safe_err3;
wire sys_safe_err4;
wire sys_safe_err5;
wire sys_safe_err6;
wire sys_safe_err7;
wire sys_safe_err8;
wire sys_safe_err9;
wire sys_safe_err10;
wire sys_safe_err11;
wire sys_safe_err12;
wire sys_safe_err13;
wire sys_safe_err14;
wire sys_safe_err15;
wire sys_safe_err16;
wire sys_safe_err17;
wire sys_safe_err18;
wire sys_safe_err19;
wire sys_safe_err20;
wire sys_safe_err21;
wire sys_safe_err22;
wire sys_safe_err23;
wire sys_safe_err24;
wire sys_safe_err25;
wire sys_safe_err26;
wire sys_safe_err27;
wire sys_safe_err28;
wire sys_safe_err29;
wire sys_safe_err30;
wire sys_safe_err31;
wire sys_safe_err32;
wire sys_safe_err33;
wire sys_safe_err34;
wire sys_safe_err35;
wire sys_safe_err36;
wire sys_safe_err37;
wire sys_safe_err38;
wire sys_safe_err39;
wire sys_safe_err40;
wire sys_safe_err41;
wire sys_safe_err42;
wire sys_safe_err43;
wire sys_safe_err44;
wire sys_safe_err45;
wire sys_safe_err46;
wire sys_safe_err47;
wire sys_safe_err;

wire env_fair0;
wire env_fair1;

wire sys_fair0;
wire sys_fair1;
wire sys_fair2;
wire sys_fair3;
wire sys_fair4;
wire sys_fair5;
wire sys_fair6;
wire sys_fair7;
wire fair_err;
wire o_err;

// =============================================================
//                        ENV_TRANSITION:
// =============================================================
// Assumption 3:
// G( hlock0=1 -> hbusreq0=1 );
assign env_safe_err0 =  ~(~ i_hlock0 | i_hbusreq0);

// Assumption 3:
// G( hlock1=1 -> hbusreq1=1 );
assign env_safe_err1 =  ~(~ i_hlock1 | i_hbusreq1);

// Assumption 3:
// G( hlock2=1 -> hbusreq2=1 );
assign env_safe_err2 =  ~(~ i_hlock2 | i_hbusreq2);

// Assumption 3:
// G( hlock3=1 -> hbusreq3=1 );
assign env_safe_err3 =  ~(~ i_hlock3 | i_hbusreq3);

// Assumption 3:
// G( hlock4=1 -> hbusreq4=1 );
assign env_safe_err4 =  ~(~ i_hlock4 | i_hbusreq4);

// Assumption 3:
// G( hlock5=1 -> hbusreq5=1 );
assign env_safe_err5 =  ~(~ i_hlock5 | i_hbusreq5);

// collecting together the safety error bits:
assign env_safe_err = env_safe_err0 |
                      env_safe_err1 |
                      env_safe_err2 |
                      env_safe_err3 |
                      env_safe_err4 |
                      env_safe_err5;

// =============================================================
//                        SYS_TRANSITION:
// =============================================================
// G((hmaster0=0) * (hmaster1=0) * (hmaster2=0) -> (hbusreq0=0 <-> busreq=0));
assign sys_safe_err0 =  ~( ~( ~(controllable_hmaster0) & ~(controllable_hmaster1) & ~(controllable_hmaster2) )|(~i_hbusreq0 ^~ (~controllable_busreq)));

// G((hmaster0=1) * (hmaster1=0) * (hmaster2=0) -> (hbusreq1=0 <-> busreq=0));
assign sys_safe_err1 =  ~( ~( controllable_hmaster0 & ~(controllable_hmaster1) & ~(controllable_hmaster2) )|(~i_hbusreq1 ^~ (~controllable_busreq)));

// G((hmaster0=0) * (hmaster1=1) * (hmaster2=0) -> (hbusreq2=0 <-> busreq=0));
assign sys_safe_err2 =  ~( ~( ~(controllable_hmaster0) & controllable_hmaster1 & ~(controllable_hmaster2) )|(~i_hbusreq2 ^~ (~controllable_busreq)));

// G((hmaster0=1) * (hmaster1=1) * (hmaster2=0) -> (hbusreq3=0 <-> busreq=0));
assign sys_safe_err3 =  ~( ~( controllable_hmaster0 & controllable_hmaster1 & ~(controllable_hmaster2) )|(~i_hbusreq3 ^~ (~controllable_busreq)));

// G((hmaster0=0) * (hmaster1=0) * (hmaster2=1) -> (hbusreq4=0 <-> busreq=0));
assign sys_safe_err4 =  ~( ~( ~(controllable_hmaster0) & ~(controllable_hmaster1) & controllable_hmaster2 )|(~i_hbusreq4 ^~ (~controllable_busreq)));

// G((hmaster0=1) * (hmaster1=0) * (hmaster2=1) -> (hbusreq5=0 <-> busreq=0));
assign sys_safe_err5 =  ~( ~( controllable_hmaster0 & ~(controllable_hmaster1) & controllable_hmaster2 )|(~i_hbusreq5 ^~ (~controllable_busreq)));

// Guarantee 1:
// G((hready=0) -> X(start=0));
assign sys_safe_err6 =  ~( reg_i_hready | controllable_nstart );

// G(((stateG2=1) * (start=1)) -> FALSE;
assign sys_safe_err7 =  ~( ~(reg_stateG2 & ~controllable_nstart) | 0 );

// G(((stateG3_0=1) * (stateG3_1=0) * (stateG3_2=0) * ((start=1))) -> FALSE);
// G(((stateG3_0=0) * (stateG3_1=1) * (stateG3_2=0) * ((start=1))) -> FALSE);
// G(((stateG3_0=1) * (stateG3_1=1) * (stateG3_2=0) * ((start=1))) -> FALSE);
// G(((stateG3_0=0) * (stateG3_1=0) * (stateG3_2=1) * ((start=1))) -> FALSE);
// all these rules can be summarized as: only in state 000, start=1 is allowed:
assign sys_safe_err8 =  (reg_stateG3_0 | reg_stateG3_1 | reg_stateG3_2) & ~controllable_nstart;

// G( (hready=1) -> (   (hgrant0=1) <-> (X(hmaster0=0) * X(hmaster1=0) * X(hmaster2=0))  ) );
assign sys_safe_err9 =  ~( ~(reg_i_hready) | ( ~reg_controllable_nhgrant0 ^~ ( ~(controllable_hmaster0) & ~(controllable_hmaster1) & ~(controllable_hmaster2) ) ) );

// G( (hready=1) -> (   (hgrant1=1) <-> (X(hmaster0=1) * X(hmaster1=0) * X(hmaster2=0))  ) );
assign sys_safe_err10 =  ~( ~(reg_i_hready) | ( reg_controllable_hgrant1 ^~ ( controllable_hmaster0 & ~(controllable_hmaster1) & ~(controllable_hmaster2) ) ) );

// G( (hready=1) -> (   (hgrant2=1) <-> (X(hmaster0=0) * X(hmaster1=1) * X(hmaster2=0))  ) );
assign sys_safe_err11 =  ~( ~(reg_i_hready) | ( reg_controllable_hgrant2 ^~ ( ~(controllable_hmaster0) & controllable_hmaster1 & ~(controllable_hmaster2) ) ) );

// G( (hready=1) -> (   (hgrant3=1) <-> (X(hmaster0=1) * X(hmaster1=1) * X(hmaster2=0))  ) );
assign sys_safe_err12 =  ~( ~(reg_i_hready) | ( reg_controllable_hgrant3 ^~ ( controllable_hmaster0 & controllable_hmaster1 & ~(controllable_hmaster2) ) ) );

// G( (hready=1) -> (   (hgrant4=1) <-> (X(hmaster0=0) * X(hmaster1=0) * X(hmaster2=1))  ) );
assign sys_safe_err13 =  ~( ~(reg_i_hready) | ( reg_controllable_hgrant4 ^~ ( ~(controllable_hmaster0) & ~(controllable_hmaster1) & controllable_hmaster2 ) ) );

// G( (hready=1) -> (   (hgrant5=1) <-> (X(hmaster0=1) * X(hmaster1=0) * X(hmaster2=1))  ) );
assign sys_safe_err14 =  ~( ~(reg_i_hready) | ( reg_controllable_hgrant5 ^~ ( controllable_hmaster0 & ~(controllable_hmaster1) & controllable_hmaster2 ) ) );

// HMASTLOCK:
// G(  (hready=1) -> (locked=0 <-> X(hmastlock=0) ) );
assign sys_safe_err15 =  ~( ~(reg_i_hready) | (~reg_controllable_locked ^~ ~controllable_hmastlock) );

// Master 0:
// G( X(start=0) -> ( ((hmaster0=0) * (hmaster1=0) * (hmaster2=0)) <-> (X(hmaster0=0) * X(hmaster1=0) * X(hmaster2=0)) ) );
assign sys_safe_err16 =  ~( ~(controllable_nstart) | ( ( ~(reg_controllable_hmaster0) & ~(reg_controllable_hmaster1) & ~(reg_controllable_hmaster2) ) ^~ ( ~(controllable_hmaster0) & ~(controllable_hmaster1) & ~(controllable_hmaster2) )) );

// Master 1:
// G( X(start=0) -> ( ((hmaster0=1) * (hmaster1=0) * (hmaster2=0)) <-> (X(hmaster0=1) * X(hmaster1=0) * X(hmaster2=0)) ) );
assign sys_safe_err17 =  ~( ~(controllable_nstart) | ( ( reg_controllable_hmaster0 & ~(reg_controllable_hmaster1) & ~(reg_controllable_hmaster2) ) ^~ ( controllable_hmaster0 & ~(controllable_hmaster1) & ~(controllable_hmaster2) )) );

// Master 2:
// G( X(start=0) -> ( ((hmaster0=0) * (hmaster1=1) * (hmaster2=0)) <-> (X(hmaster0=0) * X(hmaster1=1) * X(hmaster2=0)) ) );
assign sys_safe_err18 =  ~( ~(controllable_nstart) | ( ( ~(reg_controllable_hmaster0) & reg_controllable_hmaster1 & ~(reg_controllable_hmaster2) ) ^~ ( ~(controllable_hmaster0) & controllable_hmaster1 & ~(controllable_hmaster2) )) );

// Master 3:
// G( X(start=0) -> ( ((hmaster0=1) * (hmaster1=1) * (hmaster2=0)) <-> (X(hmaster0=1) * X(hmaster1=1) * X(hmaster2=0)) ) );
assign sys_safe_err19 =  ~( ~(controllable_nstart) | ( ( reg_controllable_hmaster0 & reg_controllable_hmaster1 & ~(reg_controllable_hmaster2) ) ^~ ( controllable_hmaster0 & controllable_hmaster1 & ~(controllable_hmaster2) )) );

// Master 4:
// G( X(start=0) -> ( ((hmaster0=0) * (hmaster1=0) * (hmaster2=1)) <-> (X(hmaster0=0) * X(hmaster1=0) * X(hmaster2=1)) ) );
assign sys_safe_err20 =  ~( ~(controllable_nstart) | ( ( ~(reg_controllable_hmaster0) & ~(reg_controllable_hmaster1) & reg_controllable_hmaster2 ) ^~ ( ~(controllable_hmaster0) & ~(controllable_hmaster1) & controllable_hmaster2 )) );

// Master 5:
// G( X(start=0) -> ( ((hmaster0=1) * (hmaster1=0) * (hmaster2=1)) <-> (X(hmaster0=1) * X(hmaster1=0) * X(hmaster2=1)) ) );
assign sys_safe_err21 =  ~( ~(controllable_nstart) | ( ( reg_controllable_hmaster0 & ~(reg_controllable_hmaster1) & reg_controllable_hmaster2 ) ^~ ( controllable_hmaster0 & ~(controllable_hmaster1) & controllable_hmaster2 )) );

// Guarantee 6.2:
// G( ((X(start=0))) -> ( (hmastlock=1) <-> X(hmastlock=1)) );
assign sys_safe_err22 =  ~( ~(controllable_nstart) | ( reg_controllable_hmastlock ^~ controllable_hmastlock) );

// G( (decide=1  *  hlock0=1  *  X(hgrant0=1) )->X(locked=1));
assign sys_safe_err23 =  ~( ~(~reg_controllable_ndecide & reg_i_hlock0 & ~controllable_nhgrant0) | (controllable_locked) );

// G((decide=1  *  hlock0=0  *  X(hgrant0=1))->X(locked=0));
assign sys_safe_err24 =  ~( ~(~reg_controllable_ndecide & ~reg_i_hlock0 & ~controllable_nhgrant0) | (~controllable_locked) );

// G( (decide=1  *  hlock1=1  *  X(hgrant1=1) )->X(locked=1));
assign sys_safe_err25 =  ~( ~(~reg_controllable_ndecide & reg_i_hlock1 & controllable_hgrant1) | (controllable_locked) );

// G((decide=1  *  hlock1=0  *  X(hgrant1=1))->X(locked=0));
assign sys_safe_err26 =  ~( ~(~reg_controllable_ndecide & ~reg_i_hlock1 & controllable_hgrant1) | (~controllable_locked) );

// G( (decide=1  *  hlock2=1  *  X(hgrant2=1) )->X(locked=1));
assign sys_safe_err27 =  ~( ~(~reg_controllable_ndecide & reg_i_hlock2 & controllable_hgrant2) | (controllable_locked) );

// G((decide=1  *  hlock2=0  *  X(hgrant2=1))->X(locked=0));
assign sys_safe_err28 =  ~( ~(~reg_controllable_ndecide & ~reg_i_hlock2 & controllable_hgrant2) | (~controllable_locked) );

// G( (decide=1  *  hlock3=1  *  X(hgrant3=1) )->X(locked=1));
assign sys_safe_err29 =  ~( ~(~reg_controllable_ndecide & reg_i_hlock3 & controllable_hgrant3) | (controllable_locked) );

// G((decide=1  *  hlock3=0  *  X(hgrant3=1))->X(locked=0));
assign sys_safe_err30 =  ~( ~(~reg_controllable_ndecide & ~reg_i_hlock3 & controllable_hgrant3) | (~controllable_locked) );

// G( (decide=1  *  hlock4=1  *  X(hgrant4=1) )->X(locked=1));
assign sys_safe_err31 =  ~( ~(~reg_controllable_ndecide & reg_i_hlock4 & controllable_hgrant4) | (controllable_locked) );

// G((decide=1  *  hlock4=0  *  X(hgrant4=1))->X(locked=0));
assign sys_safe_err32 =  ~( ~(~reg_controllable_ndecide & ~reg_i_hlock4 & controllable_hgrant4) | (~controllable_locked) );

// G( (decide=1  *  hlock5=1  *  X(hgrant5=1) )->X(locked=1));
assign sys_safe_err33 =  ~( ~(~reg_controllable_ndecide & reg_i_hlock5 & controllable_hgrant5) | (controllable_locked) );

// G((decide=1  *  hlock5=0  *  X(hgrant5=1))->X(locked=0));
assign sys_safe_err34 =  ~( ~(~reg_controllable_ndecide & ~reg_i_hlock5 & controllable_hgrant5) | (~controllable_locked) );

// G( (decide=0) -> (  ((hgrant0=0)<->X(hgrant0=0))  ));
assign sys_safe_err35 =  ~( ~(reg_controllable_ndecide) | (reg_controllable_nhgrant0 ^~ controllable_nhgrant0) );

// G( (decide=0) -> (  ((hgrant1=0)<->X(hgrant1=0))  ));
assign sys_safe_err36 =  ~( ~(reg_controllable_ndecide) | (~reg_controllable_hgrant1 ^~ ~controllable_hgrant1) );

// G( (decide=0) -> (  ((hgrant2=0)<->X(hgrant2=0))  ));
assign sys_safe_err37 =  ~( ~(reg_controllable_ndecide) | (~reg_controllable_hgrant2 ^~ ~controllable_hgrant2) );

// G( (decide=0) -> (  ((hgrant3=0)<->X(hgrant3=0))  ));
assign sys_safe_err38 =  ~( ~(reg_controllable_ndecide) | (~reg_controllable_hgrant3 ^~ ~controllable_hgrant3) );

// G( (decide=0) -> (  ((hgrant4=0)<->X(hgrant4=0))  ));
assign sys_safe_err39 =  ~( ~(reg_controllable_ndecide) | (~reg_controllable_hgrant4 ^~ ~controllable_hgrant4) );

// G( (decide=0) -> (  ((hgrant5=0)<->X(hgrant5=0))  ));
assign sys_safe_err40 =  ~( ~(reg_controllable_ndecide) | (~reg_controllable_hgrant5 ^~ ~controllable_hgrant5) );

// G((decide=0)->(locked=0 <-> X(locked=0)));
assign sys_safe_err41 =  ~( ~(reg_controllable_ndecide) | (~reg_controllable_locked ^~ ~controllable_locked) );

// G(((stateG10_1=1) * (((hgrant1=1)) * (hbusreq1=0)))->FALSE);
assign sys_safe_err42 =  ~( ~(reg_stateG10_1 & (controllable_hgrant1 & ~i_hbusreq1)) | 0 );

// G(((stateG10_2=1) * (((hgrant2=1)) * (hbusreq2=0)))->FALSE);
assign sys_safe_err43 =  ~( ~(reg_stateG10_2 & (controllable_hgrant2 & ~i_hbusreq2)) | 0 );

// G(((stateG10_3=1) * (((hgrant3=1)) * (hbusreq3=0)))->FALSE);
assign sys_safe_err44 =  ~( ~(reg_stateG10_3 & (controllable_hgrant3 & ~i_hbusreq3)) | 0 );

// G(((stateG10_4=1) * (((hgrant4=1)) * (hbusreq4=0)))->FALSE);
assign sys_safe_err45 =  ~( ~(reg_stateG10_4 & (controllable_hgrant4 & ~i_hbusreq4)) | 0 );

// G(((stateG10_5=1) * (((hgrant5=1)) * (hbusreq5=0)))->FALSE);
assign sys_safe_err46 =  ~( ~(reg_stateG10_5 & (controllable_hgrant5 & ~i_hbusreq5)) | 0 );

// default master
// G((decide=1  *  hbusreq0=0  *  hbusreq1=0  *  hbusreq2=0  *  hbusreq3=0  *  hbusreq4=0  *  hbusreq5=0) -> X(hgrant0=1));
assign sys_safe_err47 =  ~( ~(~reg_controllable_ndecide & (~reg_i_hbusreq0 & ~reg_i_hbusreq1 & ~reg_i_hbusreq2 & ~reg_i_hbusreq3 & ~reg_i_hbusreq4 & ~reg_i_hbusreq5)) | (~controllable_nhgrant0) );

// collecting together the safety error bits:
assign sys_safe_err = sys_safe_err0 |
                      sys_safe_err1 |
                      sys_safe_err2 |
                      sys_safe_err3 |
                      sys_safe_err4 |
                      sys_safe_err5 |
                      sys_safe_err6 |
                      sys_safe_err7 |
                      sys_safe_err8 |
                      sys_safe_err9 |
                      sys_safe_err10 |
                      sys_safe_err11 |
                      sys_safe_err12 |
                      sys_safe_err13 |
                      sys_safe_err14 |
                      sys_safe_err15 |
                      sys_safe_err16 |
                      sys_safe_err17 |
                      sys_safe_err18 |
                      sys_safe_err19 |
                      sys_safe_err20 |
                      sys_safe_err21 |
                      sys_safe_err22 |
                      sys_safe_err23 |
                      sys_safe_err24 |
                      sys_safe_err25 |
                      sys_safe_err26 |
                      sys_safe_err27 |
                      sys_safe_err28 |
                      sys_safe_err29 |
                      sys_safe_err30 |
                      sys_safe_err31 |
                      sys_safe_err32 |
                      sys_safe_err33 |
                      sys_safe_err34 |
                      sys_safe_err35 |
                      sys_safe_err36 |
                      sys_safe_err37 |
                      sys_safe_err38 |
                      sys_safe_err39 |
                      sys_safe_err40 |
                      sys_safe_err41 |
                      sys_safe_err42 |
                      sys_safe_err43 |
                      sys_safe_err44 |
                      sys_safe_err45 |
                      sys_safe_err46 |
                      sys_safe_err47;

// =============================================================
//                          ENV_FAIRNESS:
// =============================================================
// Assumption 1: 
// G(F(stateA1=0));
assign env_fair0 =  ~reg_stateA1;

// Assumption 2:
// G(F(hready=1));
assign env_fair1 =  i_hready;


// =============================================================
//                          SYS_FAIRNESS:
// =============================================================
// Guarantee 2:
// G(F(stateG2=0));
assign sys_fair0 = ~reg_stateG2;

// Guarantee 3:
// G(F((stateG3_0=0)  *  (stateG3_1=0)  *  (stateG3_2=0)));
assign sys_fair1 =  (~reg_stateG3_0 & ~reg_stateG3_1 & ~reg_stateG3_2);

// G(F(((hmaster0=0) * (hmaster1=0) * (hmaster2=0))  |  hbusreq0=0));
assign sys_fair2 =  ( ~(controllable_hmaster0) & ~(controllable_hmaster1) & ~(controllable_hmaster2) ) | ~i_hbusreq0;

// G(F(((hmaster0=1) * (hmaster1=0) * (hmaster2=0))  |  hbusreq1=0));
assign sys_fair3 =  ( controllable_hmaster0 & ~(controllable_hmaster1) & ~(controllable_hmaster2) ) | ~i_hbusreq1;

// G(F(((hmaster0=0) * (hmaster1=1) * (hmaster2=0))  |  hbusreq2=0));
assign sys_fair4 =  ( ~(controllable_hmaster0) & controllable_hmaster1 & ~(controllable_hmaster2) ) | ~i_hbusreq2;

// G(F(((hmaster0=1) * (hmaster1=1) * (hmaster2=0))  |  hbusreq3=0));
assign sys_fair5 =  ( controllable_hmaster0 & controllable_hmaster1 & ~(controllable_hmaster2) ) | ~i_hbusreq3;

// G(F(((hmaster0=0) * (hmaster1=0) * (hmaster2=1))  |  hbusreq4=0));
assign sys_fair6 =  ( ~(controllable_hmaster0) & ~(controllable_hmaster1) & controllable_hmaster2 ) | ~i_hbusreq4;

// G(F(((hmaster0=1) * (hmaster1=0) * (hmaster2=1))  |  hbusreq5=0));
assign sys_fair7 =  ( controllable_hmaster0 & ~(controllable_hmaster1) & controllable_hmaster2 ) | ~i_hbusreq5;

assign fair_err = (fair_cnt >= 5'b11110);

// computing the error output bit:
assign o_err = ~env_safe_err & ~env_safe_err_happened & (sys_safe_err | fair_err);

initial
 begin
  reg_i_hready = 0;
  reg_i_hbusreq0 = 0;
  reg_i_hlock0 = 0;
  reg_i_hbusreq1 = 0;
  reg_i_hlock1 = 0;
  reg_i_hbusreq2 = 0;
  reg_i_hlock2 = 0;
  reg_i_hbusreq3 = 0;
  reg_i_hlock3 = 0;
  reg_i_hbusreq4 = 0;
  reg_i_hlock4 = 0;
  reg_i_hbusreq5 = 0;
  reg_i_hlock5 = 0;
  reg_controllable_hmaster0 = 0;
  reg_controllable_hmaster1 = 0;
  reg_controllable_hmaster2 = 0;
  reg_controllable_hmastlock = 0;
  reg_controllable_nstart = 0;
  reg_controllable_ndecide = 0;
  reg_controllable_locked = 0;
  reg_controllable_nhgrant0 = 0;
  reg_controllable_hgrant1 = 0;
  reg_controllable_hgrant2 = 0;
  reg_controllable_hgrant3 = 0;
  reg_controllable_hgrant4 = 0;
  reg_controllable_hgrant5 = 0;
  reg_controllable_busreq = 0;
  reg_stateA1 = 0;
  reg_stateG2 = 0;
  reg_stateG3_0 = 0;
  reg_stateG3_1 = 0;
  reg_stateG3_2 = 0;
  reg_stateG10_1 = 0;
  reg_stateG10_2 = 0;
  reg_stateG10_3 = 0;
  reg_stateG10_4 = 0;
  reg_stateG10_5 = 0;
  env_safe_err_happened = 0;
  next_env_fair = 0;
  fair_cnt = 0;
  next_sys_fair = 0;
 end


always @(posedge i_clk)
 begin
   // We remember if an environment error occurred:
   env_safe_err_happened = env_safe_err_happened | env_safe_err;

   // Updating the fairness counters: 
   if((next_sys_fair == 0) & sys_fair0)
    begin
      next_sys_fair = 1;
      next_env_fair = 0;
      fair_cnt = 0;
    end
   else if((next_sys_fair == 1) & sys_fair1)
    begin
      next_sys_fair = 2;
      next_env_fair = 0;
      fair_cnt = 0;
    end
   else if((next_sys_fair == 2) & sys_fair2)
    begin
      next_sys_fair = 3;
      next_env_fair = 0;
      fair_cnt = 0;
    end
   else if((next_sys_fair == 3) & sys_fair3)
    begin
      next_sys_fair = 4;
      next_env_fair = 0;
      fair_cnt = 0;
    end
   else if((next_sys_fair == 4) & sys_fair4)
    begin
      next_sys_fair = 5;
      next_env_fair = 0;
      fair_cnt = 0;
    end
   else if((next_sys_fair == 5) & sys_fair5)
    begin
      next_sys_fair = 6;
      next_env_fair = 0;
      fair_cnt = 0;
    end
   else if((next_sys_fair == 6) & sys_fair6)
    begin
      next_sys_fair = 7;
      next_env_fair = 0;
      fair_cnt = 0;
    end
   else if((next_sys_fair == 7) & sys_fair7)
    begin
      next_sys_fair = 0;
      next_env_fair = 0;
      fair_cnt = 0;
    end
   else if(~next_env_fair & env_fair0)
    begin
      next_env_fair = 1;
    end
   else if(next_env_fair & env_fair1)
    begin
      next_env_fair = 0;
      fair_cnt = fair_cnt + 1;
    end

   // Updating the automata: 
   // Automaton A1: 
   if(~reg_stateA1 & controllable_hmastlock & ~i_hburst0 & ~i_hburst1)
    begin
      reg_stateA1 = 1'b1;
    end
   else if(reg_stateA1 & ~controllable_busreq)
    begin
      reg_stateA1 = 1'b0;
    end

   // Automaton G2: 
   if(~reg_stateG2)
    begin
      if(controllable_hmastlock & ~controllable_nstart & ~i_hburst0 & ~i_hburst1)
       begin
         reg_stateG2 = 1'b1;
       end
    end
   else // if(reg_stateG2)
    begin
      if(~controllable_busreq)
       begin
         reg_stateG2 = 1'b0;
       end
    end

   // Automaton G3: 
   if(~reg_stateG3_0 & ~reg_stateG3_1 & ~reg_stateG3_2 & controllable_hmastlock & ~controllable_nstart &  ~i_hburst0 & i_hburst1 & ~i_hready)
    begin
      reg_stateG3_0 = 1'b1;
      reg_stateG3_1 = 1'b0;
      reg_stateG3_2 = 1'b0;
    end
   else if(~reg_stateG3_0 & ~reg_stateG3_1 & ~reg_stateG3_2 & controllable_hmastlock & ~controllable_nstart &  ~i_hburst0 & i_hburst1 & i_hready)
    begin
      reg_stateG3_0 = 1'b0;
      reg_stateG3_1 = 1'b1;
      reg_stateG3_2 = 1'b0;
    end
   else if(reg_stateG3_0 & ~reg_stateG3_1 & ~reg_stateG3_2 & i_hready)
    begin
      reg_stateG3_0 = 1'b0;
      reg_stateG3_1 = 1'b1;
      reg_stateG3_2 = 1'b0;
    end
   else if(~reg_stateG3_0 & reg_stateG3_1 & ~reg_stateG3_2 & i_hready)
    begin
      reg_stateG3_0 = 1'b1;
      reg_stateG3_1 = 1'b1;
      reg_stateG3_2 = 1'b0;
    end
   else if(reg_stateG3_0 & reg_stateG3_1 & ~reg_stateG3_2 & i_hready)
    begin
      reg_stateG3_0 = 1'b0;
      reg_stateG3_1 = 1'b0;
      reg_stateG3_2 = 1'b1;
    end
   else if(~reg_stateG3_0 & ~reg_stateG3_1 & reg_stateG3_2 & i_hready)
    begin
      reg_stateG3_0 = 1'b0;
      reg_stateG3_1 = 1'b0;
      reg_stateG3_2 = 1'b0;
    end

   // Automaton G10_1: 
   if(~reg_stateG10_1 & ~controllable_hgrant1 & ~i_hbusreq1)
    begin
      reg_stateG10_1 = 1'b1;
    end
   else if(reg_stateG10_1 & i_hbusreq1)
    begin
      reg_stateG10_1 = 1'b0;
    end

   // Automaton G10_2: 
   if(~reg_stateG10_2 & ~controllable_hgrant2 & ~i_hbusreq2)
    begin
      reg_stateG10_2 = 1'b1;
    end
   else if(reg_stateG10_2 & i_hbusreq2)
    begin
      reg_stateG10_2 = 1'b0;
    end

   // Automaton G10_3: 
   if(~reg_stateG10_3 & ~controllable_hgrant3 & ~i_hbusreq3)
    begin
      reg_stateG10_3 = 1'b1;
    end
   else if(reg_stateG10_3 & i_hbusreq3)
    begin
      reg_stateG10_3 = 1'b0;
    end

   // Automaton G10_4: 
   if(~reg_stateG10_4 & ~controllable_hgrant4 & ~i_hbusreq4)
    begin
      reg_stateG10_4 = 1'b1;
    end
   else if(reg_stateG10_4 & i_hbusreq4)
    begin
      reg_stateG10_4 = 1'b0;
    end

   // Automaton G10_5: 
   if(~reg_stateG10_5 & ~controllable_hgrant5 & ~i_hbusreq5)
    begin
      reg_stateG10_5 = 1'b1;
    end
   else if(reg_stateG10_5 & i_hbusreq5)
    begin
      reg_stateG10_5 = 1'b0;
    end

   // Latching the previous input:
   reg_i_hready =  i_hready;
   reg_i_hbusreq0 =  i_hbusreq0;
   reg_i_hlock0 =  i_hlock0;
   reg_i_hbusreq1 =  i_hbusreq1;
   reg_i_hlock1 =  i_hlock1;
   reg_i_hbusreq2 =  i_hbusreq2;
   reg_i_hlock2 =  i_hlock2;
   reg_i_hbusreq3 =  i_hbusreq3;
   reg_i_hlock3 =  i_hlock3;
   reg_i_hbusreq4 =  i_hbusreq4;
   reg_i_hlock4 =  i_hlock4;
   reg_i_hbusreq5 =  i_hbusreq5;
   reg_i_hlock5 =  i_hlock5;
   reg_controllable_hmaster0 =  controllable_hmaster0;
   reg_controllable_hmaster1 =  controllable_hmaster1;
   reg_controllable_hmaster2 =  controllable_hmaster2;
   reg_controllable_hmastlock =  controllable_hmastlock;
   reg_controllable_nstart =  controllable_nstart;
   reg_controllable_ndecide =  controllable_ndecide;
   reg_controllable_locked =  controllable_locked;
   reg_controllable_nhgrant0 =  controllable_nhgrant0;
   reg_controllable_hgrant1 =  controllable_hgrant1;
   reg_controllable_hgrant2 =  controllable_hgrant2;
   reg_controllable_hgrant3 =  controllable_hgrant3;
   reg_controllable_hgrant4 =  controllable_hgrant4;
   reg_controllable_hgrant5 =  controllable_hgrant5;
   reg_controllable_busreq =  controllable_busreq;

 end
endmodule

-------------------------------
#!SYNTCOMP
STATUS : realizable
SOLVED_BY : 3/3 [2015-pre-classification]
SOLVED_IN : 11.6897 [2015-pre-classification]
#.
