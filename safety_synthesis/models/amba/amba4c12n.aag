aag 638 22 39 1 577
2
4
6
8
10
12
14
16
18
20
22
24
26
28
30
32
34
36
38
40
42
44
46 1
48 32
50 18
52 36
54 799
56 883
58 20
60 907
62 42
64 927
66 2
68 30
70 12
72 4
74 38
76 957
78 979
80 44
82 34
84 1001
86 1025
88 8
90 6
92 1093
94 1099
96 1105
98 1111
100 28
102 1133
104 1259
106 1265
108 1271
110 1277
112 10
114 143
116 24
118 40
120 26
122 22
646
124 24 3
126 28 5
128 127 125
130 34 7
132 131 128
134 38 11
136 135 132
138 115 46
140 139 46
142 141 136
144 23 19
146 31 2
148 30 3
150 149 147
152 151 144
154 22 19
156 31 4
158 30 5
160 159 157
162 161 154
164 163 153
166 23 18
168 31 6
170 30 7
172 171 169
174 173 166
176 175 164
178 22 18
180 31 10
182 30 11
184 183 181
186 185 178
188 187 176
190 119 46
192 118 46
194 191 46
196 195 13
198 197 188
200 77 46
202 76 46
204 201 46
206 202 13
208 207 198
210 57 46
212 56 46
214 211 46
216 61 46
218 60 46
220 217 46
222 221 215
224 65 46
226 64 46
228 225 46
230 229 222
232 231 13
234 233 208
236 81 46
238 80 46
240 237 46
242 238 144
244 241 145
246 245 243
248 247 192
250 249 234
252 121 46
254 120 46
256 253 46
258 257 154
260 254 155
262 261 259
264 263 192
266 265 250
268 49 46
270 48 46
272 269 46
274 273 166
276 270 167
278 277 275
280 279 192
282 281 266
284 53 46
286 52 46
288 285 46
290 289 178
292 286 179
294 293 291
296 295 192
298 297 282
300 59 46
302 58 46
304 301 46
306 302 9
308 305 8
310 309 307
312 311 192
314 313 298
316 123 46
318 122 46
320 317 46
322 51 46
324 50 46
326 323 46
328 327 321
330 329 144
332 328 145
334 333 331
336 335 12
338 337 314
340 327 318
342 341 154
344 340 155
346 345 343
348 347 12
350 349 338
352 324 321
354 353 166
356 352 167
358 357 355
360 359 12
362 361 350
364 324 318
366 365 178
368 364 179
370 369 367
372 371 12
374 373 362
376 89 46
378 88 46
380 377 46
382 381 8
384 378 9
386 385 383
388 387 12
390 389 374
392 63 46
394 62 46
396 393 46
398 117 46
400 116 46
402 399 46
404 400 397
406 404 45
408 406 21
410 409 390
412 403 397
414 412 45
416 414 20
418 417 410
420 101 46
422 100 46
424 421 46
426 422 397
428 426 26
430 428 21
432 431 418
434 425 397
436 434 26
438 436 20
440 439 432
442 83 46
444 82 46
446 443 46
448 444 397
450 448 32
452 450 21
454 453 440
456 447 397
458 456 32
460 458 20
462 461 454
464 75 46
466 74 46
468 465 46
470 466 397
472 470 36
474 472 21
476 475 462
478 469 397
480 478 36
482 480 20
484 483 476
486 241 44
488 238 45
490 489 487
492 491 394
494 493 484
496 254 27
498 257 26
500 499 497
502 501 394
504 503 494
506 270 33
508 273 32
510 509 507
512 511 394
514 513 504
516 286 37
518 289 36
520 519 517
522 521 394
524 523 514
526 302 21
528 305 20
530 529 527
532 531 394
534 533 524
536 79 46
538 78 46
540 537 46
542 26 5
544 542 538
546 545 534
548 85 46
550 84 46
552 549 46
554 32 7
556 554 550
558 557 546
560 103 46
562 102 46
564 561 46
566 36 11
568 566 562
570 569 558
572 67 46
574 573 46
576 73 46
578 577 46
580 579 575
582 91 46
584 583 46
586 585 580
588 113 46
590 589 46
592 591 586
594 592 397
596 594 44
598 597 570
600 111 46
602 110 46
604 601 46
606 109 46
608 108 46
610 607 46
612 107 46
614 106 46
616 613 46
618 105 46
620 104 46
622 619 46
624 611 605
626 625 604
628 626 610
630 610 605
632 611 602
634 633 631
636 621 615
638 636 610
640 638 634
642 641 629
644 642 598
646 645 142
648 93 46
650 92 46
652 649 46
654 95 46
656 94 46
658 655 46
660 97 46
662 96 46
664 661 46
666 98 46
668 657 651
670 668 663
672 670 667
674 672 205
676 657 652
678 676 663
680 678 667
682 680 230
684 658 651
686 684 663
688 686 667
690 145 2
692 691 688
694 658 652
696 694 663
698 696 667
700 155 4
702 701 698
704 668 664
706 704 667
708 167 6
710 709 706
712 676 664
714 712 667
716 179 10
718 717 714
720 55 46
722 54 46
724 721 46
726 87 46
728 86 46
730 727 46
732 731 725
734 722 40
736 682 675
738 737 675
740 683 675
742 740 692
744 743 738
746 740 693
748 746 702
750 749 744
752 746 703
754 752 710
756 755 750
758 752 711
760 758 718
762 761 756
764 758 719
766 764 732
768 767 762
770 764 733
772 770 734
774 773 768
776 735 722
778 776 733
780 779 733
782 781 719
784 782 711
786 784 703
788 786 693
790 788 683
792 790 675
794 792 775
796 774 722
798 797 795
800 230 8
802 800 13
804 802 17
806 804 14
808 806 41
810 806 40
812 221 212
814 812 229
816 814 40
818 218 215
820 818 229
822 820 40
824 218 212
826 824 229
828 826 40
830 226 222
832 830 40
834 810 809
836 835 809
838 811 809
840 838 816
842 841 836
844 838 817
846 844 822
848 847 842
850 844 823
852 850 828
854 853 848
856 850 829
858 856 832
860 859 854
862 833 212
864 862 829
866 864 823
868 867 823
870 869 817
872 870 811
874 872 809
876 875 809
878 877 861
880 860 212
882 881 879
884 833 218
886 884 829
888 886 823
890 889 823
892 891 817
894 893 817
896 895 811
898 897 811
900 899 809
902 900 861
904 860 218
906 905 903
908 833 226
910 908 829
912 911 829
914 913 823
916 914 817
918 916 811
920 918 809
922 920 861
924 860 226
926 925 923
928 13 8
930 928 17
932 930 15
934 932 205
936 202 31
938 937 935
940 933 202
942 941 933
944 202 30
946 943 205
948 944 202
950 949 947
952 951 939
954 938 202
956 955 953
958 541 27
960 958 5
962 538 4
964 962 961
966 965 961
968 963 538
970 968 961
972 971 961
974 973 967
976 966 538
978 977 975
980 553 33
982 980 7
984 550 6
986 984 983
988 987 983
990 985 550
992 990 983
994 993 983
996 995 989
998 988 550
1000 999 997
1002 731 8
1004 1002 17
1006 1004 15
1008 728 31
1010 1008 1007
1012 1011 1007
1014 1009 728
1016 1014 1007
1018 1017 1007
1020 1019 1013
1022 1012 728
1024 1023 1021
1026 719 650
1028 1026 711
1030 1029 711
1032 1031 703
1034 1032 693
1036 1035 693
1038 1037 683
1040 1038 675
1042 1041 675
1044 719 656
1046 1044 711
1048 1046 703
1050 1048 693
1052 1051 693
1054 1053 683
1056 1055 683
1058 1057 675
1060 719 662
1062 1060 711
1064 1063 711
1066 1065 703
1068 1067 703
1070 1069 693
1072 1070 683
1074 1072 675
1076 719 666
1078 1076 711
1080 1078 703
1082 1080 693
1084 1082 683
1086 1084 675
1088 1043 763
1090 762 650
1092 1091 1089
1094 1058 763
1096 762 656
1098 1097 1095
1100 1074 763
1102 762 662
1104 1103 1101
1106 1086 763
1108 762 666
1110 1109 1107
1112 565 37
1114 1112 11
1116 562 10
1118 1116 1115
1120 1119 1115
1122 1117 562
1124 1122 1115
1126 1125 1115
1128 1127 1121
1130 1120 562
1132 1131 1129
1134 773 762
1136 734 623
1138 735 620
1140 1139 1137
1142 732 620
1144 1141 733
1146 1145 1143
1148 1147 719
1150 1148 711
1152 1150 703
1154 1152 693
1156 1154 683
1158 1156 675
1160 620 617
1162 621 614
1164 1163 1161
1166 1165 734
1168 735 614
1170 1169 1167
1172 732 614
1174 1171 733
1176 1175 1173
1178 1177 719
1180 1178 711
1182 1180 703
1184 1182 693
1186 1184 683
1188 1186 675
1190 620 614
1192 1190 611
1194 1191 608
1196 1195 1193
1198 1197 734
1200 735 608
1202 1201 1199
1204 732 608
1206 1203 733
1208 1207 1205
1210 1209 719
1212 1210 711
1214 1212 703
1216 1214 693
1218 1216 683
1220 1218 675
1222 1190 608
1224 1222 605
1226 1223 602
1228 1227 1225
1230 1229 734
1232 735 602
1234 1233 1231
1236 732 602
1238 1235 733
1240 1239 1237
1242 1241 719
1244 1242 711
1246 1244 703
1248 1246 693
1250 1248 683
1252 1250 675
1254 1158 1135
1256 1134 620
1258 1257 1255
1260 1188 1135
1262 1134 614
1264 1263 1261
1266 1220 1135
1268 1134 608
1270 1269 1267
1272 1252 1135
1274 1134 602
1276 1275 1273
i0 i_hbusreq0
i1 i_hbusreq1
i2 i_hbusreq2
i3 controllable_hmastlock
i4 i_hbusreq3
i5 controllable_nstart
i6 i_hburst1
i7 i_hburst0
i8 controllable_hmaster1
i9 controllable_locked
i10 controllable_hmaster0
i11 i_hlock0
i12 controllable_hgrant1
i13 i_hlock1
i14 controllable_busreq
i15 controllable_hgrant2
i16 i_hlock2
i17 controllable_hgrant3
i18 i_hlock3
i19 i_hready
i20 controllable_ndecide
i21 controllable_nhgrant0
l0 n47
l1 reg_controllable_hgrant2_out
l2 reg_controllable_hmaster1_out
l3 reg_controllable_hgrant3_out
l4 next_env_fair_out
l5 reg_stateG3_0_out
l6 reg_controllable_locked_out
l7 reg_stateG3_1_out
l8 reg_controllable_ndecide_out
l9 reg_stateG3_2_out
l10 reg_i_hbusreq0_out
l11 reg_controllable_busreq_out
l12 reg_controllable_nstart_out
l13 reg_i_hbusreq1_out
l14 reg_i_hlock3_out
l15 reg_stateG2_out
l16 reg_stateG10_1_out
l17 reg_controllable_nhgrant0_out
l18 reg_i_hlock2_out
l19 reg_stateG10_2_out
l20 reg_stateA1_out
l21 reg_controllable_hmastlock_out
l22 reg_i_hbusreq2_out
l23 next_sys_fair<0>_out
l24 next_sys_fair<1>_out
l25 next_sys_fair<2>_out
l26 next_sys_fair<3>_out
l27 reg_i_hlock1_out
l28 reg_stateG10_3_out
l29 fair_cnt<0>_out
l30 fair_cnt<1>_out
l31 fair_cnt<2>_out
l32 fair_cnt<3>_out
l33 reg_i_hbusreq3_out
l34 env_safe_err_happened_out
l35 reg_i_hlock0_out
l36 reg_i_hready_out
l37 reg_controllable_hgrant1_out
l38 reg_controllable_hmaster0_out
o0 o_err
c
amba_4_new_12
This file was written by ABC on Tue May  5 16:50:36 2015
For information about AIGER format, refer to http://fmv.jku.at/aiger
-------------------------------
This AIGER file has been created by the following sequence of commands:
> vl2mv amba4c12.v   ---gives--> amba4c12.mv
> abc -c "read_blif_mv amba4c12.mv; write_aiger -s amba4c12n.aig"   ---gives--> amba4c12n.aig
> aigtoaig amba4c12n.aig amba4c12n.aag   ---gives--> amba4c12n.aag (this file)
Content of amba4c12.v:
module amba_4_new_12(
        o_err,
        i_clk,
        i_hready,
        i_hbusreq0,
        i_hlock0,
        i_hbusreq1,
        i_hlock1,
        i_hbusreq2,
        i_hlock2,
        i_hbusreq3,
        i_hlock3,
        i_hburst0,
        i_hburst1,
        controllable_hmaster0,
        controllable_hmaster1,
        controllable_hmastlock,
        controllable_nstart,
        controllable_ndecide,
        controllable_locked,
        controllable_nhgrant0,
        controllable_hgrant1,
        controllable_hgrant2,
        controllable_hgrant3,
        controllable_busreq);

input i_clk;
input i_hready;
input i_hbusreq0;
input i_hlock0;
input i_hbusreq1;
input i_hlock1;
input i_hbusreq2;
input i_hlock2;
input i_hbusreq3;
input i_hlock3;
input i_hburst0;
input i_hburst1;
input controllable_hmaster0;
input controllable_hmaster1;
input controllable_hmastlock;
input controllable_nstart;
input controllable_ndecide;
input controllable_locked;
input controllable_nhgrant0;
input controllable_hgrant1;
input controllable_hgrant2;
input controllable_hgrant3;
input controllable_busreq;
output o_err;

reg reg_i_hready;
reg reg_i_hbusreq0;
reg reg_i_hlock0;
reg reg_i_hbusreq1;
reg reg_i_hlock1;
reg reg_i_hbusreq2;
reg reg_i_hlock2;
reg reg_i_hbusreq3;
reg reg_i_hlock3;
reg reg_controllable_hmaster0;
reg reg_controllable_hmaster1;
reg reg_controllable_hmastlock;
reg reg_controllable_nstart;
reg reg_controllable_ndecide;
reg reg_controllable_locked;
reg reg_controllable_nhgrant0;
reg reg_controllable_hgrant1;
reg reg_controllable_hgrant2;
reg reg_controllable_hgrant3;
reg reg_controllable_busreq;
reg reg_stateA1;
reg reg_stateG2;
reg reg_stateG3_0;
reg reg_stateG3_1;
reg reg_stateG3_2;
reg reg_stateG10_1;
reg reg_stateG10_2;
reg reg_stateG10_3;
reg env_safe_err_happened;
reg next_env_fair;
reg [3:0] fair_cnt;
reg [3:0] next_sys_fair;

wire env_safe_err0;
wire env_safe_err1;
wire env_safe_err2;
wire env_safe_err3;
wire env_safe_err;

wire sys_safe_err0;
wire sys_safe_err1;
wire sys_safe_err2;
wire sys_safe_err3;
wire sys_safe_err4;
wire sys_safe_err5;
wire sys_safe_err6;
wire sys_safe_err7;
wire sys_safe_err8;
wire sys_safe_err9;
wire sys_safe_err10;
wire sys_safe_err11;
wire sys_safe_err12;
wire sys_safe_err13;
wire sys_safe_err14;
wire sys_safe_err15;
wire sys_safe_err16;
wire sys_safe_err17;
wire sys_safe_err18;
wire sys_safe_err19;
wire sys_safe_err20;
wire sys_safe_err21;
wire sys_safe_err22;
wire sys_safe_err23;
wire sys_safe_err24;
wire sys_safe_err25;
wire sys_safe_err26;
wire sys_safe_err27;
wire sys_safe_err28;
wire sys_safe_err29;
wire sys_safe_err30;
wire sys_safe_err31;
wire sys_safe_err32;
wire sys_safe_err33;
wire sys_safe_err;

wire env_fair0;
wire env_fair1;

wire sys_fair0;
wire sys_fair1;
wire sys_fair2;
wire sys_fair3;
wire sys_fair4;
wire sys_fair5;
wire fair_err;
wire o_err;

// =============================================================
//                        ENV_TRANSITION:
// =============================================================
// Assumption 3:
// G( hlock0=1 -> hbusreq0=1 );
assign env_safe_err0 =  ~(~ i_hlock0 | i_hbusreq0);

// Assumption 3:
// G( hlock1=1 -> hbusreq1=1 );
assign env_safe_err1 =  ~(~ i_hlock1 | i_hbusreq1);

// Assumption 3:
// G( hlock2=1 -> hbusreq2=1 );
assign env_safe_err2 =  ~(~ i_hlock2 | i_hbusreq2);

// Assumption 3:
// G( hlock3=1 -> hbusreq3=1 );
assign env_safe_err3 =  ~(~ i_hlock3 | i_hbusreq3);

// collecting together the safety error bits:
assign env_safe_err = env_safe_err0 |
                      env_safe_err1 |
                      env_safe_err2 |
                      env_safe_err3;

// =============================================================
//                        SYS_TRANSITION:
// =============================================================
// G((hmaster0=0) * (hmaster1=0) -> (hbusreq0=0 <-> busreq=0));
assign sys_safe_err0 =  ~( ~( ~(controllable_hmaster0) & ~(controllable_hmaster1) )|(~i_hbusreq0 ^~ (~controllable_busreq)));

// G((hmaster0=1) * (hmaster1=0) -> (hbusreq1=0 <-> busreq=0));
assign sys_safe_err1 =  ~( ~( controllable_hmaster0 & ~(controllable_hmaster1) )|(~i_hbusreq1 ^~ (~controllable_busreq)));

// G((hmaster0=0) * (hmaster1=1) -> (hbusreq2=0 <-> busreq=0));
assign sys_safe_err2 =  ~( ~( ~(controllable_hmaster0) & controllable_hmaster1 )|(~i_hbusreq2 ^~ (~controllable_busreq)));

// G((hmaster0=1) * (hmaster1=1) -> (hbusreq3=0 <-> busreq=0));
assign sys_safe_err3 =  ~( ~( controllable_hmaster0 & controllable_hmaster1 )|(~i_hbusreq3 ^~ (~controllable_busreq)));

// Guarantee 1:
// G((hready=0) -> X(start=0));
assign sys_safe_err4 =  ~( reg_i_hready | controllable_nstart );

// G(((stateG2=1) * (start=1)) -> FALSE;
assign sys_safe_err5 =  ~( ~(reg_stateG2 & ~controllable_nstart) | 0 );

// G(((stateG3_0=1) * (stateG3_1=0) * (stateG3_2=0) * ((start=1))) -> FALSE);
// G(((stateG3_0=0) * (stateG3_1=1) * (stateG3_2=0) * ((start=1))) -> FALSE);
// G(((stateG3_0=1) * (stateG3_1=1) * (stateG3_2=0) * ((start=1))) -> FALSE);
// G(((stateG3_0=0) * (stateG3_1=0) * (stateG3_2=1) * ((start=1))) -> FALSE);
// all these rules can be summarized as: only in state 000, start=1 is allowed:
assign sys_safe_err6 =  (reg_stateG3_0 | reg_stateG3_1 | reg_stateG3_2) & ~controllable_nstart;

// G( (hready=1) -> (   (hgrant0=1) <-> (X(hmaster0=0) * X(hmaster1=0))  ) );
assign sys_safe_err7 =  ~( ~(reg_i_hready) | ( ~reg_controllable_nhgrant0 ^~ ( ~(controllable_hmaster0) & ~(controllable_hmaster1) ) ) );

// G( (hready=1) -> (   (hgrant1=1) <-> (X(hmaster0=1) * X(hmaster1=0))  ) );
assign sys_safe_err8 =  ~( ~(reg_i_hready) | ( reg_controllable_hgrant1 ^~ ( controllable_hmaster0 & ~(controllable_hmaster1) ) ) );

// G( (hready=1) -> (   (hgrant2=1) <-> (X(hmaster0=0) * X(hmaster1=1))  ) );
assign sys_safe_err9 =  ~( ~(reg_i_hready) | ( reg_controllable_hgrant2 ^~ ( ~(controllable_hmaster0) & controllable_hmaster1 ) ) );

// G( (hready=1) -> (   (hgrant3=1) <-> (X(hmaster0=1) * X(hmaster1=1))  ) );
assign sys_safe_err10 =  ~( ~(reg_i_hready) | ( reg_controllable_hgrant3 ^~ ( controllable_hmaster0 & controllable_hmaster1 ) ) );

// HMASTLOCK:
// G(  (hready=1) -> (locked=0 <-> X(hmastlock=0) ) );
assign sys_safe_err11 =  ~( ~(reg_i_hready) | (~reg_controllable_locked ^~ ~controllable_hmastlock) );

// Master 0:
// G( X(start=0) -> ( ((hmaster0=0) * (hmaster1=0)) <-> (X(hmaster0=0) * X(hmaster1=0)) ) );
assign sys_safe_err12 =  ~( ~(controllable_nstart) | ( ( ~(reg_controllable_hmaster0) & ~(reg_controllable_hmaster1) ) ^~ ( ~(controllable_hmaster0) & ~(controllable_hmaster1) )) );

// Master 1:
// G( X(start=0) -> ( ((hmaster0=1) * (hmaster1=0)) <-> (X(hmaster0=1) * X(hmaster1=0)) ) );
assign sys_safe_err13 =  ~( ~(controllable_nstart) | ( ( reg_controllable_hmaster0 & ~(reg_controllable_hmaster1) ) ^~ ( controllable_hmaster0 & ~(controllable_hmaster1) )) );

// Master 2:
// G( X(start=0) -> ( ((hmaster0=0) * (hmaster1=1)) <-> (X(hmaster0=0) * X(hmaster1=1)) ) );
assign sys_safe_err14 =  ~( ~(controllable_nstart) | ( ( ~(reg_controllable_hmaster0) & reg_controllable_hmaster1 ) ^~ ( ~(controllable_hmaster0) & controllable_hmaster1 )) );

// Master 3:
// G( X(start=0) -> ( ((hmaster0=1) * (hmaster1=1)) <-> (X(hmaster0=1) * X(hmaster1=1)) ) );
assign sys_safe_err15 =  ~( ~(controllable_nstart) | ( ( reg_controllable_hmaster0 & reg_controllable_hmaster1 ) ^~ ( controllable_hmaster0 & controllable_hmaster1 )) );

// Guarantee 6.2:
// G( ((X(start=0))) -> ( (hmastlock=1) <-> X(hmastlock=1)) );
assign sys_safe_err16 =  ~( ~(controllable_nstart) | ( reg_controllable_hmastlock ^~ controllable_hmastlock) );

// G( (decide=1  *  hlock0=1  *  X(hgrant0=1) )->X(locked=1));
assign sys_safe_err17 =  ~( ~(~reg_controllable_ndecide & reg_i_hlock0 & ~controllable_nhgrant0) | (controllable_locked) );

// G((decide=1  *  hlock0=0  *  X(hgrant0=1))->X(locked=0));
assign sys_safe_err18 =  ~( ~(~reg_controllable_ndecide & ~reg_i_hlock0 & ~controllable_nhgrant0) | (~controllable_locked) );

// G( (decide=1  *  hlock1=1  *  X(hgrant1=1) )->X(locked=1));
assign sys_safe_err19 =  ~( ~(~reg_controllable_ndecide & reg_i_hlock1 & controllable_hgrant1) | (controllable_locked) );

// G((decide=1  *  hlock1=0  *  X(hgrant1=1))->X(locked=0));
assign sys_safe_err20 =  ~( ~(~reg_controllable_ndecide & ~reg_i_hlock1 & controllable_hgrant1) | (~controllable_locked) );

// G( (decide=1  *  hlock2=1  *  X(hgrant2=1) )->X(locked=1));
assign sys_safe_err21 =  ~( ~(~reg_controllable_ndecide & reg_i_hlock2 & controllable_hgrant2) | (controllable_locked) );

// G((decide=1  *  hlock2=0  *  X(hgrant2=1))->X(locked=0));
assign sys_safe_err22 =  ~( ~(~reg_controllable_ndecide & ~reg_i_hlock2 & controllable_hgrant2) | (~controllable_locked) );

// G( (decide=1  *  hlock3=1  *  X(hgrant3=1) )->X(locked=1));
assign sys_safe_err23 =  ~( ~(~reg_controllable_ndecide & reg_i_hlock3 & controllable_hgrant3) | (controllable_locked) );

// G((decide=1  *  hlock3=0  *  X(hgrant3=1))->X(locked=0));
assign sys_safe_err24 =  ~( ~(~reg_controllable_ndecide & ~reg_i_hlock3 & controllable_hgrant3) | (~controllable_locked) );

// G( (decide=0) -> (  ((hgrant0=0)<->X(hgrant0=0))  ));
assign sys_safe_err25 =  ~( ~(reg_controllable_ndecide) | (reg_controllable_nhgrant0 ^~ controllable_nhgrant0) );

// G( (decide=0) -> (  ((hgrant1=0)<->X(hgrant1=0))  ));
assign sys_safe_err26 =  ~( ~(reg_controllable_ndecide) | (~reg_controllable_hgrant1 ^~ ~controllable_hgrant1) );

// G( (decide=0) -> (  ((hgrant2=0)<->X(hgrant2=0))  ));
assign sys_safe_err27 =  ~( ~(reg_controllable_ndecide) | (~reg_controllable_hgrant2 ^~ ~controllable_hgrant2) );

// G( (decide=0) -> (  ((hgrant3=0)<->X(hgrant3=0))  ));
assign sys_safe_err28 =  ~( ~(reg_controllable_ndecide) | (~reg_controllable_hgrant3 ^~ ~controllable_hgrant3) );

// G((decide=0)->(locked=0 <-> X(locked=0)));
assign sys_safe_err29 =  ~( ~(reg_controllable_ndecide) | (~reg_controllable_locked ^~ ~controllable_locked) );

// G(((stateG10_1=1) * (((hgrant1=1)) * (hbusreq1=0)))->FALSE);
assign sys_safe_err30 =  ~( ~(reg_stateG10_1 & (controllable_hgrant1 & ~i_hbusreq1)) | 0 );

// G(((stateG10_2=1) * (((hgrant2=1)) * (hbusreq2=0)))->FALSE);
assign sys_safe_err31 =  ~( ~(reg_stateG10_2 & (controllable_hgrant2 & ~i_hbusreq2)) | 0 );

// G(((stateG10_3=1) * (((hgrant3=1)) * (hbusreq3=0)))->FALSE);
assign sys_safe_err32 =  ~( ~(reg_stateG10_3 & (controllable_hgrant3 & ~i_hbusreq3)) | 0 );

// default master
// G((decide=1  *  hbusreq0=0  *  hbusreq1=0  *  hbusreq2=0  *  hbusreq3=0) -> X(hgrant0=1));
assign sys_safe_err33 =  ~( ~(~reg_controllable_ndecide & (~reg_i_hbusreq0 & ~reg_i_hbusreq1 & ~reg_i_hbusreq2 & ~reg_i_hbusreq3)) | (~controllable_nhgrant0) );

// collecting together the safety error bits:
assign sys_safe_err = sys_safe_err0 |
                      sys_safe_err1 |
                      sys_safe_err2 |
                      sys_safe_err3 |
                      sys_safe_err4 |
                      sys_safe_err5 |
                      sys_safe_err6 |
                      sys_safe_err7 |
                      sys_safe_err8 |
                      sys_safe_err9 |
                      sys_safe_err10 |
                      sys_safe_err11 |
                      sys_safe_err12 |
                      sys_safe_err13 |
                      sys_safe_err14 |
                      sys_safe_err15 |
                      sys_safe_err16 |
                      sys_safe_err17 |
                      sys_safe_err18 |
                      sys_safe_err19 |
                      sys_safe_err20 |
                      sys_safe_err21 |
                      sys_safe_err22 |
                      sys_safe_err23 |
                      sys_safe_err24 |
                      sys_safe_err25 |
                      sys_safe_err26 |
                      sys_safe_err27 |
                      sys_safe_err28 |
                      sys_safe_err29 |
                      sys_safe_err30 |
                      sys_safe_err31 |
                      sys_safe_err32 |
                      sys_safe_err33;

// =============================================================
//                          ENV_FAIRNESS:
// =============================================================
// Assumption 1: 
// G(F(stateA1=0));
assign env_fair0 =  ~reg_stateA1;

// Assumption 2:
// G(F(hready=1));
assign env_fair1 =  i_hready;


// =============================================================
//                          SYS_FAIRNESS:
// =============================================================
// Guarantee 2:
// G(F(stateG2=0));
assign sys_fair0 = ~reg_stateG2;

// Guarantee 3:
// G(F((stateG3_0=0)  *  (stateG3_1=0)  *  (stateG3_2=0)));
assign sys_fair1 =  (~reg_stateG3_0 & ~reg_stateG3_1 & ~reg_stateG3_2);

// G(F(((hmaster0=0) * (hmaster1=0))  |  hbusreq0=0));
assign sys_fair2 =  ( ~(controllable_hmaster0) & ~(controllable_hmaster1) ) | ~i_hbusreq0;

// G(F(((hmaster0=1) * (hmaster1=0))  |  hbusreq1=0));
assign sys_fair3 =  ( controllable_hmaster0 & ~(controllable_hmaster1) ) | ~i_hbusreq1;

// G(F(((hmaster0=0) * (hmaster1=1))  |  hbusreq2=0));
assign sys_fair4 =  ( ~(controllable_hmaster0) & controllable_hmaster1 ) | ~i_hbusreq2;

// G(F(((hmaster0=1) * (hmaster1=1))  |  hbusreq3=0));
assign sys_fair5 =  ( controllable_hmaster0 & controllable_hmaster1 ) | ~i_hbusreq3;

assign fair_err = (fair_cnt >= 4'b1100);

// computing the error output bit:
assign o_err = ~env_safe_err & ~env_safe_err_happened & (sys_safe_err | fair_err);

initial
 begin
  reg_i_hready = 0;
  reg_i_hbusreq0 = 0;
  reg_i_hlock0 = 0;
  reg_i_hbusreq1 = 0;
  reg_i_hlock1 = 0;
  reg_i_hbusreq2 = 0;
  reg_i_hlock2 = 0;
  reg_i_hbusreq3 = 0;
  reg_i_hlock3 = 0;
  reg_controllable_hmaster0 = 0;
  reg_controllable_hmaster1 = 0;
  reg_controllable_hmastlock = 0;
  reg_controllable_nstart = 0;
  reg_controllable_ndecide = 0;
  reg_controllable_locked = 0;
  reg_controllable_nhgrant0 = 0;
  reg_controllable_hgrant1 = 0;
  reg_controllable_hgrant2 = 0;
  reg_controllable_hgrant3 = 0;
  reg_controllable_busreq = 0;
  reg_stateA1 = 0;
  reg_stateG2 = 0;
  reg_stateG3_0 = 0;
  reg_stateG3_1 = 0;
  reg_stateG3_2 = 0;
  reg_stateG10_1 = 0;
  reg_stateG10_2 = 0;
  reg_stateG10_3 = 0;
  env_safe_err_happened = 0;
  next_env_fair = 0;
  fair_cnt = 0;
  next_sys_fair = 0;
 end


always @(posedge i_clk)
 begin
   // We remember if an environment error occurred:
   env_safe_err_happened = env_safe_err_happened | env_safe_err;

   // Updating the fairness counters: 
   if((next_sys_fair == 0) & sys_fair0)
    begin
      next_sys_fair = 1;
      next_env_fair = 0;
      fair_cnt = 0;
    end
   else if((next_sys_fair == 1) & sys_fair1)
    begin
      next_sys_fair = 2;
      next_env_fair = 0;
      fair_cnt = 0;
    end
   else if((next_sys_fair == 2) & sys_fair2)
    begin
      next_sys_fair = 3;
      next_env_fair = 0;
      fair_cnt = 0;
    end
   else if((next_sys_fair == 3) & sys_fair3)
    begin
      next_sys_fair = 4;
      next_env_fair = 0;
      fair_cnt = 0;
    end
   else if((next_sys_fair == 4) & sys_fair4)
    begin
      next_sys_fair = 5;
      next_env_fair = 0;
      fair_cnt = 0;
    end
   else if((next_sys_fair == 5) & sys_fair5)
    begin
      next_sys_fair = 0;
      next_env_fair = 0;
      fair_cnt = 0;
    end
   else if(~next_env_fair & env_fair0)
    begin
      next_env_fair = 1;
    end
   else if(next_env_fair & env_fair1)
    begin
      next_env_fair = 0;
      fair_cnt = fair_cnt + 1;
    end

   // Updating the automata: 
   // Automaton A1: 
   if(~reg_stateA1 & controllable_hmastlock & ~i_hburst0 & ~i_hburst1)
    begin
      reg_stateA1 = 1'b1;
    end
   else if(reg_stateA1 & ~controllable_busreq)
    begin
      reg_stateA1 = 1'b0;
    end

   // Automaton G2: 
   if(~reg_stateG2)
    begin
      if(controllable_hmastlock & ~controllable_nstart & ~i_hburst0 & ~i_hburst1)
       begin
         reg_stateG2 = 1'b1;
       end
    end
   else // if(reg_stateG2)
    begin
      if(~controllable_busreq)
       begin
         reg_stateG2 = 1'b0;
       end
    end

   // Automaton G3: 
   if(~reg_stateG3_0 & ~reg_stateG3_1 & ~reg_stateG3_2 & controllable_hmastlock & ~controllable_nstart &  ~i_hburst0 & i_hburst1 & ~i_hready)
    begin
      reg_stateG3_0 = 1'b1;
      reg_stateG3_1 = 1'b0;
      reg_stateG3_2 = 1'b0;
    end
   else if(~reg_stateG3_0 & ~reg_stateG3_1 & ~reg_stateG3_2 & controllable_hmastlock & ~controllable_nstart &  ~i_hburst0 & i_hburst1 & i_hready)
    begin
      reg_stateG3_0 = 1'b0;
      reg_stateG3_1 = 1'b1;
      reg_stateG3_2 = 1'b0;
    end
   else if(reg_stateG3_0 & ~reg_stateG3_1 & ~reg_stateG3_2 & i_hready)
    begin
      reg_stateG3_0 = 1'b0;
      reg_stateG3_1 = 1'b1;
      reg_stateG3_2 = 1'b0;
    end
   else if(~reg_stateG3_0 & reg_stateG3_1 & ~reg_stateG3_2 & i_hready)
    begin
      reg_stateG3_0 = 1'b1;
      reg_stateG3_1 = 1'b1;
      reg_stateG3_2 = 1'b0;
    end
   else if(reg_stateG3_0 & reg_stateG3_1 & ~reg_stateG3_2 & i_hready)
    begin
      reg_stateG3_0 = 1'b0;
      reg_stateG3_1 = 1'b0;
      reg_stateG3_2 = 1'b1;
    end
   else if(~reg_stateG3_0 & ~reg_stateG3_1 & reg_stateG3_2 & i_hready)
    begin
      reg_stateG3_0 = 1'b0;
      reg_stateG3_1 = 1'b0;
      reg_stateG3_2 = 1'b0;
    end

   // Automaton G10_1: 
   if(~reg_stateG10_1 & ~controllable_hgrant1 & ~i_hbusreq1)
    begin
      reg_stateG10_1 = 1'b1;
    end
   else if(reg_stateG10_1 & i_hbusreq1)
    begin
      reg_stateG10_1 = 1'b0;
    end

   // Automaton G10_2: 
   if(~reg_stateG10_2 & ~controllable_hgrant2 & ~i_hbusreq2)
    begin
      reg_stateG10_2 = 1'b1;
    end
   else if(reg_stateG10_2 & i_hbusreq2)
    begin
      reg_stateG10_2 = 1'b0;
    end

   // Automaton G10_3: 
   if(~reg_stateG10_3 & ~controllable_hgrant3 & ~i_hbusreq3)
    begin
      reg_stateG10_3 = 1'b1;
    end
   else if(reg_stateG10_3 & i_hbusreq3)
    begin
      reg_stateG10_3 = 1'b0;
    end

   // Latching the previous input:
   reg_i_hready =  i_hready;
   reg_i_hbusreq0 =  i_hbusreq0;
   reg_i_hlock0 =  i_hlock0;
   reg_i_hbusreq1 =  i_hbusreq1;
   reg_i_hlock1 =  i_hlock1;
   reg_i_hbusreq2 =  i_hbusreq2;
   reg_i_hlock2 =  i_hlock2;
   reg_i_hbusreq3 =  i_hbusreq3;
   reg_i_hlock3 =  i_hlock3;
   reg_controllable_hmaster0 =  controllable_hmaster0;
   reg_controllable_hmaster1 =  controllable_hmaster1;
   reg_controllable_hmastlock =  controllable_hmastlock;
   reg_controllable_nstart =  controllable_nstart;
   reg_controllable_ndecide =  controllable_ndecide;
   reg_controllable_locked =  controllable_locked;
   reg_controllable_nhgrant0 =  controllable_nhgrant0;
   reg_controllable_hgrant1 =  controllable_hgrant1;
   reg_controllable_hgrant2 =  controllable_hgrant2;
   reg_controllable_hgrant3 =  controllable_hgrant3;
   reg_controllable_busreq =  controllable_busreq;

 end
endmodule

-------------------------------
