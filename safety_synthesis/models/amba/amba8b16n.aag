aag 958 35 64 1 859
2
4
6
8
10
12
14
16
18
20
22
24
26
28
30
32
34
36
38
40
42
44
46
48
50
52
54
56
58
60
62
64
66
68
70
72 1
74 50
76 1287
78 52
80 56
82 1301
84 1315
86 1361
88 58
90 1375
92 60
94 8
96 62
98 1389
100 1473
102 1487
104 1499
106 1523
108 1543
110 1567
112 70
114 1581
116 1667
118 1673
120 1679
122 1685
124 1691
126 36
128 68
130 1705
132 1727
134 34
136 1749
138 1779
140 30
142 66
144 1801
146 1815
148 28
150 64
152 54
154 1837
156 40
158 24
160 1859
162 4
164 20
166 38
168 1873
170 16
172 1895
174 10
176 12
178 2
180 1917
182 14
184 235
186 18
188 22
190 46
192 26
194 48
196 32
198 6
1116
200 47 12
202 49 16
204 203 201
206 51 20
208 207 204
210 53 24
212 211 208
214 57 28
216 215 212
218 59 30
220 219 216
222 61 34
224 223 220
226 63 36
228 227 224
230 185 72
232 231 72
234 233 228
236 69 67
238 236 65
240 46 39
242 47 38
244 243 241
246 245 238
248 68 67
250 248 65
252 48 39
254 49 38
256 255 253
258 257 250
260 259 247
262 69 66
264 262 65
266 50 39
268 51 38
270 269 267
272 271 264
274 273 260
276 68 66
278 276 65
280 52 39
282 53 38
284 283 281
286 285 278
288 287 274
290 236 64
292 56 39
294 57 38
296 295 293
298 297 290
300 299 288
302 248 64
304 58 39
306 59 38
308 307 305
310 309 302
312 311 300
314 262 64
316 60 39
318 61 38
320 319 317
322 321 314
324 323 312
326 276 64
328 62 39
330 63 38
332 331 329
334 333 326
336 335 324
338 157 72
340 156 72
342 339 72
344 343 9
346 345 336
348 139 72
350 138 72
352 349 72
354 350 9
356 355 346
358 101 72
360 100 72
362 359 72
364 107 72
366 106 72
368 365 72
370 369 363
372 109 72
374 108 72
376 373 72
378 377 370
380 379 9
382 381 356
384 179 72
386 178 72
388 385 72
390 386 238
392 389 239
394 393 391
396 395 340
398 397 382
400 163 72
402 162 72
404 401 72
406 405 250
408 402 251
410 409 407
412 411 340
414 413 398
416 175 72
418 174 72
420 417 72
422 421 264
424 418 265
426 425 423
428 427 340
430 429 414
432 183 72
434 182 72
436 433 72
438 437 278
440 434 279
442 441 439
444 443 340
446 445 430
448 187 72
450 186 72
452 449 72
454 453 290
456 450 291
458 457 455
460 459 340
462 461 446
464 189 72
466 188 72
468 465 72
470 469 302
472 466 303
474 473 471
476 475 340
478 477 462
480 193 72
482 192 72
484 481 72
486 485 314
488 482 315
490 489 487
492 491 340
494 493 478
496 197 72
498 196 72
500 497 72
502 501 326
504 498 327
506 505 503
508 507 340
510 509 494
512 199 72
514 198 72
516 513 72
518 514 71
520 517 70
522 521 519
524 523 340
526 525 510
528 129 72
530 128 72
532 529 72
534 143 72
536 142 72
538 535 72
540 539 533
542 151 72
544 150 72
546 543 72
548 547 540
550 549 238
552 548 239
554 553 551
556 555 8
558 557 526
560 539 530
562 560 547
564 563 250
566 562 251
568 567 565
570 569 8
572 571 558
574 536 533
576 574 547
578 577 264
580 576 265
582 581 579
584 583 8
586 585 572
588 536 530
590 588 547
592 591 278
594 590 279
596 595 593
598 597 8
600 599 586
602 544 540
604 603 290
606 602 291
608 607 605
610 609 8
612 611 600
614 560 544
616 615 302
618 614 303
620 619 617
622 621 8
624 623 612
626 574 544
628 627 314
630 626 315
632 631 629
634 633 8
636 635 624
638 588 544
640 639 326
642 638 327
644 643 641
646 645 8
648 647 636
650 113 72
652 112 72
654 651 72
656 655 70
658 652 71
660 659 657
662 661 8
664 663 648
666 153 72
668 152 72
670 667 72
672 177 72
674 176 72
676 673 72
678 674 671
680 678 3
682 680 7
684 683 664
686 677 671
688 686 3
690 688 6
692 691 684
694 171 72
696 170 72
698 695 72
700 696 671
702 700 4
704 702 7
706 705 692
708 699 671
710 708 4
712 710 6
714 713 706
716 165 72
718 164 72
720 717 72
722 718 671
724 722 10
726 724 7
728 727 714
730 721 671
732 730 10
734 732 6
736 735 728
738 159 72
740 158 72
742 739 72
744 740 671
746 744 14
748 746 7
750 749 736
752 743 671
754 752 14
756 754 6
758 757 750
760 149 72
762 148 72
764 761 72
766 762 671
768 766 18
770 768 7
772 771 758
774 765 671
776 774 18
778 776 6
780 779 772
782 141 72
784 140 72
786 783 72
788 784 671
790 788 22
792 790 7
794 793 780
796 787 671
798 796 22
800 798 6
802 801 794
804 135 72
806 134 72
808 805 72
810 806 671
812 810 26
814 812 7
816 815 802
818 809 671
820 818 26
822 820 6
824 823 816
826 127 72
828 126 72
830 827 72
832 828 671
834 832 32
836 834 7
838 837 824
840 831 671
842 840 32
844 842 6
846 845 838
848 389 2
850 386 3
852 851 849
854 853 668
856 855 846
858 402 5
860 405 4
862 861 859
864 863 668
866 865 856
868 418 11
870 421 10
872 871 869
874 873 668
876 875 866
878 434 15
880 437 14
882 881 879
884 883 668
886 885 876
888 450 19
890 453 18
892 891 889
894 893 668
896 895 886
898 466 23
900 469 22
902 901 899
904 903 668
906 905 896
908 482 27
910 485 26
912 911 909
914 913 668
916 915 906
918 498 33
920 501 32
922 921 919
924 923 668
926 925 916
928 514 7
930 517 6
932 931 929
934 933 668
936 935 926
938 133 72
940 132 72
942 939 72
944 49 4
946 944 940
948 947 936
950 137 72
952 136 72
954 951 72
956 51 10
958 956 952
960 959 948
962 145 72
964 144 72
966 963 72
968 53 14
970 968 964
972 971 960
974 155 72
976 154 72
978 975 72
980 57 18
982 980 976
984 983 972
986 161 72
988 160 72
990 987 72
992 59 22
994 992 988
996 995 984
998 173 72
1000 172 72
1002 999 72
1004 61 26
1006 1004 1000
1008 1007 996
1010 181 72
1012 180 72
1014 1011 72
1016 63 32
1018 1016 1012
1020 1019 1008
1022 191 72
1024 1023 72
1026 195 72
1028 1027 72
1030 1029 1025
1032 75 72
1034 1033 72
1036 1035 1030
1038 79 72
1040 1039 72
1042 1041 1036
1044 81 72
1046 1045 72
1048 1047 1042
1050 89 72
1052 1051 72
1054 1053 1048
1056 93 72
1058 1057 72
1060 1059 1054
1062 97 72
1064 1063 72
1066 1065 1060
1068 1066 671
1070 1068 2
1072 1071 1020
1074 125 72
1076 124 72
1078 1075 72
1080 123 72
1082 122 72
1084 1081 72
1086 121 72
1088 120 72
1090 1087 72
1092 119 72
1094 118 72
1096 1093 72
1098 117 72
1100 116 72
1102 1099 72
1104 1101 1095
1106 1104 1089
1108 1106 1083
1110 1108 1078
1112 1111 1079
1114 1112 1072
1116 1115 234
1118 169 72
1120 168 72
1122 1119 72
1124 1123 350
1126 147 72
1128 146 72
1130 1127 72
1132 1131 379
1134 1133 1125
1136 131 72
1138 130 72
1140 1137 72
1142 239 46
1144 1142 1141
1146 1145 1134
1148 115 72
1150 114 72
1152 1149 72
1154 251 48
1156 1154 1153
1158 1157 1146
1160 103 72
1162 102 72
1164 1161 72
1166 265 50
1168 1166 1165
1170 1169 1158
1172 99 72
1174 98 72
1176 1173 72
1178 279 52
1180 1178 1177
1182 1181 1170
1184 91 72
1186 90 72
1188 1185 72
1190 291 56
1192 1190 1189
1194 1193 1182
1196 83 72
1198 82 72
1200 1197 72
1202 303 58
1204 1202 1201
1206 1205 1194
1208 77 72
1210 76 72
1212 1209 72
1214 315 60
1216 1214 1213
1218 1217 1206
1220 85 72
1222 84 72
1224 1221 72
1226 327 62
1228 1226 1225
1230 1229 1218
1232 1123 353
1234 1131 378
1236 1235 1233
1238 1143 1141
1240 1239 1236
1242 1155 1153
1244 1243 1240
1246 1167 1165
1248 1247 1244
1250 1179 1177
1252 1251 1248
1254 1191 1189
1256 1255 1252
1258 1203 1201
1260 1259 1256
1262 1215 1213
1264 1263 1260
1266 1227 1225
1268 1267 1264
1270 1269 1231
1272 1271 1231
1274 1269 1217
1276 1268 1210
1278 1277 1275
1280 1279 1231
1282 1280 1273
1284 1272 1210
1286 1285 1283
1288 1269 1205
1290 1268 1198
1292 1291 1289
1294 1293 1231
1296 1294 1273
1298 1272 1198
1300 1299 1297
1302 1269 1229
1304 1268 1222
1306 1305 1303
1308 1307 1231
1310 1308 1273
1312 1272 1222
1314 1313 1311
1316 105 72
1318 104 72
1320 1317 72
1322 111 72
1324 110 72
1326 1323 72
1328 1324 1321
1330 87 72
1332 86 72
1334 1331 72
1336 1335 41
1338 1337 1329
1340 1268 1231
1342 1340 1338
1344 1343 1272
1346 1340 1339
1348 1347 1344
1350 1339 1337
1352 1350 1268
1354 1352 1231
1356 1354 1349
1358 1348 1332
1360 1359 1357
1362 1269 1193
1364 1268 1186
1366 1365 1363
1368 1367 1231
1370 1368 1273
1372 1272 1186
1374 1373 1371
1376 1269 1181
1378 1268 1174
1380 1379 1377
1382 1381 1231
1384 1382 1273
1386 1272 1174
1388 1387 1385
1390 378 70
1392 1390 9
1394 1392 45
1396 1394 42
1398 1396 41
1400 1396 40
1402 369 360
1404 1402 377
1406 1404 40
1408 366 363
1410 1408 377
1412 1410 40
1414 366 360
1416 1414 377
1418 1416 40
1420 374 370
1422 1420 40
1424 1400 1399
1426 1425 1399
1428 1401 1399
1430 1428 1406
1432 1431 1426
1434 1428 1407
1436 1434 1412
1438 1437 1432
1440 1434 1413
1442 1440 1418
1444 1443 1438
1446 1440 1419
1448 1446 1422
1450 1449 1444
1452 1423 360
1454 1452 1419
1456 1454 1413
1458 1457 1413
1460 1459 1407
1462 1460 1401
1464 1462 1399
1466 1465 1399
1468 1467 1451
1470 1450 360
1472 1471 1469
1474 1269 1169
1476 1268 1162
1478 1477 1475
1480 1479 1231
1482 1480 1273
1484 1272 1162
1486 1485 1483
1488 1339 1329
1490 1488 1268
1492 1490 1231
1494 1492 1349
1496 1348 1318
1498 1497 1495
1500 1423 366
1502 1500 1419
1504 1502 1413
1506 1505 1413
1508 1507 1407
1510 1509 1407
1512 1511 1401
1514 1513 1401
1516 1515 1399
1518 1516 1451
1520 1450 366
1522 1521 1519
1524 1423 374
1526 1524 1419
1528 1527 1419
1530 1529 1413
1532 1530 1407
1534 1532 1401
1536 1534 1399
1538 1536 1451
1540 1450 374
1542 1541 1539
1544 1327 70
1546 1544 45
1548 1546 43
1550 1324 39
1552 1550 1549
1554 1553 1549
1556 1551 1324
1558 1556 1549
1560 1559 1549
1562 1561 1555
1564 1554 1324
1566 1565 1563
1568 1269 1157
1570 1268 1150
1572 1571 1569
1574 1573 1231
1576 1574 1273
1578 1272 1150
1580 1579 1577
1582 1338 1103
1584 1339 1100
1586 1585 1583
1588 1587 1268
1590 1588 1231
1592 1100 1097
1594 1101 1094
1596 1595 1593
1598 1597 1338
1600 1339 1094
1602 1601 1599
1604 1603 1268
1606 1604 1231
1608 1100 1094
1610 1608 1091
1612 1609 1088
1614 1613 1611
1616 1615 1338
1618 1339 1088
1620 1619 1617
1622 1621 1268
1624 1622 1231
1626 1608 1088
1628 1626 1085
1630 1627 1082
1632 1631 1629
1634 1633 1338
1636 1339 1082
1638 1637 1635
1640 1639 1268
1642 1640 1231
1644 1626 1082
1646 1644 1079
1648 1645 1076
1650 1649 1647
1652 1651 1338
1654 1339 1076
1656 1655 1653
1658 1657 1268
1660 1658 1231
1662 1590 1345
1664 1344 1100
1666 1665 1663
1668 1606 1345
1670 1344 1094
1672 1671 1669
1674 1624 1345
1676 1344 1088
1678 1677 1675
1680 1642 1345
1682 1344 1082
1684 1683 1681
1686 1660 1345
1688 1344 1076
1690 1689 1687
1692 1269 1145
1694 1268 1138
1696 1695 1693
1698 1697 1231
1700 1698 1273
1702 1272 1138
1704 1703 1701
1706 943 5
1708 1706 49
1710 940 48
1712 1710 1709
1714 1713 1709
1716 1711 940
1718 1716 1709
1720 1719 1709
1722 1721 1715
1724 1714 940
1726 1725 1723
1728 955 11
1730 1728 51
1732 952 50
1734 1732 1731
1736 1735 1731
1738 1733 952
1740 1738 1731
1742 1741 1731
1744 1743 1737
1746 1736 952
1748 1747 1745
1750 70 9
1752 1750 45
1754 1752 43
1756 1754 353
1758 350 39
1760 1759 1757
1762 1755 350
1764 1763 1755
1766 350 38
1768 1765 353
1770 1766 350
1772 1771 1769
1774 1773 1761
1776 1760 350
1778 1777 1775
1780 967 15
1782 1780 53
1784 964 52
1786 1784 1783
1788 1787 1783
1790 1785 964
1792 1790 1783
1794 1793 1783
1796 1795 1789
1798 1788 964
1800 1799 1797
1802 1269 1133
1804 1268 1128
1806 1805 1803
1808 1807 1231
1810 1808 1273
1812 1272 1128
1814 1813 1811
1816 979 19
1818 1816 57
1820 976 56
1822 1820 1819
1824 1823 1819
1826 1821 976
1828 1826 1819
1830 1829 1819
1832 1831 1825
1834 1824 976
1836 1835 1833
1838 991 23
1840 1838 59
1842 988 58
1844 1842 1841
1846 1845 1841
1848 1843 988
1850 1848 1841
1852 1851 1841
1854 1853 1847
1856 1846 988
1858 1857 1855
1860 1269 1125
1862 1268 1120
1864 1863 1861
1866 1865 1231
1868 1866 1273
1870 1272 1120
1872 1871 1869
1874 1003 27
1876 1874 61
1878 1000 60
1880 1878 1877
1882 1881 1877
1884 1879 1000
1886 1884 1877
1888 1887 1877
1890 1889 1883
1892 1882 1000
1894 1893 1891
1896 1015 33
1898 1896 63
1900 1012 62
1902 1900 1899
1904 1903 1899
1906 1901 1012
1908 1906 1899
1910 1909 1899
1912 1911 1905
1914 1904 1012
1916 1915 1913
i0 controllable_nhgrant0
i1 controllable_hgrant1
i2 controllable_locked
i3 controllable_nstart
i4 controllable_hgrant2
i5 i_hlock0
i6 controllable_hgrant3
i7 i_hlock1
i8 controllable_hgrant4
i9 i_hlock2
i10 controllable_hgrant5
i11 i_hlock3
i12 controllable_hgrant6
i13 i_hlock4
i14 i_hlock5
i15 controllable_hgrant7
i16 i_hlock6
i17 i_hlock7
i18 controllable_busreq
i19 i_hready
i20 i_hburst1
i21 i_hburst0
i22 i_hbusreq0
i23 i_hbusreq1
i24 i_hbusreq2
i25 i_hbusreq3
i26 controllable_ndecide
i27 i_hbusreq4
i28 i_hbusreq5
i29 i_hbusreq6
i30 i_hbusreq7
i31 controllable_hmaster2
i32 controllable_hmaster1
i33 controllable_hmaster0
i34 controllable_hmastlock
l0 n73
l1 reg_i_hbusreq2_out
l2 sys_fair8done_out
l3 reg_i_hbusreq3_out
l4 reg_i_hbusreq4_out
l5 sys_fair7done_out
l6 sys_fair9done_out
l7 env_fair1done_out
l8 reg_i_hbusreq5_out
l9 sys_fair6done_out
l10 reg_i_hbusreq6_out
l11 reg_controllable_nstart_out
l12 reg_i_hbusreq7_out
l13 sys_fair5done_out
l14 reg_stateG3_0_out
l15 sys_fair4done_out
l16 env_fair0done_out
l17 reg_stateG3_1_out
l18 reg_stateG3_2_out
l19 reg_stateA1_out
l20 reg_controllable_hmastlock_out
l21 sys_fair3done_out
l22 fair_cnt<0>_out
l23 fair_cnt<1>_out
l24 fair_cnt<2>_out
l25 fair_cnt<3>_out
l26 fair_cnt<4>_out
l27 reg_i_hlock7_out
l28 reg_controllable_hmaster0_out
l29 sys_fair2done_out
l30 reg_stateG10_1_out
l31 reg_i_hlock6_out
l32 reg_stateG10_2_out
l33 reg_stateG2_out
l34 reg_i_hlock5_out
l35 reg_controllable_hmaster1_out
l36 reg_stateG10_3_out
l37 sys_fair1done_out
l38 reg_i_hlock4_out
l39 reg_controllable_hmaster2_out
l40 reg_controllable_ndecide_out
l41 reg_stateG10_4_out
l42 reg_i_hready_out
l43 reg_i_hlock3_out
l44 reg_stateG10_5_out
l45 reg_controllable_hgrant1_out
l46 reg_i_hlock2_out
l47 reg_controllable_busreq_out
l48 sys_fair0done_out
l49 reg_i_hlock1_out
l50 reg_stateG10_6_out
l51 reg_controllable_hgrant2_out
l52 reg_i_hlock0_out
l53 reg_controllable_nhgrant0_out
l54 reg_stateG10_7_out
l55 reg_controllable_hgrant3_out
l56 env_safe_err_happened_out
l57 reg_controllable_hgrant4_out
l58 reg_controllable_hgrant5_out
l59 reg_i_hbusreq0_out
l60 reg_controllable_hgrant6_out
l61 reg_i_hbusreq1_out
l62 reg_controllable_hgrant7_out
l63 reg_controllable_locked_out
o0 o_err
c
amba_8_new_16
This file was written by ABC on Tue May  5 16:53:39 2015
For information about AIGER format, refer to http://fmv.jku.at/aiger
-------------------------------
This AIGER file has been created by the following sequence of commands:
> vl2mv amba8b16.v   ---gives--> amba8b16.mv
> abc -c "read_blif_mv amba8b16.mv; write_aiger -s amba8b16n.aig"   ---gives--> amba8b16n.aig
> aigtoaig amba8b16n.aig amba8b16n.aag   ---gives--> amba8b16n.aag (this file)
Content of amba8b16.v:
module amba_8_new_16(
        o_err,
        i_clk,
        i_hready,
        i_hbusreq0,
        i_hlock0,
        i_hbusreq1,
        i_hlock1,
        i_hbusreq2,
        i_hlock2,
        i_hbusreq3,
        i_hlock3,
        i_hbusreq4,
        i_hlock4,
        i_hbusreq5,
        i_hlock5,
        i_hbusreq6,
        i_hlock6,
        i_hbusreq7,
        i_hlock7,
        i_hburst0,
        i_hburst1,
        controllable_hmaster0,
        controllable_hmaster1,
        controllable_hmaster2,
        controllable_hmastlock,
        controllable_nstart,
        controllable_ndecide,
        controllable_locked,
        controllable_nhgrant0,
        controllable_hgrant1,
        controllable_hgrant2,
        controllable_hgrant3,
        controllable_hgrant4,
        controllable_hgrant5,
        controllable_hgrant6,
        controllable_hgrant7,
        controllable_busreq);

input i_clk;
input i_hready;
input i_hbusreq0;
input i_hlock0;
input i_hbusreq1;
input i_hlock1;
input i_hbusreq2;
input i_hlock2;
input i_hbusreq3;
input i_hlock3;
input i_hbusreq4;
input i_hlock4;
input i_hbusreq5;
input i_hlock5;
input i_hbusreq6;
input i_hlock6;
input i_hbusreq7;
input i_hlock7;
input i_hburst0;
input i_hburst1;
input controllable_hmaster0;
input controllable_hmaster1;
input controllable_hmaster2;
input controllable_hmastlock;
input controllable_nstart;
input controllable_ndecide;
input controllable_locked;
input controllable_nhgrant0;
input controllable_hgrant1;
input controllable_hgrant2;
input controllable_hgrant3;
input controllable_hgrant4;
input controllable_hgrant5;
input controllable_hgrant6;
input controllable_hgrant7;
input controllable_busreq;
output o_err;

reg reg_i_hready;
reg reg_i_hbusreq0;
reg reg_i_hlock0;
reg reg_i_hbusreq1;
reg reg_i_hlock1;
reg reg_i_hbusreq2;
reg reg_i_hlock2;
reg reg_i_hbusreq3;
reg reg_i_hlock3;
reg reg_i_hbusreq4;
reg reg_i_hlock4;
reg reg_i_hbusreq5;
reg reg_i_hlock5;
reg reg_i_hbusreq6;
reg reg_i_hlock6;
reg reg_i_hbusreq7;
reg reg_i_hlock7;
reg reg_controllable_hmaster0;
reg reg_controllable_hmaster1;
reg reg_controllable_hmaster2;
reg reg_controllable_hmastlock;
reg reg_controllable_nstart;
reg reg_controllable_ndecide;
reg reg_controllable_locked;
reg reg_controllable_nhgrant0;
reg reg_controllable_hgrant1;
reg reg_controllable_hgrant2;
reg reg_controllable_hgrant3;
reg reg_controllable_hgrant4;
reg reg_controllable_hgrant5;
reg reg_controllable_hgrant6;
reg reg_controllable_hgrant7;
reg reg_controllable_busreq;
reg reg_stateA1;
reg reg_stateG2;
reg reg_stateG3_0;
reg reg_stateG3_1;
reg reg_stateG3_2;
reg reg_stateG10_1;
reg reg_stateG10_2;
reg reg_stateG10_3;
reg reg_stateG10_4;
reg reg_stateG10_5;
reg reg_stateG10_6;
reg reg_stateG10_7;
reg env_safe_err_happened;
reg env_fair0done;
reg env_fair1done;
reg sys_fair0done;
reg sys_fair1done;
reg sys_fair2done;
reg sys_fair3done;
reg sys_fair4done;
reg sys_fair5done;
reg sys_fair6done;
reg sys_fair7done;
reg sys_fair8done;
reg sys_fair9done;
reg [4:0] fair_cnt;

wire env_safe_err0;
wire env_safe_err1;
wire env_safe_err2;
wire env_safe_err3;
wire env_safe_err4;
wire env_safe_err5;
wire env_safe_err6;
wire env_safe_err7;
wire env_safe_err;

wire sys_safe_err0;
wire sys_safe_err1;
wire sys_safe_err2;
wire sys_safe_err3;
wire sys_safe_err4;
wire sys_safe_err5;
wire sys_safe_err6;
wire sys_safe_err7;
wire sys_safe_err8;
wire sys_safe_err9;
wire sys_safe_err10;
wire sys_safe_err11;
wire sys_safe_err12;
wire sys_safe_err13;
wire sys_safe_err14;
wire sys_safe_err15;
wire sys_safe_err16;
wire sys_safe_err17;
wire sys_safe_err18;
wire sys_safe_err19;
wire sys_safe_err20;
wire sys_safe_err21;
wire sys_safe_err22;
wire sys_safe_err23;
wire sys_safe_err24;
wire sys_safe_err25;
wire sys_safe_err26;
wire sys_safe_err27;
wire sys_safe_err28;
wire sys_safe_err29;
wire sys_safe_err30;
wire sys_safe_err31;
wire sys_safe_err32;
wire sys_safe_err33;
wire sys_safe_err34;
wire sys_safe_err35;
wire sys_safe_err36;
wire sys_safe_err37;
wire sys_safe_err38;
wire sys_safe_err39;
wire sys_safe_err40;
wire sys_safe_err41;
wire sys_safe_err42;
wire sys_safe_err43;
wire sys_safe_err44;
wire sys_safe_err45;
wire sys_safe_err46;
wire sys_safe_err47;
wire sys_safe_err48;
wire sys_safe_err49;
wire sys_safe_err50;
wire sys_safe_err51;
wire sys_safe_err52;
wire sys_safe_err53;
wire sys_safe_err54;
wire sys_safe_err55;
wire sys_safe_err56;
wire sys_safe_err57;
wire sys_safe_err58;
wire sys_safe_err59;
wire sys_safe_err60;
wire sys_safe_err61;
wire sys_safe_err;

wire env_fair0;
wire env_fair1;

wire sys_fair0;
wire sys_fair1;
wire sys_fair2;
wire sys_fair3;
wire sys_fair4;
wire sys_fair5;
wire sys_fair6;
wire sys_fair7;
wire sys_fair8;
wire sys_fair9;
wire progress_in_sys_fair;
wire all_env_fair_fulfilled;
wire all_sys_fair_fulfilled;
wire fair_err;
wire o_err;

// =============================================================
//                        ENV_TRANSITION:
// =============================================================
// Assumption 3:
// G( hlock0=1 -> hbusreq0=1 );
assign env_safe_err0 =  ~(~ i_hlock0 | i_hbusreq0);

// Assumption 3:
// G( hlock1=1 -> hbusreq1=1 );
assign env_safe_err1 =  ~(~ i_hlock1 | i_hbusreq1);

// Assumption 3:
// G( hlock2=1 -> hbusreq2=1 );
assign env_safe_err2 =  ~(~ i_hlock2 | i_hbusreq2);

// Assumption 3:
// G( hlock3=1 -> hbusreq3=1 );
assign env_safe_err3 =  ~(~ i_hlock3 | i_hbusreq3);

// Assumption 3:
// G( hlock4=1 -> hbusreq4=1 );
assign env_safe_err4 =  ~(~ i_hlock4 | i_hbusreq4);

// Assumption 3:
// G( hlock5=1 -> hbusreq5=1 );
assign env_safe_err5 =  ~(~ i_hlock5 | i_hbusreq5);

// Assumption 3:
// G( hlock6=1 -> hbusreq6=1 );
assign env_safe_err6 =  ~(~ i_hlock6 | i_hbusreq6);

// Assumption 3:
// G( hlock7=1 -> hbusreq7=1 );
assign env_safe_err7 =  ~(~ i_hlock7 | i_hbusreq7);

// collecting together the safety error bits:
assign env_safe_err = env_safe_err0 |
                      env_safe_err1 |
                      env_safe_err2 |
                      env_safe_err3 |
                      env_safe_err4 |
                      env_safe_err5 |
                      env_safe_err6 |
                      env_safe_err7;

// =============================================================
//                        SYS_TRANSITION:
// =============================================================
// G((hmaster0=0) * (hmaster1=0) * (hmaster2=0) -> (hbusreq0=0 <-> busreq=0));
assign sys_safe_err0 =  ~( ~( ~(controllable_hmaster0) & ~(controllable_hmaster1) & ~(controllable_hmaster2) )|(~i_hbusreq0 ^~ (~controllable_busreq)));

// G((hmaster0=1) * (hmaster1=0) * (hmaster2=0) -> (hbusreq1=0 <-> busreq=0));
assign sys_safe_err1 =  ~( ~( controllable_hmaster0 & ~(controllable_hmaster1) & ~(controllable_hmaster2) )|(~i_hbusreq1 ^~ (~controllable_busreq)));

// G((hmaster0=0) * (hmaster1=1) * (hmaster2=0) -> (hbusreq2=0 <-> busreq=0));
assign sys_safe_err2 =  ~( ~( ~(controllable_hmaster0) & controllable_hmaster1 & ~(controllable_hmaster2) )|(~i_hbusreq2 ^~ (~controllable_busreq)));

// G((hmaster0=1) * (hmaster1=1) * (hmaster2=0) -> (hbusreq3=0 <-> busreq=0));
assign sys_safe_err3 =  ~( ~( controllable_hmaster0 & controllable_hmaster1 & ~(controllable_hmaster2) )|(~i_hbusreq3 ^~ (~controllable_busreq)));

// G((hmaster0=0) * (hmaster1=0) * (hmaster2=1) -> (hbusreq4=0 <-> busreq=0));
assign sys_safe_err4 =  ~( ~( ~(controllable_hmaster0) & ~(controllable_hmaster1) & controllable_hmaster2 )|(~i_hbusreq4 ^~ (~controllable_busreq)));

// G((hmaster0=1) * (hmaster1=0) * (hmaster2=1) -> (hbusreq5=0 <-> busreq=0));
assign sys_safe_err5 =  ~( ~( controllable_hmaster0 & ~(controllable_hmaster1) & controllable_hmaster2 )|(~i_hbusreq5 ^~ (~controllable_busreq)));

// G((hmaster0=0) * (hmaster1=1) * (hmaster2=1) -> (hbusreq6=0 <-> busreq=0));
assign sys_safe_err6 =  ~( ~( ~(controllable_hmaster0) & controllable_hmaster1 & controllable_hmaster2 )|(~i_hbusreq6 ^~ (~controllable_busreq)));

// G((hmaster0=1) * (hmaster1=1) * (hmaster2=1) -> (hbusreq7=0 <-> busreq=0));
assign sys_safe_err7 =  ~( ~( controllable_hmaster0 & controllable_hmaster1 & controllable_hmaster2 )|(~i_hbusreq7 ^~ (~controllable_busreq)));

// Guarantee 1:
// G((hready=0) -> X(start=0));
assign sys_safe_err8 =  ~( reg_i_hready | controllable_nstart );

// G(((stateG2=1) * (start=1)) -> FALSE;
assign sys_safe_err9 =  ~( ~(reg_stateG2 & ~controllable_nstart) | 0 );

// G(((stateG3_0=1) * (stateG3_1=0) * (stateG3_2=0) * ((start=1))) -> FALSE);
// G(((stateG3_0=0) * (stateG3_1=1) * (stateG3_2=0) * ((start=1))) -> FALSE);
// G(((stateG3_0=1) * (stateG3_1=1) * (stateG3_2=0) * ((start=1))) -> FALSE);
// G(((stateG3_0=0) * (stateG3_1=0) * (stateG3_2=1) * ((start=1))) -> FALSE);
// all these rules can be summarized as: only in state 000, start=1 is allowed:
assign sys_safe_err10 =  (reg_stateG3_0 | reg_stateG3_1 | reg_stateG3_2) & ~controllable_nstart;

// G( (hready=1) -> (   (hgrant0=1) <-> (X(hmaster0=0) * X(hmaster1=0) * X(hmaster2=0))  ) );
assign sys_safe_err11 =  ~( ~(reg_i_hready) | ( ~reg_controllable_nhgrant0 ^~ ( ~(controllable_hmaster0) & ~(controllable_hmaster1) & ~(controllable_hmaster2) ) ) );

// G( (hready=1) -> (   (hgrant1=1) <-> (X(hmaster0=1) * X(hmaster1=0) * X(hmaster2=0))  ) );
assign sys_safe_err12 =  ~( ~(reg_i_hready) | ( reg_controllable_hgrant1 ^~ ( controllable_hmaster0 & ~(controllable_hmaster1) & ~(controllable_hmaster2) ) ) );

// G( (hready=1) -> (   (hgrant2=1) <-> (X(hmaster0=0) * X(hmaster1=1) * X(hmaster2=0))  ) );
assign sys_safe_err13 =  ~( ~(reg_i_hready) | ( reg_controllable_hgrant2 ^~ ( ~(controllable_hmaster0) & controllable_hmaster1 & ~(controllable_hmaster2) ) ) );

// G( (hready=1) -> (   (hgrant3=1) <-> (X(hmaster0=1) * X(hmaster1=1) * X(hmaster2=0))  ) );
assign sys_safe_err14 =  ~( ~(reg_i_hready) | ( reg_controllable_hgrant3 ^~ ( controllable_hmaster0 & controllable_hmaster1 & ~(controllable_hmaster2) ) ) );

// G( (hready=1) -> (   (hgrant4=1) <-> (X(hmaster0=0) * X(hmaster1=0) * X(hmaster2=1))  ) );
assign sys_safe_err15 =  ~( ~(reg_i_hready) | ( reg_controllable_hgrant4 ^~ ( ~(controllable_hmaster0) & ~(controllable_hmaster1) & controllable_hmaster2 ) ) );

// G( (hready=1) -> (   (hgrant5=1) <-> (X(hmaster0=1) * X(hmaster1=0) * X(hmaster2=1))  ) );
assign sys_safe_err16 =  ~( ~(reg_i_hready) | ( reg_controllable_hgrant5 ^~ ( controllable_hmaster0 & ~(controllable_hmaster1) & controllable_hmaster2 ) ) );

// G( (hready=1) -> (   (hgrant6=1) <-> (X(hmaster0=0) * X(hmaster1=1) * X(hmaster2=1))  ) );
assign sys_safe_err17 =  ~( ~(reg_i_hready) | ( reg_controllable_hgrant6 ^~ ( ~(controllable_hmaster0) & controllable_hmaster1 & controllable_hmaster2 ) ) );

// G( (hready=1) -> (   (hgrant7=1) <-> (X(hmaster0=1) * X(hmaster1=1) * X(hmaster2=1))  ) );
assign sys_safe_err18 =  ~( ~(reg_i_hready) | ( reg_controllable_hgrant7 ^~ ( controllable_hmaster0 & controllable_hmaster1 & controllable_hmaster2 ) ) );

// HMASTLOCK:
// G(  (hready=1) -> (locked=0 <-> X(hmastlock=0) ) );
assign sys_safe_err19 =  ~( ~(reg_i_hready) | (~reg_controllable_locked ^~ ~controllable_hmastlock) );

// Master 0:
// G( X(start=0) -> ( ((hmaster0=0) * (hmaster1=0) * (hmaster2=0)) <-> (X(hmaster0=0) * X(hmaster1=0) * X(hmaster2=0)) ) );
assign sys_safe_err20 =  ~( ~(controllable_nstart) | ( ( ~(reg_controllable_hmaster0) & ~(reg_controllable_hmaster1) & ~(reg_controllable_hmaster2) ) ^~ ( ~(controllable_hmaster0) & ~(controllable_hmaster1) & ~(controllable_hmaster2) )) );

// Master 1:
// G( X(start=0) -> ( ((hmaster0=1) * (hmaster1=0) * (hmaster2=0)) <-> (X(hmaster0=1) * X(hmaster1=0) * X(hmaster2=0)) ) );
assign sys_safe_err21 =  ~( ~(controllable_nstart) | ( ( reg_controllable_hmaster0 & ~(reg_controllable_hmaster1) & ~(reg_controllable_hmaster2) ) ^~ ( controllable_hmaster0 & ~(controllable_hmaster1) & ~(controllable_hmaster2) )) );

// Master 2:
// G( X(start=0) -> ( ((hmaster0=0) * (hmaster1=1) * (hmaster2=0)) <-> (X(hmaster0=0) * X(hmaster1=1) * X(hmaster2=0)) ) );
assign sys_safe_err22 =  ~( ~(controllable_nstart) | ( ( ~(reg_controllable_hmaster0) & reg_controllable_hmaster1 & ~(reg_controllable_hmaster2) ) ^~ ( ~(controllable_hmaster0) & controllable_hmaster1 & ~(controllable_hmaster2) )) );

// Master 3:
// G( X(start=0) -> ( ((hmaster0=1) * (hmaster1=1) * (hmaster2=0)) <-> (X(hmaster0=1) * X(hmaster1=1) * X(hmaster2=0)) ) );
assign sys_safe_err23 =  ~( ~(controllable_nstart) | ( ( reg_controllable_hmaster0 & reg_controllable_hmaster1 & ~(reg_controllable_hmaster2) ) ^~ ( controllable_hmaster0 & controllable_hmaster1 & ~(controllable_hmaster2) )) );

// Master 4:
// G( X(start=0) -> ( ((hmaster0=0) * (hmaster1=0) * (hmaster2=1)) <-> (X(hmaster0=0) * X(hmaster1=0) * X(hmaster2=1)) ) );
assign sys_safe_err24 =  ~( ~(controllable_nstart) | ( ( ~(reg_controllable_hmaster0) & ~(reg_controllable_hmaster1) & reg_controllable_hmaster2 ) ^~ ( ~(controllable_hmaster0) & ~(controllable_hmaster1) & controllable_hmaster2 )) );

// Master 5:
// G( X(start=0) -> ( ((hmaster0=1) * (hmaster1=0) * (hmaster2=1)) <-> (X(hmaster0=1) * X(hmaster1=0) * X(hmaster2=1)) ) );
assign sys_safe_err25 =  ~( ~(controllable_nstart) | ( ( reg_controllable_hmaster0 & ~(reg_controllable_hmaster1) & reg_controllable_hmaster2 ) ^~ ( controllable_hmaster0 & ~(controllable_hmaster1) & controllable_hmaster2 )) );

// Master 6:
// G( X(start=0) -> ( ((hmaster0=0) * (hmaster1=1) * (hmaster2=1)) <-> (X(hmaster0=0) * X(hmaster1=1) * X(hmaster2=1)) ) );
assign sys_safe_err26 =  ~( ~(controllable_nstart) | ( ( ~(reg_controllable_hmaster0) & reg_controllable_hmaster1 & reg_controllable_hmaster2 ) ^~ ( ~(controllable_hmaster0) & controllable_hmaster1 & controllable_hmaster2 )) );

// Master 7:
// G( X(start=0) -> ( ((hmaster0=1) * (hmaster1=1) * (hmaster2=1)) <-> (X(hmaster0=1) * X(hmaster1=1) * X(hmaster2=1)) ) );
assign sys_safe_err27 =  ~( ~(controllable_nstart) | ( ( reg_controllable_hmaster0 & reg_controllable_hmaster1 & reg_controllable_hmaster2 ) ^~ ( controllable_hmaster0 & controllable_hmaster1 & controllable_hmaster2 )) );

// Guarantee 6.2:
// G( ((X(start=0))) -> ( (hmastlock=1) <-> X(hmastlock=1)) );
assign sys_safe_err28 =  ~( ~(controllable_nstart) | ( reg_controllable_hmastlock ^~ controllable_hmastlock) );

// G( (decide=1  *  hlock0=1  *  X(hgrant0=1) )->X(locked=1));
assign sys_safe_err29 =  ~( ~(~reg_controllable_ndecide & reg_i_hlock0 & ~controllable_nhgrant0) | (controllable_locked) );

// G((decide=1  *  hlock0=0  *  X(hgrant0=1))->X(locked=0));
assign sys_safe_err30 =  ~( ~(~reg_controllable_ndecide & ~reg_i_hlock0 & ~controllable_nhgrant0) | (~controllable_locked) );

// G( (decide=1  *  hlock1=1  *  X(hgrant1=1) )->X(locked=1));
assign sys_safe_err31 =  ~( ~(~reg_controllable_ndecide & reg_i_hlock1 & controllable_hgrant1) | (controllable_locked) );

// G((decide=1  *  hlock1=0  *  X(hgrant1=1))->X(locked=0));
assign sys_safe_err32 =  ~( ~(~reg_controllable_ndecide & ~reg_i_hlock1 & controllable_hgrant1) | (~controllable_locked) );

// G( (decide=1  *  hlock2=1  *  X(hgrant2=1) )->X(locked=1));
assign sys_safe_err33 =  ~( ~(~reg_controllable_ndecide & reg_i_hlock2 & controllable_hgrant2) | (controllable_locked) );

// G((decide=1  *  hlock2=0  *  X(hgrant2=1))->X(locked=0));
assign sys_safe_err34 =  ~( ~(~reg_controllable_ndecide & ~reg_i_hlock2 & controllable_hgrant2) | (~controllable_locked) );

// G( (decide=1  *  hlock3=1  *  X(hgrant3=1) )->X(locked=1));
assign sys_safe_err35 =  ~( ~(~reg_controllable_ndecide & reg_i_hlock3 & controllable_hgrant3) | (controllable_locked) );

// G((decide=1  *  hlock3=0  *  X(hgrant3=1))->X(locked=0));
assign sys_safe_err36 =  ~( ~(~reg_controllable_ndecide & ~reg_i_hlock3 & controllable_hgrant3) | (~controllable_locked) );

// G( (decide=1  *  hlock4=1  *  X(hgrant4=1) )->X(locked=1));
assign sys_safe_err37 =  ~( ~(~reg_controllable_ndecide & reg_i_hlock4 & controllable_hgrant4) | (controllable_locked) );

// G((decide=1  *  hlock4=0  *  X(hgrant4=1))->X(locked=0));
assign sys_safe_err38 =  ~( ~(~reg_controllable_ndecide & ~reg_i_hlock4 & controllable_hgrant4) | (~controllable_locked) );

// G( (decide=1  *  hlock5=1  *  X(hgrant5=1) )->X(locked=1));
assign sys_safe_err39 =  ~( ~(~reg_controllable_ndecide & reg_i_hlock5 & controllable_hgrant5) | (controllable_locked) );

// G((decide=1  *  hlock5=0  *  X(hgrant5=1))->X(locked=0));
assign sys_safe_err40 =  ~( ~(~reg_controllable_ndecide & ~reg_i_hlock5 & controllable_hgrant5) | (~controllable_locked) );

// G( (decide=1  *  hlock6=1  *  X(hgrant6=1) )->X(locked=1));
assign sys_safe_err41 =  ~( ~(~reg_controllable_ndecide & reg_i_hlock6 & controllable_hgrant6) | (controllable_locked) );

// G((decide=1  *  hlock6=0  *  X(hgrant6=1))->X(locked=0));
assign sys_safe_err42 =  ~( ~(~reg_controllable_ndecide & ~reg_i_hlock6 & controllable_hgrant6) | (~controllable_locked) );

// G( (decide=1  *  hlock7=1  *  X(hgrant7=1) )->X(locked=1));
assign sys_safe_err43 =  ~( ~(~reg_controllable_ndecide & reg_i_hlock7 & controllable_hgrant7) | (controllable_locked) );

// G((decide=1  *  hlock7=0  *  X(hgrant7=1))->X(locked=0));
assign sys_safe_err44 =  ~( ~(~reg_controllable_ndecide & ~reg_i_hlock7 & controllable_hgrant7) | (~controllable_locked) );

// G( (decide=0) -> (  ((hgrant0=0)<->X(hgrant0=0))  ));
assign sys_safe_err45 =  ~( ~(reg_controllable_ndecide) | (reg_controllable_nhgrant0 ^~ controllable_nhgrant0) );

// G( (decide=0) -> (  ((hgrant1=0)<->X(hgrant1=0))  ));
assign sys_safe_err46 =  ~( ~(reg_controllable_ndecide) | (~reg_controllable_hgrant1 ^~ ~controllable_hgrant1) );

// G( (decide=0) -> (  ((hgrant2=0)<->X(hgrant2=0))  ));
assign sys_safe_err47 =  ~( ~(reg_controllable_ndecide) | (~reg_controllable_hgrant2 ^~ ~controllable_hgrant2) );

// G( (decide=0) -> (  ((hgrant3=0)<->X(hgrant3=0))  ));
assign sys_safe_err48 =  ~( ~(reg_controllable_ndecide) | (~reg_controllable_hgrant3 ^~ ~controllable_hgrant3) );

// G( (decide=0) -> (  ((hgrant4=0)<->X(hgrant4=0))  ));
assign sys_safe_err49 =  ~( ~(reg_controllable_ndecide) | (~reg_controllable_hgrant4 ^~ ~controllable_hgrant4) );

// G( (decide=0) -> (  ((hgrant5=0)<->X(hgrant5=0))  ));
assign sys_safe_err50 =  ~( ~(reg_controllable_ndecide) | (~reg_controllable_hgrant5 ^~ ~controllable_hgrant5) );

// G( (decide=0) -> (  ((hgrant6=0)<->X(hgrant6=0))  ));
assign sys_safe_err51 =  ~( ~(reg_controllable_ndecide) | (~reg_controllable_hgrant6 ^~ ~controllable_hgrant6) );

// G( (decide=0) -> (  ((hgrant7=0)<->X(hgrant7=0))  ));
assign sys_safe_err52 =  ~( ~(reg_controllable_ndecide) | (~reg_controllable_hgrant7 ^~ ~controllable_hgrant7) );

// G((decide=0)->(locked=0 <-> X(locked=0)));
assign sys_safe_err53 =  ~( ~(reg_controllable_ndecide) | (~reg_controllable_locked ^~ ~controllable_locked) );

// G(((stateG10_1=1) * (((hgrant1=1)) * (hbusreq1=0)))->FALSE);
assign sys_safe_err54 =  ~( ~(reg_stateG10_1 & (controllable_hgrant1 & ~i_hbusreq1)) | 0 );

// G(((stateG10_2=1) * (((hgrant2=1)) * (hbusreq2=0)))->FALSE);
assign sys_safe_err55 =  ~( ~(reg_stateG10_2 & (controllable_hgrant2 & ~i_hbusreq2)) | 0 );

// G(((stateG10_3=1) * (((hgrant3=1)) * (hbusreq3=0)))->FALSE);
assign sys_safe_err56 =  ~( ~(reg_stateG10_3 & (controllable_hgrant3 & ~i_hbusreq3)) | 0 );

// G(((stateG10_4=1) * (((hgrant4=1)) * (hbusreq4=0)))->FALSE);
assign sys_safe_err57 =  ~( ~(reg_stateG10_4 & (controllable_hgrant4 & ~i_hbusreq4)) | 0 );

// G(((stateG10_5=1) * (((hgrant5=1)) * (hbusreq5=0)))->FALSE);
assign sys_safe_err58 =  ~( ~(reg_stateG10_5 & (controllable_hgrant5 & ~i_hbusreq5)) | 0 );

// G(((stateG10_6=1) * (((hgrant6=1)) * (hbusreq6=0)))->FALSE);
assign sys_safe_err59 =  ~( ~(reg_stateG10_6 & (controllable_hgrant6 & ~i_hbusreq6)) | 0 );

// G(((stateG10_7=1) * (((hgrant7=1)) * (hbusreq7=0)))->FALSE);
assign sys_safe_err60 =  ~( ~(reg_stateG10_7 & (controllable_hgrant7 & ~i_hbusreq7)) | 0 );

// default master
// G((decide=1  *  hbusreq0=0  *  hbusreq1=0  *  hbusreq2=0  *  hbusreq3=0  *  hbusreq4=0  *  hbusreq5=0  *  hbusreq6=0  *  hbusreq7=0) -> X(hgrant0=1));
assign sys_safe_err61 =  ~( ~(~reg_controllable_ndecide & (~reg_i_hbusreq0 & ~reg_i_hbusreq1 & ~reg_i_hbusreq2 & ~reg_i_hbusreq3 & ~reg_i_hbusreq4 & ~reg_i_hbusreq5 & ~reg_i_hbusreq6 & ~reg_i_hbusreq7)) | (~controllable_nhgrant0) );

// collecting together the safety error bits:
assign sys_safe_err = sys_safe_err0 |
                      sys_safe_err1 |
                      sys_safe_err2 |
                      sys_safe_err3 |
                      sys_safe_err4 |
                      sys_safe_err5 |
                      sys_safe_err6 |
                      sys_safe_err7 |
                      sys_safe_err8 |
                      sys_safe_err9 |
                      sys_safe_err10 |
                      sys_safe_err11 |
                      sys_safe_err12 |
                      sys_safe_err13 |
                      sys_safe_err14 |
                      sys_safe_err15 |
                      sys_safe_err16 |
                      sys_safe_err17 |
                      sys_safe_err18 |
                      sys_safe_err19 |
                      sys_safe_err20 |
                      sys_safe_err21 |
                      sys_safe_err22 |
                      sys_safe_err23 |
                      sys_safe_err24 |
                      sys_safe_err25 |
                      sys_safe_err26 |
                      sys_safe_err27 |
                      sys_safe_err28 |
                      sys_safe_err29 |
                      sys_safe_err30 |
                      sys_safe_err31 |
                      sys_safe_err32 |
                      sys_safe_err33 |
                      sys_safe_err34 |
                      sys_safe_err35 |
                      sys_safe_err36 |
                      sys_safe_err37 |
                      sys_safe_err38 |
                      sys_safe_err39 |
                      sys_safe_err40 |
                      sys_safe_err41 |
                      sys_safe_err42 |
                      sys_safe_err43 |
                      sys_safe_err44 |
                      sys_safe_err45 |
                      sys_safe_err46 |
                      sys_safe_err47 |
                      sys_safe_err48 |
                      sys_safe_err49 |
                      sys_safe_err50 |
                      sys_safe_err51 |
                      sys_safe_err52 |
                      sys_safe_err53 |
                      sys_safe_err54 |
                      sys_safe_err55 |
                      sys_safe_err56 |
                      sys_safe_err57 |
                      sys_safe_err58 |
                      sys_safe_err59 |
                      sys_safe_err60 |
                      sys_safe_err61;

// =============================================================
//                          ENV_FAIRNESS:
// =============================================================
// Assumption 1: 
// G(F(stateA1=0));
assign env_fair0 =  ~reg_stateA1;

// Assumption 2:
// G(F(hready=1));
assign env_fair1 =  i_hready;

assign all_env_fair_fulfilled = (env_fair0done | env_fair0) &
                                (env_fair1done | env_fair1);

// =============================================================
//                          SYS_FAIRNESS:
// =============================================================
// Guarantee 2:
// G(F(stateG2=0));
assign sys_fair0 = ~reg_stateG2;

// Guarantee 3:
// G(F((stateG3_0=0)  *  (stateG3_1=0)  *  (stateG3_2=0)));
assign sys_fair1 =  (~reg_stateG3_0 & ~reg_stateG3_1 & ~reg_stateG3_2);

// G(F(((hmaster0=0) * (hmaster1=0) * (hmaster2=0))  |  hbusreq0=0));
assign sys_fair2 =  ( ~(controllable_hmaster0) & ~(controllable_hmaster1) & ~(controllable_hmaster2) ) | ~i_hbusreq0;

// G(F(((hmaster0=1) * (hmaster1=0) * (hmaster2=0))  |  hbusreq1=0));
assign sys_fair3 =  ( controllable_hmaster0 & ~(controllable_hmaster1) & ~(controllable_hmaster2) ) | ~i_hbusreq1;

// G(F(((hmaster0=0) * (hmaster1=1) * (hmaster2=0))  |  hbusreq2=0));
assign sys_fair4 =  ( ~(controllable_hmaster0) & controllable_hmaster1 & ~(controllable_hmaster2) ) | ~i_hbusreq2;

// G(F(((hmaster0=1) * (hmaster1=1) * (hmaster2=0))  |  hbusreq3=0));
assign sys_fair5 =  ( controllable_hmaster0 & controllable_hmaster1 & ~(controllable_hmaster2) ) | ~i_hbusreq3;

// G(F(((hmaster0=0) * (hmaster1=0) * (hmaster2=1))  |  hbusreq4=0));
assign sys_fair6 =  ( ~(controllable_hmaster0) & ~(controllable_hmaster1) & controllable_hmaster2 ) | ~i_hbusreq4;

// G(F(((hmaster0=1) * (hmaster1=0) * (hmaster2=1))  |  hbusreq5=0));
assign sys_fair7 =  ( controllable_hmaster0 & ~(controllable_hmaster1) & controllable_hmaster2 ) | ~i_hbusreq5;

// G(F(((hmaster0=0) * (hmaster1=1) * (hmaster2=1))  |  hbusreq6=0));
assign sys_fair8 =  ( ~(controllable_hmaster0) & controllable_hmaster1 & controllable_hmaster2 ) | ~i_hbusreq6;

// G(F(((hmaster0=1) * (hmaster1=1) * (hmaster2=1))  |  hbusreq7=0));
assign sys_fair9 =  ( controllable_hmaster0 & controllable_hmaster1 & controllable_hmaster2 ) | ~i_hbusreq7;

assign all_sys_fair_fulfilled = (sys_fair0done | sys_fair0) &
                                (sys_fair1done | sys_fair1) &
                                (sys_fair2done | sys_fair2) &
                                (sys_fair3done | sys_fair3) &
                                (sys_fair4done | sys_fair4) &
                                (sys_fair5done | sys_fair5) &
                                (sys_fair6done | sys_fair6) &
                                (sys_fair7done | sys_fair7) &
                                (sys_fair8done | sys_fair8) &
                                (sys_fair9done | sys_fair9);
assign progress_in_sys_fair = (~sys_fair0done & sys_fair0) |
                                (~sys_fair1done & sys_fair1) |
                                (~sys_fair2done & sys_fair2) |
                                (~sys_fair3done & sys_fair3) |
                                (~sys_fair4done & sys_fair4) |
                                (~sys_fair5done & sys_fair5) |
                                (~sys_fair6done & sys_fair6) |
                                (~sys_fair7done & sys_fair7) |
                                (~sys_fair8done & sys_fair8) |
                                (~sys_fair9done & sys_fair9);
assign fair_err = (fair_cnt >= 5'b10000);

// computing the error output bit:
assign o_err = ~env_safe_err & ~env_safe_err_happened & (sys_safe_err | fair_err);

initial
 begin
  reg_i_hready = 0;
  reg_i_hbusreq0 = 0;
  reg_i_hlock0 = 0;
  reg_i_hbusreq1 = 0;
  reg_i_hlock1 = 0;
  reg_i_hbusreq2 = 0;
  reg_i_hlock2 = 0;
  reg_i_hbusreq3 = 0;
  reg_i_hlock3 = 0;
  reg_i_hbusreq4 = 0;
  reg_i_hlock4 = 0;
  reg_i_hbusreq5 = 0;
  reg_i_hlock5 = 0;
  reg_i_hbusreq6 = 0;
  reg_i_hlock6 = 0;
  reg_i_hbusreq7 = 0;
  reg_i_hlock7 = 0;
  reg_controllable_hmaster0 = 0;
  reg_controllable_hmaster1 = 0;
  reg_controllable_hmaster2 = 0;
  reg_controllable_hmastlock = 0;
  reg_controllable_nstart = 0;
  reg_controllable_ndecide = 0;
  reg_controllable_locked = 0;
  reg_controllable_nhgrant0 = 0;
  reg_controllable_hgrant1 = 0;
  reg_controllable_hgrant2 = 0;
  reg_controllable_hgrant3 = 0;
  reg_controllable_hgrant4 = 0;
  reg_controllable_hgrant5 = 0;
  reg_controllable_hgrant6 = 0;
  reg_controllable_hgrant7 = 0;
  reg_controllable_busreq = 0;
  reg_stateA1 = 0;
  reg_stateG2 = 0;
  reg_stateG3_0 = 0;
  reg_stateG3_1 = 0;
  reg_stateG3_2 = 0;
  reg_stateG10_1 = 0;
  reg_stateG10_2 = 0;
  reg_stateG10_3 = 0;
  reg_stateG10_4 = 0;
  reg_stateG10_5 = 0;
  reg_stateG10_6 = 0;
  reg_stateG10_7 = 0;
  env_safe_err_happened = 0;
  env_fair0done = 0;
  env_fair1done = 0;
  sys_fair0done = 0;
  sys_fair1done = 0;
  sys_fair2done = 0;
  sys_fair3done = 0;
  sys_fair4done = 0;
  sys_fair5done = 0;
  sys_fair6done = 0;
  sys_fair7done = 0;
  sys_fair8done = 0;
  sys_fair9done = 0;
  fair_cnt = 0;
 end


always @(posedge i_clk)
 begin
   // We remember if an environment error occurred:
   env_safe_err_happened = env_safe_err_happened | env_safe_err;

   // Updating the fairness counters: 
   if(all_sys_fair_fulfilled)
    begin
      env_fair0done = 0;
      env_fair1done = 0;
      sys_fair0done = 0;
      sys_fair1done = 0;
      sys_fair2done = 0;
      sys_fair3done = 0;
      sys_fair4done = 0;
      sys_fair5done = 0;
      sys_fair6done = 0;
      sys_fair7done = 0;
      sys_fair8done = 0;
      sys_fair9done = 0;
      fair_cnt = 0;
    end
   else
    begin
      if(progress_in_sys_fair)
       begin
         env_fair0done = 0;
         env_fair1done = 0;
         fair_cnt = 0;
         sys_fair0done = sys_fair0done | sys_fair0;
         sys_fair1done = sys_fair1done | sys_fair1;
         sys_fair2done = sys_fair2done | sys_fair2;
         sys_fair3done = sys_fair3done | sys_fair3;
         sys_fair4done = sys_fair4done | sys_fair4;
         sys_fair5done = sys_fair5done | sys_fair5;
         sys_fair6done = sys_fair6done | sys_fair6;
         sys_fair7done = sys_fair7done | sys_fair7;
         sys_fair8done = sys_fair8done | sys_fair8;
         sys_fair9done = sys_fair9done | sys_fair9;
       end
      else
       begin
         if(all_env_fair_fulfilled)
          begin
            env_fair0done = 0;
            env_fair1done = 0;
            fair_cnt = fair_cnt + 1;
          end
         else
          begin
            env_fair0done = env_fair0done | env_fair0;
            env_fair1done = env_fair1done | env_fair1;
          end
       end
    end

   // Updating the automata: 
   // Automaton A1: 
   if(~reg_stateA1 & controllable_hmastlock & ~i_hburst0 & ~i_hburst1)
    begin
      reg_stateA1 = 1'b1;
    end
   else if(reg_stateA1 & ~controllable_busreq)
    begin
      reg_stateA1 = 1'b0;
    end

   // Automaton G2: 
   if(~reg_stateG2)
    begin
      if(controllable_hmastlock & ~controllable_nstart & ~i_hburst0 & ~i_hburst1)
       begin
         reg_stateG2 = 1'b1;
       end
    end
   else // if(reg_stateG2)
    begin
      if(~controllable_busreq)
       begin
         reg_stateG2 = 1'b0;
       end
    end

   // Automaton G3: 
   if(~reg_stateG3_0 & ~reg_stateG3_1 & ~reg_stateG3_2 & controllable_hmastlock & ~controllable_nstart &  ~i_hburst0 & i_hburst1 & ~i_hready)
    begin
      reg_stateG3_0 = 1'b1;
      reg_stateG3_1 = 1'b0;
      reg_stateG3_2 = 1'b0;
    end
   else if(~reg_stateG3_0 & ~reg_stateG3_1 & ~reg_stateG3_2 & controllable_hmastlock & ~controllable_nstart &  ~i_hburst0 & i_hburst1 & i_hready)
    begin
      reg_stateG3_0 = 1'b0;
      reg_stateG3_1 = 1'b1;
      reg_stateG3_2 = 1'b0;
    end
   else if(reg_stateG3_0 & ~reg_stateG3_1 & ~reg_stateG3_2 & i_hready)
    begin
      reg_stateG3_0 = 1'b0;
      reg_stateG3_1 = 1'b1;
      reg_stateG3_2 = 1'b0;
    end
   else if(~reg_stateG3_0 & reg_stateG3_1 & ~reg_stateG3_2 & i_hready)
    begin
      reg_stateG3_0 = 1'b1;
      reg_stateG3_1 = 1'b1;
      reg_stateG3_2 = 1'b0;
    end
   else if(reg_stateG3_0 & reg_stateG3_1 & ~reg_stateG3_2 & i_hready)
    begin
      reg_stateG3_0 = 1'b0;
      reg_stateG3_1 = 1'b0;
      reg_stateG3_2 = 1'b1;
    end
   else if(~reg_stateG3_0 & ~reg_stateG3_1 & reg_stateG3_2 & i_hready)
    begin
      reg_stateG3_0 = 1'b0;
      reg_stateG3_1 = 1'b0;
      reg_stateG3_2 = 1'b0;
    end

   // Automaton G10_1: 
   if(~reg_stateG10_1 & ~controllable_hgrant1 & ~i_hbusreq1)
    begin
      reg_stateG10_1 = 1'b1;
    end
   else if(reg_stateG10_1 & i_hbusreq1)
    begin
      reg_stateG10_1 = 1'b0;
    end

   // Automaton G10_2: 
   if(~reg_stateG10_2 & ~controllable_hgrant2 & ~i_hbusreq2)
    begin
      reg_stateG10_2 = 1'b1;
    end
   else if(reg_stateG10_2 & i_hbusreq2)
    begin
      reg_stateG10_2 = 1'b0;
    end

   // Automaton G10_3: 
   if(~reg_stateG10_3 & ~controllable_hgrant3 & ~i_hbusreq3)
    begin
      reg_stateG10_3 = 1'b1;
    end
   else if(reg_stateG10_3 & i_hbusreq3)
    begin
      reg_stateG10_3 = 1'b0;
    end

   // Automaton G10_4: 
   if(~reg_stateG10_4 & ~controllable_hgrant4 & ~i_hbusreq4)
    begin
      reg_stateG10_4 = 1'b1;
    end
   else if(reg_stateG10_4 & i_hbusreq4)
    begin
      reg_stateG10_4 = 1'b0;
    end

   // Automaton G10_5: 
   if(~reg_stateG10_5 & ~controllable_hgrant5 & ~i_hbusreq5)
    begin
      reg_stateG10_5 = 1'b1;
    end
   else if(reg_stateG10_5 & i_hbusreq5)
    begin
      reg_stateG10_5 = 1'b0;
    end

   // Automaton G10_6: 
   if(~reg_stateG10_6 & ~controllable_hgrant6 & ~i_hbusreq6)
    begin
      reg_stateG10_6 = 1'b1;
    end
   else if(reg_stateG10_6 & i_hbusreq6)
    begin
      reg_stateG10_6 = 1'b0;
    end

   // Automaton G10_7: 
   if(~reg_stateG10_7 & ~controllable_hgrant7 & ~i_hbusreq7)
    begin
      reg_stateG10_7 = 1'b1;
    end
   else if(reg_stateG10_7 & i_hbusreq7)
    begin
      reg_stateG10_7 = 1'b0;
    end

   // Latching the previous input:
   reg_i_hready =  i_hready;
   reg_i_hbusreq0 =  i_hbusreq0;
   reg_i_hlock0 =  i_hlock0;
   reg_i_hbusreq1 =  i_hbusreq1;
   reg_i_hlock1 =  i_hlock1;
   reg_i_hbusreq2 =  i_hbusreq2;
   reg_i_hlock2 =  i_hlock2;
   reg_i_hbusreq3 =  i_hbusreq3;
   reg_i_hlock3 =  i_hlock3;
   reg_i_hbusreq4 =  i_hbusreq4;
   reg_i_hlock4 =  i_hlock4;
   reg_i_hbusreq5 =  i_hbusreq5;
   reg_i_hlock5 =  i_hlock5;
   reg_i_hbusreq6 =  i_hbusreq6;
   reg_i_hlock6 =  i_hlock6;
   reg_i_hbusreq7 =  i_hbusreq7;
   reg_i_hlock7 =  i_hlock7;
   reg_controllable_hmaster0 =  controllable_hmaster0;
   reg_controllable_hmaster1 =  controllable_hmaster1;
   reg_controllable_hmaster2 =  controllable_hmaster2;
   reg_controllable_hmastlock =  controllable_hmastlock;
   reg_controllable_nstart =  controllable_nstart;
   reg_controllable_ndecide =  controllable_ndecide;
   reg_controllable_locked =  controllable_locked;
   reg_controllable_nhgrant0 =  controllable_nhgrant0;
   reg_controllable_hgrant1 =  controllable_hgrant1;
   reg_controllable_hgrant2 =  controllable_hgrant2;
   reg_controllable_hgrant3 =  controllable_hgrant3;
   reg_controllable_hgrant4 =  controllable_hgrant4;
   reg_controllable_hgrant5 =  controllable_hgrant5;
   reg_controllable_hgrant6 =  controllable_hgrant6;
   reg_controllable_hgrant7 =  controllable_hgrant7;
   reg_controllable_busreq =  controllable_busreq;

 end
endmodule

-------------------------------
#!SYNTCOMP
STATUS : realizable
SOLVED_BY : 3/3 [2015-pre-classification]
SOLVED_IN : 10.5337 [2015-pre-classification]
#.
