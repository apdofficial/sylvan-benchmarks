aag 596 23 35 1 538
2
4
6
8
10
12
14
16
18
20
22
24
26
28
30
32
34
36
38
40
42
44
46
48 1
50 777
52 20
54 44
56 983
58 6
60 22
62 8
64 1001
66 10
68 26
70 12
72 42
74 30
76 4
78 14
80 38
82 40
84 34
86 16
88 36
90 1023
92 1089
94 1095
96 2
98 1175
100 1181
102 1187
104 1193
106 32
108 353
110 28
112 18
114 24
116 46
728
118 115 48
120 114 48
122 119 48
124 59 48
126 58 48
128 125 48
130 129 120
132 130 25
134 126 24
136 135 133
138 111 48
140 110 48
142 139 48
144 63 48
146 62 48
148 145 48
150 149 140
152 150 29
154 153 136
156 146 28
158 157 154
160 107 48
162 106 48
164 161 48
166 67 48
168 66 48
170 167 48
172 171 162
174 172 33
176 175 158
178 168 32
180 179 176
182 89 48
184 88 48
186 183 48
188 71 48
190 70 48
192 189 48
194 193 184
196 194 37
198 197 180
200 190 36
202 201 198
204 81 48
206 80 48
208 205 48
210 79 48
212 78 48
214 211 48
216 215 206
218 216 39
220 219 202
222 212 38
224 223 220
226 73 48
228 72 48
230 227 48
232 87 48
234 86 48
236 233 48
238 237 228
240 238 43
242 241 224
244 234 42
246 245 242
248 113 48
250 112 48
252 249 48
254 253 46
256 255 246
258 117 48
260 116 48
262 259 48
264 260 250
266 264 47
268 267 256
270 53 48
272 52 48
274 271 48
276 275 44
278 277 268
280 55 48
282 54 48
284 281 48
286 282 272
288 286 45
290 289 278
292 77 48
294 76 48
296 293 48
298 97 48
300 96 48
302 299 48
304 303 294
306 304 23
308 307 290
310 300 297
312 310 40
314 313 308
316 311 305
318 83 48
320 82 48
322 319 48
324 323 40
326 320 41
328 327 325
330 61 48
332 60 48
334 331 48
336 335 22
338 332 23
340 339 337
342 340 328
344 343 316
346 345 314
348 109 48
350 349 48
352 351 346
354 123 24
356 354 6
358 129 123
360 358 6
362 361 357
364 126 120
366 364 7
368 367 362
370 8 6
372 371 368
374 10 6
376 375 372
378 12 6
380 379 376
382 14 6
384 383 380
386 16 6
388 387 384
390 143 28
392 390 8
394 393 388
396 149 143
398 396 8
400 399 394
402 146 140
404 402 9
406 405 400
408 10 8
410 409 406
412 12 8
414 413 410
416 14 8
418 417 414
420 16 8
422 421 418
424 165 32
426 424 10
428 427 422
430 171 165
432 430 10
434 433 428
436 168 162
438 436 11
440 439 434
442 12 10
444 443 440
446 14 10
448 447 444
450 16 10
452 451 448
454 187 36
456 454 12
458 457 452
460 193 187
462 460 12
464 463 458
466 190 184
468 466 13
470 469 464
472 14 12
474 473 470
476 16 12
478 477 474
480 209 38
482 480 14
484 483 478
486 215 209
488 486 14
490 489 484
492 212 206
494 492 15
496 495 490
498 16 14
500 499 496
502 231 42
504 502 16
506 505 500
508 237 231
510 508 16
512 511 506
514 234 228
516 514 17
518 517 512
520 263 250
522 520 19
524 523 518
526 20 18
528 527 524
530 260 18
532 531 528
534 285 272
536 534 21
538 537 532
540 282 20
542 541 538
544 272 250
546 545 542
548 65 48
550 64 48
552 549 48
554 50 48
556 554 550
558 556 250
560 559 546
562 554 553
564 562 272
566 565 560
568 129 6
570 568 5
572 571 566
574 31 27
576 574 35
578 577 568
580 579 572
582 149 8
584 582 5
586 585 580
588 31 26
590 588 35
592 590 583
594 591 582
596 595 593
598 596 586
600 171 10
602 600 5
604 603 598
606 30 27
608 606 35
610 608 601
612 609 600
614 613 611
616 614 604
618 193 12
620 618 5
622 621 616
624 30 26
626 624 35
628 626 619
630 627 618
632 631 629
634 632 622
636 215 14
638 636 5
640 639 634
642 574 34
644 642 637
646 643 636
648 647 645
650 648 640
652 237 16
654 652 5
656 655 650
658 588 34
660 658 653
662 659 652
664 663 661
666 664 656
668 583 569
670 668 601
672 670 619
674 672 637
676 674 653
678 676 4
680 679 666
682 260 47
684 682 3
686 685 680
688 282 45
690 688 3
692 691 686
694 689 683
696 694 2
698 697 692
700 40 3
702 700 4
704 703 698
706 23 2
708 707 704
710 95 48
712 94 48
714 711 48
716 93 48
718 92 48
720 717 48
722 719 714
724 723 715
726 724 708
728 727 352
730 550 253
732 730 272
734 553 250
736 734 275
738 730 275
740 553 253
742 740 275
744 736 733
746 745 733
748 737 733
750 748 738
752 751 746
754 748 739
756 754 742
758 757 752
760 743 554
762 761 743
764 763 739
766 765 739
768 767 737
770 768 733
772 770 759
774 758 554
776 775 773
778 99 48
780 98 48
782 779 48
784 101 48
786 100 48
788 785 48
790 103 48
792 102 48
794 791 48
796 104 48
798 787 781
800 798 793
802 800 797
804 25 6
806 24 7
808 807 805
810 808 802
812 787 782
814 812 793
816 814 797
818 29 8
820 28 9
822 821 819
824 822 816
826 788 781
828 826 793
830 828 797
832 33 10
834 32 11
836 835 833
838 836 830
840 788 782
842 840 793
844 842 797
846 37 12
848 36 13
850 849 847
852 850 844
854 798 794
856 854 797
858 39 14
860 38 15
862 861 859
864 862 856
866 812 794
868 866 797
870 43 16
872 42 17
874 873 871
876 874 868
878 826 794
880 878 797
882 91 48
884 90 48
886 883 48
888 887 880
890 57 48
892 56 48
894 891 48
896 46 19
898 47 18
900 899 897
902 900 895
904 44 21
906 45 20
908 907 905
910 908 892
912 824 811
914 913 811
916 825 811
918 916 838
920 919 914
922 916 839
924 922 852
926 925 920
928 922 853
930 928 864
932 931 926
934 928 865
936 934 876
938 937 932
940 934 877
942 940 888
944 943 938
946 940 889
948 946 902
950 949 944
952 946 903
954 952 910
956 955 950
958 911 892
960 958 903
962 961 903
964 963 889
966 964 877
968 966 865
970 968 853
972 970 839
974 972 825
976 974 811
978 976 957
980 956 892
982 981 979
984 743 550
986 984 739
988 987 739
990 989 737
992 991 737
994 993 733
996 994 759
998 758 550
1000 999 997
1002 887 332
1004 1002 303
1006 884 300
1008 1006 1005
1010 1009 1005
1012 1007 884
1014 1012 1005
1016 1015 1005
1018 1017 1011
1020 1010 884
1022 1021 1019
1024 955 944
1026 910 721
1028 911 718
1030 1029 1027
1032 902 718
1034 1031 903
1036 1035 1033
1038 1037 889
1040 1038 877
1042 1040 865
1044 1042 853
1046 1044 839
1048 1046 825
1050 1048 811
1052 718 715
1054 719 712
1056 1055 1053
1058 1057 910
1060 911 712
1062 1061 1059
1064 902 712
1066 1063 903
1068 1067 1065
1070 1069 889
1072 1070 877
1074 1072 865
1076 1074 853
1078 1076 839
1080 1078 825
1082 1080 811
1084 1050 1025
1086 1024 718
1088 1087 1085
1090 1082 1025
1092 1024 712
1094 1093 1091
1096 889 780
1098 1096 877
1100 1098 865
1102 1101 865
1104 1103 853
1106 1104 839
1108 1107 839
1110 1109 825
1112 1110 811
1114 1113 811
1116 889 786
1118 1116 877
1120 1119 877
1122 1121 865
1124 1122 853
1126 1124 839
1128 1127 839
1130 1129 825
1132 1131 825
1134 1133 811
1136 889 792
1138 1136 877
1140 1139 877
1142 1141 865
1144 1143 865
1146 1145 853
1148 1147 853
1150 1149 839
1152 1150 825
1154 1152 811
1156 889 796
1158 1156 877
1160 1158 865
1162 1160 853
1164 1162 839
1166 1164 825
1168 1166 811
1170 1115 945
1172 944 780
1174 1173 1171
1176 1134 945
1178 944 786
1180 1179 1177
1182 1154 945
1184 944 792
1186 1185 1183
1188 1168 945
1190 944 796
1192 1191 1189
i0 controllable_DEQ
i1 controllable_ENQ
i2 controllable_BtoS_ACK0
i3 controllable_BtoS_ACK1
i4 controllable_BtoS_ACK2
i5 controllable_BtoS_ACK3
i6 controllable_BtoS_ACK4
i7 controllable_BtoS_ACK5
i8 controllable_BtoR_REQ0
i9 controllable_BtoR_REQ1
i10 i_nEMPTY
i11 i_StoB_REQ0
i12 controllable_SLC0
i13 i_StoB_REQ1
i14 controllable_SLC1
i15 i_StoB_REQ2
i16 controllable_SLC2
i17 i_StoB_REQ3
i18 i_StoB_REQ4
i19 i_FULL
i20 i_StoB_REQ5
i21 i_RtoB_ACK1
i22 i_RtoB_ACK0
l0 n49
l1 reg_stateG7_0_out
l2 reg_controllable_BtoR_REQ1_out
l3 reg_i_RtoB_ACK1_out
l4 next_env_fair_out
l5 reg_controllable_BtoS_ACK0_out
l6 reg_i_nEMPTY_out
l7 reg_controllable_BtoS_ACK1_out
l8 reg_nstateG7_1_out
l9 reg_controllable_BtoS_ACK2_out
l10 reg_controllable_SLC0_out
l11 reg_controllable_BtoS_ACK3_out
l12 reg_i_StoB_REQ5_out
l13 reg_controllable_SLC1_out
l14 reg_controllable_ENQ_out
l15 reg_controllable_BtoS_ACK4_out
l16 reg_i_StoB_REQ4_out
l17 reg_i_FULL_out
l18 reg_controllable_SLC2_out
l19 reg_controllable_BtoS_ACK5_out
l20 reg_i_StoB_REQ3_out
l21 reg_stateG12_out
l22 fair_cnt<0>_out
l23 fair_cnt<1>_out
l24 reg_controllable_DEQ_out
l25 next_sys_fair<0>_out
l26 next_sys_fair<1>_out
l27 next_sys_fair<2>_out
l28 next_sys_fair<3>_out
l29 reg_i_StoB_REQ2_out
l30 env_safe_err_happened_out
l31 reg_i_StoB_REQ1_out
l32 reg_controllable_BtoR_REQ0_out
l33 reg_i_StoB_REQ0_out
l34 reg_i_RtoB_ACK0_out
o0 o_err
c
genbuf_6_new_2
This file was written by ABC on Sat Aug 31 20:24:46 2013
For information about AIGER format, refer to http://fmv.jku.at/aiger
-------------------------------
This AIGER file has been created by the following sequence of commands:
> vl2mv genbuf6c2unreal.v   ---gives--> genbuf6c2unreal.mv
> abc -c "read_blif_mv genbuf6c2unreal.mv; write_aiger -s genbuf6c2unrealn.aig"   ---gives--> genbuf6c2unrealn.aig
> aigtoaig genbuf6c2unrealn.aig genbuf6c2unrealn.aag   ---gives--> genbuf6c2unrealn.aag (this file)
Content of genbuf6c2unreal.v:
module genbuf_6_new_2(
        o_err,
        i_clk,
        i_StoB_REQ0,
        controllable_BtoS_ACK0,
        i_StoB_REQ1,
        controllable_BtoS_ACK1,
        i_StoB_REQ2,
        controllable_BtoS_ACK2,
        i_StoB_REQ3,
        controllable_BtoS_ACK3,
        i_StoB_REQ4,
        controllable_BtoS_ACK4,
        i_StoB_REQ5,
        controllable_BtoS_ACK5,
        i_RtoB_ACK0,
        controllable_BtoR_REQ0,
        i_RtoB_ACK1,
        controllable_BtoR_REQ1,
        i_FULL,
        i_nEMPTY,
        controllable_ENQ,
        controllable_DEQ,
        controllable_SLC0,
        controllable_SLC1,
        controllable_SLC2);

input i_clk;
input i_StoB_REQ0;
input controllable_BtoS_ACK0;
input i_StoB_REQ1;
input controllable_BtoS_ACK1;
input i_StoB_REQ2;
input controllable_BtoS_ACK2;
input i_StoB_REQ3;
input controllable_BtoS_ACK3;
input i_StoB_REQ4;
input controllable_BtoS_ACK4;
input i_StoB_REQ5;
input controllable_BtoS_ACK5;
input i_RtoB_ACK0;
input controllable_BtoR_REQ0;
input i_RtoB_ACK1;
input controllable_BtoR_REQ1;
input i_FULL;
input i_nEMPTY;
input controllable_ENQ;
input controllable_DEQ;
input controllable_SLC0;
input controllable_SLC1;
input controllable_SLC2;
output o_err;

reg reg_i_StoB_REQ0;
reg reg_controllable_BtoS_ACK0;
reg reg_i_StoB_REQ1;
reg reg_controllable_BtoS_ACK1;
reg reg_i_StoB_REQ2;
reg reg_controllable_BtoS_ACK2;
reg reg_i_StoB_REQ3;
reg reg_controllable_BtoS_ACK3;
reg reg_i_StoB_REQ4;
reg reg_controllable_BtoS_ACK4;
reg reg_i_StoB_REQ5;
reg reg_controllable_BtoS_ACK5;
reg reg_i_RtoB_ACK0;
reg reg_controllable_BtoR_REQ0;
reg reg_i_RtoB_ACK1;
reg reg_controllable_BtoR_REQ1;
reg reg_i_FULL;
reg reg_i_nEMPTY;
reg reg_controllable_ENQ;
reg reg_controllable_DEQ;
reg reg_controllable_SLC0;
reg reg_controllable_SLC1;
reg reg_controllable_SLC2;
reg reg_stateG7_0;
reg reg_nstateG7_1;
reg reg_stateG12;
reg env_safe_err_happened;
reg next_env_fair;
reg [1:0] fair_cnt;
reg [3:0] next_sys_fair;

wire env_safe_err0;
wire env_safe_err1;
wire env_safe_err2;
wire env_safe_err3;
wire env_safe_err4;
wire env_safe_err5;
wire env_safe_err6;
wire env_safe_err7;
wire env_safe_err8;
wire env_safe_err9;
wire env_safe_err10;
wire env_safe_err11;
wire env_safe_err12;
wire env_safe_err13;
wire env_safe_err14;
wire env_safe_err15;
wire env_safe_err16;
wire env_safe_err17;
wire env_safe_err18;
wire env_safe_err;

wire sys_safe_err0;
wire sys_safe_err1;
wire sys_safe_err2;
wire sys_safe_err3;
wire sys_safe_err4;
wire sys_safe_err5;
wire sys_safe_err6;
wire sys_safe_err7;
wire sys_safe_err8;
wire sys_safe_err9;
wire sys_safe_err10;
wire sys_safe_err11;
wire sys_safe_err12;
wire sys_safe_err13;
wire sys_safe_err14;
wire sys_safe_err15;
wire sys_safe_err16;
wire sys_safe_err17;
wire sys_safe_err18;
wire sys_safe_err19;
wire sys_safe_err20;
wire sys_safe_err21;
wire sys_safe_err22;
wire sys_safe_err23;
wire sys_safe_err24;
wire sys_safe_err25;
wire sys_safe_err26;
wire sys_safe_err27;
wire sys_safe_err28;
wire sys_safe_err29;
wire sys_safe_err30;
wire sys_safe_err31;
wire sys_safe_err32;
wire sys_safe_err33;
wire sys_safe_err34;
wire sys_safe_err35;
wire sys_safe_err36;
wire sys_safe_err37;
wire sys_safe_err38;
wire sys_safe_err39;
wire sys_safe_err40;
wire sys_safe_err41;
wire sys_safe_err42;
wire sys_safe_err43;
wire sys_safe_err44;
wire sys_safe_err45;
wire sys_safe_err46;
wire sys_safe_err47;
wire sys_safe_err48;
wire sys_safe_err49;
wire sys_safe_err50;
wire sys_safe_err51;
wire sys_safe_err52;
wire sys_safe_err53;
wire sys_safe_err54;
wire sys_safe_err55;
wire sys_safe_err56;
wire sys_safe_err57;
wire sys_safe_err58;
wire sys_safe_err;

wire env_fair0;
wire env_fair1;

wire sys_fair0;
wire sys_fair1;
wire sys_fair2;
wire sys_fair3;
wire sys_fair4;
wire sys_fair5;
wire sys_fair6;
wire fair_err;
wire o_err;

// =============================================================
//                        ENV_TRANSITION:
// =============================================================
// G((StoB_REQ0=1 * BtoS_ACK0=0) -> X(StoB_REQ0=1));	#A1
assign env_safe_err0 = ~((~(reg_i_StoB_REQ0 & ~reg_controllable_BtoS_ACK0)) | i_StoB_REQ0);

// G(BtoS_ACK0=1 -> X(StoB_REQ0=0));	#A1
assign env_safe_err1 = ~((~(reg_controllable_BtoS_ACK0)) | ~i_StoB_REQ0);

// G((StoB_REQ1=1 * BtoS_ACK1=0) -> X(StoB_REQ1=1));	#A1
assign env_safe_err2 = ~((~(reg_i_StoB_REQ1 & ~reg_controllable_BtoS_ACK1)) | i_StoB_REQ1);

// G(BtoS_ACK1=1 -> X(StoB_REQ1=0));	#A1
assign env_safe_err3 = ~((~(reg_controllable_BtoS_ACK1)) | ~i_StoB_REQ1);

// G((StoB_REQ2=1 * BtoS_ACK2=0) -> X(StoB_REQ2=1));	#A1
assign env_safe_err4 = ~((~(reg_i_StoB_REQ2 & ~reg_controllable_BtoS_ACK2)) | i_StoB_REQ2);

// G(BtoS_ACK2=1 -> X(StoB_REQ2=0));	#A1
assign env_safe_err5 = ~((~(reg_controllable_BtoS_ACK2)) | ~i_StoB_REQ2);

// G((StoB_REQ3=1 * BtoS_ACK3=0) -> X(StoB_REQ3=1));	#A1
assign env_safe_err6 = ~((~(reg_i_StoB_REQ3 & ~reg_controllable_BtoS_ACK3)) | i_StoB_REQ3);

// G(BtoS_ACK3=1 -> X(StoB_REQ3=0));	#A1
assign env_safe_err7 = ~((~(reg_controllable_BtoS_ACK3)) | ~i_StoB_REQ3);

// G((StoB_REQ4=1 * BtoS_ACK4=0) -> X(StoB_REQ4=1));	#A1
assign env_safe_err8 = ~((~(reg_i_StoB_REQ4 & ~reg_controllable_BtoS_ACK4)) | i_StoB_REQ4);

// G(BtoS_ACK4=1 -> X(StoB_REQ4=0));	#A1
assign env_safe_err9 = ~((~(reg_controllable_BtoS_ACK4)) | ~i_StoB_REQ4);

// G((StoB_REQ5=1 * BtoS_ACK5=0) -> X(StoB_REQ5=1));	#A1
assign env_safe_err10 = ~((~(reg_i_StoB_REQ5 & ~reg_controllable_BtoS_ACK5)) | i_StoB_REQ5);

// G(BtoS_ACK5=1 -> X(StoB_REQ5=0));	#A1
assign env_safe_err11 = ~((~(reg_controllable_BtoS_ACK5)) | ~i_StoB_REQ5);

// G(BtoR_REQ0=0 -> X(RtoB_ACK0=0));	#A3
assign env_safe_err12 = ~(reg_controllable_BtoR_REQ0 | ~i_RtoB_ACK0);

// G((BtoR_REQ0=1 * RtoB_ACK0=1) -> X(RtoB_ACK0=1));	#A4
assign env_safe_err13 = ~((~(reg_controllable_BtoR_REQ0 & reg_i_RtoB_ACK0)) | i_RtoB_ACK0);

// G(BtoR_REQ1=0 -> X(RtoB_ACK1=0));	#A3
assign env_safe_err14 = ~(reg_controllable_BtoR_REQ1 | ~i_RtoB_ACK1);

// G((BtoR_REQ1=1 * RtoB_ACK1=1) -> X(RtoB_ACK1=1));	#A4
assign env_safe_err15 = ~((~(reg_controllable_BtoR_REQ1 & reg_i_RtoB_ACK1)) | i_RtoB_ACK1);

// G((ENQ=1 * DEQ=0) -> X(EMPTY=0));	#A4
assign env_safe_err16 = ~(~(reg_controllable_ENQ & ~reg_controllable_DEQ) | i_nEMPTY);

// G((DEQ=1 * ENQ=0) -> X(FULL=0));	#A4
assign env_safe_err17 = ~(~(reg_controllable_DEQ & ~reg_controllable_ENQ) | ~i_FULL);

// G((ENQ=1 <-> DEQ=1) -> ((FULL=1 <-> X(FULL=1)) *
//                         (EMPTY=1 <-> X(EMPTY=1))));	#A4
assign env_safe_err18 = ~(~(reg_controllable_ENQ ^~ reg_controllable_DEQ) | ((reg_i_FULL ^~ i_FULL) &  (reg_i_nEMPTY ^~ i_nEMPTY)) );

// collecting together the safety error bits:
assign env_safe_err = env_safe_err0 |
                      env_safe_err1 |
                      env_safe_err2 |
                      env_safe_err3 |
                      env_safe_err4 |
                      env_safe_err5 |
                      env_safe_err6 |
                      env_safe_err7 |
                      env_safe_err8 |
                      env_safe_err9 |
                      env_safe_err10 |
                      env_safe_err11 |
                      env_safe_err12 |
                      env_safe_err13 |
                      env_safe_err14 |
                      env_safe_err15 |
                      env_safe_err16 |
                      env_safe_err17 |
                      env_safe_err18;

// =============================================================
//                        SYS_TRANSITION:
// =============================================================
// G((StoB_REQ0=0 * X(StoB_REQ0=1)) -> X(BtoS_ACK0=0));	#G2
assign sys_safe_err0 = ~((~(~reg_i_StoB_REQ0 & i_StoB_REQ0 )) | ~controllable_BtoS_ACK0);

// G((BtoS_ACK0=0 * StoB_REQ0=0) -> X(BtoS_ACK0=0));	#G2
assign sys_safe_err1 = ~((~(~reg_controllable_BtoS_ACK0 & ~reg_i_StoB_REQ0 )) | ~controllable_BtoS_ACK0);

// G((BtoS_ACK0=1 * StoB_REQ0=1) -> X(BtoS_ACK0=1));	#G4
assign sys_safe_err2 = ~((~(reg_controllable_BtoS_ACK0 & reg_i_StoB_REQ0 )) | controllable_BtoS_ACK0);

// G((BtoS_ACK0=0) + (BtoS_ACK1=0));	#G5
assign sys_safe_err3 = ~(~controllable_BtoS_ACK0 | ~controllable_BtoS_ACK1);

// G((BtoS_ACK0=0) + (BtoS_ACK2=0));	#G5
assign sys_safe_err4 = ~(~controllable_BtoS_ACK0 | ~controllable_BtoS_ACK2);

// G((BtoS_ACK0=0) + (BtoS_ACK3=0));	#G5
assign sys_safe_err5 = ~(~controllable_BtoS_ACK0 | ~controllable_BtoS_ACK3);

// G((BtoS_ACK0=0) + (BtoS_ACK4=0));	#G5
assign sys_safe_err6 = ~(~controllable_BtoS_ACK0 | ~controllable_BtoS_ACK4);

// G((BtoS_ACK0=0) + (BtoS_ACK5=0));	#G5
assign sys_safe_err7 = ~(~controllable_BtoS_ACK0 | ~controllable_BtoS_ACK5);

// G((StoB_REQ1=0 * X(StoB_REQ1=1)) -> X(BtoS_ACK1=0));	#G2
assign sys_safe_err8 = ~((~(~reg_i_StoB_REQ1 & i_StoB_REQ1 )) | ~controllable_BtoS_ACK1);

// G((BtoS_ACK1=0 * StoB_REQ1=0) -> X(BtoS_ACK1=0));	#G2
assign sys_safe_err9 = ~((~(~reg_controllable_BtoS_ACK1 & ~reg_i_StoB_REQ1 )) | ~controllable_BtoS_ACK1);

// G((BtoS_ACK1=1 * StoB_REQ1=1) -> X(BtoS_ACK1=1));	#G4
assign sys_safe_err10 = ~((~(reg_controllable_BtoS_ACK1 & reg_i_StoB_REQ1 )) | controllable_BtoS_ACK1);

// G((BtoS_ACK1=0) + (BtoS_ACK2=0));	#G5
assign sys_safe_err11 = ~(~controllable_BtoS_ACK1 | ~controllable_BtoS_ACK2);

// G((BtoS_ACK1=0) + (BtoS_ACK3=0));	#G5
assign sys_safe_err12 = ~(~controllable_BtoS_ACK1 | ~controllable_BtoS_ACK3);

// G((BtoS_ACK1=0) + (BtoS_ACK4=0));	#G5
assign sys_safe_err13 = ~(~controllable_BtoS_ACK1 | ~controllable_BtoS_ACK4);

// G((BtoS_ACK1=0) + (BtoS_ACK5=0));	#G5
assign sys_safe_err14 = ~(~controllable_BtoS_ACK1 | ~controllable_BtoS_ACK5);

// G((StoB_REQ2=0 * X(StoB_REQ2=1)) -> X(BtoS_ACK2=0));	#G2
assign sys_safe_err15 = ~((~(~reg_i_StoB_REQ2 & i_StoB_REQ2 )) | ~controllable_BtoS_ACK2);

// G((BtoS_ACK2=0 * StoB_REQ2=0) -> X(BtoS_ACK2=0));	#G2
assign sys_safe_err16 = ~((~(~reg_controllable_BtoS_ACK2 & ~reg_i_StoB_REQ2 )) | ~controllable_BtoS_ACK2);

// G((BtoS_ACK2=1 * StoB_REQ2=1) -> X(BtoS_ACK2=1));	#G4
assign sys_safe_err17 = ~((~(reg_controllable_BtoS_ACK2 & reg_i_StoB_REQ2 )) | controllable_BtoS_ACK2);

// G((BtoS_ACK2=0) + (BtoS_ACK3=0));	#G5
assign sys_safe_err18 = ~(~controllable_BtoS_ACK2 | ~controllable_BtoS_ACK3);

// G((BtoS_ACK2=0) + (BtoS_ACK4=0));	#G5
assign sys_safe_err19 = ~(~controllable_BtoS_ACK2 | ~controllable_BtoS_ACK4);

// G((BtoS_ACK2=0) + (BtoS_ACK5=0));	#G5
assign sys_safe_err20 = ~(~controllable_BtoS_ACK2 | ~controllable_BtoS_ACK5);

// G((StoB_REQ3=0 * X(StoB_REQ3=1)) -> X(BtoS_ACK3=0));	#G2
assign sys_safe_err21 = ~((~(~reg_i_StoB_REQ3 & i_StoB_REQ3 )) | ~controllable_BtoS_ACK3);

// G((BtoS_ACK3=0 * StoB_REQ3=0) -> X(BtoS_ACK3=0));	#G2
assign sys_safe_err22 = ~((~(~reg_controllable_BtoS_ACK3 & ~reg_i_StoB_REQ3 )) | ~controllable_BtoS_ACK3);

// G((BtoS_ACK3=1 * StoB_REQ3=1) -> X(BtoS_ACK3=1));	#G4
assign sys_safe_err23 = ~((~(reg_controllable_BtoS_ACK3 & reg_i_StoB_REQ3 )) | controllable_BtoS_ACK3);

// G((BtoS_ACK3=0) + (BtoS_ACK4=0));	#G5
assign sys_safe_err24 = ~(~controllable_BtoS_ACK3 | ~controllable_BtoS_ACK4);

// G((BtoS_ACK3=0) + (BtoS_ACK5=0));	#G5
assign sys_safe_err25 = ~(~controllable_BtoS_ACK3 | ~controllable_BtoS_ACK5);

// G((StoB_REQ4=0 * X(StoB_REQ4=1)) -> X(BtoS_ACK4=0));	#G2
assign sys_safe_err26 = ~((~(~reg_i_StoB_REQ4 & i_StoB_REQ4 )) | ~controllable_BtoS_ACK4);

// G((BtoS_ACK4=0 * StoB_REQ4=0) -> X(BtoS_ACK4=0));	#G2
assign sys_safe_err27 = ~((~(~reg_controllable_BtoS_ACK4 & ~reg_i_StoB_REQ4 )) | ~controllable_BtoS_ACK4);

// G((BtoS_ACK4=1 * StoB_REQ4=1) -> X(BtoS_ACK4=1));	#G4
assign sys_safe_err28 = ~((~(reg_controllable_BtoS_ACK4 & reg_i_StoB_REQ4 )) | controllable_BtoS_ACK4);

// G((BtoS_ACK4=0) + (BtoS_ACK5=0));	#G5
assign sys_safe_err29 = ~(~controllable_BtoS_ACK4 | ~controllable_BtoS_ACK5);

// G((StoB_REQ5=0 * X(StoB_REQ5=1)) -> X(BtoS_ACK5=0));	#G2
assign sys_safe_err30 = ~((~(~reg_i_StoB_REQ5 & i_StoB_REQ5 )) | ~controllable_BtoS_ACK5);

// G((BtoS_ACK5=0 * StoB_REQ5=0) -> X(BtoS_ACK5=0));	#G2
assign sys_safe_err31 = ~((~(~reg_controllable_BtoS_ACK5 & ~reg_i_StoB_REQ5 )) | ~controllable_BtoS_ACK5);

// G((BtoS_ACK5=1 * StoB_REQ5=1) -> X(BtoS_ACK5=1));	#G4
assign sys_safe_err32 = ~((~(reg_controllable_BtoS_ACK5 & reg_i_StoB_REQ5 )) | controllable_BtoS_ACK5);

// G((BtoR_REQ0=1 * RtoB_ACK0=0) -> X(BtoR_REQ0=1));	#G6
assign sys_safe_err33 = ~((~(reg_controllable_BtoR_REQ0 & ~reg_i_RtoB_ACK0)) | controllable_BtoR_REQ0);

// G((BtoR_REQ0=0) + (BtoR_REQ1=0));	#G7
assign sys_safe_err34 = ~(~controllable_BtoR_REQ0 | ~controllable_BtoR_REQ1);

// G(RtoB_ACK0=1 -> X(BtoR_REQ0=0));	#G8
assign sys_safe_err35 = ~(~reg_i_RtoB_ACK0 | ~controllable_BtoR_REQ0);

// G((BtoR_REQ1=1 * RtoB_ACK1=0) -> X(BtoR_REQ1=1));	#G6
assign sys_safe_err36 = ~((~(reg_controllable_BtoR_REQ1 & ~reg_i_RtoB_ACK1)) | controllable_BtoR_REQ1);

// G(RtoB_ACK1=1 -> X(BtoR_REQ1=0));	#G8
assign sys_safe_err37 = ~(~reg_i_RtoB_ACK1 | ~controllable_BtoR_REQ1);

// G((BtoR_REQ0=1 * BtoR_REQ1=1) -> FALSE);	#G7
assign sys_safe_err38 = reg_controllable_BtoR_REQ0 & reg_controllable_BtoR_REQ1;

// G((stateG7_1=0 * stateG7_0=1 * BtoR_REQ0=1) -> FALSE);	#G7
assign sys_safe_err39 = reg_nstateG7_1 & reg_stateG7_0 & reg_controllable_BtoR_REQ0;

// G((stateG7_1=1 * stateG7_0=1 * BtoR_REQ1=1) -> FALSE);	#G7
assign sys_safe_err40 = ~reg_nstateG7_1 & reg_stateG7_0 & reg_controllable_BtoR_REQ1;

// G((BtoS_ACK0=0 * X(BtoS_ACK0=1)) -> X(ENQ=1));	#G9
assign sys_safe_err41 = ~(~((~reg_controllable_BtoS_ACK0 & controllable_BtoS_ACK0)) | controllable_ENQ);

// G((BtoS_ACK0=0 * X(BtoS_ACK0=1))  -> X(SLC0=0 * SLC1=0 * SLC2=0));	#G9
assign sys_safe_err42 = ~(~((~reg_controllable_BtoS_ACK0 & controllable_BtoS_ACK0)) | (~controllable_SLC0 & ~controllable_SLC1 & ~controllable_SLC2));

// G((BtoS_ACK1=0 * X(BtoS_ACK1=1)) -> X(ENQ=1));	#G9
assign sys_safe_err43 = ~(~((~reg_controllable_BtoS_ACK1 & controllable_BtoS_ACK1)) | controllable_ENQ);

// G((BtoS_ACK1=0 * X(BtoS_ACK1=1)) <-> X(SLC0=1 * SLC1=0 * SLC2=0));	#G9
assign sys_safe_err44 = ~(((~reg_controllable_BtoS_ACK1 & controllable_BtoS_ACK1)) ^~ (controllable_SLC0 & ~controllable_SLC1 & ~controllable_SLC2));

// G((BtoS_ACK2=0 * X(BtoS_ACK2=1)) -> X(ENQ=1));	#G9
assign sys_safe_err45 = ~(~((~reg_controllable_BtoS_ACK2 & controllable_BtoS_ACK2)) | controllable_ENQ);

// G((BtoS_ACK2=0 * X(BtoS_ACK2=1)) <-> X(SLC0=0 * SLC1=1 * SLC2=0));	#G9
assign sys_safe_err46 = ~(((~reg_controllable_BtoS_ACK2 & controllable_BtoS_ACK2)) ^~ (~controllable_SLC0 & controllable_SLC1 & ~controllable_SLC2));

// G((BtoS_ACK3=0 * X(BtoS_ACK3=1)) -> X(ENQ=1));	#G9
assign sys_safe_err47 = ~(~((~reg_controllable_BtoS_ACK3 & controllable_BtoS_ACK3)) | controllable_ENQ);

// G((BtoS_ACK3=0 * X(BtoS_ACK3=1)) <-> X(SLC0=1 * SLC1=1 * SLC2=0));	#G9
assign sys_safe_err48 = ~(((~reg_controllable_BtoS_ACK3 & controllable_BtoS_ACK3)) ^~ (controllable_SLC0 & controllable_SLC1 & ~controllable_SLC2));

// G((BtoS_ACK4=0 * X(BtoS_ACK4=1)) -> X(ENQ=1));	#G9
assign sys_safe_err49 = ~(~((~reg_controllable_BtoS_ACK4 & controllable_BtoS_ACK4)) | controllable_ENQ);

// G((BtoS_ACK4=0 * X(BtoS_ACK4=1)) <-> X(SLC0=0 * SLC1=0 * SLC2=1));	#G9
assign sys_safe_err50 = ~(((~reg_controllable_BtoS_ACK4 & controllable_BtoS_ACK4)) ^~ (~controllable_SLC0 & ~controllable_SLC1 & controllable_SLC2));

// G((BtoS_ACK5=0 * X(BtoS_ACK5=1)) -> X(ENQ=1));	#G9
assign sys_safe_err51 = ~(~((~reg_controllable_BtoS_ACK5 & controllable_BtoS_ACK5)) | controllable_ENQ);

// G((BtoS_ACK5=0 * X(BtoS_ACK5=1)) <-> X(SLC0=1 * SLC1=0 * SLC2=1));	#G9
assign sys_safe_err52 = ~(((~reg_controllable_BtoS_ACK5 & controllable_BtoS_ACK5)) ^~ (controllable_SLC0 & ~controllable_SLC1 & controllable_SLC2));

// G(((BtoS_ACK0=1 + X(BtoS_ACK0=0)) * (BtoS_ACK1=1 + X(BtoS_ACK1=0)) * (BtoS_ACK2=1 + X(BtoS_ACK2=0)) * (BtoS_ACK3=1 + X(BtoS_ACK3=0)) * (BtoS_ACK4=1 + X(BtoS_ACK4=0)) * (BtoS_ACK5=1 + X(BtoS_ACK5=0))) -> X(ENQ=0));	#G9
assign sys_safe_err53 = ~(~((reg_controllable_BtoS_ACK0 | ~controllable_BtoS_ACK0) & (reg_controllable_BtoS_ACK1 | ~controllable_BtoS_ACK1) & (reg_controllable_BtoS_ACK2 | ~controllable_BtoS_ACK2) & (reg_controllable_BtoS_ACK3 | ~controllable_BtoS_ACK3) & (reg_controllable_BtoS_ACK4 | ~controllable_BtoS_ACK4) & (reg_controllable_BtoS_ACK5 | ~controllable_BtoS_ACK5)) | ~controllable_ENQ);

// G((RtoB_ACK0=1 * X(RtoB_ACK0=0)) -> X(DEQ=1));	#G10
assign sys_safe_err54 = ~(~(reg_i_RtoB_ACK0 & ~i_RtoB_ACK0) | controllable_DEQ);

// G((RtoB_ACK1=1 * X(RtoB_ACK1=0)) -> X(DEQ=1));	#G10
assign sys_safe_err55 = ~(~(reg_i_RtoB_ACK1 & ~i_RtoB_ACK1) | controllable_DEQ);

// G(((RtoB_ACK0=0 + X(RtoB_ACK0=1)) * (RtoB_ACK1=0 + X(RtoB_ACK1=1))) -> X(DEQ=0));	#G10
assign sys_safe_err56 = ~(~((~reg_i_RtoB_ACK0 | i_RtoB_ACK0) & (~reg_i_RtoB_ACK1 | i_RtoB_ACK1)) | ~controllable_DEQ);

// G((FULL=1 * DEQ=0) -> ENQ=0);	#G11
assign sys_safe_err57 = ~(~(i_FULL & ~controllable_DEQ) | ~controllable_ENQ);

// G(EMPTY=1 -> DEQ=0);	#G11
assign sys_safe_err58 = ~( i_nEMPTY | ~controllable_DEQ);

// collecting together the safety error bits:
assign sys_safe_err = sys_safe_err0 |
                      sys_safe_err1 |
                      sys_safe_err2 |
                      sys_safe_err3 |
                      sys_safe_err4 |
                      sys_safe_err5 |
                      sys_safe_err6 |
                      sys_safe_err7 |
                      sys_safe_err8 |
                      sys_safe_err9 |
                      sys_safe_err10 |
                      sys_safe_err11 |
                      sys_safe_err12 |
                      sys_safe_err13 |
                      sys_safe_err14 |
                      sys_safe_err15 |
                      sys_safe_err16 |
                      sys_safe_err17 |
                      sys_safe_err18 |
                      sys_safe_err19 |
                      sys_safe_err20 |
                      sys_safe_err21 |
                      sys_safe_err22 |
                      sys_safe_err23 |
                      sys_safe_err24 |
                      sys_safe_err25 |
                      sys_safe_err26 |
                      sys_safe_err27 |
                      sys_safe_err28 |
                      sys_safe_err29 |
                      sys_safe_err30 |
                      sys_safe_err31 |
                      sys_safe_err32 |
                      sys_safe_err33 |
                      sys_safe_err34 |
                      sys_safe_err35 |
                      sys_safe_err36 |
                      sys_safe_err37 |
                      sys_safe_err38 |
                      sys_safe_err39 |
                      sys_safe_err40 |
                      sys_safe_err41 |
                      sys_safe_err42 |
                      sys_safe_err43 |
                      sys_safe_err44 |
                      sys_safe_err45 |
                      sys_safe_err46 |
                      sys_safe_err47 |
                      sys_safe_err48 |
                      sys_safe_err49 |
                      sys_safe_err50 |
                      sys_safe_err51 |
                      sys_safe_err52 |
                      sys_safe_err53 |
                      sys_safe_err54 |
                      sys_safe_err55 |
                      sys_safe_err56 |
                      sys_safe_err57 |
                      sys_safe_err58;

// =============================================================
//                          ENV_FAIRNESS:
// =============================================================
// G(F(BtoR_REQ0=1 <-> RtoB_ACK0=1));	#A2
assign env_fair0 = controllable_BtoR_REQ0 ^~ i_RtoB_ACK0;

// G(F(BtoR_REQ1=1 <-> RtoB_ACK1=1));	#A2
assign env_fair1 = controllable_BtoR_REQ1 ^~ i_RtoB_ACK1;


// =============================================================
//                          SYS_FAIRNESS:
// =============================================================
// G(F(StoB_REQ0=1 <-> BtoS_ACK0=1));	#G1+G2
assign sys_fair0 = i_StoB_REQ0 ^~ controllable_BtoS_ACK0;

// G(F(StoB_REQ1=1 <-> BtoS_ACK1=1));	#G1+G2
assign sys_fair1 = i_StoB_REQ1 ^~ controllable_BtoS_ACK1;

// G(F(StoB_REQ2=1 <-> BtoS_ACK2=1));	#G1+G2
assign sys_fair2 = i_StoB_REQ2 ^~ controllable_BtoS_ACK2;

// G(F(StoB_REQ3=1 <-> BtoS_ACK3=1));	#G1+G2
assign sys_fair3 = i_StoB_REQ3 ^~ controllable_BtoS_ACK3;

// G(F(StoB_REQ4=1 <-> BtoS_ACK4=1));	#G1+G2
assign sys_fair4 = i_StoB_REQ4 ^~ controllable_BtoS_ACK4;

// G(F(StoB_REQ5=1 <-> BtoS_ACK5=1));	#G1+G2
assign sys_fair5 = i_StoB_REQ5 ^~ controllable_BtoS_ACK5;

// G(F(stateG12=0));	#G12
assign sys_fair6 = ~reg_stateG12;

assign fair_err = (fair_cnt >= 2'b10);

// computing the error output bit:
assign o_err = ~env_safe_err & ~env_safe_err_happened & (sys_safe_err | fair_err);
initial
 begin
  reg_i_StoB_REQ0 = 0;
  reg_controllable_BtoS_ACK0 = 0;
  reg_i_StoB_REQ1 = 0;
  reg_controllable_BtoS_ACK1 = 0;
  reg_i_StoB_REQ2 = 0;
  reg_controllable_BtoS_ACK2 = 0;
  reg_i_StoB_REQ3 = 0;
  reg_controllable_BtoS_ACK3 = 0;
  reg_i_StoB_REQ4 = 0;
  reg_controllable_BtoS_ACK4 = 0;
  reg_i_StoB_REQ5 = 0;
  reg_controllable_BtoS_ACK5 = 0;
  reg_i_RtoB_ACK0 = 0;
  reg_controllable_BtoR_REQ0 = 0;
  reg_i_RtoB_ACK1 = 0;
  reg_controllable_BtoR_REQ1 = 0;
  reg_i_FULL = 0;
  reg_i_nEMPTY = 0;
  reg_controllable_ENQ = 0;
  reg_controllable_DEQ = 0;
  reg_controllable_SLC0 = 0;
  reg_controllable_SLC1 = 0;
  reg_controllable_SLC2 = 0;
  reg_stateG7_0 = 0;
  reg_nstateG7_1 = 0;
  reg_stateG12 = 0;
  env_safe_err_happened = 0;
  next_env_fair = 0;
  fair_cnt = 0;
  next_sys_fair = 0;
 end


always @(posedge i_clk)
 begin
   // We remember if an environment error occurred:
   env_safe_err_happened = env_safe_err_happened | env_safe_err;

   // Updating the fairness counters: 
   if((next_sys_fair == 0) & sys_fair0)
    begin
      next_sys_fair = 1;
      next_env_fair = 0;
      fair_cnt = 0;
    end
   else if((next_sys_fair == 1) & sys_fair1)
    begin
      next_sys_fair = 2;
      next_env_fair = 0;
      fair_cnt = 0;
    end
   else if((next_sys_fair == 2) & sys_fair2)
    begin
      next_sys_fair = 3;
      next_env_fair = 0;
      fair_cnt = 0;
    end
   else if((next_sys_fair == 3) & sys_fair3)
    begin
      next_sys_fair = 4;
      next_env_fair = 0;
      fair_cnt = 0;
    end
   else if((next_sys_fair == 4) & sys_fair4)
    begin
      next_sys_fair = 5;
      next_env_fair = 0;
      fair_cnt = 0;
    end
   else if((next_sys_fair == 5) & sys_fair5)
    begin
      next_sys_fair = 6;
      next_env_fair = 0;
      fair_cnt = 0;
    end
   else if((next_sys_fair == 6) & sys_fair6)
    begin
      next_sys_fair = 0;
      next_env_fair = 0;
      fair_cnt = 0;
    end
   else if(~next_env_fair & env_fair0)
    begin
      next_env_fair = 1;
    end
   else if(next_env_fair & env_fair1)
    begin
      next_env_fair = 0;
      fair_cnt = fair_cnt + 1;
    end

   // Updating the automata: 
   // Automaton G7: 
   if(reg_nstateG7_1 & ~reg_controllable_BtoR_REQ0 & reg_controllable_BtoR_REQ1)
    begin
      reg_nstateG7_1 = 1'b0;
      reg_stateG7_0 = 1'b0;
    end
   else if(~reg_nstateG7_1 & reg_controllable_BtoR_REQ0 & ~reg_controllable_BtoR_REQ1)
    begin
      reg_nstateG7_1 = 1'b1;
      reg_stateG7_0 = 1'b0;
    end
   else if(reg_nstateG7_1 & ~reg_controllable_BtoR_REQ0 & ~reg_controllable_BtoR_REQ1)
    begin
      reg_nstateG7_1 = 1'b1;
      reg_stateG7_0 = 1'b1;
    end
   else if(~reg_nstateG7_1 & ~reg_controllable_BtoR_REQ0 & ~reg_controllable_BtoR_REQ1)
    begin
      reg_nstateG7_1 = 1'b0;
      reg_stateG7_0 = 1'b1;
    end

   // Automaton G12: 
   if(~reg_stateG12 & reg_i_nEMPTY & ~reg_controllable_DEQ)
      reg_stateG12 = 1'b1;
   else if(reg_stateG12 & reg_controllable_DEQ)
      reg_stateG12 = 1'b0;

   // Latching the previous input:
   reg_i_StoB_REQ0 =  i_StoB_REQ0;
   reg_controllable_BtoS_ACK0 =  controllable_BtoS_ACK0;
   reg_i_StoB_REQ1 =  i_StoB_REQ1;
   reg_controllable_BtoS_ACK1 =  controllable_BtoS_ACK1;
   reg_i_StoB_REQ2 =  i_StoB_REQ2;
   reg_controllable_BtoS_ACK2 =  controllable_BtoS_ACK2;
   reg_i_StoB_REQ3 =  i_StoB_REQ3;
   reg_controllable_BtoS_ACK3 =  controllable_BtoS_ACK3;
   reg_i_StoB_REQ4 =  i_StoB_REQ4;
   reg_controllable_BtoS_ACK4 =  controllable_BtoS_ACK4;
   reg_i_StoB_REQ5 =  i_StoB_REQ5;
   reg_controllable_BtoS_ACK5 =  controllable_BtoS_ACK5;
   reg_i_RtoB_ACK0 =  i_RtoB_ACK0;
   reg_controllable_BtoR_REQ0 =  controllable_BtoR_REQ0;
   reg_i_RtoB_ACK1 =  i_RtoB_ACK1;
   reg_controllable_BtoR_REQ1 =  controllable_BtoR_REQ1;
   reg_i_FULL =  i_FULL;
   reg_i_nEMPTY =  i_nEMPTY;
   reg_controllable_ENQ =  controllable_ENQ;
   reg_controllable_DEQ =  controllable_DEQ;
   reg_controllable_SLC0 =  controllable_SLC0;
   reg_controllable_SLC1 =  controllable_SLC1;
   reg_controllable_SLC2 =  controllable_SLC2;

 end
endmodule

-------------------------------
#!SYNTCOMP
STATUS : unrealizable
SOLVED_BY : 7/8 [SYNTCOMP2014-RealSeq]
SOLVED_IN : 0.720045 [SYNTCOMP2014-RealSeq]
#.
