aag 865 27 44 1 794
2
4
6
8
10
12
14
16
18
20
22
24
26
28
30
32
34
36
38
40
42
44
46
48
50
52
54
56 1
58 1021
60 22
62 50
64 1289
66 6
68 26
70 8
72 52
74 1307
76 10
78 48
80 30
82 12
84 46
86 34
88 4
90 14
92 42
94 44
96 38
98 16
100 40
102 1329
104 1555
106 1561
108 1567
110 1573
112 1579
114 1585
116 2
118 1707
120 1713
122 1719
124 1725
126 1731
128 20
130 36
132 24
134 423
136 32
138 18
140 28
142 54
972
144 141 56
146 140 56
148 145 56
150 67 56
152 66 56
154 151 56
156 155 146
158 156 29
160 152 28
162 161 159
164 137 56
166 136 56
168 165 56
170 71 56
172 70 56
174 171 56
176 175 166
178 176 33
180 179 162
182 172 32
184 183 180
186 131 56
188 130 56
190 187 56
192 77 56
194 76 56
196 193 56
198 197 188
200 198 37
202 201 184
204 194 36
206 205 202
208 101 56
210 100 56
212 209 56
214 83 56
216 82 56
218 215 56
220 219 210
222 220 41
224 223 206
226 216 40
228 227 224
230 93 56
232 92 56
234 231 56
236 91 56
238 90 56
240 237 56
242 241 232
244 242 43
246 245 228
248 238 42
250 249 246
252 85 56
254 84 56
256 253 56
258 99 56
260 98 56
262 259 56
264 263 254
266 264 47
268 267 250
270 260 46
272 271 268
274 79 56
276 78 56
278 275 56
280 129 56
282 128 56
284 281 56
286 285 276
288 286 49
290 289 272
292 282 48
294 293 290
296 73 56
298 72 56
300 297 56
302 133 56
304 132 56
306 303 56
308 307 298
310 308 53
312 311 294
314 304 52
316 315 312
318 139 56
320 138 56
322 319 56
324 323 54
326 325 316
328 143 56
330 142 56
332 329 56
334 330 320
336 334 55
338 337 326
340 61 56
342 60 56
344 341 56
346 345 50
348 347 338
350 63 56
352 62 56
354 351 56
356 352 342
358 356 51
360 359 348
362 89 56
364 88 56
366 363 56
368 117 56
370 116 56
372 369 56
374 373 364
376 374 27
378 377 360
380 370 367
382 380 44
384 383 378
386 381 375
388 95 56
390 94 56
392 389 56
394 393 44
396 390 45
398 397 395
400 69 56
402 68 56
404 401 56
406 405 26
408 402 27
410 409 407
412 410 398
414 413 386
416 415 384
418 135 56
420 419 56
422 421 416
424 149 28
426 424 6
428 155 149
430 428 6
432 431 427
434 152 146
436 434 7
438 437 432
440 8 6
442 441 438
444 10 6
446 445 442
448 12 6
450 449 446
452 14 6
454 453 450
456 16 6
458 457 454
460 20 6
462 461 458
464 24 6
466 465 462
468 169 32
470 468 8
472 471 466
474 175 169
476 474 8
478 477 472
480 172 166
482 480 9
484 483 478
486 10 8
488 487 484
490 12 8
492 491 488
494 14 8
496 495 492
498 16 8
500 499 496
502 20 8
504 503 500
506 24 8
508 507 504
510 191 36
512 510 10
514 513 508
516 197 191
518 516 10
520 519 514
522 194 188
524 522 11
526 525 520
528 12 10
530 529 526
532 14 10
534 533 530
536 16 10
538 537 534
540 20 10
542 541 538
544 24 10
546 545 542
548 213 40
550 548 12
552 551 546
554 219 213
556 554 12
558 557 552
560 216 210
562 560 13
564 563 558
566 14 12
568 567 564
570 16 12
572 571 568
574 20 12
576 575 572
578 24 12
580 579 576
582 235 42
584 582 14
586 585 580
588 241 235
590 588 14
592 591 586
594 238 232
596 594 15
598 597 592
600 16 14
602 601 598
604 20 14
606 605 602
608 24 14
610 609 606
612 257 46
614 612 16
616 615 610
618 263 257
620 618 16
622 621 616
624 260 254
626 624 17
628 627 622
630 20 16
632 631 628
634 24 16
636 635 632
638 279 48
640 638 20
642 641 636
644 285 279
646 644 20
648 647 642
650 282 276
652 650 21
654 653 648
656 24 20
658 657 654
660 301 52
662 660 24
664 663 658
666 307 301
668 666 24
670 669 664
672 304 298
674 672 25
676 675 670
678 333 320
680 678 19
682 681 676
684 22 18
686 685 682
688 330 18
690 689 686
692 355 342
694 692 23
696 695 690
698 352 22
700 699 696
702 342 320
704 703 700
706 75 56
708 74 56
710 707 56
712 58 56
714 712 708
716 714 320
718 717 704
720 712 711
722 720 342
724 723 718
726 155 6
728 726 5
730 729 724
732 35 31
734 732 39
736 735 726
738 737 730
740 175 8
742 740 5
744 743 738
746 35 30
748 746 39
750 748 741
752 749 740
754 753 751
756 754 744
758 197 10
760 758 5
762 761 756
764 34 31
766 764 39
768 766 759
770 767 758
772 771 769
774 772 762
776 219 12
778 776 5
780 779 774
782 34 30
784 782 39
786 784 777
788 785 776
790 789 787
792 790 780
794 241 14
796 794 5
798 797 792
800 732 38
802 800 795
804 801 794
806 805 803
808 806 798
810 263 16
812 810 5
814 813 808
816 746 38
818 816 811
820 817 810
822 821 819
824 822 814
826 285 20
828 826 5
830 829 824
832 764 38
834 832 827
836 833 826
838 837 835
840 838 830
842 307 24
844 842 5
846 845 840
848 782 38
850 848 843
852 849 842
854 853 851
856 854 846
858 741 727
860 858 759
862 860 777
864 862 795
866 864 811
868 866 827
870 868 843
872 870 4
874 873 856
876 330 55
878 876 3
880 879 874
882 352 51
884 882 3
886 885 880
888 883 877
890 888 2
892 891 886
894 44 3
896 894 4
898 897 892
900 27 2
902 901 898
904 115 56
906 114 56
908 905 56
910 113 56
912 112 56
914 911 56
916 111 56
918 110 56
920 917 56
922 109 56
924 108 56
926 923 56
928 107 56
930 106 56
932 929 56
934 105 56
936 104 56
938 935 56
940 921 915
942 940 909
944 943 908
946 944 941
948 920 912
950 949 941
952 941 909
954 940 906
956 955 953
958 937 931
960 958 925
962 960 920
964 962 950
966 964 956
968 967 947
970 968 902
972 971 422
974 708 323
976 974 342
978 711 320
980 978 345
982 974 345
984 711 323
986 984 345
988 980 977
990 989 977
992 981 977
994 992 982
996 995 990
998 992 983
1000 998 986
1002 1001 996
1004 987 712
1006 1005 987
1008 1007 983
1010 1009 983
1012 1011 981
1014 1012 977
1016 1014 1003
1018 1002 712
1020 1019 1017
1022 119 56
1024 118 56
1026 1023 56
1028 121 56
1030 120 56
1032 1029 56
1034 123 56
1036 122 56
1038 1035 56
1040 125 56
1042 124 56
1044 1041 56
1046 126 56
1048 1031 1025
1050 1048 1037
1052 1050 1043
1054 1052 1047
1056 29 6
1058 28 7
1060 1059 1057
1062 1060 1054
1064 1031 1026
1066 1064 1037
1068 1066 1043
1070 1068 1047
1072 33 8
1074 32 9
1076 1075 1073
1078 1076 1070
1080 1032 1025
1082 1080 1037
1084 1082 1043
1086 1084 1047
1088 37 10
1090 36 11
1092 1091 1089
1094 1092 1086
1096 1032 1026
1098 1096 1037
1100 1098 1043
1102 1100 1047
1104 41 12
1106 40 13
1108 1107 1105
1110 1108 1102
1112 1048 1038
1114 1112 1043
1116 1114 1047
1118 43 14
1120 42 15
1122 1121 1119
1124 1122 1116
1126 1064 1038
1128 1126 1043
1130 1128 1047
1132 47 16
1134 46 17
1136 1135 1133
1138 1136 1130
1140 1080 1038
1142 1140 1043
1144 1142 1047
1146 49 20
1148 48 21
1150 1149 1147
1152 1150 1144
1154 1096 1038
1156 1154 1043
1158 1156 1047
1160 53 24
1162 52 25
1164 1163 1161
1166 1164 1158
1168 1050 1044
1170 1168 1047
1172 103 56
1174 102 56
1176 1173 56
1178 1177 1170
1180 65 56
1182 64 56
1184 1181 56
1186 54 19
1188 55 18
1190 1189 1187
1192 1190 1185
1194 50 23
1196 51 22
1198 1197 1195
1200 1198 1182
1202 1078 1063
1204 1203 1063
1206 1079 1063
1208 1206 1094
1210 1209 1204
1212 1206 1095
1214 1212 1110
1216 1215 1210
1218 1212 1111
1220 1218 1124
1222 1221 1216
1224 1218 1125
1226 1224 1138
1228 1227 1222
1230 1224 1139
1232 1230 1152
1234 1233 1228
1236 1230 1153
1238 1236 1166
1240 1239 1234
1242 1236 1167
1244 1242 1178
1246 1245 1240
1248 1242 1179
1250 1248 1192
1252 1251 1246
1254 1248 1193
1256 1254 1200
1258 1257 1252
1260 1201 1182
1262 1260 1193
1264 1263 1193
1266 1265 1179
1268 1266 1167
1270 1268 1153
1272 1270 1139
1274 1272 1125
1276 1274 1111
1278 1276 1095
1280 1278 1079
1282 1280 1063
1284 1282 1259
1286 1258 1182
1288 1287 1285
1290 987 708
1292 1290 983
1294 1293 983
1296 1295 981
1298 1297 981
1300 1299 977
1302 1300 1003
1304 1002 708
1306 1305 1303
1308 1177 402
1310 1308 373
1312 1174 370
1314 1312 1311
1316 1315 1311
1318 1313 1174
1320 1318 1311
1322 1321 1311
1324 1323 1317
1326 1316 1174
1328 1327 1325
1330 1257 1246
1332 1200 939
1334 1201 936
1336 1335 1333
1338 1192 936
1340 1337 1193
1342 1341 1339
1344 1343 1179
1346 1344 1167
1348 1346 1153
1350 1348 1139
1352 1350 1125
1354 1352 1111
1356 1354 1095
1358 1356 1079
1360 1358 1063
1362 936 933
1364 937 930
1366 1365 1363
1368 1367 1200
1370 1201 930
1372 1371 1369
1374 1192 930
1376 1373 1193
1378 1377 1375
1380 1379 1179
1382 1380 1167
1384 1382 1153
1386 1384 1139
1388 1386 1125
1390 1388 1111
1392 1390 1095
1394 1392 1079
1396 1394 1063
1398 936 930
1400 1398 927
1402 1399 924
1404 1403 1401
1406 1405 1200
1408 1201 924
1410 1409 1407
1412 1192 924
1414 1411 1193
1416 1415 1413
1418 1417 1179
1420 1418 1167
1422 1420 1153
1424 1422 1139
1426 1424 1125
1428 1426 1111
1430 1428 1095
1432 1430 1079
1434 1432 1063
1436 1398 924
1438 1436 921
1440 1437 918
1442 1441 1439
1444 1443 1200
1446 1201 918
1448 1447 1445
1450 1192 918
1452 1449 1193
1454 1453 1451
1456 1455 1179
1458 1456 1167
1460 1458 1153
1462 1460 1139
1464 1462 1125
1466 1464 1111
1468 1466 1095
1470 1468 1079
1472 1470 1063
1474 1436 918
1476 1474 915
1478 1475 912
1480 1479 1477
1482 1481 1200
1484 1201 912
1486 1485 1483
1488 1192 912
1490 1487 1193
1492 1491 1489
1494 1493 1179
1496 1494 1167
1498 1496 1153
1500 1498 1139
1502 1500 1125
1504 1502 1111
1506 1504 1095
1508 1506 1079
1510 1508 1063
1512 1474 912
1514 1512 909
1516 1513 906
1518 1517 1515
1520 1519 1200
1522 1201 906
1524 1523 1521
1526 1192 906
1528 1525 1193
1530 1529 1527
1532 1531 1179
1534 1532 1167
1536 1534 1153
1538 1536 1139
1540 1538 1125
1542 1540 1111
1544 1542 1095
1546 1544 1079
1548 1546 1063
1550 1360 1331
1552 1330 936
1554 1553 1551
1556 1396 1331
1558 1330 930
1560 1559 1557
1562 1434 1331
1564 1330 924
1566 1565 1563
1568 1472 1331
1570 1330 918
1572 1571 1569
1574 1510 1331
1576 1330 912
1578 1577 1575
1580 1548 1331
1582 1330 906
1584 1583 1581
1586 1179 1024
1588 1586 1167
1590 1588 1153
1592 1591 1153
1594 1593 1139
1596 1594 1125
1598 1597 1125
1600 1599 1111
1602 1600 1095
1604 1603 1095
1606 1605 1079
1608 1606 1063
1610 1609 1063
1612 1179 1030
1614 1612 1167
1616 1614 1153
1618 1617 1153
1620 1619 1139
1622 1621 1139
1624 1623 1125
1626 1624 1111
1628 1626 1095
1630 1629 1095
1632 1631 1079
1634 1633 1079
1636 1635 1063
1638 1179 1036
1640 1638 1167
1642 1640 1153
1644 1643 1153
1646 1645 1139
1648 1647 1139
1650 1649 1125
1652 1651 1125
1654 1653 1111
1656 1655 1111
1658 1657 1095
1660 1658 1079
1662 1660 1063
1664 1179 1042
1666 1664 1167
1668 1667 1167
1670 1669 1153
1672 1670 1139
1674 1672 1125
1676 1674 1111
1678 1676 1095
1680 1678 1079
1682 1680 1063
1684 1179 1046
1686 1684 1167
1688 1686 1153
1690 1688 1139
1692 1690 1125
1694 1692 1111
1696 1694 1095
1698 1696 1079
1700 1698 1063
1702 1611 1247
1704 1246 1024
1706 1705 1703
1708 1636 1247
1710 1246 1030
1712 1711 1709
1714 1662 1247
1716 1246 1036
1718 1717 1715
1720 1682 1247
1722 1246 1042
1724 1723 1721
1726 1700 1247
1728 1246 1046
1730 1729 1727
i0 controllable_DEQ
i1 controllable_ENQ
i2 controllable_BtoS_ACK0
i3 controllable_BtoS_ACK1
i4 controllable_BtoS_ACK2
i5 controllable_BtoS_ACK3
i6 controllable_BtoS_ACK4
i7 controllable_BtoS_ACK5
i8 controllable_BtoR_REQ0
i9 controllable_BtoS_ACK6
i10 controllable_BtoR_REQ1
i11 controllable_BtoS_ACK7
i12 i_nEMPTY
i13 i_StoB_REQ0
i14 controllable_SLC0
i15 i_StoB_REQ1
i16 controllable_SLC1
i17 i_StoB_REQ2
i18 controllable_SLC2
i19 i_StoB_REQ3
i20 i_StoB_REQ4
i21 i_FULL
i22 i_StoB_REQ5
i23 i_StoB_REQ6
i24 i_RtoB_ACK1
i25 i_StoB_REQ7
i26 i_RtoB_ACK0
l0 n57
l1 reg_stateG7_0_out
l2 reg_controllable_BtoR_REQ1_out
l3 reg_i_RtoB_ACK1_out
l4 next_env_fair_out
l5 reg_controllable_BtoS_ACK0_out
l6 reg_i_nEMPTY_out
l7 reg_controllable_BtoS_ACK1_out
l8 reg_i_StoB_REQ7_out
l9 reg_nstateG7_1_out
l10 reg_controllable_BtoS_ACK2_out
l11 reg_i_StoB_REQ6_out
l12 reg_controllable_SLC0_out
l13 reg_controllable_BtoS_ACK3_out
l14 reg_i_StoB_REQ5_out
l15 reg_controllable_SLC1_out
l16 reg_controllable_ENQ_out
l17 reg_controllable_BtoS_ACK4_out
l18 reg_i_StoB_REQ4_out
l19 reg_i_FULL_out
l20 reg_controllable_SLC2_out
l21 reg_controllable_BtoS_ACK5_out
l22 reg_i_StoB_REQ3_out
l23 reg_stateG12_out
l24 fair_cnt<0>_out
l25 fair_cnt<1>_out
l26 fair_cnt<2>_out
l27 fair_cnt<3>_out
l28 fair_cnt<4>_out
l29 fair_cnt<5>_out
l30 reg_controllable_DEQ_out
l31 next_sys_fair<0>_out
l32 next_sys_fair<1>_out
l33 next_sys_fair<2>_out
l34 next_sys_fair<3>_out
l35 next_sys_fair<4>_out
l36 reg_controllable_BtoS_ACK6_out
l37 reg_i_StoB_REQ2_out
l38 reg_controllable_BtoS_ACK7_out
l39 env_safe_err_happened_out
l40 reg_i_StoB_REQ1_out
l41 reg_controllable_BtoR_REQ0_out
l42 reg_i_StoB_REQ0_out
l43 reg_i_RtoB_ACK0_out
o0 o_err
c
genbuf_8_new_40
This file was written by ABC on Tue May  5 16:58:39 2015
For information about AIGER format, refer to http://fmv.jku.at/aiger
-------------------------------
This AIGER file has been created by the following sequence of commands:
> vl2mv genbuf8c40.v   ---gives--> genbuf8c40.mv
> abc -c "read_blif_mv genbuf8c40.mv; write_aiger -s genbuf8c40n.aig"   ---gives--> genbuf8c40n.aig
> aigtoaig genbuf8c40n.aig genbuf8c40n.aag   ---gives--> genbuf8c40n.aag (this file)
Content of genbuf8c40.v:
module genbuf_8_new_40(
        o_err,
        i_clk,
        i_StoB_REQ0,
        controllable_BtoS_ACK0,
        i_StoB_REQ1,
        controllable_BtoS_ACK1,
        i_StoB_REQ2,
        controllable_BtoS_ACK2,
        i_StoB_REQ3,
        controllable_BtoS_ACK3,
        i_StoB_REQ4,
        controllable_BtoS_ACK4,
        i_StoB_REQ5,
        controllable_BtoS_ACK5,
        i_StoB_REQ6,
        controllable_BtoS_ACK6,
        i_StoB_REQ7,
        controllable_BtoS_ACK7,
        i_RtoB_ACK0,
        controllable_BtoR_REQ0,
        i_RtoB_ACK1,
        controllable_BtoR_REQ1,
        i_FULL,
        i_nEMPTY,
        controllable_ENQ,
        controllable_DEQ,
        controllable_SLC0,
        controllable_SLC1,
        controllable_SLC2);

input i_clk;
input i_StoB_REQ0;
input controllable_BtoS_ACK0;
input i_StoB_REQ1;
input controllable_BtoS_ACK1;
input i_StoB_REQ2;
input controllable_BtoS_ACK2;
input i_StoB_REQ3;
input controllable_BtoS_ACK3;
input i_StoB_REQ4;
input controllable_BtoS_ACK4;
input i_StoB_REQ5;
input controllable_BtoS_ACK5;
input i_StoB_REQ6;
input controllable_BtoS_ACK6;
input i_StoB_REQ7;
input controllable_BtoS_ACK7;
input i_RtoB_ACK0;
input controllable_BtoR_REQ0;
input i_RtoB_ACK1;
input controllable_BtoR_REQ1;
input i_FULL;
input i_nEMPTY;
input controllable_ENQ;
input controllable_DEQ;
input controllable_SLC0;
input controllable_SLC1;
input controllable_SLC2;
output o_err;

reg reg_i_StoB_REQ0;
reg reg_controllable_BtoS_ACK0;
reg reg_i_StoB_REQ1;
reg reg_controllable_BtoS_ACK1;
reg reg_i_StoB_REQ2;
reg reg_controllable_BtoS_ACK2;
reg reg_i_StoB_REQ3;
reg reg_controllable_BtoS_ACK3;
reg reg_i_StoB_REQ4;
reg reg_controllable_BtoS_ACK4;
reg reg_i_StoB_REQ5;
reg reg_controllable_BtoS_ACK5;
reg reg_i_StoB_REQ6;
reg reg_controllable_BtoS_ACK6;
reg reg_i_StoB_REQ7;
reg reg_controllable_BtoS_ACK7;
reg reg_i_RtoB_ACK0;
reg reg_controllable_BtoR_REQ0;
reg reg_i_RtoB_ACK1;
reg reg_controllable_BtoR_REQ1;
reg reg_i_FULL;
reg reg_i_nEMPTY;
reg reg_controllable_ENQ;
reg reg_controllable_DEQ;
reg reg_controllable_SLC0;
reg reg_controllable_SLC1;
reg reg_controllable_SLC2;
reg reg_stateG7_0;
reg reg_nstateG7_1;
reg reg_stateG12;
reg env_safe_err_happened;
reg next_env_fair;
reg [5:0] fair_cnt;
reg [4:0] next_sys_fair;

wire env_safe_err0;
wire env_safe_err1;
wire env_safe_err2;
wire env_safe_err3;
wire env_safe_err4;
wire env_safe_err5;
wire env_safe_err6;
wire env_safe_err7;
wire env_safe_err8;
wire env_safe_err9;
wire env_safe_err10;
wire env_safe_err11;
wire env_safe_err12;
wire env_safe_err13;
wire env_safe_err14;
wire env_safe_err15;
wire env_safe_err16;
wire env_safe_err17;
wire env_safe_err18;
wire env_safe_err19;
wire env_safe_err20;
wire env_safe_err21;
wire env_safe_err22;
wire env_safe_err;

wire sys_safe_err0;
wire sys_safe_err1;
wire sys_safe_err2;
wire sys_safe_err3;
wire sys_safe_err4;
wire sys_safe_err5;
wire sys_safe_err6;
wire sys_safe_err7;
wire sys_safe_err8;
wire sys_safe_err9;
wire sys_safe_err10;
wire sys_safe_err11;
wire sys_safe_err12;
wire sys_safe_err13;
wire sys_safe_err14;
wire sys_safe_err15;
wire sys_safe_err16;
wire sys_safe_err17;
wire sys_safe_err18;
wire sys_safe_err19;
wire sys_safe_err20;
wire sys_safe_err21;
wire sys_safe_err22;
wire sys_safe_err23;
wire sys_safe_err24;
wire sys_safe_err25;
wire sys_safe_err26;
wire sys_safe_err27;
wire sys_safe_err28;
wire sys_safe_err29;
wire sys_safe_err30;
wire sys_safe_err31;
wire sys_safe_err32;
wire sys_safe_err33;
wire sys_safe_err34;
wire sys_safe_err35;
wire sys_safe_err36;
wire sys_safe_err37;
wire sys_safe_err38;
wire sys_safe_err39;
wire sys_safe_err40;
wire sys_safe_err41;
wire sys_safe_err42;
wire sys_safe_err43;
wire sys_safe_err44;
wire sys_safe_err45;
wire sys_safe_err46;
wire sys_safe_err47;
wire sys_safe_err48;
wire sys_safe_err49;
wire sys_safe_err50;
wire sys_safe_err51;
wire sys_safe_err52;
wire sys_safe_err53;
wire sys_safe_err54;
wire sys_safe_err55;
wire sys_safe_err56;
wire sys_safe_err57;
wire sys_safe_err58;
wire sys_safe_err59;
wire sys_safe_err60;
wire sys_safe_err61;
wire sys_safe_err62;
wire sys_safe_err63;
wire sys_safe_err64;
wire sys_safe_err65;
wire sys_safe_err66;
wire sys_safe_err67;
wire sys_safe_err68;
wire sys_safe_err69;
wire sys_safe_err70;
wire sys_safe_err71;
wire sys_safe_err72;
wire sys_safe_err73;
wire sys_safe_err74;
wire sys_safe_err75;
wire sys_safe_err76;
wire sys_safe_err77;
wire sys_safe_err78;
wire sys_safe_err79;
wire sys_safe_err80;
wire sys_safe_err81;
wire sys_safe_err;

wire env_fair0;
wire env_fair1;

wire sys_fair0;
wire sys_fair1;
wire sys_fair2;
wire sys_fair3;
wire sys_fair4;
wire sys_fair5;
wire sys_fair6;
wire sys_fair7;
wire sys_fair8;
wire fair_err;
wire o_err;

// =============================================================
//                        ENV_TRANSITION:
// =============================================================
// G((StoB_REQ0=1 * BtoS_ACK0=0) -> X(StoB_REQ0=1));	#A1
assign env_safe_err0 = ~((~(reg_i_StoB_REQ0 & ~reg_controllable_BtoS_ACK0)) | i_StoB_REQ0);

// G(BtoS_ACK0=1 -> X(StoB_REQ0=0));	#A1
assign env_safe_err1 = ~((~(reg_controllable_BtoS_ACK0)) | ~i_StoB_REQ0);

// G((StoB_REQ1=1 * BtoS_ACK1=0) -> X(StoB_REQ1=1));	#A1
assign env_safe_err2 = ~((~(reg_i_StoB_REQ1 & ~reg_controllable_BtoS_ACK1)) | i_StoB_REQ1);

// G(BtoS_ACK1=1 -> X(StoB_REQ1=0));	#A1
assign env_safe_err3 = ~((~(reg_controllable_BtoS_ACK1)) | ~i_StoB_REQ1);

// G((StoB_REQ2=1 * BtoS_ACK2=0) -> X(StoB_REQ2=1));	#A1
assign env_safe_err4 = ~((~(reg_i_StoB_REQ2 & ~reg_controllable_BtoS_ACK2)) | i_StoB_REQ2);

// G(BtoS_ACK2=1 -> X(StoB_REQ2=0));	#A1
assign env_safe_err5 = ~((~(reg_controllable_BtoS_ACK2)) | ~i_StoB_REQ2);

// G((StoB_REQ3=1 * BtoS_ACK3=0) -> X(StoB_REQ3=1));	#A1
assign env_safe_err6 = ~((~(reg_i_StoB_REQ3 & ~reg_controllable_BtoS_ACK3)) | i_StoB_REQ3);

// G(BtoS_ACK3=1 -> X(StoB_REQ3=0));	#A1
assign env_safe_err7 = ~((~(reg_controllable_BtoS_ACK3)) | ~i_StoB_REQ3);

// G((StoB_REQ4=1 * BtoS_ACK4=0) -> X(StoB_REQ4=1));	#A1
assign env_safe_err8 = ~((~(reg_i_StoB_REQ4 & ~reg_controllable_BtoS_ACK4)) | i_StoB_REQ4);

// G(BtoS_ACK4=1 -> X(StoB_REQ4=0));	#A1
assign env_safe_err9 = ~((~(reg_controllable_BtoS_ACK4)) | ~i_StoB_REQ4);

// G((StoB_REQ5=1 * BtoS_ACK5=0) -> X(StoB_REQ5=1));	#A1
assign env_safe_err10 = ~((~(reg_i_StoB_REQ5 & ~reg_controllable_BtoS_ACK5)) | i_StoB_REQ5);

// G(BtoS_ACK5=1 -> X(StoB_REQ5=0));	#A1
assign env_safe_err11 = ~((~(reg_controllable_BtoS_ACK5)) | ~i_StoB_REQ5);

// G((StoB_REQ6=1 * BtoS_ACK6=0) -> X(StoB_REQ6=1));	#A1
assign env_safe_err12 = ~((~(reg_i_StoB_REQ6 & ~reg_controllable_BtoS_ACK6)) | i_StoB_REQ6);

// G(BtoS_ACK6=1 -> X(StoB_REQ6=0));	#A1
assign env_safe_err13 = ~((~(reg_controllable_BtoS_ACK6)) | ~i_StoB_REQ6);

// G((StoB_REQ7=1 * BtoS_ACK7=0) -> X(StoB_REQ7=1));	#A1
assign env_safe_err14 = ~((~(reg_i_StoB_REQ7 & ~reg_controllable_BtoS_ACK7)) | i_StoB_REQ7);

// G(BtoS_ACK7=1 -> X(StoB_REQ7=0));	#A1
assign env_safe_err15 = ~((~(reg_controllable_BtoS_ACK7)) | ~i_StoB_REQ7);

// G(BtoR_REQ0=0 -> X(RtoB_ACK0=0));	#A3
assign env_safe_err16 = ~(reg_controllable_BtoR_REQ0 | ~i_RtoB_ACK0);

// G((BtoR_REQ0=1 * RtoB_ACK0=1) -> X(RtoB_ACK0=1));	#A4
assign env_safe_err17 = ~((~(reg_controllable_BtoR_REQ0 & reg_i_RtoB_ACK0)) | i_RtoB_ACK0);

// G(BtoR_REQ1=0 -> X(RtoB_ACK1=0));	#A3
assign env_safe_err18 = ~(reg_controllable_BtoR_REQ1 | ~i_RtoB_ACK1);

// G((BtoR_REQ1=1 * RtoB_ACK1=1) -> X(RtoB_ACK1=1));	#A4
assign env_safe_err19 = ~((~(reg_controllable_BtoR_REQ1 & reg_i_RtoB_ACK1)) | i_RtoB_ACK1);

// G((ENQ=1 * DEQ=0) -> X(EMPTY=0));	#A4
assign env_safe_err20 = ~(~(reg_controllable_ENQ & ~reg_controllable_DEQ) | i_nEMPTY);

// G((DEQ=1 * ENQ=0) -> X(FULL=0));	#A4
assign env_safe_err21 = ~(~(reg_controllable_DEQ & ~reg_controllable_ENQ) | ~i_FULL);

// G((ENQ=1 <-> DEQ=1) -> ((FULL=1 <-> X(FULL=1)) *
//                         (EMPTY=1 <-> X(EMPTY=1))));	#A4
assign env_safe_err22 = ~(~(reg_controllable_ENQ ^~ reg_controllable_DEQ) | ((reg_i_FULL ^~ i_FULL) &  (reg_i_nEMPTY ^~ i_nEMPTY)) );

// collecting together the safety error bits:
assign env_safe_err = env_safe_err0 |
                      env_safe_err1 |
                      env_safe_err2 |
                      env_safe_err3 |
                      env_safe_err4 |
                      env_safe_err5 |
                      env_safe_err6 |
                      env_safe_err7 |
                      env_safe_err8 |
                      env_safe_err9 |
                      env_safe_err10 |
                      env_safe_err11 |
                      env_safe_err12 |
                      env_safe_err13 |
                      env_safe_err14 |
                      env_safe_err15 |
                      env_safe_err16 |
                      env_safe_err17 |
                      env_safe_err18 |
                      env_safe_err19 |
                      env_safe_err20 |
                      env_safe_err21 |
                      env_safe_err22;

// =============================================================
//                        SYS_TRANSITION:
// =============================================================
// G((StoB_REQ0=0 * X(StoB_REQ0=1)) -> X(BtoS_ACK0=0));	#G2
assign sys_safe_err0 = ~((~(~reg_i_StoB_REQ0 & i_StoB_REQ0 )) | ~controllable_BtoS_ACK0);

// G((BtoS_ACK0=0 * StoB_REQ0=0) -> X(BtoS_ACK0=0));	#G2
assign sys_safe_err1 = ~((~(~reg_controllable_BtoS_ACK0 & ~reg_i_StoB_REQ0 )) | ~controllable_BtoS_ACK0);

// G((BtoS_ACK0=1 * StoB_REQ0=1) -> X(BtoS_ACK0=1));	#G4
assign sys_safe_err2 = ~((~(reg_controllable_BtoS_ACK0 & reg_i_StoB_REQ0 )) | controllable_BtoS_ACK0);

// G((BtoS_ACK0=0) + (BtoS_ACK1=0));	#G5
assign sys_safe_err3 = ~(~controllable_BtoS_ACK0 | ~controllable_BtoS_ACK1);

// G((BtoS_ACK0=0) + (BtoS_ACK2=0));	#G5
assign sys_safe_err4 = ~(~controllable_BtoS_ACK0 | ~controllable_BtoS_ACK2);

// G((BtoS_ACK0=0) + (BtoS_ACK3=0));	#G5
assign sys_safe_err5 = ~(~controllable_BtoS_ACK0 | ~controllable_BtoS_ACK3);

// G((BtoS_ACK0=0) + (BtoS_ACK4=0));	#G5
assign sys_safe_err6 = ~(~controllable_BtoS_ACK0 | ~controllable_BtoS_ACK4);

// G((BtoS_ACK0=0) + (BtoS_ACK5=0));	#G5
assign sys_safe_err7 = ~(~controllable_BtoS_ACK0 | ~controllable_BtoS_ACK5);

// G((BtoS_ACK0=0) + (BtoS_ACK6=0));	#G5
assign sys_safe_err8 = ~(~controllable_BtoS_ACK0 | ~controllable_BtoS_ACK6);

// G((BtoS_ACK0=0) + (BtoS_ACK7=0));	#G5
assign sys_safe_err9 = ~(~controllable_BtoS_ACK0 | ~controllable_BtoS_ACK7);

// G((StoB_REQ1=0 * X(StoB_REQ1=1)) -> X(BtoS_ACK1=0));	#G2
assign sys_safe_err10 = ~((~(~reg_i_StoB_REQ1 & i_StoB_REQ1 )) | ~controllable_BtoS_ACK1);

// G((BtoS_ACK1=0 * StoB_REQ1=0) -> X(BtoS_ACK1=0));	#G2
assign sys_safe_err11 = ~((~(~reg_controllable_BtoS_ACK1 & ~reg_i_StoB_REQ1 )) | ~controllable_BtoS_ACK1);

// G((BtoS_ACK1=1 * StoB_REQ1=1) -> X(BtoS_ACK1=1));	#G4
assign sys_safe_err12 = ~((~(reg_controllable_BtoS_ACK1 & reg_i_StoB_REQ1 )) | controllable_BtoS_ACK1);

// G((BtoS_ACK1=0) + (BtoS_ACK2=0));	#G5
assign sys_safe_err13 = ~(~controllable_BtoS_ACK1 | ~controllable_BtoS_ACK2);

// G((BtoS_ACK1=0) + (BtoS_ACK3=0));	#G5
assign sys_safe_err14 = ~(~controllable_BtoS_ACK1 | ~controllable_BtoS_ACK3);

// G((BtoS_ACK1=0) + (BtoS_ACK4=0));	#G5
assign sys_safe_err15 = ~(~controllable_BtoS_ACK1 | ~controllable_BtoS_ACK4);

// G((BtoS_ACK1=0) + (BtoS_ACK5=0));	#G5
assign sys_safe_err16 = ~(~controllable_BtoS_ACK1 | ~controllable_BtoS_ACK5);

// G((BtoS_ACK1=0) + (BtoS_ACK6=0));	#G5
assign sys_safe_err17 = ~(~controllable_BtoS_ACK1 | ~controllable_BtoS_ACK6);

// G((BtoS_ACK1=0) + (BtoS_ACK7=0));	#G5
assign sys_safe_err18 = ~(~controllable_BtoS_ACK1 | ~controllable_BtoS_ACK7);

// G((StoB_REQ2=0 * X(StoB_REQ2=1)) -> X(BtoS_ACK2=0));	#G2
assign sys_safe_err19 = ~((~(~reg_i_StoB_REQ2 & i_StoB_REQ2 )) | ~controllable_BtoS_ACK2);

// G((BtoS_ACK2=0 * StoB_REQ2=0) -> X(BtoS_ACK2=0));	#G2
assign sys_safe_err20 = ~((~(~reg_controllable_BtoS_ACK2 & ~reg_i_StoB_REQ2 )) | ~controllable_BtoS_ACK2);

// G((BtoS_ACK2=1 * StoB_REQ2=1) -> X(BtoS_ACK2=1));	#G4
assign sys_safe_err21 = ~((~(reg_controllable_BtoS_ACK2 & reg_i_StoB_REQ2 )) | controllable_BtoS_ACK2);

// G((BtoS_ACK2=0) + (BtoS_ACK3=0));	#G5
assign sys_safe_err22 = ~(~controllable_BtoS_ACK2 | ~controllable_BtoS_ACK3);

// G((BtoS_ACK2=0) + (BtoS_ACK4=0));	#G5
assign sys_safe_err23 = ~(~controllable_BtoS_ACK2 | ~controllable_BtoS_ACK4);

// G((BtoS_ACK2=0) + (BtoS_ACK5=0));	#G5
assign sys_safe_err24 = ~(~controllable_BtoS_ACK2 | ~controllable_BtoS_ACK5);

// G((BtoS_ACK2=0) + (BtoS_ACK6=0));	#G5
assign sys_safe_err25 = ~(~controllable_BtoS_ACK2 | ~controllable_BtoS_ACK6);

// G((BtoS_ACK2=0) + (BtoS_ACK7=0));	#G5
assign sys_safe_err26 = ~(~controllable_BtoS_ACK2 | ~controllable_BtoS_ACK7);

// G((StoB_REQ3=0 * X(StoB_REQ3=1)) -> X(BtoS_ACK3=0));	#G2
assign sys_safe_err27 = ~((~(~reg_i_StoB_REQ3 & i_StoB_REQ3 )) | ~controllable_BtoS_ACK3);

// G((BtoS_ACK3=0 * StoB_REQ3=0) -> X(BtoS_ACK3=0));	#G2
assign sys_safe_err28 = ~((~(~reg_controllable_BtoS_ACK3 & ~reg_i_StoB_REQ3 )) | ~controllable_BtoS_ACK3);

// G((BtoS_ACK3=1 * StoB_REQ3=1) -> X(BtoS_ACK3=1));	#G4
assign sys_safe_err29 = ~((~(reg_controllable_BtoS_ACK3 & reg_i_StoB_REQ3 )) | controllable_BtoS_ACK3);

// G((BtoS_ACK3=0) + (BtoS_ACK4=0));	#G5
assign sys_safe_err30 = ~(~controllable_BtoS_ACK3 | ~controllable_BtoS_ACK4);

// G((BtoS_ACK3=0) + (BtoS_ACK5=0));	#G5
assign sys_safe_err31 = ~(~controllable_BtoS_ACK3 | ~controllable_BtoS_ACK5);

// G((BtoS_ACK3=0) + (BtoS_ACK6=0));	#G5
assign sys_safe_err32 = ~(~controllable_BtoS_ACK3 | ~controllable_BtoS_ACK6);

// G((BtoS_ACK3=0) + (BtoS_ACK7=0));	#G5
assign sys_safe_err33 = ~(~controllable_BtoS_ACK3 | ~controllable_BtoS_ACK7);

// G((StoB_REQ4=0 * X(StoB_REQ4=1)) -> X(BtoS_ACK4=0));	#G2
assign sys_safe_err34 = ~((~(~reg_i_StoB_REQ4 & i_StoB_REQ4 )) | ~controllable_BtoS_ACK4);

// G((BtoS_ACK4=0 * StoB_REQ4=0) -> X(BtoS_ACK4=0));	#G2
assign sys_safe_err35 = ~((~(~reg_controllable_BtoS_ACK4 & ~reg_i_StoB_REQ4 )) | ~controllable_BtoS_ACK4);

// G((BtoS_ACK4=1 * StoB_REQ4=1) -> X(BtoS_ACK4=1));	#G4
assign sys_safe_err36 = ~((~(reg_controllable_BtoS_ACK4 & reg_i_StoB_REQ4 )) | controllable_BtoS_ACK4);

// G((BtoS_ACK4=0) + (BtoS_ACK5=0));	#G5
assign sys_safe_err37 = ~(~controllable_BtoS_ACK4 | ~controllable_BtoS_ACK5);

// G((BtoS_ACK4=0) + (BtoS_ACK6=0));	#G5
assign sys_safe_err38 = ~(~controllable_BtoS_ACK4 | ~controllable_BtoS_ACK6);

// G((BtoS_ACK4=0) + (BtoS_ACK7=0));	#G5
assign sys_safe_err39 = ~(~controllable_BtoS_ACK4 | ~controllable_BtoS_ACK7);

// G((StoB_REQ5=0 * X(StoB_REQ5=1)) -> X(BtoS_ACK5=0));	#G2
assign sys_safe_err40 = ~((~(~reg_i_StoB_REQ5 & i_StoB_REQ5 )) | ~controllable_BtoS_ACK5);

// G((BtoS_ACK5=0 * StoB_REQ5=0) -> X(BtoS_ACK5=0));	#G2
assign sys_safe_err41 = ~((~(~reg_controllable_BtoS_ACK5 & ~reg_i_StoB_REQ5 )) | ~controllable_BtoS_ACK5);

// G((BtoS_ACK5=1 * StoB_REQ5=1) -> X(BtoS_ACK5=1));	#G4
assign sys_safe_err42 = ~((~(reg_controllable_BtoS_ACK5 & reg_i_StoB_REQ5 )) | controllable_BtoS_ACK5);

// G((BtoS_ACK5=0) + (BtoS_ACK6=0));	#G5
assign sys_safe_err43 = ~(~controllable_BtoS_ACK5 | ~controllable_BtoS_ACK6);

// G((BtoS_ACK5=0) + (BtoS_ACK7=0));	#G5
assign sys_safe_err44 = ~(~controllable_BtoS_ACK5 | ~controllable_BtoS_ACK7);

// G((StoB_REQ6=0 * X(StoB_REQ6=1)) -> X(BtoS_ACK6=0));	#G2
assign sys_safe_err45 = ~((~(~reg_i_StoB_REQ6 & i_StoB_REQ6 )) | ~controllable_BtoS_ACK6);

// G((BtoS_ACK6=0 * StoB_REQ6=0) -> X(BtoS_ACK6=0));	#G2
assign sys_safe_err46 = ~((~(~reg_controllable_BtoS_ACK6 & ~reg_i_StoB_REQ6 )) | ~controllable_BtoS_ACK6);

// G((BtoS_ACK6=1 * StoB_REQ6=1) -> X(BtoS_ACK6=1));	#G4
assign sys_safe_err47 = ~((~(reg_controllable_BtoS_ACK6 & reg_i_StoB_REQ6 )) | controllable_BtoS_ACK6);

// G((BtoS_ACK6=0) + (BtoS_ACK7=0));	#G5
assign sys_safe_err48 = ~(~controllable_BtoS_ACK6 | ~controllable_BtoS_ACK7);

// G((StoB_REQ7=0 * X(StoB_REQ7=1)) -> X(BtoS_ACK7=0));	#G2
assign sys_safe_err49 = ~((~(~reg_i_StoB_REQ7 & i_StoB_REQ7 )) | ~controllable_BtoS_ACK7);

// G((BtoS_ACK7=0 * StoB_REQ7=0) -> X(BtoS_ACK7=0));	#G2
assign sys_safe_err50 = ~((~(~reg_controllable_BtoS_ACK7 & ~reg_i_StoB_REQ7 )) | ~controllable_BtoS_ACK7);

// G((BtoS_ACK7=1 * StoB_REQ7=1) -> X(BtoS_ACK7=1));	#G4
assign sys_safe_err51 = ~((~(reg_controllable_BtoS_ACK7 & reg_i_StoB_REQ7 )) | controllable_BtoS_ACK7);

// G((BtoR_REQ0=1 * RtoB_ACK0=0) -> X(BtoR_REQ0=1));	#G6
assign sys_safe_err52 = ~((~(reg_controllable_BtoR_REQ0 & ~reg_i_RtoB_ACK0)) | controllable_BtoR_REQ0);

// G((BtoR_REQ0=0) + (BtoR_REQ1=0));	#G7
assign sys_safe_err53 = ~(~controllable_BtoR_REQ0 | ~controllable_BtoR_REQ1);

// G(RtoB_ACK0=1 -> X(BtoR_REQ0=0));	#G8
assign sys_safe_err54 = ~(~reg_i_RtoB_ACK0 | ~controllable_BtoR_REQ0);

// G((BtoR_REQ1=1 * RtoB_ACK1=0) -> X(BtoR_REQ1=1));	#G6
assign sys_safe_err55 = ~((~(reg_controllable_BtoR_REQ1 & ~reg_i_RtoB_ACK1)) | controllable_BtoR_REQ1);

// G(RtoB_ACK1=1 -> X(BtoR_REQ1=0));	#G8
assign sys_safe_err56 = ~(~reg_i_RtoB_ACK1 | ~controllable_BtoR_REQ1);

// G((BtoR_REQ0=1 * BtoR_REQ1=1) -> FALSE);	#G7
assign sys_safe_err57 = reg_controllable_BtoR_REQ0 & reg_controllable_BtoR_REQ1;

// G((stateG7_1=0 * stateG7_0=1 * BtoR_REQ0=1) -> FALSE);	#G7
assign sys_safe_err58 = reg_nstateG7_1 & reg_stateG7_0 & reg_controllable_BtoR_REQ0;

// G((stateG7_1=1 * stateG7_0=1 * BtoR_REQ1=1) -> FALSE);	#G7
assign sys_safe_err59 = ~reg_nstateG7_1 & reg_stateG7_0 & reg_controllable_BtoR_REQ1;

// G((BtoS_ACK0=0 * X(BtoS_ACK0=1)) -> X(ENQ=1));	#G9
assign sys_safe_err60 = ~(~((~reg_controllable_BtoS_ACK0 & controllable_BtoS_ACK0)) | controllable_ENQ);

// G((BtoS_ACK0=0 * X(BtoS_ACK0=1))  -> X(SLC0=0 * SLC1=0 * SLC2=0));	#G9
assign sys_safe_err61 = ~(~((~reg_controllable_BtoS_ACK0 & controllable_BtoS_ACK0)) | (~controllable_SLC0 & ~controllable_SLC1 & ~controllable_SLC2));

// G((BtoS_ACK1=0 * X(BtoS_ACK1=1)) -> X(ENQ=1));	#G9
assign sys_safe_err62 = ~(~((~reg_controllable_BtoS_ACK1 & controllable_BtoS_ACK1)) | controllable_ENQ);

// G((BtoS_ACK1=0 * X(BtoS_ACK1=1)) <-> X(SLC0=1 * SLC1=0 * SLC2=0));	#G9
assign sys_safe_err63 = ~(((~reg_controllable_BtoS_ACK1 & controllable_BtoS_ACK1)) ^~ (controllable_SLC0 & ~controllable_SLC1 & ~controllable_SLC2));

// G((BtoS_ACK2=0 * X(BtoS_ACK2=1)) -> X(ENQ=1));	#G9
assign sys_safe_err64 = ~(~((~reg_controllable_BtoS_ACK2 & controllable_BtoS_ACK2)) | controllable_ENQ);

// G((BtoS_ACK2=0 * X(BtoS_ACK2=1)) <-> X(SLC0=0 * SLC1=1 * SLC2=0));	#G9
assign sys_safe_err65 = ~(((~reg_controllable_BtoS_ACK2 & controllable_BtoS_ACK2)) ^~ (~controllable_SLC0 & controllable_SLC1 & ~controllable_SLC2));

// G((BtoS_ACK3=0 * X(BtoS_ACK3=1)) -> X(ENQ=1));	#G9
assign sys_safe_err66 = ~(~((~reg_controllable_BtoS_ACK3 & controllable_BtoS_ACK3)) | controllable_ENQ);

// G((BtoS_ACK3=0 * X(BtoS_ACK3=1)) <-> X(SLC0=1 * SLC1=1 * SLC2=0));	#G9
assign sys_safe_err67 = ~(((~reg_controllable_BtoS_ACK3 & controllable_BtoS_ACK3)) ^~ (controllable_SLC0 & controllable_SLC1 & ~controllable_SLC2));

// G((BtoS_ACK4=0 * X(BtoS_ACK4=1)) -> X(ENQ=1));	#G9
assign sys_safe_err68 = ~(~((~reg_controllable_BtoS_ACK4 & controllable_BtoS_ACK4)) | controllable_ENQ);

// G((BtoS_ACK4=0 * X(BtoS_ACK4=1)) <-> X(SLC0=0 * SLC1=0 * SLC2=1));	#G9
assign sys_safe_err69 = ~(((~reg_controllable_BtoS_ACK4 & controllable_BtoS_ACK4)) ^~ (~controllable_SLC0 & ~controllable_SLC1 & controllable_SLC2));

// G((BtoS_ACK5=0 * X(BtoS_ACK5=1)) -> X(ENQ=1));	#G9
assign sys_safe_err70 = ~(~((~reg_controllable_BtoS_ACK5 & controllable_BtoS_ACK5)) | controllable_ENQ);

// G((BtoS_ACK5=0 * X(BtoS_ACK5=1)) <-> X(SLC0=1 * SLC1=0 * SLC2=1));	#G9
assign sys_safe_err71 = ~(((~reg_controllable_BtoS_ACK5 & controllable_BtoS_ACK5)) ^~ (controllable_SLC0 & ~controllable_SLC1 & controllable_SLC2));

// G((BtoS_ACK6=0 * X(BtoS_ACK6=1)) -> X(ENQ=1));	#G9
assign sys_safe_err72 = ~(~((~reg_controllable_BtoS_ACK6 & controllable_BtoS_ACK6)) | controllable_ENQ);

// G((BtoS_ACK6=0 * X(BtoS_ACK6=1)) <-> X(SLC0=0 * SLC1=1 * SLC2=1));	#G9
assign sys_safe_err73 = ~(((~reg_controllable_BtoS_ACK6 & controllable_BtoS_ACK6)) ^~ (~controllable_SLC0 & controllable_SLC1 & controllable_SLC2));

// G((BtoS_ACK7=0 * X(BtoS_ACK7=1)) -> X(ENQ=1));	#G9
assign sys_safe_err74 = ~(~((~reg_controllable_BtoS_ACK7 & controllable_BtoS_ACK7)) | controllable_ENQ);

// G((BtoS_ACK7=0 * X(BtoS_ACK7=1)) <-> X(SLC0=1 * SLC1=1 * SLC2=1));	#G9
assign sys_safe_err75 = ~(((~reg_controllable_BtoS_ACK7 & controllable_BtoS_ACK7)) ^~ (controllable_SLC0 & controllable_SLC1 & controllable_SLC2));

// G(((BtoS_ACK0=1 + X(BtoS_ACK0=0)) * (BtoS_ACK1=1 + X(BtoS_ACK1=0)) * (BtoS_ACK2=1 + X(BtoS_ACK2=0)) * (BtoS_ACK3=1 + X(BtoS_ACK3=0)) * (BtoS_ACK4=1 + X(BtoS_ACK4=0)) * (BtoS_ACK5=1 + X(BtoS_ACK5=0)) * (BtoS_ACK6=1 + X(BtoS_ACK6=0)) * (BtoS_ACK7=1 + X(BtoS_ACK7=0))) -> X(ENQ=0));	#G9
assign sys_safe_err76 = ~(~((reg_controllable_BtoS_ACK0 | ~controllable_BtoS_ACK0) & (reg_controllable_BtoS_ACK1 | ~controllable_BtoS_ACK1) & (reg_controllable_BtoS_ACK2 | ~controllable_BtoS_ACK2) & (reg_controllable_BtoS_ACK3 | ~controllable_BtoS_ACK3) & (reg_controllable_BtoS_ACK4 | ~controllable_BtoS_ACK4) & (reg_controllable_BtoS_ACK5 | ~controllable_BtoS_ACK5) & (reg_controllable_BtoS_ACK6 | ~controllable_BtoS_ACK6) & (reg_controllable_BtoS_ACK7 | ~controllable_BtoS_ACK7)) | ~controllable_ENQ);

// G((RtoB_ACK0=1 * X(RtoB_ACK0=0)) -> X(DEQ=1));	#G10
assign sys_safe_err77 = ~(~(reg_i_RtoB_ACK0 & ~i_RtoB_ACK0) | controllable_DEQ);

// G((RtoB_ACK1=1 * X(RtoB_ACK1=0)) -> X(DEQ=1));	#G10
assign sys_safe_err78 = ~(~(reg_i_RtoB_ACK1 & ~i_RtoB_ACK1) | controllable_DEQ);

// G(((RtoB_ACK0=0 + X(RtoB_ACK0=1)) * (RtoB_ACK1=0 + X(RtoB_ACK1=1))) -> X(DEQ=0));	#G10
assign sys_safe_err79 = ~(~((~reg_i_RtoB_ACK0 | i_RtoB_ACK0) & (~reg_i_RtoB_ACK1 | i_RtoB_ACK1)) | ~controllable_DEQ);

// G((FULL=1 * DEQ=0) -> ENQ=0);	#G11
assign sys_safe_err80 = ~(~(i_FULL & ~controllable_DEQ) | ~controllable_ENQ);

// G(EMPTY=1 -> DEQ=0);	#G11
assign sys_safe_err81 = ~( i_nEMPTY | ~controllable_DEQ);

// collecting together the safety error bits:
assign sys_safe_err = sys_safe_err0 |
                      sys_safe_err1 |
                      sys_safe_err2 |
                      sys_safe_err3 |
                      sys_safe_err4 |
                      sys_safe_err5 |
                      sys_safe_err6 |
                      sys_safe_err7 |
                      sys_safe_err8 |
                      sys_safe_err9 |
                      sys_safe_err10 |
                      sys_safe_err11 |
                      sys_safe_err12 |
                      sys_safe_err13 |
                      sys_safe_err14 |
                      sys_safe_err15 |
                      sys_safe_err16 |
                      sys_safe_err17 |
                      sys_safe_err18 |
                      sys_safe_err19 |
                      sys_safe_err20 |
                      sys_safe_err21 |
                      sys_safe_err22 |
                      sys_safe_err23 |
                      sys_safe_err24 |
                      sys_safe_err25 |
                      sys_safe_err26 |
                      sys_safe_err27 |
                      sys_safe_err28 |
                      sys_safe_err29 |
                      sys_safe_err30 |
                      sys_safe_err31 |
                      sys_safe_err32 |
                      sys_safe_err33 |
                      sys_safe_err34 |
                      sys_safe_err35 |
                      sys_safe_err36 |
                      sys_safe_err37 |
                      sys_safe_err38 |
                      sys_safe_err39 |
                      sys_safe_err40 |
                      sys_safe_err41 |
                      sys_safe_err42 |
                      sys_safe_err43 |
                      sys_safe_err44 |
                      sys_safe_err45 |
                      sys_safe_err46 |
                      sys_safe_err47 |
                      sys_safe_err48 |
                      sys_safe_err49 |
                      sys_safe_err50 |
                      sys_safe_err51 |
                      sys_safe_err52 |
                      sys_safe_err53 |
                      sys_safe_err54 |
                      sys_safe_err55 |
                      sys_safe_err56 |
                      sys_safe_err57 |
                      sys_safe_err58 |
                      sys_safe_err59 |
                      sys_safe_err60 |
                      sys_safe_err61 |
                      sys_safe_err62 |
                      sys_safe_err63 |
                      sys_safe_err64 |
                      sys_safe_err65 |
                      sys_safe_err66 |
                      sys_safe_err67 |
                      sys_safe_err68 |
                      sys_safe_err69 |
                      sys_safe_err70 |
                      sys_safe_err71 |
                      sys_safe_err72 |
                      sys_safe_err73 |
                      sys_safe_err74 |
                      sys_safe_err75 |
                      sys_safe_err76 |
                      sys_safe_err77 |
                      sys_safe_err78 |
                      sys_safe_err79 |
                      sys_safe_err80 |
                      sys_safe_err81;

// =============================================================
//                          ENV_FAIRNESS:
// =============================================================
// G(F(BtoR_REQ0=1 <-> RtoB_ACK0=1));	#A2
assign env_fair0 = controllable_BtoR_REQ0 ^~ i_RtoB_ACK0;

// G(F(BtoR_REQ1=1 <-> RtoB_ACK1=1));	#A2
assign env_fair1 = controllable_BtoR_REQ1 ^~ i_RtoB_ACK1;


// =============================================================
//                          SYS_FAIRNESS:
// =============================================================
// G(F(StoB_REQ0=1 <-> BtoS_ACK0=1));	#G1+G2
assign sys_fair0 = i_StoB_REQ0 ^~ controllable_BtoS_ACK0;

// G(F(StoB_REQ1=1 <-> BtoS_ACK1=1));	#G1+G2
assign sys_fair1 = i_StoB_REQ1 ^~ controllable_BtoS_ACK1;

// G(F(StoB_REQ2=1 <-> BtoS_ACK2=1));	#G1+G2
assign sys_fair2 = i_StoB_REQ2 ^~ controllable_BtoS_ACK2;

// G(F(StoB_REQ3=1 <-> BtoS_ACK3=1));	#G1+G2
assign sys_fair3 = i_StoB_REQ3 ^~ controllable_BtoS_ACK3;

// G(F(StoB_REQ4=1 <-> BtoS_ACK4=1));	#G1+G2
assign sys_fair4 = i_StoB_REQ4 ^~ controllable_BtoS_ACK4;

// G(F(StoB_REQ5=1 <-> BtoS_ACK5=1));	#G1+G2
assign sys_fair5 = i_StoB_REQ5 ^~ controllable_BtoS_ACK5;

// G(F(StoB_REQ6=1 <-> BtoS_ACK6=1));	#G1+G2
assign sys_fair6 = i_StoB_REQ6 ^~ controllable_BtoS_ACK6;

// G(F(StoB_REQ7=1 <-> BtoS_ACK7=1));	#G1+G2
assign sys_fair7 = i_StoB_REQ7 ^~ controllable_BtoS_ACK7;

// G(F(stateG12=0));	#G12
assign sys_fair8 = ~reg_stateG12;

assign fair_err = (fair_cnt >= 6'b101000);

// computing the error output bit:
assign o_err = ~env_safe_err & ~env_safe_err_happened & (sys_safe_err | fair_err);
initial
 begin
  reg_i_StoB_REQ0 = 0;
  reg_controllable_BtoS_ACK0 = 0;
  reg_i_StoB_REQ1 = 0;
  reg_controllable_BtoS_ACK1 = 0;
  reg_i_StoB_REQ2 = 0;
  reg_controllable_BtoS_ACK2 = 0;
  reg_i_StoB_REQ3 = 0;
  reg_controllable_BtoS_ACK3 = 0;
  reg_i_StoB_REQ4 = 0;
  reg_controllable_BtoS_ACK4 = 0;
  reg_i_StoB_REQ5 = 0;
  reg_controllable_BtoS_ACK5 = 0;
  reg_i_StoB_REQ6 = 0;
  reg_controllable_BtoS_ACK6 = 0;
  reg_i_StoB_REQ7 = 0;
  reg_controllable_BtoS_ACK7 = 0;
  reg_i_RtoB_ACK0 = 0;
  reg_controllable_BtoR_REQ0 = 0;
  reg_i_RtoB_ACK1 = 0;
  reg_controllable_BtoR_REQ1 = 0;
  reg_i_FULL = 0;
  reg_i_nEMPTY = 0;
  reg_controllable_ENQ = 0;
  reg_controllable_DEQ = 0;
  reg_controllable_SLC0 = 0;
  reg_controllable_SLC1 = 0;
  reg_controllable_SLC2 = 0;
  reg_stateG7_0 = 0;
  reg_nstateG7_1 = 0;
  reg_stateG12 = 0;
  env_safe_err_happened = 0;
  next_env_fair = 0;
  fair_cnt = 0;
  next_sys_fair = 0;
 end


always @(posedge i_clk)
 begin
   // We remember if an environment error occurred:
   env_safe_err_happened = env_safe_err_happened | env_safe_err;

   // Updating the fairness counters: 
   if((next_sys_fair == 0) & sys_fair0)
    begin
      next_sys_fair = 1;
      next_env_fair = 0;
      fair_cnt = 0;
    end
   else if((next_sys_fair == 1) & sys_fair1)
    begin
      next_sys_fair = 2;
      next_env_fair = 0;
      fair_cnt = 0;
    end
   else if((next_sys_fair == 2) & sys_fair2)
    begin
      next_sys_fair = 3;
      next_env_fair = 0;
      fair_cnt = 0;
    end
   else if((next_sys_fair == 3) & sys_fair3)
    begin
      next_sys_fair = 4;
      next_env_fair = 0;
      fair_cnt = 0;
    end
   else if((next_sys_fair == 4) & sys_fair4)
    begin
      next_sys_fair = 5;
      next_env_fair = 0;
      fair_cnt = 0;
    end
   else if((next_sys_fair == 5) & sys_fair5)
    begin
      next_sys_fair = 6;
      next_env_fair = 0;
      fair_cnt = 0;
    end
   else if((next_sys_fair == 6) & sys_fair6)
    begin
      next_sys_fair = 7;
      next_env_fair = 0;
      fair_cnt = 0;
    end
   else if((next_sys_fair == 7) & sys_fair7)
    begin
      next_sys_fair = 8;
      next_env_fair = 0;
      fair_cnt = 0;
    end
   else if((next_sys_fair == 8) & sys_fair8)
    begin
      next_sys_fair = 0;
      next_env_fair = 0;
      fair_cnt = 0;
    end
   else if(~next_env_fair & env_fair0)
    begin
      next_env_fair = 1;
    end
   else if(next_env_fair & env_fair1)
    begin
      next_env_fair = 0;
      fair_cnt = fair_cnt + 1;
    end

   // Updating the automata: 
   // Automaton G7: 
   if(reg_nstateG7_1 & ~reg_controllable_BtoR_REQ0 & reg_controllable_BtoR_REQ1)
    begin
      reg_nstateG7_1 = 1'b0;
      reg_stateG7_0 = 1'b0;
    end
   else if(~reg_nstateG7_1 & reg_controllable_BtoR_REQ0 & ~reg_controllable_BtoR_REQ1)
    begin
      reg_nstateG7_1 = 1'b1;
      reg_stateG7_0 = 1'b0;
    end
   else if(reg_nstateG7_1 & ~reg_controllable_BtoR_REQ0 & ~reg_controllable_BtoR_REQ1)
    begin
      reg_nstateG7_1 = 1'b1;
      reg_stateG7_0 = 1'b1;
    end
   else if(~reg_nstateG7_1 & ~reg_controllable_BtoR_REQ0 & ~reg_controllable_BtoR_REQ1)
    begin
      reg_nstateG7_1 = 1'b0;
      reg_stateG7_0 = 1'b1;
    end

   // Automaton G12: 
   if(~reg_stateG12 & reg_i_nEMPTY & ~reg_controllable_DEQ)
      reg_stateG12 = 1'b1;
   else if(reg_stateG12 & reg_controllable_DEQ)
      reg_stateG12 = 1'b0;

   // Latching the previous input:
   reg_i_StoB_REQ0 =  i_StoB_REQ0;
   reg_controllable_BtoS_ACK0 =  controllable_BtoS_ACK0;
   reg_i_StoB_REQ1 =  i_StoB_REQ1;
   reg_controllable_BtoS_ACK1 =  controllable_BtoS_ACK1;
   reg_i_StoB_REQ2 =  i_StoB_REQ2;
   reg_controllable_BtoS_ACK2 =  controllable_BtoS_ACK2;
   reg_i_StoB_REQ3 =  i_StoB_REQ3;
   reg_controllable_BtoS_ACK3 =  controllable_BtoS_ACK3;
   reg_i_StoB_REQ4 =  i_StoB_REQ4;
   reg_controllable_BtoS_ACK4 =  controllable_BtoS_ACK4;
   reg_i_StoB_REQ5 =  i_StoB_REQ5;
   reg_controllable_BtoS_ACK5 =  controllable_BtoS_ACK5;
   reg_i_StoB_REQ6 =  i_StoB_REQ6;
   reg_controllable_BtoS_ACK6 =  controllable_BtoS_ACK6;
   reg_i_StoB_REQ7 =  i_StoB_REQ7;
   reg_controllable_BtoS_ACK7 =  controllable_BtoS_ACK7;
   reg_i_RtoB_ACK0 =  i_RtoB_ACK0;
   reg_controllable_BtoR_REQ0 =  controllable_BtoR_REQ0;
   reg_i_RtoB_ACK1 =  i_RtoB_ACK1;
   reg_controllable_BtoR_REQ1 =  controllable_BtoR_REQ1;
   reg_i_FULL =  i_FULL;
   reg_i_nEMPTY =  i_nEMPTY;
   reg_controllable_ENQ =  controllable_ENQ;
   reg_controllable_DEQ =  controllable_DEQ;
   reg_controllable_SLC0 =  controllable_SLC0;
   reg_controllable_SLC1 =  controllable_SLC1;
   reg_controllable_SLC2 =  controllable_SLC2;

 end
endmodule

-------------------------------
#!SYNTCOMP
STATUS : realizable
SOLVED_BY : 3/3 [2015-pre-classification]
SOLVED_IN : 0.753348 [2015-pre-classification]
#.
