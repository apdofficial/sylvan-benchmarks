aag 522 18 32 1 472
2
4
6
8
10
12
14
16
18
20
22
24
26
28
30
32
34
36
38 1
40 629
42 10
44 4
46 795
48 12
50 24
52 813
54 14
56 18
58 22
60 20
62 30
64 26
66 16
68 835
70 2
72 891
74 897
76 903
78 909
80 1027
82 1033
84 1039
86 1045
88 36
90 34
92 293
94 32
96 8
98 6
100 28
580
102 101 38
104 100 38
106 103 38
108 49 38
110 48 38
112 109 38
114 113 104
116 114 29
118 110 28
120 119 117
122 95 38
124 94 38
126 123 38
128 55 38
130 54 38
132 129 38
134 133 124
136 134 33
138 137 120
140 130 32
142 141 138
144 91 38
146 90 38
148 145 38
150 57 38
152 56 38
154 151 38
156 155 146
158 156 35
160 159 142
162 152 34
164 163 160
166 71 38
168 70 38
170 167 38
172 61 38
174 60 38
176 173 38
178 177 168
180 178 3
182 181 164
184 174 2
186 185 182
188 99 38
190 98 38
192 189 38
194 193 8
196 195 186
198 97 38
200 96 38
202 199 38
204 200 190
206 204 9
208 207 196
210 43 38
212 42 38
214 211 38
216 215 4
218 217 208
220 45 38
222 44 38
224 221 38
226 222 212
228 226 5
230 229 218
232 63 38
234 62 38
236 233 38
238 89 38
240 88 38
242 239 38
244 243 234
246 244 25
248 247 230
250 240 237
252 250 16
254 253 248
256 251 245
258 67 38
260 66 38
262 259 38
264 263 16
266 260 17
268 267 265
270 51 38
272 50 38
274 271 38
276 275 24
278 272 25
280 279 277
282 280 268
284 283 256
286 285 254
288 93 38
290 289 38
292 291 286
294 107 28
296 294 12
298 113 107
300 298 12
302 301 297
304 110 104
306 304 13
308 307 302
310 14 12
312 311 308
314 18 12
316 315 312
318 20 12
320 319 316
322 127 32
324 322 14
326 325 320
328 133 127
330 328 14
332 331 326
334 130 124
336 334 15
338 337 332
340 18 14
342 341 338
344 20 14
346 345 342
348 149 34
350 348 18
352 351 346
354 155 149
356 354 18
358 357 352
360 152 146
362 360 19
364 363 358
366 20 18
368 367 364
370 171 2
372 370 20
374 373 368
376 177 171
378 376 20
380 379 374
382 174 168
384 382 21
386 385 380
388 203 190
390 388 7
392 391 386
394 10 6
396 395 392
398 200 6
400 399 396
402 225 212
404 402 11
406 405 400
408 222 10
410 409 406
412 212 190
414 413 410
416 53 38
418 52 38
420 417 38
422 40 38
424 422 418
426 424 190
428 427 414
430 422 421
432 430 212
434 433 428
436 113 12
438 436 31
440 439 434
442 27 23
444 443 436
446 445 440
448 133 14
450 448 31
452 451 446
454 27 22
456 454 449
458 455 448
460 459 457
462 460 452
464 155 18
466 464 31
468 467 462
470 26 23
472 470 465
474 471 464
476 475 473
478 476 468
480 177 20
482 480 31
484 483 478
486 26 22
488 486 481
490 487 480
492 491 489
494 492 484
496 449 437
498 496 465
500 498 481
502 500 30
504 503 494
506 200 9
508 506 37
510 509 504
512 222 5
514 512 37
516 515 510
518 513 507
520 518 36
522 521 516
524 37 16
526 524 30
528 527 522
530 36 25
532 531 528
534 87 38
536 86 38
538 535 38
540 85 38
542 84 38
544 541 38
546 83 38
548 82 38
550 547 38
552 81 38
554 80 38
556 553 38
558 545 539
560 559 538
562 560 544
564 544 539
566 545 536
568 567 565
570 555 549
572 570 544
574 572 568
576 575 563
578 576 532
580 579 292
582 418 193
584 582 212
586 421 190
588 586 215
590 582 215
592 421 193
594 592 215
596 588 585
598 597 585
600 589 585
602 600 590
604 603 598
606 600 591
608 606 594
610 609 604
612 595 422
614 613 595
616 615 591
618 617 591
620 619 589
622 620 585
624 622 611
626 610 422
628 627 625
630 73 38
632 72 38
634 631 38
636 75 38
638 74 38
640 637 38
642 77 38
644 76 38
646 643 38
648 78 38
650 639 633
652 650 645
654 652 649
656 29 12
658 28 13
660 659 657
662 660 654
664 639 634
666 664 645
668 666 649
670 33 14
672 32 15
674 673 671
676 674 668
678 640 633
680 678 645
682 680 649
684 35 18
686 34 19
688 687 685
690 688 682
692 640 634
694 692 645
696 694 649
698 20 3
700 21 2
702 701 699
704 702 696
706 650 646
708 706 649
710 69 38
712 68 38
714 711 38
716 715 708
718 47 38
720 46 38
722 719 38
724 8 7
726 9 6
728 727 725
730 728 723
732 11 4
734 10 5
736 735 733
738 736 720
740 676 663
742 741 663
744 677 663
746 744 690
748 747 742
750 744 691
752 750 704
754 753 748
756 750 705
758 756 716
760 759 754
762 756 717
764 762 730
766 765 760
768 762 731
770 768 738
772 771 766
774 739 720
776 774 731
778 777 731
780 779 717
782 780 705
784 782 691
786 784 677
788 786 663
790 788 773
792 772 720
794 793 791
796 595 418
798 796 591
800 799 591
802 801 589
804 803 589
806 805 585
808 806 611
810 610 418
812 811 809
814 715 272
816 814 243
818 712 240
820 818 817
822 821 817
824 819 712
826 824 817
828 827 817
830 829 823
832 822 712
834 833 831
836 717 632
838 836 705
840 838 691
842 841 691
844 843 677
846 844 663
848 847 663
850 717 638
852 850 705
854 852 691
856 855 691
858 857 677
860 859 677
862 861 663
864 717 644
866 864 705
868 867 705
870 869 691
872 870 677
874 872 663
876 717 648
878 876 705
880 878 691
882 880 677
884 882 663
886 849 761
888 760 632
890 889 887
892 862 761
894 760 638
896 895 893
898 874 761
900 760 644
902 901 899
904 884 761
906 760 648
908 907 905
910 771 760
912 738 557
914 739 554
916 915 913
918 730 554
920 917 731
922 921 919
924 923 717
926 924 705
928 926 691
930 928 677
932 930 663
934 554 551
936 555 548
938 937 935
940 939 738
942 739 548
944 943 941
946 730 548
948 945 731
950 949 947
952 951 717
954 952 705
956 954 691
958 956 677
960 958 663
962 554 548
964 962 545
966 963 542
968 967 965
970 969 738
972 739 542
974 973 971
976 730 542
978 975 731
980 979 977
982 981 717
984 982 705
986 984 691
988 986 677
990 988 663
992 962 542
994 992 539
996 993 536
998 997 995
1000 999 738
1002 739 536
1004 1003 1001
1006 730 536
1008 1005 731
1010 1009 1007
1012 1011 717
1014 1012 705
1016 1014 691
1018 1016 677
1020 1018 663
1022 932 911
1024 910 554
1026 1025 1023
1028 960 911
1030 910 548
1032 1031 1029
1034 990 911
1036 910 542
1038 1037 1035
1040 1020 911
1042 910 536
1044 1043 1041
i0 i_StoB_REQ3
i1 i_RtoB_ACK1
i2 controllable_BtoR_REQ0
i3 i_RtoB_ACK0
i4 controllable_BtoR_REQ1
i5 controllable_BtoS_ACK0
i6 controllable_BtoS_ACK1
i7 i_FULL
i8 controllable_BtoS_ACK2
i9 controllable_BtoS_ACK3
i10 controllable_SLC0
i11 i_nEMPTY
i12 controllable_SLC1
i13 i_StoB_REQ0
i14 controllable_ENQ
i15 i_StoB_REQ1
i16 i_StoB_REQ2
i17 controllable_DEQ
l0 n39
l1 reg_stateG7_0_out
l2 reg_controllable_BtoR_REQ1_out
l3 reg_i_RtoB_ACK1_out
l4 next_env_fair_out
l5 reg_controllable_BtoS_ACK0_out
l6 reg_i_nEMPTY_out
l7 reg_nstateG7_1_out
l8 reg_controllable_BtoS_ACK1_out
l9 reg_controllable_BtoS_ACK2_out
l10 reg_controllable_SLC0_out
l11 reg_controllable_BtoS_ACK3_out
l12 reg_controllable_ENQ_out
l13 reg_controllable_SLC1_out
l14 reg_i_FULL_out
l15 reg_stateG12_out
l16 reg_i_StoB_REQ3_out
l17 next_sys_fair<0>_out
l18 next_sys_fair<1>_out
l19 next_sys_fair<2>_out
l20 next_sys_fair<3>_out
l21 fair_cnt<0>_out
l22 fair_cnt<1>_out
l23 fair_cnt<2>_out
l24 fair_cnt<3>_out
l25 reg_controllable_DEQ_out
l26 reg_i_StoB_REQ2_out
l27 env_safe_err_happened_out
l28 reg_i_StoB_REQ1_out
l29 reg_i_RtoB_ACK0_out
l30 reg_controllable_BtoR_REQ0_out
l31 reg_i_StoB_REQ0_out
o0 o_err
c
genbuf_4_new_12
This file was written by ABC on Tue May  5 16:58:37 2015
For information about AIGER format, refer to http://fmv.jku.at/aiger
-------------------------------
This AIGER file has been created by the following sequence of commands:
> vl2mv genbuf4c12.v   ---gives--> genbuf4c12.mv
> abc -c "read_blif_mv genbuf4c12.mv; write_aiger -s genbuf4c12n.aig"   ---gives--> genbuf4c12n.aig
> aigtoaig genbuf4c12n.aig genbuf4c12n.aag   ---gives--> genbuf4c12n.aag (this file)
Content of genbuf4c12.v:
module genbuf_4_new_12(
        o_err,
        i_clk,
        i_StoB_REQ0,
        controllable_BtoS_ACK0,
        i_StoB_REQ1,
        controllable_BtoS_ACK1,
        i_StoB_REQ2,
        controllable_BtoS_ACK2,
        i_StoB_REQ3,
        controllable_BtoS_ACK3,
        i_RtoB_ACK0,
        controllable_BtoR_REQ0,
        i_RtoB_ACK1,
        controllable_BtoR_REQ1,
        i_FULL,
        i_nEMPTY,
        controllable_ENQ,
        controllable_DEQ,
        controllable_SLC0,
        controllable_SLC1);

input i_clk;
input i_StoB_REQ0;
input controllable_BtoS_ACK0;
input i_StoB_REQ1;
input controllable_BtoS_ACK1;
input i_StoB_REQ2;
input controllable_BtoS_ACK2;
input i_StoB_REQ3;
input controllable_BtoS_ACK3;
input i_RtoB_ACK0;
input controllable_BtoR_REQ0;
input i_RtoB_ACK1;
input controllable_BtoR_REQ1;
input i_FULL;
input i_nEMPTY;
input controllable_ENQ;
input controllable_DEQ;
input controllable_SLC0;
input controllable_SLC1;
output o_err;

reg reg_i_StoB_REQ0;
reg reg_controllable_BtoS_ACK0;
reg reg_i_StoB_REQ1;
reg reg_controllable_BtoS_ACK1;
reg reg_i_StoB_REQ2;
reg reg_controllable_BtoS_ACK2;
reg reg_i_StoB_REQ3;
reg reg_controllable_BtoS_ACK3;
reg reg_i_RtoB_ACK0;
reg reg_controllable_BtoR_REQ0;
reg reg_i_RtoB_ACK1;
reg reg_controllable_BtoR_REQ1;
reg reg_i_FULL;
reg reg_i_nEMPTY;
reg reg_controllable_ENQ;
reg reg_controllable_DEQ;
reg reg_controllable_SLC0;
reg reg_controllable_SLC1;
reg reg_stateG7_0;
reg reg_nstateG7_1;
reg reg_stateG12;
reg env_safe_err_happened;
reg next_env_fair;
reg [3:0] fair_cnt;
reg [3:0] next_sys_fair;

wire env_safe_err0;
wire env_safe_err1;
wire env_safe_err2;
wire env_safe_err3;
wire env_safe_err4;
wire env_safe_err5;
wire env_safe_err6;
wire env_safe_err7;
wire env_safe_err8;
wire env_safe_err9;
wire env_safe_err10;
wire env_safe_err11;
wire env_safe_err12;
wire env_safe_err13;
wire env_safe_err14;
wire env_safe_err;

wire sys_safe_err0;
wire sys_safe_err1;
wire sys_safe_err2;
wire sys_safe_err3;
wire sys_safe_err4;
wire sys_safe_err5;
wire sys_safe_err6;
wire sys_safe_err7;
wire sys_safe_err8;
wire sys_safe_err9;
wire sys_safe_err10;
wire sys_safe_err11;
wire sys_safe_err12;
wire sys_safe_err13;
wire sys_safe_err14;
wire sys_safe_err15;
wire sys_safe_err16;
wire sys_safe_err17;
wire sys_safe_err18;
wire sys_safe_err19;
wire sys_safe_err20;
wire sys_safe_err21;
wire sys_safe_err22;
wire sys_safe_err23;
wire sys_safe_err24;
wire sys_safe_err25;
wire sys_safe_err26;
wire sys_safe_err27;
wire sys_safe_err28;
wire sys_safe_err29;
wire sys_safe_err30;
wire sys_safe_err31;
wire sys_safe_err32;
wire sys_safe_err33;
wire sys_safe_err34;
wire sys_safe_err35;
wire sys_safe_err36;
wire sys_safe_err37;
wire sys_safe_err38;
wire sys_safe_err39;
wire sys_safe_err;

wire env_fair0;
wire env_fair1;

wire sys_fair0;
wire sys_fair1;
wire sys_fair2;
wire sys_fair3;
wire sys_fair4;
wire fair_err;
wire o_err;

// =============================================================
//                        ENV_TRANSITION:
// =============================================================
// G((StoB_REQ0=1 * BtoS_ACK0=0) -> X(StoB_REQ0=1));	#A1
assign env_safe_err0 = ~((~(reg_i_StoB_REQ0 & ~reg_controllable_BtoS_ACK0)) | i_StoB_REQ0);

// G(BtoS_ACK0=1 -> X(StoB_REQ0=0));	#A1
assign env_safe_err1 = ~((~(reg_controllable_BtoS_ACK0)) | ~i_StoB_REQ0);

// G((StoB_REQ1=1 * BtoS_ACK1=0) -> X(StoB_REQ1=1));	#A1
assign env_safe_err2 = ~((~(reg_i_StoB_REQ1 & ~reg_controllable_BtoS_ACK1)) | i_StoB_REQ1);

// G(BtoS_ACK1=1 -> X(StoB_REQ1=0));	#A1
assign env_safe_err3 = ~((~(reg_controllable_BtoS_ACK1)) | ~i_StoB_REQ1);

// G((StoB_REQ2=1 * BtoS_ACK2=0) -> X(StoB_REQ2=1));	#A1
assign env_safe_err4 = ~((~(reg_i_StoB_REQ2 & ~reg_controllable_BtoS_ACK2)) | i_StoB_REQ2);

// G(BtoS_ACK2=1 -> X(StoB_REQ2=0));	#A1
assign env_safe_err5 = ~((~(reg_controllable_BtoS_ACK2)) | ~i_StoB_REQ2);

// G((StoB_REQ3=1 * BtoS_ACK3=0) -> X(StoB_REQ3=1));	#A1
assign env_safe_err6 = ~((~(reg_i_StoB_REQ3 & ~reg_controllable_BtoS_ACK3)) | i_StoB_REQ3);

// G(BtoS_ACK3=1 -> X(StoB_REQ3=0));	#A1
assign env_safe_err7 = ~((~(reg_controllable_BtoS_ACK3)) | ~i_StoB_REQ3);

// G(BtoR_REQ0=0 -> X(RtoB_ACK0=0));	#A3
assign env_safe_err8 = ~(reg_controllable_BtoR_REQ0 | ~i_RtoB_ACK0);

// G((BtoR_REQ0=1 * RtoB_ACK0=1) -> X(RtoB_ACK0=1));	#A4
assign env_safe_err9 = ~((~(reg_controllable_BtoR_REQ0 & reg_i_RtoB_ACK0)) | i_RtoB_ACK0);

// G(BtoR_REQ1=0 -> X(RtoB_ACK1=0));	#A3
assign env_safe_err10 = ~(reg_controllable_BtoR_REQ1 | ~i_RtoB_ACK1);

// G((BtoR_REQ1=1 * RtoB_ACK1=1) -> X(RtoB_ACK1=1));	#A4
assign env_safe_err11 = ~((~(reg_controllable_BtoR_REQ1 & reg_i_RtoB_ACK1)) | i_RtoB_ACK1);

// G((ENQ=1 * DEQ=0) -> X(EMPTY=0));	#A4
assign env_safe_err12 = ~(~(reg_controllable_ENQ & ~reg_controllable_DEQ) | i_nEMPTY);

// G((DEQ=1 * ENQ=0) -> X(FULL=0));	#A4
assign env_safe_err13 = ~(~(reg_controllable_DEQ & ~reg_controllable_ENQ) | ~i_FULL);

// G((ENQ=1 <-> DEQ=1) -> ((FULL=1 <-> X(FULL=1)) *
//                         (EMPTY=1 <-> X(EMPTY=1))));	#A4
assign env_safe_err14 = ~(~(reg_controllable_ENQ ^~ reg_controllable_DEQ) | ((reg_i_FULL ^~ i_FULL) &  (reg_i_nEMPTY ^~ i_nEMPTY)) );

// collecting together the safety error bits:
assign env_safe_err = env_safe_err0 |
                      env_safe_err1 |
                      env_safe_err2 |
                      env_safe_err3 |
                      env_safe_err4 |
                      env_safe_err5 |
                      env_safe_err6 |
                      env_safe_err7 |
                      env_safe_err8 |
                      env_safe_err9 |
                      env_safe_err10 |
                      env_safe_err11 |
                      env_safe_err12 |
                      env_safe_err13 |
                      env_safe_err14;

// =============================================================
//                        SYS_TRANSITION:
// =============================================================
// G((StoB_REQ0=0 * X(StoB_REQ0=1)) -> X(BtoS_ACK0=0));	#G2
assign sys_safe_err0 = ~((~(~reg_i_StoB_REQ0 & i_StoB_REQ0 )) | ~controllable_BtoS_ACK0);

// G((BtoS_ACK0=0 * StoB_REQ0=0) -> X(BtoS_ACK0=0));	#G2
assign sys_safe_err1 = ~((~(~reg_controllable_BtoS_ACK0 & ~reg_i_StoB_REQ0 )) | ~controllable_BtoS_ACK0);

// G((BtoS_ACK0=1 * StoB_REQ0=1) -> X(BtoS_ACK0=1));	#G4
assign sys_safe_err2 = ~((~(reg_controllable_BtoS_ACK0 & reg_i_StoB_REQ0 )) | controllable_BtoS_ACK0);

// G((BtoS_ACK0=0) + (BtoS_ACK1=0));	#G5
assign sys_safe_err3 = ~(~controllable_BtoS_ACK0 | ~controllable_BtoS_ACK1);

// G((BtoS_ACK0=0) + (BtoS_ACK2=0));	#G5
assign sys_safe_err4 = ~(~controllable_BtoS_ACK0 | ~controllable_BtoS_ACK2);

// G((BtoS_ACK0=0) + (BtoS_ACK3=0));	#G5
assign sys_safe_err5 = ~(~controllable_BtoS_ACK0 | ~controllable_BtoS_ACK3);

// G((StoB_REQ1=0 * X(StoB_REQ1=1)) -> X(BtoS_ACK1=0));	#G2
assign sys_safe_err6 = ~((~(~reg_i_StoB_REQ1 & i_StoB_REQ1 )) | ~controllable_BtoS_ACK1);

// G((BtoS_ACK1=0 * StoB_REQ1=0) -> X(BtoS_ACK1=0));	#G2
assign sys_safe_err7 = ~((~(~reg_controllable_BtoS_ACK1 & ~reg_i_StoB_REQ1 )) | ~controllable_BtoS_ACK1);

// G((BtoS_ACK1=1 * StoB_REQ1=1) -> X(BtoS_ACK1=1));	#G4
assign sys_safe_err8 = ~((~(reg_controllable_BtoS_ACK1 & reg_i_StoB_REQ1 )) | controllable_BtoS_ACK1);

// G((BtoS_ACK1=0) + (BtoS_ACK2=0));	#G5
assign sys_safe_err9 = ~(~controllable_BtoS_ACK1 | ~controllable_BtoS_ACK2);

// G((BtoS_ACK1=0) + (BtoS_ACK3=0));	#G5
assign sys_safe_err10 = ~(~controllable_BtoS_ACK1 | ~controllable_BtoS_ACK3);

// G((StoB_REQ2=0 * X(StoB_REQ2=1)) -> X(BtoS_ACK2=0));	#G2
assign sys_safe_err11 = ~((~(~reg_i_StoB_REQ2 & i_StoB_REQ2 )) | ~controllable_BtoS_ACK2);

// G((BtoS_ACK2=0 * StoB_REQ2=0) -> X(BtoS_ACK2=0));	#G2
assign sys_safe_err12 = ~((~(~reg_controllable_BtoS_ACK2 & ~reg_i_StoB_REQ2 )) | ~controllable_BtoS_ACK2);

// G((BtoS_ACK2=1 * StoB_REQ2=1) -> X(BtoS_ACK2=1));	#G4
assign sys_safe_err13 = ~((~(reg_controllable_BtoS_ACK2 & reg_i_StoB_REQ2 )) | controllable_BtoS_ACK2);

// G((BtoS_ACK2=0) + (BtoS_ACK3=0));	#G5
assign sys_safe_err14 = ~(~controllable_BtoS_ACK2 | ~controllable_BtoS_ACK3);

// G((StoB_REQ3=0 * X(StoB_REQ3=1)) -> X(BtoS_ACK3=0));	#G2
assign sys_safe_err15 = ~((~(~reg_i_StoB_REQ3 & i_StoB_REQ3 )) | ~controllable_BtoS_ACK3);

// G((BtoS_ACK3=0 * StoB_REQ3=0) -> X(BtoS_ACK3=0));	#G2
assign sys_safe_err16 = ~((~(~reg_controllable_BtoS_ACK3 & ~reg_i_StoB_REQ3 )) | ~controllable_BtoS_ACK3);

// G((BtoS_ACK3=1 * StoB_REQ3=1) -> X(BtoS_ACK3=1));	#G4
assign sys_safe_err17 = ~((~(reg_controllable_BtoS_ACK3 & reg_i_StoB_REQ3 )) | controllable_BtoS_ACK3);

// G((BtoR_REQ0=1 * RtoB_ACK0=0) -> X(BtoR_REQ0=1));	#G6
assign sys_safe_err18 = ~((~(reg_controllable_BtoR_REQ0 & ~reg_i_RtoB_ACK0)) | controllable_BtoR_REQ0);

// G((BtoR_REQ0=0) + (BtoR_REQ1=0));	#G7
assign sys_safe_err19 = ~(~controllable_BtoR_REQ0 | ~controllable_BtoR_REQ1);

// G(RtoB_ACK0=1 -> X(BtoR_REQ0=0));	#G8
assign sys_safe_err20 = ~(~reg_i_RtoB_ACK0 | ~controllable_BtoR_REQ0);

// G((BtoR_REQ1=1 * RtoB_ACK1=0) -> X(BtoR_REQ1=1));	#G6
assign sys_safe_err21 = ~((~(reg_controllable_BtoR_REQ1 & ~reg_i_RtoB_ACK1)) | controllable_BtoR_REQ1);

// G(RtoB_ACK1=1 -> X(BtoR_REQ1=0));	#G8
assign sys_safe_err22 = ~(~reg_i_RtoB_ACK1 | ~controllable_BtoR_REQ1);

// G((BtoR_REQ0=1 * BtoR_REQ1=1) -> FALSE);	#G7
assign sys_safe_err23 = reg_controllable_BtoR_REQ0 & reg_controllable_BtoR_REQ1;

// G((stateG7_1=0 * stateG7_0=1 * BtoR_REQ0=1) -> FALSE);	#G7
assign sys_safe_err24 = reg_nstateG7_1 & reg_stateG7_0 & reg_controllable_BtoR_REQ0;

// G((stateG7_1=1 * stateG7_0=1 * BtoR_REQ1=1) -> FALSE);	#G7
assign sys_safe_err25 = ~reg_nstateG7_1 & reg_stateG7_0 & reg_controllable_BtoR_REQ1;

// G((BtoS_ACK0=0 * X(BtoS_ACK0=1)) -> X(ENQ=1));	#G9
assign sys_safe_err26 = ~(~((~reg_controllable_BtoS_ACK0 & controllable_BtoS_ACK0)) | controllable_ENQ);

// G((BtoS_ACK0=0 * X(BtoS_ACK0=1))  -> X(SLC0=0 * SLC1=0));	#G9
assign sys_safe_err27 = ~(~((~reg_controllable_BtoS_ACK0 & controllable_BtoS_ACK0)) | (~controllable_SLC0 & ~controllable_SLC1));

// G((BtoS_ACK1=0 * X(BtoS_ACK1=1)) -> X(ENQ=1));	#G9
assign sys_safe_err28 = ~(~((~reg_controllable_BtoS_ACK1 & controllable_BtoS_ACK1)) | controllable_ENQ);

// G((BtoS_ACK1=0 * X(BtoS_ACK1=1)) <-> X(SLC0=1 * SLC1=0));	#G9
assign sys_safe_err29 = ~(((~reg_controllable_BtoS_ACK1 & controllable_BtoS_ACK1)) ^~ (controllable_SLC0 & ~controllable_SLC1));

// G((BtoS_ACK2=0 * X(BtoS_ACK2=1)) -> X(ENQ=1));	#G9
assign sys_safe_err30 = ~(~((~reg_controllable_BtoS_ACK2 & controllable_BtoS_ACK2)) | controllable_ENQ);

// G((BtoS_ACK2=0 * X(BtoS_ACK2=1)) <-> X(SLC0=0 * SLC1=1));	#G9
assign sys_safe_err31 = ~(((~reg_controllable_BtoS_ACK2 & controllable_BtoS_ACK2)) ^~ (~controllable_SLC0 & controllable_SLC1));

// G((BtoS_ACK3=0 * X(BtoS_ACK3=1)) -> X(ENQ=1));	#G9
assign sys_safe_err32 = ~(~((~reg_controllable_BtoS_ACK3 & controllable_BtoS_ACK3)) | controllable_ENQ);

// G((BtoS_ACK3=0 * X(BtoS_ACK3=1)) <-> X(SLC0=1 * SLC1=1));	#G9
assign sys_safe_err33 = ~(((~reg_controllable_BtoS_ACK3 & controllable_BtoS_ACK3)) ^~ (controllable_SLC0 & controllable_SLC1));

// G(((BtoS_ACK0=1 + X(BtoS_ACK0=0)) * (BtoS_ACK1=1 + X(BtoS_ACK1=0)) * (BtoS_ACK2=1 + X(BtoS_ACK2=0)) * (BtoS_ACK3=1 + X(BtoS_ACK3=0))) -> X(ENQ=0));	#G9
assign sys_safe_err34 = ~(~((reg_controllable_BtoS_ACK0 | ~controllable_BtoS_ACK0) & (reg_controllable_BtoS_ACK1 | ~controllable_BtoS_ACK1) & (reg_controllable_BtoS_ACK2 | ~controllable_BtoS_ACK2) & (reg_controllable_BtoS_ACK3 | ~controllable_BtoS_ACK3)) | ~controllable_ENQ);

// G((RtoB_ACK0=1 * X(RtoB_ACK0=0)) -> X(DEQ=1));	#G10
assign sys_safe_err35 = ~(~(reg_i_RtoB_ACK0 & ~i_RtoB_ACK0) | controllable_DEQ);

// G((RtoB_ACK1=1 * X(RtoB_ACK1=0)) -> X(DEQ=1));	#G10
assign sys_safe_err36 = ~(~(reg_i_RtoB_ACK1 & ~i_RtoB_ACK1) | controllable_DEQ);

// G(((RtoB_ACK0=0 + X(RtoB_ACK0=1)) * (RtoB_ACK1=0 + X(RtoB_ACK1=1))) -> X(DEQ=0));	#G10
assign sys_safe_err37 = ~(~((~reg_i_RtoB_ACK0 | i_RtoB_ACK0) & (~reg_i_RtoB_ACK1 | i_RtoB_ACK1)) | ~controllable_DEQ);

// G((FULL=1 * DEQ=0) -> ENQ=0);	#G11
assign sys_safe_err38 = ~(~(i_FULL & ~controllable_DEQ) | ~controllable_ENQ);

// G(EMPTY=1 -> DEQ=0);	#G11
assign sys_safe_err39 = ~( i_nEMPTY | ~controllable_DEQ);

// collecting together the safety error bits:
assign sys_safe_err = sys_safe_err0 |
                      sys_safe_err1 |
                      sys_safe_err2 |
                      sys_safe_err3 |
                      sys_safe_err4 |
                      sys_safe_err5 |
                      sys_safe_err6 |
                      sys_safe_err7 |
                      sys_safe_err8 |
                      sys_safe_err9 |
                      sys_safe_err10 |
                      sys_safe_err11 |
                      sys_safe_err12 |
                      sys_safe_err13 |
                      sys_safe_err14 |
                      sys_safe_err15 |
                      sys_safe_err16 |
                      sys_safe_err17 |
                      sys_safe_err18 |
                      sys_safe_err19 |
                      sys_safe_err20 |
                      sys_safe_err21 |
                      sys_safe_err22 |
                      sys_safe_err23 |
                      sys_safe_err24 |
                      sys_safe_err25 |
                      sys_safe_err26 |
                      sys_safe_err27 |
                      sys_safe_err28 |
                      sys_safe_err29 |
                      sys_safe_err30 |
                      sys_safe_err31 |
                      sys_safe_err32 |
                      sys_safe_err33 |
                      sys_safe_err34 |
                      sys_safe_err35 |
                      sys_safe_err36 |
                      sys_safe_err37 |
                      sys_safe_err38 |
                      sys_safe_err39;

// =============================================================
//                          ENV_FAIRNESS:
// =============================================================
// G(F(BtoR_REQ0=1 <-> RtoB_ACK0=1));	#A2
assign env_fair0 = controllable_BtoR_REQ0 ^~ i_RtoB_ACK0;

// G(F(BtoR_REQ1=1 <-> RtoB_ACK1=1));	#A2
assign env_fair1 = controllable_BtoR_REQ1 ^~ i_RtoB_ACK1;


// =============================================================
//                          SYS_FAIRNESS:
// =============================================================
// G(F(StoB_REQ0=1 <-> BtoS_ACK0=1));	#G1+G2
assign sys_fair0 = i_StoB_REQ0 ^~ controllable_BtoS_ACK0;

// G(F(StoB_REQ1=1 <-> BtoS_ACK1=1));	#G1+G2
assign sys_fair1 = i_StoB_REQ1 ^~ controllable_BtoS_ACK1;

// G(F(StoB_REQ2=1 <-> BtoS_ACK2=1));	#G1+G2
assign sys_fair2 = i_StoB_REQ2 ^~ controllable_BtoS_ACK2;

// G(F(StoB_REQ3=1 <-> BtoS_ACK3=1));	#G1+G2
assign sys_fair3 = i_StoB_REQ3 ^~ controllable_BtoS_ACK3;

// G(F(stateG12=0));	#G12
assign sys_fair4 = ~reg_stateG12;

assign fair_err = (fair_cnt >= 4'b1100);

// computing the error output bit:
assign o_err = ~env_safe_err & ~env_safe_err_happened & (sys_safe_err | fair_err);
initial
 begin
  reg_i_StoB_REQ0 = 0;
  reg_controllable_BtoS_ACK0 = 0;
  reg_i_StoB_REQ1 = 0;
  reg_controllable_BtoS_ACK1 = 0;
  reg_i_StoB_REQ2 = 0;
  reg_controllable_BtoS_ACK2 = 0;
  reg_i_StoB_REQ3 = 0;
  reg_controllable_BtoS_ACK3 = 0;
  reg_i_RtoB_ACK0 = 0;
  reg_controllable_BtoR_REQ0 = 0;
  reg_i_RtoB_ACK1 = 0;
  reg_controllable_BtoR_REQ1 = 0;
  reg_i_FULL = 0;
  reg_i_nEMPTY = 0;
  reg_controllable_ENQ = 0;
  reg_controllable_DEQ = 0;
  reg_controllable_SLC0 = 0;
  reg_controllable_SLC1 = 0;
  reg_stateG7_0 = 0;
  reg_nstateG7_1 = 0;
  reg_stateG12 = 0;
  env_safe_err_happened = 0;
  next_env_fair = 0;
  fair_cnt = 0;
  next_sys_fair = 0;
 end


always @(posedge i_clk)
 begin
   // We remember if an environment error occurred:
   env_safe_err_happened = env_safe_err_happened | env_safe_err;

   // Updating the fairness counters: 
   if((next_sys_fair == 0) & sys_fair0)
    begin
      next_sys_fair = 1;
      next_env_fair = 0;
      fair_cnt = 0;
    end
   else if((next_sys_fair == 1) & sys_fair1)
    begin
      next_sys_fair = 2;
      next_env_fair = 0;
      fair_cnt = 0;
    end
   else if((next_sys_fair == 2) & sys_fair2)
    begin
      next_sys_fair = 3;
      next_env_fair = 0;
      fair_cnt = 0;
    end
   else if((next_sys_fair == 3) & sys_fair3)
    begin
      next_sys_fair = 4;
      next_env_fair = 0;
      fair_cnt = 0;
    end
   else if((next_sys_fair == 4) & sys_fair4)
    begin
      next_sys_fair = 0;
      next_env_fair = 0;
      fair_cnt = 0;
    end
   else if(~next_env_fair & env_fair0)
    begin
      next_env_fair = 1;
    end
   else if(next_env_fair & env_fair1)
    begin
      next_env_fair = 0;
      fair_cnt = fair_cnt + 1;
    end

   // Updating the automata: 
   // Automaton G7: 
   if(reg_nstateG7_1 & ~reg_controllable_BtoR_REQ0 & reg_controllable_BtoR_REQ1)
    begin
      reg_nstateG7_1 = 1'b0;
      reg_stateG7_0 = 1'b0;
    end
   else if(~reg_nstateG7_1 & reg_controllable_BtoR_REQ0 & ~reg_controllable_BtoR_REQ1)
    begin
      reg_nstateG7_1 = 1'b1;
      reg_stateG7_0 = 1'b0;
    end
   else if(reg_nstateG7_1 & ~reg_controllable_BtoR_REQ0 & ~reg_controllable_BtoR_REQ1)
    begin
      reg_nstateG7_1 = 1'b1;
      reg_stateG7_0 = 1'b1;
    end
   else if(~reg_nstateG7_1 & ~reg_controllable_BtoR_REQ0 & ~reg_controllable_BtoR_REQ1)
    begin
      reg_nstateG7_1 = 1'b0;
      reg_stateG7_0 = 1'b1;
    end

   // Automaton G12: 
   if(~reg_stateG12 & reg_i_nEMPTY & ~reg_controllable_DEQ)
      reg_stateG12 = 1'b1;
   else if(reg_stateG12 & reg_controllable_DEQ)
      reg_stateG12 = 1'b0;

   // Latching the previous input:
   reg_i_StoB_REQ0 =  i_StoB_REQ0;
   reg_controllable_BtoS_ACK0 =  controllable_BtoS_ACK0;
   reg_i_StoB_REQ1 =  i_StoB_REQ1;
   reg_controllable_BtoS_ACK1 =  controllable_BtoS_ACK1;
   reg_i_StoB_REQ2 =  i_StoB_REQ2;
   reg_controllable_BtoS_ACK2 =  controllable_BtoS_ACK2;
   reg_i_StoB_REQ3 =  i_StoB_REQ3;
   reg_controllable_BtoS_ACK3 =  controllable_BtoS_ACK3;
   reg_i_RtoB_ACK0 =  i_RtoB_ACK0;
   reg_controllable_BtoR_REQ0 =  controllable_BtoR_REQ0;
   reg_i_RtoB_ACK1 =  i_RtoB_ACK1;
   reg_controllable_BtoR_REQ1 =  controllable_BtoR_REQ1;
   reg_i_FULL =  i_FULL;
   reg_i_nEMPTY =  i_nEMPTY;
   reg_controllable_ENQ =  controllable_ENQ;
   reg_controllable_DEQ =  controllable_DEQ;
   reg_controllable_SLC0 =  controllable_SLC0;
   reg_controllable_SLC1 =  controllable_SLC1;

 end
endmodule

-------------------------------
