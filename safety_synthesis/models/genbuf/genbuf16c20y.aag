aag 863 44 61 1 758
2
4
6
8
10
12
14
16
18
20
22
24
26
28
30
32
34
36
38
40
42
44
46
48
50
52
54
56
58
60
62
64
66
68
70
72
74
76
78
80
82
84
86
88
90 1
92 30
94 10
96 58
98 82
100 1222
102 56
104 52
106 1544
108 12
110 54
112 50
114 66
116 14
118 80
120 1553
122 48
124 70
126 16
128 46
130 72
132 18
134 84
136 44
138 74
140 20
142 88
144 68
146 42
148 76
150 22
152 2
154 1556
156 36
158 40
160 78
162 24
164 4
166 1589
168 1613
170 1623
172 1627
174 1631
176 1224
178 6
180 1654
182 1682
184 1698
186 1714
188 1726
190 38
192 64
194 26
196 34
198 62
200 505
202 28
204 8
206 32
208 60
210 86
1206
212 196 90
214 116 90
216 215 212
218 216 35
220 108 90
222 220 33
224 206 90
226 224 33
228 227 221
230 229 223
232 231 219
234 214 34
236 235 232
238 190 90
240 126 90
242 241 238
244 242 39
246 245 236
248 240 38
250 249 246
252 158 90
254 132 90
256 255 252
258 256 41
260 259 250
262 254 40
264 263 260
266 146 90
268 140 90
270 269 266
272 270 43
274 273 264
276 268 42
278 277 274
280 136 90
282 150 90
284 283 280
286 284 45
288 287 278
290 282 44
292 291 288
294 128 90
296 162 90
298 297 294
300 298 47
302 301 292
304 296 46
306 305 302
308 122 90
310 194 90
312 311 308
314 312 49
316 315 306
318 310 48
320 319 316
322 112 90
324 202 90
326 325 322
328 326 51
330 329 320
332 324 50
334 333 330
336 104 90
338 92 90
340 339 336
342 340 53
344 343 334
346 338 52
348 347 344
350 110 90
352 114 90
354 353 350
356 354 55
358 357 348
360 352 54
362 361 358
364 102 90
366 124 90
368 367 364
370 368 57
372 371 362
374 366 56
376 375 372
378 96 90
380 130 90
382 381 378
384 382 59
386 385 376
388 380 58
390 389 386
392 208 90
394 138 90
396 395 392
398 396 61
400 399 390
402 394 60
404 403 400
406 198 90
408 148 90
410 409 406
412 410 63
414 413 404
416 408 62
418 417 414
420 192 90
422 160 90
424 423 420
426 424 65
428 427 418
430 422 64
432 431 428
434 204 90
436 435 86
438 437 432
440 210 90
442 440 87
444 442 434
446 445 438
448 94 90
450 449 82
452 451 446
454 98 90
456 454 83
458 456 448
460 459 452
462 144 90
464 178 90
466 465 462
468 466 81
470 469 460
472 464 463
474 472 36
476 475 470
478 473 467
480 156 90
482 481 36
484 480 37
486 485 483
488 118 90
490 489 80
492 488 81
494 493 491
496 494 486
498 497 478
500 499 476
502 200 90
504 503 500
506 457 443
508 506 6
510 423 78
512 409 76
514 395 74
516 381 72
518 367 70
520 353 66
522 339 30
524 325 28
526 311 26
528 297 24
530 283 22
532 269 20
534 255 18
536 241 16
538 221 12
540 215 14
542 541 539
544 542 537
546 544 535
548 546 533
550 548 531
552 550 529
554 552 527
556 554 525
558 556 523
560 558 521
562 560 519
564 562 517
566 564 515
568 566 513
570 568 511
572 570 68
574 88 84
576 574 2
578 576 4
580 578 68
582 581 510
584 578 511
586 88 85
588 586 2
590 588 4
592 590 68
594 593 512
596 590 513
598 89 84
600 598 2
602 600 4
604 602 68
606 605 514
608 602 515
610 89 85
612 610 2
614 612 4
616 614 68
618 617 516
620 614 517
622 574 3
624 622 4
626 624 68
628 627 518
630 624 519
632 586 3
634 632 4
636 634 68
638 637 520
640 634 521
642 598 3
644 642 4
646 644 68
648 647 522
650 644 523
652 610 3
654 652 4
656 654 68
658 657 524
660 654 525
662 576 5
664 662 68
666 665 526
668 662 527
670 588 5
672 670 68
674 673 528
676 670 529
678 600 5
680 678 68
682 681 530
684 678 531
686 612 5
688 686 68
690 689 532
692 686 533
694 622 5
696 694 68
698 697 534
700 694 535
702 632 5
704 702 68
706 705 536
708 702 537
710 642 5
712 710 68
714 713 540
716 710 541
718 120 90
720 100 90
722 720 719
724 722 448
726 455 448
728 726 11
730 407 62
732 730 76
734 393 60
736 734 74
738 379 58
740 738 72
742 365 56
744 742 70
746 351 54
748 746 66
750 337 52
752 750 30
754 323 50
756 754 28
758 309 48
760 758 26
762 295 46
764 762 24
766 281 44
768 766 22
770 267 42
772 770 20
774 253 40
776 774 18
778 239 38
780 778 16
782 213 34
784 782 14
786 224 220
788 787 13
790 19 17
792 224 12
794 225 222
796 795 793
798 23 21
800 798 25
802 800 797
804 802 15
806 804 790
808 807 789
810 77 75
812 810 79
814 812 73
816 814 71
818 816 67
820 818 31
822 820 29
824 822 27
826 825 12
828 827 809
830 828 785
832 540 213
834 833 830
836 214 212
838 836 15
840 839 834
842 824 25
844 842 798
846 844 790
848 847 14
850 849 840
852 850 781
854 536 239
856 855 852
858 240 238
860 858 17
862 861 856
864 844 19
866 865 16
868 867 862
870 868 777
872 534 253
874 873 870
876 254 252
878 876 19
880 879 874
882 845 18
884 883 880
886 884 773
888 532 267
890 889 886
892 268 266
894 892 21
896 895 890
898 842 23
900 899 20
902 901 896
904 902 769
906 530 281
908 907 904
910 282 280
912 910 23
914 913 908
916 843 22
918 917 914
920 918 765
922 528 295
924 923 920
926 296 294
928 926 25
930 929 924
932 825 24
934 933 930
936 934 761
938 526 309
940 939 936
942 310 308
944 942 27
946 945 940
948 823 26
950 949 946
952 950 757
954 524 323
956 955 952
958 324 322
960 958 29
962 961 956
964 821 28
966 965 962
968 966 753
970 522 337
972 971 968
974 338 336
976 974 31
978 977 972
980 819 30
982 981 978
984 982 749
986 520 351
988 987 984
990 352 350
992 990 67
994 993 988
996 817 66
998 997 994
1000 998 745
1002 518 365
1004 1003 1000
1006 366 364
1008 1006 71
1010 1009 1004
1012 815 70
1014 1013 1010
1016 1014 741
1018 516 379
1020 1019 1016
1022 380 378
1024 1022 73
1026 1025 1020
1028 813 72
1030 1029 1026
1032 1030 737
1034 514 393
1036 1035 1032
1038 394 392
1040 1038 75
1042 1041 1036
1044 79 77
1046 1045 74
1048 1047 1042
1050 1048 733
1052 512 407
1054 1053 1050
1056 408 406
1058 1056 77
1060 1059 1054
1062 421 64
1064 1063 77
1066 1065 78
1068 1067 1060
1070 510 421
1072 1071 1068
1074 422 420
1076 1074 79
1078 1077 1072
1080 441 434
1082 1080 9
1084 1083 1078
1086 441 11
1088 1087 8
1090 1089 1084
1092 1090 729
1094 454 10
1096 1095 1092
1098 720 718
1100 1099 449
1102 1101 434
1104 1103 1096
1106 1104 725
1108 652 5
1110 1108 68
1112 1111 538
1114 1113 1106
1116 1114 717
1118 1116 715
1120 1118 709
1122 1120 707
1124 1122 701
1126 1124 699
1128 1126 693
1130 1128 691
1132 1130 685
1134 1132 683
1136 1134 677
1138 1136 675
1140 1138 669
1142 1140 667
1144 1142 661
1146 1144 659
1148 1146 651
1150 1148 649
1152 1150 641
1154 1152 639
1156 1154 631
1158 1156 629
1160 1158 621
1162 1160 619
1164 1162 609
1166 1164 607
1168 1166 597
1170 1168 595
1172 1170 585
1174 1172 583
1176 1174 573
1178 507 7
1180 1179 1176
1182 1180 509
1184 36 7
1186 1184 68
1188 1187 1182
1190 81 6
1192 1191 1188
1194 186 90
1196 184 90
1198 1197 1195
1200 188 90
1202 1200 1199
1204 1203 1192
1206 1205 504
1208 718 435
1210 1208 448
1212 719 434
1214 1212 449
1216 1215 1211
1218 449 435
1220 1219 721
1222 1221 1216
1224 176 90
1226 174 90
1228 172 90
1230 170 90
1232 166 90
1234 168 90
1236 1235 1233
1238 1236 1231
1240 1238 1228
1242 1240 1227
1244 1242 1225
1246 51 28
1248 50 29
1250 1249 1247
1252 1250 1244
1254 1234 1233
1256 1254 1231
1258 1256 1228
1260 1258 1227
1262 1260 1225
1264 66 55
1266 67 54
1268 1267 1265
1270 1268 1262
1272 1235 1232
1274 1272 1231
1276 1274 1228
1278 1276 1227
1280 1278 1225
1282 53 30
1284 52 31
1286 1285 1283
1288 1286 1280
1290 1289 1271
1292 1290 1253
1294 1234 1232
1296 1294 1231
1298 1296 1228
1300 1298 1227
1302 1300 1225
1304 70 57
1306 71 56
1308 1307 1305
1310 1308 1302
1312 1236 1230
1314 1312 1228
1316 1314 1227
1318 1316 1225
1320 72 59
1322 73 58
1324 1323 1321
1326 1324 1318
1328 1272 1230
1330 1328 1228
1332 1330 1227
1334 1332 1225
1336 74 61
1338 75 60
1340 1339 1337
1342 1340 1334
1344 1343 1327
1346 1344 1311
1348 1238 1229
1350 1348 1226
1352 1350 1225
1354 154 90
1356 1355 1352
1358 106 90
1360 82 11
1362 83 10
1364 1363 1361
1366 1364 1358
1368 86 9
1370 87 8
1372 1371 1369
1374 1373 1359
1376 1375 1367
1378 1376 1357
1380 1294 1230
1382 1380 1228
1384 1382 1227
1386 1384 1225
1388 78 65
1390 79 64
1392 1391 1389
1394 1392 1386
1396 1254 1230
1398 1396 1228
1400 1398 1227
1402 1400 1225
1404 76 63
1406 77 62
1408 1407 1405
1410 1408 1402
1412 1411 1395
1414 1412 1378
1416 1414 1346
1418 1416 1292
1420 1348 1227
1422 1420 1225
1424 33 12
1426 32 13
1428 1427 1425
1430 1428 1422
1432 1274 1229
1434 1432 1227
1436 1434 1225
1438 35 14
1440 34 15
1442 1441 1439
1444 1442 1436
1446 1445 1431
1448 1256 1229
1450 1448 1227
1452 1450 1225
1454 39 16
1456 38 17
1458 1457 1455
1460 1458 1452
1462 1312 1229
1464 1462 1227
1466 1464 1225
1468 43 20
1470 42 21
1472 1471 1469
1474 1472 1466
1476 1296 1229
1478 1476 1227
1480 1478 1225
1482 41 18
1484 40 19
1486 1485 1483
1488 1486 1480
1490 1489 1475
1492 1490 1461
1494 1492 1446
1496 1380 1229
1498 1496 1227
1500 1498 1225
1502 49 26
1504 48 27
1506 1505 1503
1508 1506 1500
1510 1396 1229
1512 1510 1227
1514 1512 1225
1516 47 24
1518 46 25
1520 1519 1517
1522 1520 1514
1524 1523 1509
1526 1328 1229
1528 1526 1227
1530 1528 1225
1532 45 22
1534 44 23
1536 1535 1533
1538 1536 1530
1540 1539 1524
1542 1540 1494
1544 1542 1418
1546 1213 1209
1548 1547 449
1550 718 434
1552 1551 1549
1554 1355 489
1556 1555 465
1558 1395 1232
1560 1559 1411
1562 1561 1343
1564 1563 1327
1566 1565 1311
1568 1567 1271
1570 1569 1289
1572 1571 1253
1574 1573 1509
1576 1575 1523
1578 1577 1539
1580 1579 1475
1582 1581 1489
1584 1583 1461
1586 1585 1445
1588 1587 1431
1590 1539 1523
1592 1509 1253
1594 1327 1311
1596 1411 1343
1598 1395 1234
1600 1599 1596
1602 1601 1594
1604 1603 1290
1606 1605 1592
1608 1607 1590
1610 1609 1490
1612 1611 1445
1614 1395 1230
1616 1615 1346
1618 1592 1289
1620 1618 1617
1622 1621 1490
1624 1395 1228
1626 1625 1618
1628 1357 1226
1630 1629 1395
1632 180 90
1634 1633 1367
1636 1632 1366
1638 1637 1635
1640 1638 1357
1642 1640 1412
1644 1311 1290
1646 1644 1344
1648 1646 1642
1650 1592 1590
1652 1650 1494
1654 1652 1648
1656 1357 1344
1658 1656 1253
1660 1658 1539
1662 1660 1446
1664 182 90
1666 1665 1637
1668 1664 1632
1670 1668 1366
1672 1671 1667
1674 1672 1412
1676 1674 1524
1678 1644 1492
1680 1678 1676
1682 1680 1662
1684 1412 1290
1686 1671 1197
1688 1670 1196
1690 1689 1687
1692 1690 1311
1694 1692 1658
1696 1694 1684
1698 1696 1542
1700 1689 1195
1702 1688 1194
1704 1703 1701
1706 1704 1357
1708 1684 1253
1710 1708 1346
1712 1710 1706
1714 1712 1542
1716 1703 1201
1718 1702 1200
1720 1719 1717
1722 1720 1357
1724 1722 1710
1726 1724 1542
i0 controllable_SLC2
i1 controllable_SLC3
i2 controllable_DEQ
i3 controllable_BtoR_REQ0
i4 controllable_BtoR_REQ1
i5 controllable_BtoS_ACK0
i6 controllable_BtoS_ACK1
i7 controllable_BtoS_ACK2
i8 controllable_BtoS_ACK3
i9 controllable_BtoS_ACK4
i10 controllable_BtoS_ACK5
i11 controllable_BtoS_ACK6
i12 controllable_BtoS_ACK7
i13 controllable_BtoS_ACK8
i14 controllable_BtoS_ACK9
i15 i_StoB_REQ0
i16 i_StoB_REQ1
i17 i_FULL
i18 i_StoB_REQ2
i19 i_StoB_REQ3
i20 i_StoB_REQ4
i21 i_StoB_REQ5
i22 i_StoB_REQ6
i23 i_StoB_REQ7
i24 i_StoB_REQ8
i25 i_StoB_REQ9
i26 i_StoB_REQ10
i27 i_StoB_REQ11
i28 i_StoB_REQ12
i29 i_StoB_REQ13
i30 i_StoB_REQ14
i31 i_StoB_REQ15
i32 controllable_BtoS_ACK10
i33 controllable_ENQ
i34 controllable_BtoS_ACK11
i35 controllable_BtoS_ACK12
i36 controllable_BtoS_ACK13
i37 controllable_BtoS_ACK14
i38 controllable_BtoS_ACK15
i39 i_nEMPTY
i40 i_RtoB_ACK1
i41 controllable_SLC0
i42 i_RtoB_ACK0
i43 controllable_SLC1
l0 n91
l1 reg_controllable_BtoS_ACK9_out
l2 reg_controllable_BtoR_REQ1_out
l3 reg_i_StoB_REQ12_out
l4 reg_i_RtoB_ACK1_out
l5 reg_stateG7_0_out
l6 reg_i_StoB_REQ11_out
l7 reg_i_StoB_REQ9_out
l8 next_env_fair_out
l9 reg_controllable_BtoS_ACK0_out
l10 reg_i_StoB_REQ10_out
l11 reg_i_StoB_REQ8_out
l12 reg_controllable_BtoS_ACK10_out
l13 reg_controllable_BtoS_ACK1_out
l14 reg_i_nEMPTY_out
l15 reg_nstateG7_1_out
l16 reg_i_StoB_REQ7_out
l17 reg_controllable_BtoS_ACK11_out
l18 reg_controllable_BtoS_ACK2_out
l19 reg_i_StoB_REQ6_out
l20 reg_controllable_BtoS_ACK12_out
l21 reg_controllable_BtoS_ACK3_out
l22 reg_controllable_SLC0_out
l23 reg_i_StoB_REQ5_out
l24 reg_controllable_BtoS_ACK13_out
l25 reg_controllable_BtoS_ACK4_out
l26 reg_controllable_SLC1_out
l27 reg_controllable_ENQ_out
l28 reg_i_StoB_REQ4_out
l29 reg_controllable_BtoS_ACK14_out
l30 reg_controllable_BtoS_ACK5_out
l31 reg_controllable_SLC2_out
l32 reg_stateG12_out
l33 reg_i_FULL_out
l34 reg_i_StoB_REQ3_out
l35 reg_controllable_BtoS_ACK15_out
l36 reg_controllable_BtoS_ACK6_out
l37 reg_controllable_SLC3_out
l38 next_sys_fair<0>_out
l39 next_sys_fair<1>_out
l40 next_sys_fair<2>_out
l41 next_sys_fair<3>_out
l42 next_sys_fair<4>_out
l43 next_sys_fair<5>_out
l44 reg_controllable_DEQ_out
l45 fair_cnt<0>_out
l46 fair_cnt<1>_out
l47 fair_cnt<2>_out
l48 fair_cnt<3>_out
l49 fair_cnt<4>_out
l50 reg_i_StoB_REQ2_out
l51 reg_i_StoB_REQ15_out
l52 reg_controllable_BtoS_ACK7_out
l53 reg_i_StoB_REQ1_out
l54 reg_i_StoB_REQ14_out
l55 env_safe_err_happened_out
l56 reg_controllable_BtoS_ACK8_out
l57 reg_controllable_BtoR_REQ0_out
l58 reg_i_StoB_REQ0_out
l59 reg_i_StoB_REQ13_out
l60 reg_i_RtoB_ACK0_out
o0 o_err
c
genbuf_16_new_20
This file was written by ABC on Tue May  5 16:57:33 2015
For information about AIGER format, refer to http://fmv.jku.at/aiger
-------------------------------
This AIGER file has been created by the following sequence of commands:
> vl2mv genbuf16c20.v   ---gives--> genbuf16c20.mv
> abc -c "read_blif_mv genbuf16c20.mv; strash; refactor; rewrite; dfraig; rewrite; dfraig; write_aiger -s genbuf16c20y.aig"   ---gives--> genbuf16c20y.aig
> aigtoaig genbuf16c20y.aig genbuf16c20y.aag   ---gives--> genbuf16c20y.aag (this file)
Content of genbuf16c20.v:
module genbuf_16_new_20(
        o_err,
        i_clk,
        i_StoB_REQ0,
        controllable_BtoS_ACK0,
        i_StoB_REQ1,
        controllable_BtoS_ACK1,
        i_StoB_REQ2,
        controllable_BtoS_ACK2,
        i_StoB_REQ3,
        controllable_BtoS_ACK3,
        i_StoB_REQ4,
        controllable_BtoS_ACK4,
        i_StoB_REQ5,
        controllable_BtoS_ACK5,
        i_StoB_REQ6,
        controllable_BtoS_ACK6,
        i_StoB_REQ7,
        controllable_BtoS_ACK7,
        i_StoB_REQ8,
        controllable_BtoS_ACK8,
        i_StoB_REQ9,
        controllable_BtoS_ACK9,
        i_StoB_REQ10,
        controllable_BtoS_ACK10,
        i_StoB_REQ11,
        controllable_BtoS_ACK11,
        i_StoB_REQ12,
        controllable_BtoS_ACK12,
        i_StoB_REQ13,
        controllable_BtoS_ACK13,
        i_StoB_REQ14,
        controllable_BtoS_ACK14,
        i_StoB_REQ15,
        controllable_BtoS_ACK15,
        i_RtoB_ACK0,
        controllable_BtoR_REQ0,
        i_RtoB_ACK1,
        controllable_BtoR_REQ1,
        i_FULL,
        i_nEMPTY,
        controllable_ENQ,
        controllable_DEQ,
        controllable_SLC0,
        controllable_SLC1,
        controllable_SLC2,
        controllable_SLC3);

input i_clk;
input i_StoB_REQ0;
input controllable_BtoS_ACK0;
input i_StoB_REQ1;
input controllable_BtoS_ACK1;
input i_StoB_REQ2;
input controllable_BtoS_ACK2;
input i_StoB_REQ3;
input controllable_BtoS_ACK3;
input i_StoB_REQ4;
input controllable_BtoS_ACK4;
input i_StoB_REQ5;
input controllable_BtoS_ACK5;
input i_StoB_REQ6;
input controllable_BtoS_ACK6;
input i_StoB_REQ7;
input controllable_BtoS_ACK7;
input i_StoB_REQ8;
input controllable_BtoS_ACK8;
input i_StoB_REQ9;
input controllable_BtoS_ACK9;
input i_StoB_REQ10;
input controllable_BtoS_ACK10;
input i_StoB_REQ11;
input controllable_BtoS_ACK11;
input i_StoB_REQ12;
input controllable_BtoS_ACK12;
input i_StoB_REQ13;
input controllable_BtoS_ACK13;
input i_StoB_REQ14;
input controllable_BtoS_ACK14;
input i_StoB_REQ15;
input controllable_BtoS_ACK15;
input i_RtoB_ACK0;
input controllable_BtoR_REQ0;
input i_RtoB_ACK1;
input controllable_BtoR_REQ1;
input i_FULL;
input i_nEMPTY;
input controllable_ENQ;
input controllable_DEQ;
input controllable_SLC0;
input controllable_SLC1;
input controllable_SLC2;
input controllable_SLC3;
output o_err;

reg reg_i_StoB_REQ0;
reg reg_controllable_BtoS_ACK0;
reg reg_i_StoB_REQ1;
reg reg_controllable_BtoS_ACK1;
reg reg_i_StoB_REQ2;
reg reg_controllable_BtoS_ACK2;
reg reg_i_StoB_REQ3;
reg reg_controllable_BtoS_ACK3;
reg reg_i_StoB_REQ4;
reg reg_controllable_BtoS_ACK4;
reg reg_i_StoB_REQ5;
reg reg_controllable_BtoS_ACK5;
reg reg_i_StoB_REQ6;
reg reg_controllable_BtoS_ACK6;
reg reg_i_StoB_REQ7;
reg reg_controllable_BtoS_ACK7;
reg reg_i_StoB_REQ8;
reg reg_controllable_BtoS_ACK8;
reg reg_i_StoB_REQ9;
reg reg_controllable_BtoS_ACK9;
reg reg_i_StoB_REQ10;
reg reg_controllable_BtoS_ACK10;
reg reg_i_StoB_REQ11;
reg reg_controllable_BtoS_ACK11;
reg reg_i_StoB_REQ12;
reg reg_controllable_BtoS_ACK12;
reg reg_i_StoB_REQ13;
reg reg_controllable_BtoS_ACK13;
reg reg_i_StoB_REQ14;
reg reg_controllable_BtoS_ACK14;
reg reg_i_StoB_REQ15;
reg reg_controllable_BtoS_ACK15;
reg reg_i_RtoB_ACK0;
reg reg_controllable_BtoR_REQ0;
reg reg_i_RtoB_ACK1;
reg reg_controllable_BtoR_REQ1;
reg reg_i_FULL;
reg reg_i_nEMPTY;
reg reg_controllable_ENQ;
reg reg_controllable_DEQ;
reg reg_controllable_SLC0;
reg reg_controllable_SLC1;
reg reg_controllable_SLC2;
reg reg_controllable_SLC3;
reg reg_stateG7_0;
reg reg_nstateG7_1;
reg reg_stateG12;
reg env_safe_err_happened;
reg next_env_fair;
reg [4:0] fair_cnt;
reg [5:0] next_sys_fair;

wire env_safe_err0;
wire env_safe_err1;
wire env_safe_err2;
wire env_safe_err3;
wire env_safe_err4;
wire env_safe_err5;
wire env_safe_err6;
wire env_safe_err7;
wire env_safe_err8;
wire env_safe_err9;
wire env_safe_err10;
wire env_safe_err11;
wire env_safe_err12;
wire env_safe_err13;
wire env_safe_err14;
wire env_safe_err15;
wire env_safe_err16;
wire env_safe_err17;
wire env_safe_err18;
wire env_safe_err19;
wire env_safe_err20;
wire env_safe_err21;
wire env_safe_err22;
wire env_safe_err23;
wire env_safe_err24;
wire env_safe_err25;
wire env_safe_err26;
wire env_safe_err27;
wire env_safe_err28;
wire env_safe_err29;
wire env_safe_err30;
wire env_safe_err31;
wire env_safe_err32;
wire env_safe_err33;
wire env_safe_err34;
wire env_safe_err35;
wire env_safe_err36;
wire env_safe_err37;
wire env_safe_err38;
wire env_safe_err;

wire sys_safe_err0;
wire sys_safe_err1;
wire sys_safe_err2;
wire sys_safe_err3;
wire sys_safe_err4;
wire sys_safe_err5;
wire sys_safe_err6;
wire sys_safe_err7;
wire sys_safe_err8;
wire sys_safe_err9;
wire sys_safe_err10;
wire sys_safe_err11;
wire sys_safe_err12;
wire sys_safe_err13;
wire sys_safe_err14;
wire sys_safe_err15;
wire sys_safe_err16;
wire sys_safe_err17;
wire sys_safe_err18;
wire sys_safe_err19;
wire sys_safe_err20;
wire sys_safe_err21;
wire sys_safe_err22;
wire sys_safe_err23;
wire sys_safe_err24;
wire sys_safe_err25;
wire sys_safe_err26;
wire sys_safe_err27;
wire sys_safe_err28;
wire sys_safe_err29;
wire sys_safe_err30;
wire sys_safe_err31;
wire sys_safe_err32;
wire sys_safe_err33;
wire sys_safe_err34;
wire sys_safe_err35;
wire sys_safe_err36;
wire sys_safe_err37;
wire sys_safe_err38;
wire sys_safe_err39;
wire sys_safe_err40;
wire sys_safe_err41;
wire sys_safe_err42;
wire sys_safe_err43;
wire sys_safe_err44;
wire sys_safe_err45;
wire sys_safe_err46;
wire sys_safe_err47;
wire sys_safe_err48;
wire sys_safe_err49;
wire sys_safe_err50;
wire sys_safe_err51;
wire sys_safe_err52;
wire sys_safe_err53;
wire sys_safe_err54;
wire sys_safe_err55;
wire sys_safe_err56;
wire sys_safe_err57;
wire sys_safe_err58;
wire sys_safe_err59;
wire sys_safe_err60;
wire sys_safe_err61;
wire sys_safe_err62;
wire sys_safe_err63;
wire sys_safe_err64;
wire sys_safe_err65;
wire sys_safe_err66;
wire sys_safe_err67;
wire sys_safe_err68;
wire sys_safe_err69;
wire sys_safe_err70;
wire sys_safe_err71;
wire sys_safe_err72;
wire sys_safe_err73;
wire sys_safe_err74;
wire sys_safe_err75;
wire sys_safe_err76;
wire sys_safe_err77;
wire sys_safe_err78;
wire sys_safe_err79;
wire sys_safe_err80;
wire sys_safe_err81;
wire sys_safe_err82;
wire sys_safe_err83;
wire sys_safe_err84;
wire sys_safe_err85;
wire sys_safe_err86;
wire sys_safe_err87;
wire sys_safe_err88;
wire sys_safe_err89;
wire sys_safe_err90;
wire sys_safe_err91;
wire sys_safe_err92;
wire sys_safe_err93;
wire sys_safe_err94;
wire sys_safe_err95;
wire sys_safe_err96;
wire sys_safe_err97;
wire sys_safe_err98;
wire sys_safe_err99;
wire sys_safe_err100;
wire sys_safe_err101;
wire sys_safe_err102;
wire sys_safe_err103;
wire sys_safe_err104;
wire sys_safe_err105;
wire sys_safe_err106;
wire sys_safe_err107;
wire sys_safe_err108;
wire sys_safe_err109;
wire sys_safe_err110;
wire sys_safe_err111;
wire sys_safe_err112;
wire sys_safe_err113;
wire sys_safe_err114;
wire sys_safe_err115;
wire sys_safe_err116;
wire sys_safe_err117;
wire sys_safe_err118;
wire sys_safe_err119;
wire sys_safe_err120;
wire sys_safe_err121;
wire sys_safe_err122;
wire sys_safe_err123;
wire sys_safe_err124;
wire sys_safe_err125;
wire sys_safe_err126;
wire sys_safe_err127;
wire sys_safe_err128;
wire sys_safe_err129;
wire sys_safe_err130;
wire sys_safe_err131;
wire sys_safe_err132;
wire sys_safe_err133;
wire sys_safe_err134;
wire sys_safe_err135;
wire sys_safe_err136;
wire sys_safe_err137;
wire sys_safe_err138;
wire sys_safe_err139;
wire sys_safe_err140;
wire sys_safe_err141;
wire sys_safe_err142;
wire sys_safe_err143;
wire sys_safe_err144;
wire sys_safe_err145;
wire sys_safe_err146;
wire sys_safe_err147;
wire sys_safe_err148;
wire sys_safe_err149;
wire sys_safe_err150;
wire sys_safe_err151;
wire sys_safe_err152;
wire sys_safe_err153;
wire sys_safe_err154;
wire sys_safe_err155;
wire sys_safe_err156;
wire sys_safe_err157;
wire sys_safe_err158;
wire sys_safe_err159;
wire sys_safe_err160;
wire sys_safe_err161;
wire sys_safe_err162;
wire sys_safe_err163;
wire sys_safe_err164;
wire sys_safe_err165;
wire sys_safe_err166;
wire sys_safe_err167;
wire sys_safe_err168;
wire sys_safe_err169;
wire sys_safe_err170;
wire sys_safe_err171;
wire sys_safe_err172;
wire sys_safe_err173;
wire sys_safe_err174;
wire sys_safe_err175;
wire sys_safe_err176;
wire sys_safe_err177;
wire sys_safe_err178;
wire sys_safe_err179;
wire sys_safe_err180;
wire sys_safe_err181;
wire sys_safe_err182;
wire sys_safe_err183;
wire sys_safe_err184;
wire sys_safe_err185;
wire sys_safe_err186;
wire sys_safe_err187;
wire sys_safe_err188;
wire sys_safe_err189;
wire sys_safe_err190;
wire sys_safe_err191;
wire sys_safe_err192;
wire sys_safe_err193;
wire sys_safe_err194;
wire sys_safe_err195;
wire sys_safe_err196;
wire sys_safe_err197;
wire sys_safe_err198;
wire sys_safe_err199;
wire sys_safe_err200;
wire sys_safe_err201;
wire sys_safe_err202;
wire sys_safe_err203;
wire sys_safe_err204;
wire sys_safe_err205;
wire sys_safe_err206;
wire sys_safe_err207;
wire sys_safe_err208;
wire sys_safe_err209;
wire sys_safe_err210;
wire sys_safe_err211;
wire sys_safe_err212;
wire sys_safe_err213;
wire sys_safe_err;

wire env_fair0;
wire env_fair1;

wire sys_fair0;
wire sys_fair1;
wire sys_fair2;
wire sys_fair3;
wire sys_fair4;
wire sys_fair5;
wire sys_fair6;
wire sys_fair7;
wire sys_fair8;
wire sys_fair9;
wire sys_fair10;
wire sys_fair11;
wire sys_fair12;
wire sys_fair13;
wire sys_fair14;
wire sys_fair15;
wire sys_fair16;
wire fair_err;
wire o_err;

// =============================================================
//                        ENV_TRANSITION:
// =============================================================
// G((StoB_REQ0=1 * BtoS_ACK0=0) -> X(StoB_REQ0=1));	#A1
assign env_safe_err0 = ~((~(reg_i_StoB_REQ0 & ~reg_controllable_BtoS_ACK0)) | i_StoB_REQ0);

// G(BtoS_ACK0=1 -> X(StoB_REQ0=0));	#A1
assign env_safe_err1 = ~((~(reg_controllable_BtoS_ACK0)) | ~i_StoB_REQ0);

// G((StoB_REQ1=1 * BtoS_ACK1=0) -> X(StoB_REQ1=1));	#A1
assign env_safe_err2 = ~((~(reg_i_StoB_REQ1 & ~reg_controllable_BtoS_ACK1)) | i_StoB_REQ1);

// G(BtoS_ACK1=1 -> X(StoB_REQ1=0));	#A1
assign env_safe_err3 = ~((~(reg_controllable_BtoS_ACK1)) | ~i_StoB_REQ1);

// G((StoB_REQ2=1 * BtoS_ACK2=0) -> X(StoB_REQ2=1));	#A1
assign env_safe_err4 = ~((~(reg_i_StoB_REQ2 & ~reg_controllable_BtoS_ACK2)) | i_StoB_REQ2);

// G(BtoS_ACK2=1 -> X(StoB_REQ2=0));	#A1
assign env_safe_err5 = ~((~(reg_controllable_BtoS_ACK2)) | ~i_StoB_REQ2);

// G((StoB_REQ3=1 * BtoS_ACK3=0) -> X(StoB_REQ3=1));	#A1
assign env_safe_err6 = ~((~(reg_i_StoB_REQ3 & ~reg_controllable_BtoS_ACK3)) | i_StoB_REQ3);

// G(BtoS_ACK3=1 -> X(StoB_REQ3=0));	#A1
assign env_safe_err7 = ~((~(reg_controllable_BtoS_ACK3)) | ~i_StoB_REQ3);

// G((StoB_REQ4=1 * BtoS_ACK4=0) -> X(StoB_REQ4=1));	#A1
assign env_safe_err8 = ~((~(reg_i_StoB_REQ4 & ~reg_controllable_BtoS_ACK4)) | i_StoB_REQ4);

// G(BtoS_ACK4=1 -> X(StoB_REQ4=0));	#A1
assign env_safe_err9 = ~((~(reg_controllable_BtoS_ACK4)) | ~i_StoB_REQ4);

// G((StoB_REQ5=1 * BtoS_ACK5=0) -> X(StoB_REQ5=1));	#A1
assign env_safe_err10 = ~((~(reg_i_StoB_REQ5 & ~reg_controllable_BtoS_ACK5)) | i_StoB_REQ5);

// G(BtoS_ACK5=1 -> X(StoB_REQ5=0));	#A1
assign env_safe_err11 = ~((~(reg_controllable_BtoS_ACK5)) | ~i_StoB_REQ5);

// G((StoB_REQ6=1 * BtoS_ACK6=0) -> X(StoB_REQ6=1));	#A1
assign env_safe_err12 = ~((~(reg_i_StoB_REQ6 & ~reg_controllable_BtoS_ACK6)) | i_StoB_REQ6);

// G(BtoS_ACK6=1 -> X(StoB_REQ6=0));	#A1
assign env_safe_err13 = ~((~(reg_controllable_BtoS_ACK6)) | ~i_StoB_REQ6);

// G((StoB_REQ7=1 * BtoS_ACK7=0) -> X(StoB_REQ7=1));	#A1
assign env_safe_err14 = ~((~(reg_i_StoB_REQ7 & ~reg_controllable_BtoS_ACK7)) | i_StoB_REQ7);

// G(BtoS_ACK7=1 -> X(StoB_REQ7=0));	#A1
assign env_safe_err15 = ~((~(reg_controllable_BtoS_ACK7)) | ~i_StoB_REQ7);

// G((StoB_REQ8=1 * BtoS_ACK8=0) -> X(StoB_REQ8=1));	#A1
assign env_safe_err16 = ~((~(reg_i_StoB_REQ8 & ~reg_controllable_BtoS_ACK8)) | i_StoB_REQ8);

// G(BtoS_ACK8=1 -> X(StoB_REQ8=0));	#A1
assign env_safe_err17 = ~((~(reg_controllable_BtoS_ACK8)) | ~i_StoB_REQ8);

// G((StoB_REQ9=1 * BtoS_ACK9=0) -> X(StoB_REQ9=1));	#A1
assign env_safe_err18 = ~((~(reg_i_StoB_REQ9 & ~reg_controllable_BtoS_ACK9)) | i_StoB_REQ9);

// G(BtoS_ACK9=1 -> X(StoB_REQ9=0));	#A1
assign env_safe_err19 = ~((~(reg_controllable_BtoS_ACK9)) | ~i_StoB_REQ9);

// G((StoB_REQ10=1 * BtoS_ACK10=0) -> X(StoB_REQ10=1));	#A1
assign env_safe_err20 = ~((~(reg_i_StoB_REQ10 & ~reg_controllable_BtoS_ACK10)) | i_StoB_REQ10);

// G(BtoS_ACK10=1 -> X(StoB_REQ10=0));	#A1
assign env_safe_err21 = ~((~(reg_controllable_BtoS_ACK10)) | ~i_StoB_REQ10);

// G((StoB_REQ11=1 * BtoS_ACK11=0) -> X(StoB_REQ11=1));	#A1
assign env_safe_err22 = ~((~(reg_i_StoB_REQ11 & ~reg_controllable_BtoS_ACK11)) | i_StoB_REQ11);

// G(BtoS_ACK11=1 -> X(StoB_REQ11=0));	#A1
assign env_safe_err23 = ~((~(reg_controllable_BtoS_ACK11)) | ~i_StoB_REQ11);

// G((StoB_REQ12=1 * BtoS_ACK12=0) -> X(StoB_REQ12=1));	#A1
assign env_safe_err24 = ~((~(reg_i_StoB_REQ12 & ~reg_controllable_BtoS_ACK12)) | i_StoB_REQ12);

// G(BtoS_ACK12=1 -> X(StoB_REQ12=0));	#A1
assign env_safe_err25 = ~((~(reg_controllable_BtoS_ACK12)) | ~i_StoB_REQ12);

// G((StoB_REQ13=1 * BtoS_ACK13=0) -> X(StoB_REQ13=1));	#A1
assign env_safe_err26 = ~((~(reg_i_StoB_REQ13 & ~reg_controllable_BtoS_ACK13)) | i_StoB_REQ13);

// G(BtoS_ACK13=1 -> X(StoB_REQ13=0));	#A1
assign env_safe_err27 = ~((~(reg_controllable_BtoS_ACK13)) | ~i_StoB_REQ13);

// G((StoB_REQ14=1 * BtoS_ACK14=0) -> X(StoB_REQ14=1));	#A1
assign env_safe_err28 = ~((~(reg_i_StoB_REQ14 & ~reg_controllable_BtoS_ACK14)) | i_StoB_REQ14);

// G(BtoS_ACK14=1 -> X(StoB_REQ14=0));	#A1
assign env_safe_err29 = ~((~(reg_controllable_BtoS_ACK14)) | ~i_StoB_REQ14);

// G((StoB_REQ15=1 * BtoS_ACK15=0) -> X(StoB_REQ15=1));	#A1
assign env_safe_err30 = ~((~(reg_i_StoB_REQ15 & ~reg_controllable_BtoS_ACK15)) | i_StoB_REQ15);

// G(BtoS_ACK15=1 -> X(StoB_REQ15=0));	#A1
assign env_safe_err31 = ~((~(reg_controllable_BtoS_ACK15)) | ~i_StoB_REQ15);

// G(BtoR_REQ0=0 -> X(RtoB_ACK0=0));	#A3
assign env_safe_err32 = ~(reg_controllable_BtoR_REQ0 | ~i_RtoB_ACK0);

// G((BtoR_REQ0=1 * RtoB_ACK0=1) -> X(RtoB_ACK0=1));	#A4
assign env_safe_err33 = ~((~(reg_controllable_BtoR_REQ0 & reg_i_RtoB_ACK0)) | i_RtoB_ACK0);

// G(BtoR_REQ1=0 -> X(RtoB_ACK1=0));	#A3
assign env_safe_err34 = ~(reg_controllable_BtoR_REQ1 | ~i_RtoB_ACK1);

// G((BtoR_REQ1=1 * RtoB_ACK1=1) -> X(RtoB_ACK1=1));	#A4
assign env_safe_err35 = ~((~(reg_controllable_BtoR_REQ1 & reg_i_RtoB_ACK1)) | i_RtoB_ACK1);

// G((ENQ=1 * DEQ=0) -> X(EMPTY=0));	#A4
assign env_safe_err36 = ~(~(reg_controllable_ENQ & ~reg_controllable_DEQ) | i_nEMPTY);

// G((DEQ=1 * ENQ=0) -> X(FULL=0));	#A4
assign env_safe_err37 = ~(~(reg_controllable_DEQ & ~reg_controllable_ENQ) | ~i_FULL);

// G((ENQ=1 <-> DEQ=1) -> ((FULL=1 <-> X(FULL=1)) *
//                         (EMPTY=1 <-> X(EMPTY=1))));	#A4
assign env_safe_err38 = ~(~(reg_controllable_ENQ ^~ reg_controllable_DEQ) | ((reg_i_FULL ^~ i_FULL) &  (reg_i_nEMPTY ^~ i_nEMPTY)) );

// collecting together the safety error bits:
assign env_safe_err = env_safe_err0 |
                      env_safe_err1 |
                      env_safe_err2 |
                      env_safe_err3 |
                      env_safe_err4 |
                      env_safe_err5 |
                      env_safe_err6 |
                      env_safe_err7 |
                      env_safe_err8 |
                      env_safe_err9 |
                      env_safe_err10 |
                      env_safe_err11 |
                      env_safe_err12 |
                      env_safe_err13 |
                      env_safe_err14 |
                      env_safe_err15 |
                      env_safe_err16 |
                      env_safe_err17 |
                      env_safe_err18 |
                      env_safe_err19 |
                      env_safe_err20 |
                      env_safe_err21 |
                      env_safe_err22 |
                      env_safe_err23 |
                      env_safe_err24 |
                      env_safe_err25 |
                      env_safe_err26 |
                      env_safe_err27 |
                      env_safe_err28 |
                      env_safe_err29 |
                      env_safe_err30 |
                      env_safe_err31 |
                      env_safe_err32 |
                      env_safe_err33 |
                      env_safe_err34 |
                      env_safe_err35 |
                      env_safe_err36 |
                      env_safe_err37 |
                      env_safe_err38;

// =============================================================
//                        SYS_TRANSITION:
// =============================================================
// G((StoB_REQ0=0 * X(StoB_REQ0=1)) -> X(BtoS_ACK0=0));	#G2
assign sys_safe_err0 = ~((~(~reg_i_StoB_REQ0 & i_StoB_REQ0 )) | ~controllable_BtoS_ACK0);

// G((BtoS_ACK0=0 * StoB_REQ0=0) -> X(BtoS_ACK0=0));	#G2
assign sys_safe_err1 = ~((~(~reg_controllable_BtoS_ACK0 & ~reg_i_StoB_REQ0 )) | ~controllable_BtoS_ACK0);

// G((BtoS_ACK0=1 * StoB_REQ0=1) -> X(BtoS_ACK0=1));	#G4
assign sys_safe_err2 = ~((~(reg_controllable_BtoS_ACK0 & reg_i_StoB_REQ0 )) | controllable_BtoS_ACK0);

// G((BtoS_ACK0=0) + (BtoS_ACK1=0));	#G5
assign sys_safe_err3 = ~(~controllable_BtoS_ACK0 | ~controllable_BtoS_ACK1);

// G((BtoS_ACK0=0) + (BtoS_ACK2=0));	#G5
assign sys_safe_err4 = ~(~controllable_BtoS_ACK0 | ~controllable_BtoS_ACK2);

// G((BtoS_ACK0=0) + (BtoS_ACK3=0));	#G5
assign sys_safe_err5 = ~(~controllable_BtoS_ACK0 | ~controllable_BtoS_ACK3);

// G((BtoS_ACK0=0) + (BtoS_ACK4=0));	#G5
assign sys_safe_err6 = ~(~controllable_BtoS_ACK0 | ~controllable_BtoS_ACK4);

// G((BtoS_ACK0=0) + (BtoS_ACK5=0));	#G5
assign sys_safe_err7 = ~(~controllable_BtoS_ACK0 | ~controllable_BtoS_ACK5);

// G((BtoS_ACK0=0) + (BtoS_ACK6=0));	#G5
assign sys_safe_err8 = ~(~controllable_BtoS_ACK0 | ~controllable_BtoS_ACK6);

// G((BtoS_ACK0=0) + (BtoS_ACK7=0));	#G5
assign sys_safe_err9 = ~(~controllable_BtoS_ACK0 | ~controllable_BtoS_ACK7);

// G((BtoS_ACK0=0) + (BtoS_ACK8=0));	#G5
assign sys_safe_err10 = ~(~controllable_BtoS_ACK0 | ~controllable_BtoS_ACK8);

// G((BtoS_ACK0=0) + (BtoS_ACK9=0));	#G5
assign sys_safe_err11 = ~(~controllable_BtoS_ACK0 | ~controllable_BtoS_ACK9);

// G((BtoS_ACK0=0) + (BtoS_ACK10=0));	#G5
assign sys_safe_err12 = ~(~controllable_BtoS_ACK0 | ~controllable_BtoS_ACK10);

// G((BtoS_ACK0=0) + (BtoS_ACK11=0));	#G5
assign sys_safe_err13 = ~(~controllable_BtoS_ACK0 | ~controllable_BtoS_ACK11);

// G((BtoS_ACK0=0) + (BtoS_ACK12=0));	#G5
assign sys_safe_err14 = ~(~controllable_BtoS_ACK0 | ~controllable_BtoS_ACK12);

// G((BtoS_ACK0=0) + (BtoS_ACK13=0));	#G5
assign sys_safe_err15 = ~(~controllable_BtoS_ACK0 | ~controllable_BtoS_ACK13);

// G((BtoS_ACK0=0) + (BtoS_ACK14=0));	#G5
assign sys_safe_err16 = ~(~controllable_BtoS_ACK0 | ~controllable_BtoS_ACK14);

// G((BtoS_ACK0=0) + (BtoS_ACK15=0));	#G5
assign sys_safe_err17 = ~(~controllable_BtoS_ACK0 | ~controllable_BtoS_ACK15);

// G((StoB_REQ1=0 * X(StoB_REQ1=1)) -> X(BtoS_ACK1=0));	#G2
assign sys_safe_err18 = ~((~(~reg_i_StoB_REQ1 & i_StoB_REQ1 )) | ~controllable_BtoS_ACK1);

// G((BtoS_ACK1=0 * StoB_REQ1=0) -> X(BtoS_ACK1=0));	#G2
assign sys_safe_err19 = ~((~(~reg_controllable_BtoS_ACK1 & ~reg_i_StoB_REQ1 )) | ~controllable_BtoS_ACK1);

// G((BtoS_ACK1=1 * StoB_REQ1=1) -> X(BtoS_ACK1=1));	#G4
assign sys_safe_err20 = ~((~(reg_controllable_BtoS_ACK1 & reg_i_StoB_REQ1 )) | controllable_BtoS_ACK1);

// G((BtoS_ACK1=0) + (BtoS_ACK2=0));	#G5
assign sys_safe_err21 = ~(~controllable_BtoS_ACK1 | ~controllable_BtoS_ACK2);

// G((BtoS_ACK1=0) + (BtoS_ACK3=0));	#G5
assign sys_safe_err22 = ~(~controllable_BtoS_ACK1 | ~controllable_BtoS_ACK3);

// G((BtoS_ACK1=0) + (BtoS_ACK4=0));	#G5
assign sys_safe_err23 = ~(~controllable_BtoS_ACK1 | ~controllable_BtoS_ACK4);

// G((BtoS_ACK1=0) + (BtoS_ACK5=0));	#G5
assign sys_safe_err24 = ~(~controllable_BtoS_ACK1 | ~controllable_BtoS_ACK5);

// G((BtoS_ACK1=0) + (BtoS_ACK6=0));	#G5
assign sys_safe_err25 = ~(~controllable_BtoS_ACK1 | ~controllable_BtoS_ACK6);

// G((BtoS_ACK1=0) + (BtoS_ACK7=0));	#G5
assign sys_safe_err26 = ~(~controllable_BtoS_ACK1 | ~controllable_BtoS_ACK7);

// G((BtoS_ACK1=0) + (BtoS_ACK8=0));	#G5
assign sys_safe_err27 = ~(~controllable_BtoS_ACK1 | ~controllable_BtoS_ACK8);

// G((BtoS_ACK1=0) + (BtoS_ACK9=0));	#G5
assign sys_safe_err28 = ~(~controllable_BtoS_ACK1 | ~controllable_BtoS_ACK9);

// G((BtoS_ACK1=0) + (BtoS_ACK10=0));	#G5
assign sys_safe_err29 = ~(~controllable_BtoS_ACK1 | ~controllable_BtoS_ACK10);

// G((BtoS_ACK1=0) + (BtoS_ACK11=0));	#G5
assign sys_safe_err30 = ~(~controllable_BtoS_ACK1 | ~controllable_BtoS_ACK11);

// G((BtoS_ACK1=0) + (BtoS_ACK12=0));	#G5
assign sys_safe_err31 = ~(~controllable_BtoS_ACK1 | ~controllable_BtoS_ACK12);

// G((BtoS_ACK1=0) + (BtoS_ACK13=0));	#G5
assign sys_safe_err32 = ~(~controllable_BtoS_ACK1 | ~controllable_BtoS_ACK13);

// G((BtoS_ACK1=0) + (BtoS_ACK14=0));	#G5
assign sys_safe_err33 = ~(~controllable_BtoS_ACK1 | ~controllable_BtoS_ACK14);

// G((BtoS_ACK1=0) + (BtoS_ACK15=0));	#G5
assign sys_safe_err34 = ~(~controllable_BtoS_ACK1 | ~controllable_BtoS_ACK15);

// G((StoB_REQ2=0 * X(StoB_REQ2=1)) -> X(BtoS_ACK2=0));	#G2
assign sys_safe_err35 = ~((~(~reg_i_StoB_REQ2 & i_StoB_REQ2 )) | ~controllable_BtoS_ACK2);

// G((BtoS_ACK2=0 * StoB_REQ2=0) -> X(BtoS_ACK2=0));	#G2
assign sys_safe_err36 = ~((~(~reg_controllable_BtoS_ACK2 & ~reg_i_StoB_REQ2 )) | ~controllable_BtoS_ACK2);

// G((BtoS_ACK2=1 * StoB_REQ2=1) -> X(BtoS_ACK2=1));	#G4
assign sys_safe_err37 = ~((~(reg_controllable_BtoS_ACK2 & reg_i_StoB_REQ2 )) | controllable_BtoS_ACK2);

// G((BtoS_ACK2=0) + (BtoS_ACK3=0));	#G5
assign sys_safe_err38 = ~(~controllable_BtoS_ACK2 | ~controllable_BtoS_ACK3);

// G((BtoS_ACK2=0) + (BtoS_ACK4=0));	#G5
assign sys_safe_err39 = ~(~controllable_BtoS_ACK2 | ~controllable_BtoS_ACK4);

// G((BtoS_ACK2=0) + (BtoS_ACK5=0));	#G5
assign sys_safe_err40 = ~(~controllable_BtoS_ACK2 | ~controllable_BtoS_ACK5);

// G((BtoS_ACK2=0) + (BtoS_ACK6=0));	#G5
assign sys_safe_err41 = ~(~controllable_BtoS_ACK2 | ~controllable_BtoS_ACK6);

// G((BtoS_ACK2=0) + (BtoS_ACK7=0));	#G5
assign sys_safe_err42 = ~(~controllable_BtoS_ACK2 | ~controllable_BtoS_ACK7);

// G((BtoS_ACK2=0) + (BtoS_ACK8=0));	#G5
assign sys_safe_err43 = ~(~controllable_BtoS_ACK2 | ~controllable_BtoS_ACK8);

// G((BtoS_ACK2=0) + (BtoS_ACK9=0));	#G5
assign sys_safe_err44 = ~(~controllable_BtoS_ACK2 | ~controllable_BtoS_ACK9);

// G((BtoS_ACK2=0) + (BtoS_ACK10=0));	#G5
assign sys_safe_err45 = ~(~controllable_BtoS_ACK2 | ~controllable_BtoS_ACK10);

// G((BtoS_ACK2=0) + (BtoS_ACK11=0));	#G5
assign sys_safe_err46 = ~(~controllable_BtoS_ACK2 | ~controllable_BtoS_ACK11);

// G((BtoS_ACK2=0) + (BtoS_ACK12=0));	#G5
assign sys_safe_err47 = ~(~controllable_BtoS_ACK2 | ~controllable_BtoS_ACK12);

// G((BtoS_ACK2=0) + (BtoS_ACK13=0));	#G5
assign sys_safe_err48 = ~(~controllable_BtoS_ACK2 | ~controllable_BtoS_ACK13);

// G((BtoS_ACK2=0) + (BtoS_ACK14=0));	#G5
assign sys_safe_err49 = ~(~controllable_BtoS_ACK2 | ~controllable_BtoS_ACK14);

// G((BtoS_ACK2=0) + (BtoS_ACK15=0));	#G5
assign sys_safe_err50 = ~(~controllable_BtoS_ACK2 | ~controllable_BtoS_ACK15);

// G((StoB_REQ3=0 * X(StoB_REQ3=1)) -> X(BtoS_ACK3=0));	#G2
assign sys_safe_err51 = ~((~(~reg_i_StoB_REQ3 & i_StoB_REQ3 )) | ~controllable_BtoS_ACK3);

// G((BtoS_ACK3=0 * StoB_REQ3=0) -> X(BtoS_ACK3=0));	#G2
assign sys_safe_err52 = ~((~(~reg_controllable_BtoS_ACK3 & ~reg_i_StoB_REQ3 )) | ~controllable_BtoS_ACK3);

// G((BtoS_ACK3=1 * StoB_REQ3=1) -> X(BtoS_ACK3=1));	#G4
assign sys_safe_err53 = ~((~(reg_controllable_BtoS_ACK3 & reg_i_StoB_REQ3 )) | controllable_BtoS_ACK3);

// G((BtoS_ACK3=0) + (BtoS_ACK4=0));	#G5
assign sys_safe_err54 = ~(~controllable_BtoS_ACK3 | ~controllable_BtoS_ACK4);

// G((BtoS_ACK3=0) + (BtoS_ACK5=0));	#G5
assign sys_safe_err55 = ~(~controllable_BtoS_ACK3 | ~controllable_BtoS_ACK5);

// G((BtoS_ACK3=0) + (BtoS_ACK6=0));	#G5
assign sys_safe_err56 = ~(~controllable_BtoS_ACK3 | ~controllable_BtoS_ACK6);

// G((BtoS_ACK3=0) + (BtoS_ACK7=0));	#G5
assign sys_safe_err57 = ~(~controllable_BtoS_ACK3 | ~controllable_BtoS_ACK7);

// G((BtoS_ACK3=0) + (BtoS_ACK8=0));	#G5
assign sys_safe_err58 = ~(~controllable_BtoS_ACK3 | ~controllable_BtoS_ACK8);

// G((BtoS_ACK3=0) + (BtoS_ACK9=0));	#G5
assign sys_safe_err59 = ~(~controllable_BtoS_ACK3 | ~controllable_BtoS_ACK9);

// G((BtoS_ACK3=0) + (BtoS_ACK10=0));	#G5
assign sys_safe_err60 = ~(~controllable_BtoS_ACK3 | ~controllable_BtoS_ACK10);

// G((BtoS_ACK3=0) + (BtoS_ACK11=0));	#G5
assign sys_safe_err61 = ~(~controllable_BtoS_ACK3 | ~controllable_BtoS_ACK11);

// G((BtoS_ACK3=0) + (BtoS_ACK12=0));	#G5
assign sys_safe_err62 = ~(~controllable_BtoS_ACK3 | ~controllable_BtoS_ACK12);

// G((BtoS_ACK3=0) + (BtoS_ACK13=0));	#G5
assign sys_safe_err63 = ~(~controllable_BtoS_ACK3 | ~controllable_BtoS_ACK13);

// G((BtoS_ACK3=0) + (BtoS_ACK14=0));	#G5
assign sys_safe_err64 = ~(~controllable_BtoS_ACK3 | ~controllable_BtoS_ACK14);

// G((BtoS_ACK3=0) + (BtoS_ACK15=0));	#G5
assign sys_safe_err65 = ~(~controllable_BtoS_ACK3 | ~controllable_BtoS_ACK15);

// G((StoB_REQ4=0 * X(StoB_REQ4=1)) -> X(BtoS_ACK4=0));	#G2
assign sys_safe_err66 = ~((~(~reg_i_StoB_REQ4 & i_StoB_REQ4 )) | ~controllable_BtoS_ACK4);

// G((BtoS_ACK4=0 * StoB_REQ4=0) -> X(BtoS_ACK4=0));	#G2
assign sys_safe_err67 = ~((~(~reg_controllable_BtoS_ACK4 & ~reg_i_StoB_REQ4 )) | ~controllable_BtoS_ACK4);

// G((BtoS_ACK4=1 * StoB_REQ4=1) -> X(BtoS_ACK4=1));	#G4
assign sys_safe_err68 = ~((~(reg_controllable_BtoS_ACK4 & reg_i_StoB_REQ4 )) | controllable_BtoS_ACK4);

// G((BtoS_ACK4=0) + (BtoS_ACK5=0));	#G5
assign sys_safe_err69 = ~(~controllable_BtoS_ACK4 | ~controllable_BtoS_ACK5);

// G((BtoS_ACK4=0) + (BtoS_ACK6=0));	#G5
assign sys_safe_err70 = ~(~controllable_BtoS_ACK4 | ~controllable_BtoS_ACK6);

// G((BtoS_ACK4=0) + (BtoS_ACK7=0));	#G5
assign sys_safe_err71 = ~(~controllable_BtoS_ACK4 | ~controllable_BtoS_ACK7);

// G((BtoS_ACK4=0) + (BtoS_ACK8=0));	#G5
assign sys_safe_err72 = ~(~controllable_BtoS_ACK4 | ~controllable_BtoS_ACK8);

// G((BtoS_ACK4=0) + (BtoS_ACK9=0));	#G5
assign sys_safe_err73 = ~(~controllable_BtoS_ACK4 | ~controllable_BtoS_ACK9);

// G((BtoS_ACK4=0) + (BtoS_ACK10=0));	#G5
assign sys_safe_err74 = ~(~controllable_BtoS_ACK4 | ~controllable_BtoS_ACK10);

// G((BtoS_ACK4=0) + (BtoS_ACK11=0));	#G5
assign sys_safe_err75 = ~(~controllable_BtoS_ACK4 | ~controllable_BtoS_ACK11);

// G((BtoS_ACK4=0) + (BtoS_ACK12=0));	#G5
assign sys_safe_err76 = ~(~controllable_BtoS_ACK4 | ~controllable_BtoS_ACK12);

// G((BtoS_ACK4=0) + (BtoS_ACK13=0));	#G5
assign sys_safe_err77 = ~(~controllable_BtoS_ACK4 | ~controllable_BtoS_ACK13);

// G((BtoS_ACK4=0) + (BtoS_ACK14=0));	#G5
assign sys_safe_err78 = ~(~controllable_BtoS_ACK4 | ~controllable_BtoS_ACK14);

// G((BtoS_ACK4=0) + (BtoS_ACK15=0));	#G5
assign sys_safe_err79 = ~(~controllable_BtoS_ACK4 | ~controllable_BtoS_ACK15);

// G((StoB_REQ5=0 * X(StoB_REQ5=1)) -> X(BtoS_ACK5=0));	#G2
assign sys_safe_err80 = ~((~(~reg_i_StoB_REQ5 & i_StoB_REQ5 )) | ~controllable_BtoS_ACK5);

// G((BtoS_ACK5=0 * StoB_REQ5=0) -> X(BtoS_ACK5=0));	#G2
assign sys_safe_err81 = ~((~(~reg_controllable_BtoS_ACK5 & ~reg_i_StoB_REQ5 )) | ~controllable_BtoS_ACK5);

// G((BtoS_ACK5=1 * StoB_REQ5=1) -> X(BtoS_ACK5=1));	#G4
assign sys_safe_err82 = ~((~(reg_controllable_BtoS_ACK5 & reg_i_StoB_REQ5 )) | controllable_BtoS_ACK5);

// G((BtoS_ACK5=0) + (BtoS_ACK6=0));	#G5
assign sys_safe_err83 = ~(~controllable_BtoS_ACK5 | ~controllable_BtoS_ACK6);

// G((BtoS_ACK5=0) + (BtoS_ACK7=0));	#G5
assign sys_safe_err84 = ~(~controllable_BtoS_ACK5 | ~controllable_BtoS_ACK7);

// G((BtoS_ACK5=0) + (BtoS_ACK8=0));	#G5
assign sys_safe_err85 = ~(~controllable_BtoS_ACK5 | ~controllable_BtoS_ACK8);

// G((BtoS_ACK5=0) + (BtoS_ACK9=0));	#G5
assign sys_safe_err86 = ~(~controllable_BtoS_ACK5 | ~controllable_BtoS_ACK9);

// G((BtoS_ACK5=0) + (BtoS_ACK10=0));	#G5
assign sys_safe_err87 = ~(~controllable_BtoS_ACK5 | ~controllable_BtoS_ACK10);

// G((BtoS_ACK5=0) + (BtoS_ACK11=0));	#G5
assign sys_safe_err88 = ~(~controllable_BtoS_ACK5 | ~controllable_BtoS_ACK11);

// G((BtoS_ACK5=0) + (BtoS_ACK12=0));	#G5
assign sys_safe_err89 = ~(~controllable_BtoS_ACK5 | ~controllable_BtoS_ACK12);

// G((BtoS_ACK5=0) + (BtoS_ACK13=0));	#G5
assign sys_safe_err90 = ~(~controllable_BtoS_ACK5 | ~controllable_BtoS_ACK13);

// G((BtoS_ACK5=0) + (BtoS_ACK14=0));	#G5
assign sys_safe_err91 = ~(~controllable_BtoS_ACK5 | ~controllable_BtoS_ACK14);

// G((BtoS_ACK5=0) + (BtoS_ACK15=0));	#G5
assign sys_safe_err92 = ~(~controllable_BtoS_ACK5 | ~controllable_BtoS_ACK15);

// G((StoB_REQ6=0 * X(StoB_REQ6=1)) -> X(BtoS_ACK6=0));	#G2
assign sys_safe_err93 = ~((~(~reg_i_StoB_REQ6 & i_StoB_REQ6 )) | ~controllable_BtoS_ACK6);

// G((BtoS_ACK6=0 * StoB_REQ6=0) -> X(BtoS_ACK6=0));	#G2
assign sys_safe_err94 = ~((~(~reg_controllable_BtoS_ACK6 & ~reg_i_StoB_REQ6 )) | ~controllable_BtoS_ACK6);

// G((BtoS_ACK6=1 * StoB_REQ6=1) -> X(BtoS_ACK6=1));	#G4
assign sys_safe_err95 = ~((~(reg_controllable_BtoS_ACK6 & reg_i_StoB_REQ6 )) | controllable_BtoS_ACK6);

// G((BtoS_ACK6=0) + (BtoS_ACK7=0));	#G5
assign sys_safe_err96 = ~(~controllable_BtoS_ACK6 | ~controllable_BtoS_ACK7);

// G((BtoS_ACK6=0) + (BtoS_ACK8=0));	#G5
assign sys_safe_err97 = ~(~controllable_BtoS_ACK6 | ~controllable_BtoS_ACK8);

// G((BtoS_ACK6=0) + (BtoS_ACK9=0));	#G5
assign sys_safe_err98 = ~(~controllable_BtoS_ACK6 | ~controllable_BtoS_ACK9);

// G((BtoS_ACK6=0) + (BtoS_ACK10=0));	#G5
assign sys_safe_err99 = ~(~controllable_BtoS_ACK6 | ~controllable_BtoS_ACK10);

// G((BtoS_ACK6=0) + (BtoS_ACK11=0));	#G5
assign sys_safe_err100 = ~(~controllable_BtoS_ACK6 | ~controllable_BtoS_ACK11);

// G((BtoS_ACK6=0) + (BtoS_ACK12=0));	#G5
assign sys_safe_err101 = ~(~controllable_BtoS_ACK6 | ~controllable_BtoS_ACK12);

// G((BtoS_ACK6=0) + (BtoS_ACK13=0));	#G5
assign sys_safe_err102 = ~(~controllable_BtoS_ACK6 | ~controllable_BtoS_ACK13);

// G((BtoS_ACK6=0) + (BtoS_ACK14=0));	#G5
assign sys_safe_err103 = ~(~controllable_BtoS_ACK6 | ~controllable_BtoS_ACK14);

// G((BtoS_ACK6=0) + (BtoS_ACK15=0));	#G5
assign sys_safe_err104 = ~(~controllable_BtoS_ACK6 | ~controllable_BtoS_ACK15);

// G((StoB_REQ7=0 * X(StoB_REQ7=1)) -> X(BtoS_ACK7=0));	#G2
assign sys_safe_err105 = ~((~(~reg_i_StoB_REQ7 & i_StoB_REQ7 )) | ~controllable_BtoS_ACK7);

// G((BtoS_ACK7=0 * StoB_REQ7=0) -> X(BtoS_ACK7=0));	#G2
assign sys_safe_err106 = ~((~(~reg_controllable_BtoS_ACK7 & ~reg_i_StoB_REQ7 )) | ~controllable_BtoS_ACK7);

// G((BtoS_ACK7=1 * StoB_REQ7=1) -> X(BtoS_ACK7=1));	#G4
assign sys_safe_err107 = ~((~(reg_controllable_BtoS_ACK7 & reg_i_StoB_REQ7 )) | controllable_BtoS_ACK7);

// G((BtoS_ACK7=0) + (BtoS_ACK8=0));	#G5
assign sys_safe_err108 = ~(~controllable_BtoS_ACK7 | ~controllable_BtoS_ACK8);

// G((BtoS_ACK7=0) + (BtoS_ACK9=0));	#G5
assign sys_safe_err109 = ~(~controllable_BtoS_ACK7 | ~controllable_BtoS_ACK9);

// G((BtoS_ACK7=0) + (BtoS_ACK10=0));	#G5
assign sys_safe_err110 = ~(~controllable_BtoS_ACK7 | ~controllable_BtoS_ACK10);

// G((BtoS_ACK7=0) + (BtoS_ACK11=0));	#G5
assign sys_safe_err111 = ~(~controllable_BtoS_ACK7 | ~controllable_BtoS_ACK11);

// G((BtoS_ACK7=0) + (BtoS_ACK12=0));	#G5
assign sys_safe_err112 = ~(~controllable_BtoS_ACK7 | ~controllable_BtoS_ACK12);

// G((BtoS_ACK7=0) + (BtoS_ACK13=0));	#G5
assign sys_safe_err113 = ~(~controllable_BtoS_ACK7 | ~controllable_BtoS_ACK13);

// G((BtoS_ACK7=0) + (BtoS_ACK14=0));	#G5
assign sys_safe_err114 = ~(~controllable_BtoS_ACK7 | ~controllable_BtoS_ACK14);

// G((BtoS_ACK7=0) + (BtoS_ACK15=0));	#G5
assign sys_safe_err115 = ~(~controllable_BtoS_ACK7 | ~controllable_BtoS_ACK15);

// G((StoB_REQ8=0 * X(StoB_REQ8=1)) -> X(BtoS_ACK8=0));	#G2
assign sys_safe_err116 = ~((~(~reg_i_StoB_REQ8 & i_StoB_REQ8 )) | ~controllable_BtoS_ACK8);

// G((BtoS_ACK8=0 * StoB_REQ8=0) -> X(BtoS_ACK8=0));	#G2
assign sys_safe_err117 = ~((~(~reg_controllable_BtoS_ACK8 & ~reg_i_StoB_REQ8 )) | ~controllable_BtoS_ACK8);

// G((BtoS_ACK8=1 * StoB_REQ8=1) -> X(BtoS_ACK8=1));	#G4
assign sys_safe_err118 = ~((~(reg_controllable_BtoS_ACK8 & reg_i_StoB_REQ8 )) | controllable_BtoS_ACK8);

// G((BtoS_ACK8=0) + (BtoS_ACK9=0));	#G5
assign sys_safe_err119 = ~(~controllable_BtoS_ACK8 | ~controllable_BtoS_ACK9);

// G((BtoS_ACK8=0) + (BtoS_ACK10=0));	#G5
assign sys_safe_err120 = ~(~controllable_BtoS_ACK8 | ~controllable_BtoS_ACK10);

// G((BtoS_ACK8=0) + (BtoS_ACK11=0));	#G5
assign sys_safe_err121 = ~(~controllable_BtoS_ACK8 | ~controllable_BtoS_ACK11);

// G((BtoS_ACK8=0) + (BtoS_ACK12=0));	#G5
assign sys_safe_err122 = ~(~controllable_BtoS_ACK8 | ~controllable_BtoS_ACK12);

// G((BtoS_ACK8=0) + (BtoS_ACK13=0));	#G5
assign sys_safe_err123 = ~(~controllable_BtoS_ACK8 | ~controllable_BtoS_ACK13);

// G((BtoS_ACK8=0) + (BtoS_ACK14=0));	#G5
assign sys_safe_err124 = ~(~controllable_BtoS_ACK8 | ~controllable_BtoS_ACK14);

// G((BtoS_ACK8=0) + (BtoS_ACK15=0));	#G5
assign sys_safe_err125 = ~(~controllable_BtoS_ACK8 | ~controllable_BtoS_ACK15);

// G((StoB_REQ9=0 * X(StoB_REQ9=1)) -> X(BtoS_ACK9=0));	#G2
assign sys_safe_err126 = ~((~(~reg_i_StoB_REQ9 & i_StoB_REQ9 )) | ~controllable_BtoS_ACK9);

// G((BtoS_ACK9=0 * StoB_REQ9=0) -> X(BtoS_ACK9=0));	#G2
assign sys_safe_err127 = ~((~(~reg_controllable_BtoS_ACK9 & ~reg_i_StoB_REQ9 )) | ~controllable_BtoS_ACK9);

// G((BtoS_ACK9=1 * StoB_REQ9=1) -> X(BtoS_ACK9=1));	#G4
assign sys_safe_err128 = ~((~(reg_controllable_BtoS_ACK9 & reg_i_StoB_REQ9 )) | controllable_BtoS_ACK9);

// G((BtoS_ACK9=0) + (BtoS_ACK10=0));	#G5
assign sys_safe_err129 = ~(~controllable_BtoS_ACK9 | ~controllable_BtoS_ACK10);

// G((BtoS_ACK9=0) + (BtoS_ACK11=0));	#G5
assign sys_safe_err130 = ~(~controllable_BtoS_ACK9 | ~controllable_BtoS_ACK11);

// G((BtoS_ACK9=0) + (BtoS_ACK12=0));	#G5
assign sys_safe_err131 = ~(~controllable_BtoS_ACK9 | ~controllable_BtoS_ACK12);

// G((BtoS_ACK9=0) + (BtoS_ACK13=0));	#G5
assign sys_safe_err132 = ~(~controllable_BtoS_ACK9 | ~controllable_BtoS_ACK13);

// G((BtoS_ACK9=0) + (BtoS_ACK14=0));	#G5
assign sys_safe_err133 = ~(~controllable_BtoS_ACK9 | ~controllable_BtoS_ACK14);

// G((BtoS_ACK9=0) + (BtoS_ACK15=0));	#G5
assign sys_safe_err134 = ~(~controllable_BtoS_ACK9 | ~controllable_BtoS_ACK15);

// G((StoB_REQ10=0 * X(StoB_REQ10=1)) -> X(BtoS_ACK10=0));	#G2
assign sys_safe_err135 = ~((~(~reg_i_StoB_REQ10 & i_StoB_REQ10 )) | ~controllable_BtoS_ACK10);

// G((BtoS_ACK10=0 * StoB_REQ10=0) -> X(BtoS_ACK10=0));	#G2
assign sys_safe_err136 = ~((~(~reg_controllable_BtoS_ACK10 & ~reg_i_StoB_REQ10 )) | ~controllable_BtoS_ACK10);

// G((BtoS_ACK10=1 * StoB_REQ10=1) -> X(BtoS_ACK10=1));	#G4
assign sys_safe_err137 = ~((~(reg_controllable_BtoS_ACK10 & reg_i_StoB_REQ10 )) | controllable_BtoS_ACK10);

// G((BtoS_ACK10=0) + (BtoS_ACK11=0));	#G5
assign sys_safe_err138 = ~(~controllable_BtoS_ACK10 | ~controllable_BtoS_ACK11);

// G((BtoS_ACK10=0) + (BtoS_ACK12=0));	#G5
assign sys_safe_err139 = ~(~controllable_BtoS_ACK10 | ~controllable_BtoS_ACK12);

// G((BtoS_ACK10=0) + (BtoS_ACK13=0));	#G5
assign sys_safe_err140 = ~(~controllable_BtoS_ACK10 | ~controllable_BtoS_ACK13);

// G((BtoS_ACK10=0) + (BtoS_ACK14=0));	#G5
assign sys_safe_err141 = ~(~controllable_BtoS_ACK10 | ~controllable_BtoS_ACK14);

// G((BtoS_ACK10=0) + (BtoS_ACK15=0));	#G5
assign sys_safe_err142 = ~(~controllable_BtoS_ACK10 | ~controllable_BtoS_ACK15);

// G((StoB_REQ11=0 * X(StoB_REQ11=1)) -> X(BtoS_ACK11=0));	#G2
assign sys_safe_err143 = ~((~(~reg_i_StoB_REQ11 & i_StoB_REQ11 )) | ~controllable_BtoS_ACK11);

// G((BtoS_ACK11=0 * StoB_REQ11=0) -> X(BtoS_ACK11=0));	#G2
assign sys_safe_err144 = ~((~(~reg_controllable_BtoS_ACK11 & ~reg_i_StoB_REQ11 )) | ~controllable_BtoS_ACK11);

// G((BtoS_ACK11=1 * StoB_REQ11=1) -> X(BtoS_ACK11=1));	#G4
assign sys_safe_err145 = ~((~(reg_controllable_BtoS_ACK11 & reg_i_StoB_REQ11 )) | controllable_BtoS_ACK11);

// G((BtoS_ACK11=0) + (BtoS_ACK12=0));	#G5
assign sys_safe_err146 = ~(~controllable_BtoS_ACK11 | ~controllable_BtoS_ACK12);

// G((BtoS_ACK11=0) + (BtoS_ACK13=0));	#G5
assign sys_safe_err147 = ~(~controllable_BtoS_ACK11 | ~controllable_BtoS_ACK13);

// G((BtoS_ACK11=0) + (BtoS_ACK14=0));	#G5
assign sys_safe_err148 = ~(~controllable_BtoS_ACK11 | ~controllable_BtoS_ACK14);

// G((BtoS_ACK11=0) + (BtoS_ACK15=0));	#G5
assign sys_safe_err149 = ~(~controllable_BtoS_ACK11 | ~controllable_BtoS_ACK15);

// G((StoB_REQ12=0 * X(StoB_REQ12=1)) -> X(BtoS_ACK12=0));	#G2
assign sys_safe_err150 = ~((~(~reg_i_StoB_REQ12 & i_StoB_REQ12 )) | ~controllable_BtoS_ACK12);

// G((BtoS_ACK12=0 * StoB_REQ12=0) -> X(BtoS_ACK12=0));	#G2
assign sys_safe_err151 = ~((~(~reg_controllable_BtoS_ACK12 & ~reg_i_StoB_REQ12 )) | ~controllable_BtoS_ACK12);

// G((BtoS_ACK12=1 * StoB_REQ12=1) -> X(BtoS_ACK12=1));	#G4
assign sys_safe_err152 = ~((~(reg_controllable_BtoS_ACK12 & reg_i_StoB_REQ12 )) | controllable_BtoS_ACK12);

// G((BtoS_ACK12=0) + (BtoS_ACK13=0));	#G5
assign sys_safe_err153 = ~(~controllable_BtoS_ACK12 | ~controllable_BtoS_ACK13);

// G((BtoS_ACK12=0) + (BtoS_ACK14=0));	#G5
assign sys_safe_err154 = ~(~controllable_BtoS_ACK12 | ~controllable_BtoS_ACK14);

// G((BtoS_ACK12=0) + (BtoS_ACK15=0));	#G5
assign sys_safe_err155 = ~(~controllable_BtoS_ACK12 | ~controllable_BtoS_ACK15);

// G((StoB_REQ13=0 * X(StoB_REQ13=1)) -> X(BtoS_ACK13=0));	#G2
assign sys_safe_err156 = ~((~(~reg_i_StoB_REQ13 & i_StoB_REQ13 )) | ~controllable_BtoS_ACK13);

// G((BtoS_ACK13=0 * StoB_REQ13=0) -> X(BtoS_ACK13=0));	#G2
assign sys_safe_err157 = ~((~(~reg_controllable_BtoS_ACK13 & ~reg_i_StoB_REQ13 )) | ~controllable_BtoS_ACK13);

// G((BtoS_ACK13=1 * StoB_REQ13=1) -> X(BtoS_ACK13=1));	#G4
assign sys_safe_err158 = ~((~(reg_controllable_BtoS_ACK13 & reg_i_StoB_REQ13 )) | controllable_BtoS_ACK13);

// G((BtoS_ACK13=0) + (BtoS_ACK14=0));	#G5
assign sys_safe_err159 = ~(~controllable_BtoS_ACK13 | ~controllable_BtoS_ACK14);

// G((BtoS_ACK13=0) + (BtoS_ACK15=0));	#G5
assign sys_safe_err160 = ~(~controllable_BtoS_ACK13 | ~controllable_BtoS_ACK15);

// G((StoB_REQ14=0 * X(StoB_REQ14=1)) -> X(BtoS_ACK14=0));	#G2
assign sys_safe_err161 = ~((~(~reg_i_StoB_REQ14 & i_StoB_REQ14 )) | ~controllable_BtoS_ACK14);

// G((BtoS_ACK14=0 * StoB_REQ14=0) -> X(BtoS_ACK14=0));	#G2
assign sys_safe_err162 = ~((~(~reg_controllable_BtoS_ACK14 & ~reg_i_StoB_REQ14 )) | ~controllable_BtoS_ACK14);

// G((BtoS_ACK14=1 * StoB_REQ14=1) -> X(BtoS_ACK14=1));	#G4
assign sys_safe_err163 = ~((~(reg_controllable_BtoS_ACK14 & reg_i_StoB_REQ14 )) | controllable_BtoS_ACK14);

// G((BtoS_ACK14=0) + (BtoS_ACK15=0));	#G5
assign sys_safe_err164 = ~(~controllable_BtoS_ACK14 | ~controllable_BtoS_ACK15);

// G((StoB_REQ15=0 * X(StoB_REQ15=1)) -> X(BtoS_ACK15=0));	#G2
assign sys_safe_err165 = ~((~(~reg_i_StoB_REQ15 & i_StoB_REQ15 )) | ~controllable_BtoS_ACK15);

// G((BtoS_ACK15=0 * StoB_REQ15=0) -> X(BtoS_ACK15=0));	#G2
assign sys_safe_err166 = ~((~(~reg_controllable_BtoS_ACK15 & ~reg_i_StoB_REQ15 )) | ~controllable_BtoS_ACK15);

// G((BtoS_ACK15=1 * StoB_REQ15=1) -> X(BtoS_ACK15=1));	#G4
assign sys_safe_err167 = ~((~(reg_controllable_BtoS_ACK15 & reg_i_StoB_REQ15 )) | controllable_BtoS_ACK15);

// G((BtoR_REQ0=1 * RtoB_ACK0=0) -> X(BtoR_REQ0=1));	#G6
assign sys_safe_err168 = ~((~(reg_controllable_BtoR_REQ0 & ~reg_i_RtoB_ACK0)) | controllable_BtoR_REQ0);

// G((BtoR_REQ0=0) + (BtoR_REQ1=0));	#G7
assign sys_safe_err169 = ~(~controllable_BtoR_REQ0 | ~controllable_BtoR_REQ1);

// G(RtoB_ACK0=1 -> X(BtoR_REQ0=0));	#G8
assign sys_safe_err170 = ~(~reg_i_RtoB_ACK0 | ~controllable_BtoR_REQ0);

// G((BtoR_REQ1=1 * RtoB_ACK1=0) -> X(BtoR_REQ1=1));	#G6
assign sys_safe_err171 = ~((~(reg_controllable_BtoR_REQ1 & ~reg_i_RtoB_ACK1)) | controllable_BtoR_REQ1);

// G(RtoB_ACK1=1 -> X(BtoR_REQ1=0));	#G8
assign sys_safe_err172 = ~(~reg_i_RtoB_ACK1 | ~controllable_BtoR_REQ1);

// G((BtoR_REQ0=1 * BtoR_REQ1=1) -> FALSE);	#G7
assign sys_safe_err173 = reg_controllable_BtoR_REQ0 & reg_controllable_BtoR_REQ1;

// G((stateG7_1=0 * stateG7_0=1 * BtoR_REQ0=1) -> FALSE);	#G7
assign sys_safe_err174 = reg_nstateG7_1 & reg_stateG7_0 & reg_controllable_BtoR_REQ0;

// G((stateG7_1=1 * stateG7_0=1 * BtoR_REQ1=1) -> FALSE);	#G7
assign sys_safe_err175 = ~reg_nstateG7_1 & reg_stateG7_0 & reg_controllable_BtoR_REQ1;

// G((BtoS_ACK0=0 * X(BtoS_ACK0=1)) -> X(ENQ=1));	#G9
assign sys_safe_err176 = ~(~((~reg_controllable_BtoS_ACK0 & controllable_BtoS_ACK0)) | controllable_ENQ);

// G((BtoS_ACK0=0 * X(BtoS_ACK0=1))  -> X(SLC0=0 * SLC1=0 * SLC2=0 * SLC3=0));	#G9
assign sys_safe_err177 = ~(~((~reg_controllable_BtoS_ACK0 & controllable_BtoS_ACK0)) | (~controllable_SLC0 & ~controllable_SLC1 & ~controllable_SLC2 & ~controllable_SLC3));

// G((BtoS_ACK1=0 * X(BtoS_ACK1=1)) -> X(ENQ=1));	#G9
assign sys_safe_err178 = ~(~((~reg_controllable_BtoS_ACK1 & controllable_BtoS_ACK1)) | controllable_ENQ);

// G((BtoS_ACK1=0 * X(BtoS_ACK1=1)) <-> X(SLC0=1 * SLC1=0 * SLC2=0 * SLC3=0));	#G9
assign sys_safe_err179 = ~(((~reg_controllable_BtoS_ACK1 & controllable_BtoS_ACK1)) ^~ (controllable_SLC0 & ~controllable_SLC1 & ~controllable_SLC2 & ~controllable_SLC3));

// G((BtoS_ACK2=0 * X(BtoS_ACK2=1)) -> X(ENQ=1));	#G9
assign sys_safe_err180 = ~(~((~reg_controllable_BtoS_ACK2 & controllable_BtoS_ACK2)) | controllable_ENQ);

// G((BtoS_ACK2=0 * X(BtoS_ACK2=1)) <-> X(SLC0=0 * SLC1=1 * SLC2=0 * SLC3=0));	#G9
assign sys_safe_err181 = ~(((~reg_controllable_BtoS_ACK2 & controllable_BtoS_ACK2)) ^~ (~controllable_SLC0 & controllable_SLC1 & ~controllable_SLC2 & ~controllable_SLC3));

// G((BtoS_ACK3=0 * X(BtoS_ACK3=1)) -> X(ENQ=1));	#G9
assign sys_safe_err182 = ~(~((~reg_controllable_BtoS_ACK3 & controllable_BtoS_ACK3)) | controllable_ENQ);

// G((BtoS_ACK3=0 * X(BtoS_ACK3=1)) <-> X(SLC0=1 * SLC1=1 * SLC2=0 * SLC3=0));	#G9
assign sys_safe_err183 = ~(((~reg_controllable_BtoS_ACK3 & controllable_BtoS_ACK3)) ^~ (controllable_SLC0 & controllable_SLC1 & ~controllable_SLC2 & ~controllable_SLC3));

// G((BtoS_ACK4=0 * X(BtoS_ACK4=1)) -> X(ENQ=1));	#G9
assign sys_safe_err184 = ~(~((~reg_controllable_BtoS_ACK4 & controllable_BtoS_ACK4)) | controllable_ENQ);

// G((BtoS_ACK4=0 * X(BtoS_ACK4=1)) <-> X(SLC0=0 * SLC1=0 * SLC2=1 * SLC3=0));	#G9
assign sys_safe_err185 = ~(((~reg_controllable_BtoS_ACK4 & controllable_BtoS_ACK4)) ^~ (~controllable_SLC0 & ~controllable_SLC1 & controllable_SLC2 & ~controllable_SLC3));

// G((BtoS_ACK5=0 * X(BtoS_ACK5=1)) -> X(ENQ=1));	#G9
assign sys_safe_err186 = ~(~((~reg_controllable_BtoS_ACK5 & controllable_BtoS_ACK5)) | controllable_ENQ);

// G((BtoS_ACK5=0 * X(BtoS_ACK5=1)) <-> X(SLC0=1 * SLC1=0 * SLC2=1 * SLC3=0));	#G9
assign sys_safe_err187 = ~(((~reg_controllable_BtoS_ACK5 & controllable_BtoS_ACK5)) ^~ (controllable_SLC0 & ~controllable_SLC1 & controllable_SLC2 & ~controllable_SLC3));

// G((BtoS_ACK6=0 * X(BtoS_ACK6=1)) -> X(ENQ=1));	#G9
assign sys_safe_err188 = ~(~((~reg_controllable_BtoS_ACK6 & controllable_BtoS_ACK6)) | controllable_ENQ);

// G((BtoS_ACK6=0 * X(BtoS_ACK6=1)) <-> X(SLC0=0 * SLC1=1 * SLC2=1 * SLC3=0));	#G9
assign sys_safe_err189 = ~(((~reg_controllable_BtoS_ACK6 & controllable_BtoS_ACK6)) ^~ (~controllable_SLC0 & controllable_SLC1 & controllable_SLC2 & ~controllable_SLC3));

// G((BtoS_ACK7=0 * X(BtoS_ACK7=1)) -> X(ENQ=1));	#G9
assign sys_safe_err190 = ~(~((~reg_controllable_BtoS_ACK7 & controllable_BtoS_ACK7)) | controllable_ENQ);

// G((BtoS_ACK7=0 * X(BtoS_ACK7=1)) <-> X(SLC0=1 * SLC1=1 * SLC2=1 * SLC3=0));	#G9
assign sys_safe_err191 = ~(((~reg_controllable_BtoS_ACK7 & controllable_BtoS_ACK7)) ^~ (controllable_SLC0 & controllable_SLC1 & controllable_SLC2 & ~controllable_SLC3));

// G((BtoS_ACK8=0 * X(BtoS_ACK8=1)) -> X(ENQ=1));	#G9
assign sys_safe_err192 = ~(~((~reg_controllable_BtoS_ACK8 & controllable_BtoS_ACK8)) | controllable_ENQ);

// G((BtoS_ACK8=0 * X(BtoS_ACK8=1)) <-> X(SLC0=0 * SLC1=0 * SLC2=0 * SLC3=1));	#G9
assign sys_safe_err193 = ~(((~reg_controllable_BtoS_ACK8 & controllable_BtoS_ACK8)) ^~ (~controllable_SLC0 & ~controllable_SLC1 & ~controllable_SLC2 & controllable_SLC3));

// G((BtoS_ACK9=0 * X(BtoS_ACK9=1)) -> X(ENQ=1));	#G9
assign sys_safe_err194 = ~(~((~reg_controllable_BtoS_ACK9 & controllable_BtoS_ACK9)) | controllable_ENQ);

// G((BtoS_ACK9=0 * X(BtoS_ACK9=1)) <-> X(SLC0=1 * SLC1=0 * SLC2=0 * SLC3=1));	#G9
assign sys_safe_err195 = ~(((~reg_controllable_BtoS_ACK9 & controllable_BtoS_ACK9)) ^~ (controllable_SLC0 & ~controllable_SLC1 & ~controllable_SLC2 & controllable_SLC3));

// G((BtoS_ACK10=0 * X(BtoS_ACK10=1)) -> X(ENQ=1));	#G9
assign sys_safe_err196 = ~(~((~reg_controllable_BtoS_ACK10 & controllable_BtoS_ACK10)) | controllable_ENQ);

// G((BtoS_ACK10=0 * X(BtoS_ACK10=1)) <-> X(SLC0=0 * SLC1=1 * SLC2=0 * SLC3=1));	#G9
assign sys_safe_err197 = ~(((~reg_controllable_BtoS_ACK10 & controllable_BtoS_ACK10)) ^~ (~controllable_SLC0 & controllable_SLC1 & ~controllable_SLC2 & controllable_SLC3));

// G((BtoS_ACK11=0 * X(BtoS_ACK11=1)) -> X(ENQ=1));	#G9
assign sys_safe_err198 = ~(~((~reg_controllable_BtoS_ACK11 & controllable_BtoS_ACK11)) | controllable_ENQ);

// G((BtoS_ACK11=0 * X(BtoS_ACK11=1)) <-> X(SLC0=1 * SLC1=1 * SLC2=0 * SLC3=1));	#G9
assign sys_safe_err199 = ~(((~reg_controllable_BtoS_ACK11 & controllable_BtoS_ACK11)) ^~ (controllable_SLC0 & controllable_SLC1 & ~controllable_SLC2 & controllable_SLC3));

// G((BtoS_ACK12=0 * X(BtoS_ACK12=1)) -> X(ENQ=1));	#G9
assign sys_safe_err200 = ~(~((~reg_controllable_BtoS_ACK12 & controllable_BtoS_ACK12)) | controllable_ENQ);

// G((BtoS_ACK12=0 * X(BtoS_ACK12=1)) <-> X(SLC0=0 * SLC1=0 * SLC2=1 * SLC3=1));	#G9
assign sys_safe_err201 = ~(((~reg_controllable_BtoS_ACK12 & controllable_BtoS_ACK12)) ^~ (~controllable_SLC0 & ~controllable_SLC1 & controllable_SLC2 & controllable_SLC3));

// G((BtoS_ACK13=0 * X(BtoS_ACK13=1)) -> X(ENQ=1));	#G9
assign sys_safe_err202 = ~(~((~reg_controllable_BtoS_ACK13 & controllable_BtoS_ACK13)) | controllable_ENQ);

// G((BtoS_ACK13=0 * X(BtoS_ACK13=1)) <-> X(SLC0=1 * SLC1=0 * SLC2=1 * SLC3=1));	#G9
assign sys_safe_err203 = ~(((~reg_controllable_BtoS_ACK13 & controllable_BtoS_ACK13)) ^~ (controllable_SLC0 & ~controllable_SLC1 & controllable_SLC2 & controllable_SLC3));

// G((BtoS_ACK14=0 * X(BtoS_ACK14=1)) -> X(ENQ=1));	#G9
assign sys_safe_err204 = ~(~((~reg_controllable_BtoS_ACK14 & controllable_BtoS_ACK14)) | controllable_ENQ);

// G((BtoS_ACK14=0 * X(BtoS_ACK14=1)) <-> X(SLC0=0 * SLC1=1 * SLC2=1 * SLC3=1));	#G9
assign sys_safe_err205 = ~(((~reg_controllable_BtoS_ACK14 & controllable_BtoS_ACK14)) ^~ (~controllable_SLC0 & controllable_SLC1 & controllable_SLC2 & controllable_SLC3));

// G((BtoS_ACK15=0 * X(BtoS_ACK15=1)) -> X(ENQ=1));	#G9
assign sys_safe_err206 = ~(~((~reg_controllable_BtoS_ACK15 & controllable_BtoS_ACK15)) | controllable_ENQ);

// G((BtoS_ACK15=0 * X(BtoS_ACK15=1)) <-> X(SLC0=1 * SLC1=1 * SLC2=1 * SLC3=1));	#G9
assign sys_safe_err207 = ~(((~reg_controllable_BtoS_ACK15 & controllable_BtoS_ACK15)) ^~ (controllable_SLC0 & controllable_SLC1 & controllable_SLC2 & controllable_SLC3));

// G(((BtoS_ACK0=1 + X(BtoS_ACK0=0)) * (BtoS_ACK1=1 + X(BtoS_ACK1=0)) * (BtoS_ACK2=1 + X(BtoS_ACK2=0)) * (BtoS_ACK3=1 + X(BtoS_ACK3=0)) * (BtoS_ACK4=1 + X(BtoS_ACK4=0)) * (BtoS_ACK5=1 + X(BtoS_ACK5=0)) * (BtoS_ACK6=1 + X(BtoS_ACK6=0)) * (BtoS_ACK7=1 + X(BtoS_ACK7=0)) * (BtoS_ACK8=1 + X(BtoS_ACK8=0)) * (BtoS_ACK9=1 + X(BtoS_ACK9=0)) * (BtoS_ACK10=1 + X(BtoS_ACK10=0)) * (BtoS_ACK11=1 + X(BtoS_ACK11=0)) * (BtoS_ACK12=1 + X(BtoS_ACK12=0)) * (BtoS_ACK13=1 + X(BtoS_ACK13=0)) * (BtoS_ACK14=1 + X(BtoS_ACK14=0)) * (BtoS_ACK15=1 + X(BtoS_ACK15=0))) -> X(ENQ=0));	#G9
assign sys_safe_err208 = ~(~((reg_controllable_BtoS_ACK0 | ~controllable_BtoS_ACK0) & (reg_controllable_BtoS_ACK1 | ~controllable_BtoS_ACK1) & (reg_controllable_BtoS_ACK2 | ~controllable_BtoS_ACK2) & (reg_controllable_BtoS_ACK3 | ~controllable_BtoS_ACK3) & (reg_controllable_BtoS_ACK4 | ~controllable_BtoS_ACK4) & (reg_controllable_BtoS_ACK5 | ~controllable_BtoS_ACK5) & (reg_controllable_BtoS_ACK6 | ~controllable_BtoS_ACK6) & (reg_controllable_BtoS_ACK7 | ~controllable_BtoS_ACK7) & (reg_controllable_BtoS_ACK8 | ~controllable_BtoS_ACK8) & (reg_controllable_BtoS_ACK9 | ~controllable_BtoS_ACK9) & (reg_controllable_BtoS_ACK10 | ~controllable_BtoS_ACK10) & (reg_controllable_BtoS_ACK11 | ~controllable_BtoS_ACK11) & (reg_controllable_BtoS_ACK12 | ~controllable_BtoS_ACK12) & (reg_controllable_BtoS_ACK13 | ~controllable_BtoS_ACK13) & (reg_controllable_BtoS_ACK14 | ~controllable_BtoS_ACK14) & (reg_controllable_BtoS_ACK15 | ~controllable_BtoS_ACK15)) | ~controllable_ENQ);

// G((RtoB_ACK0=1 * X(RtoB_ACK0=0)) -> X(DEQ=1));	#G10
assign sys_safe_err209 = ~(~(reg_i_RtoB_ACK0 & ~i_RtoB_ACK0) | controllable_DEQ);

// G((RtoB_ACK1=1 * X(RtoB_ACK1=0)) -> X(DEQ=1));	#G10
assign sys_safe_err210 = ~(~(reg_i_RtoB_ACK1 & ~i_RtoB_ACK1) | controllable_DEQ);

// G(((RtoB_ACK0=0 + X(RtoB_ACK0=1)) * (RtoB_ACK1=0 + X(RtoB_ACK1=1))) -> X(DEQ=0));	#G10
assign sys_safe_err211 = ~(~((~reg_i_RtoB_ACK0 | i_RtoB_ACK0) & (~reg_i_RtoB_ACK1 | i_RtoB_ACK1)) | ~controllable_DEQ);

// G((FULL=1 * DEQ=0) -> ENQ=0);	#G11
assign sys_safe_err212 = ~(~(i_FULL & ~controllable_DEQ) | ~controllable_ENQ);

// G(EMPTY=1 -> DEQ=0);	#G11
assign sys_safe_err213 = ~( i_nEMPTY | ~controllable_DEQ);

// collecting together the safety error bits:
assign sys_safe_err = sys_safe_err0 |
                      sys_safe_err1 |
                      sys_safe_err2 |
                      sys_safe_err3 |
                      sys_safe_err4 |
                      sys_safe_err5 |
                      sys_safe_err6 |
                      sys_safe_err7 |
                      sys_safe_err8 |
                      sys_safe_err9 |
                      sys_safe_err10 |
                      sys_safe_err11 |
                      sys_safe_err12 |
                      sys_safe_err13 |
                      sys_safe_err14 |
                      sys_safe_err15 |
                      sys_safe_err16 |
                      sys_safe_err17 |
                      sys_safe_err18 |
                      sys_safe_err19 |
                      sys_safe_err20 |
                      sys_safe_err21 |
                      sys_safe_err22 |
                      sys_safe_err23 |
                      sys_safe_err24 |
                      sys_safe_err25 |
                      sys_safe_err26 |
                      sys_safe_err27 |
                      sys_safe_err28 |
                      sys_safe_err29 |
                      sys_safe_err30 |
                      sys_safe_err31 |
                      sys_safe_err32 |
                      sys_safe_err33 |
                      sys_safe_err34 |
                      sys_safe_err35 |
                      sys_safe_err36 |
                      sys_safe_err37 |
                      sys_safe_err38 |
                      sys_safe_err39 |
                      sys_safe_err40 |
                      sys_safe_err41 |
                      sys_safe_err42 |
                      sys_safe_err43 |
                      sys_safe_err44 |
                      sys_safe_err45 |
                      sys_safe_err46 |
                      sys_safe_err47 |
                      sys_safe_err48 |
                      sys_safe_err49 |
                      sys_safe_err50 |
                      sys_safe_err51 |
                      sys_safe_err52 |
                      sys_safe_err53 |
                      sys_safe_err54 |
                      sys_safe_err55 |
                      sys_safe_err56 |
                      sys_safe_err57 |
                      sys_safe_err58 |
                      sys_safe_err59 |
                      sys_safe_err60 |
                      sys_safe_err61 |
                      sys_safe_err62 |
                      sys_safe_err63 |
                      sys_safe_err64 |
                      sys_safe_err65 |
                      sys_safe_err66 |
                      sys_safe_err67 |
                      sys_safe_err68 |
                      sys_safe_err69 |
                      sys_safe_err70 |
                      sys_safe_err71 |
                      sys_safe_err72 |
                      sys_safe_err73 |
                      sys_safe_err74 |
                      sys_safe_err75 |
                      sys_safe_err76 |
                      sys_safe_err77 |
                      sys_safe_err78 |
                      sys_safe_err79 |
                      sys_safe_err80 |
                      sys_safe_err81 |
                      sys_safe_err82 |
                      sys_safe_err83 |
                      sys_safe_err84 |
                      sys_safe_err85 |
                      sys_safe_err86 |
                      sys_safe_err87 |
                      sys_safe_err88 |
                      sys_safe_err89 |
                      sys_safe_err90 |
                      sys_safe_err91 |
                      sys_safe_err92 |
                      sys_safe_err93 |
                      sys_safe_err94 |
                      sys_safe_err95 |
                      sys_safe_err96 |
                      sys_safe_err97 |
                      sys_safe_err98 |
                      sys_safe_err99 |
                      sys_safe_err100 |
                      sys_safe_err101 |
                      sys_safe_err102 |
                      sys_safe_err103 |
                      sys_safe_err104 |
                      sys_safe_err105 |
                      sys_safe_err106 |
                      sys_safe_err107 |
                      sys_safe_err108 |
                      sys_safe_err109 |
                      sys_safe_err110 |
                      sys_safe_err111 |
                      sys_safe_err112 |
                      sys_safe_err113 |
                      sys_safe_err114 |
                      sys_safe_err115 |
                      sys_safe_err116 |
                      sys_safe_err117 |
                      sys_safe_err118 |
                      sys_safe_err119 |
                      sys_safe_err120 |
                      sys_safe_err121 |
                      sys_safe_err122 |
                      sys_safe_err123 |
                      sys_safe_err124 |
                      sys_safe_err125 |
                      sys_safe_err126 |
                      sys_safe_err127 |
                      sys_safe_err128 |
                      sys_safe_err129 |
                      sys_safe_err130 |
                      sys_safe_err131 |
                      sys_safe_err132 |
                      sys_safe_err133 |
                      sys_safe_err134 |
                      sys_safe_err135 |
                      sys_safe_err136 |
                      sys_safe_err137 |
                      sys_safe_err138 |
                      sys_safe_err139 |
                      sys_safe_err140 |
                      sys_safe_err141 |
                      sys_safe_err142 |
                      sys_safe_err143 |
                      sys_safe_err144 |
                      sys_safe_err145 |
                      sys_safe_err146 |
                      sys_safe_err147 |
                      sys_safe_err148 |
                      sys_safe_err149 |
                      sys_safe_err150 |
                      sys_safe_err151 |
                      sys_safe_err152 |
                      sys_safe_err153 |
                      sys_safe_err154 |
                      sys_safe_err155 |
                      sys_safe_err156 |
                      sys_safe_err157 |
                      sys_safe_err158 |
                      sys_safe_err159 |
                      sys_safe_err160 |
                      sys_safe_err161 |
                      sys_safe_err162 |
                      sys_safe_err163 |
                      sys_safe_err164 |
                      sys_safe_err165 |
                      sys_safe_err166 |
                      sys_safe_err167 |
                      sys_safe_err168 |
                      sys_safe_err169 |
                      sys_safe_err170 |
                      sys_safe_err171 |
                      sys_safe_err172 |
                      sys_safe_err173 |
                      sys_safe_err174 |
                      sys_safe_err175 |
                      sys_safe_err176 |
                      sys_safe_err177 |
                      sys_safe_err178 |
                      sys_safe_err179 |
                      sys_safe_err180 |
                      sys_safe_err181 |
                      sys_safe_err182 |
                      sys_safe_err183 |
                      sys_safe_err184 |
                      sys_safe_err185 |
                      sys_safe_err186 |
                      sys_safe_err187 |
                      sys_safe_err188 |
                      sys_safe_err189 |
                      sys_safe_err190 |
                      sys_safe_err191 |
                      sys_safe_err192 |
                      sys_safe_err193 |
                      sys_safe_err194 |
                      sys_safe_err195 |
                      sys_safe_err196 |
                      sys_safe_err197 |
                      sys_safe_err198 |
                      sys_safe_err199 |
                      sys_safe_err200 |
                      sys_safe_err201 |
                      sys_safe_err202 |
                      sys_safe_err203 |
                      sys_safe_err204 |
                      sys_safe_err205 |
                      sys_safe_err206 |
                      sys_safe_err207 |
                      sys_safe_err208 |
                      sys_safe_err209 |
                      sys_safe_err210 |
                      sys_safe_err211 |
                      sys_safe_err212 |
                      sys_safe_err213;

// =============================================================
//                          ENV_FAIRNESS:
// =============================================================
// G(F(BtoR_REQ0=1 <-> RtoB_ACK0=1));	#A2
assign env_fair0 = controllable_BtoR_REQ0 ^~ i_RtoB_ACK0;

// G(F(BtoR_REQ1=1 <-> RtoB_ACK1=1));	#A2
assign env_fair1 = controllable_BtoR_REQ1 ^~ i_RtoB_ACK1;


// =============================================================
//                          SYS_FAIRNESS:
// =============================================================
// G(F(StoB_REQ0=1 <-> BtoS_ACK0=1));	#G1+G2
assign sys_fair0 = i_StoB_REQ0 ^~ controllable_BtoS_ACK0;

// G(F(StoB_REQ1=1 <-> BtoS_ACK1=1));	#G1+G2
assign sys_fair1 = i_StoB_REQ1 ^~ controllable_BtoS_ACK1;

// G(F(StoB_REQ2=1 <-> BtoS_ACK2=1));	#G1+G2
assign sys_fair2 = i_StoB_REQ2 ^~ controllable_BtoS_ACK2;

// G(F(StoB_REQ3=1 <-> BtoS_ACK3=1));	#G1+G2
assign sys_fair3 = i_StoB_REQ3 ^~ controllable_BtoS_ACK3;

// G(F(StoB_REQ4=1 <-> BtoS_ACK4=1));	#G1+G2
assign sys_fair4 = i_StoB_REQ4 ^~ controllable_BtoS_ACK4;

// G(F(StoB_REQ5=1 <-> BtoS_ACK5=1));	#G1+G2
assign sys_fair5 = i_StoB_REQ5 ^~ controllable_BtoS_ACK5;

// G(F(StoB_REQ6=1 <-> BtoS_ACK6=1));	#G1+G2
assign sys_fair6 = i_StoB_REQ6 ^~ controllable_BtoS_ACK6;

// G(F(StoB_REQ7=1 <-> BtoS_ACK7=1));	#G1+G2
assign sys_fair7 = i_StoB_REQ7 ^~ controllable_BtoS_ACK7;

// G(F(StoB_REQ8=1 <-> BtoS_ACK8=1));	#G1+G2
assign sys_fair8 = i_StoB_REQ8 ^~ controllable_BtoS_ACK8;

// G(F(StoB_REQ9=1 <-> BtoS_ACK9=1));	#G1+G2
assign sys_fair9 = i_StoB_REQ9 ^~ controllable_BtoS_ACK9;

// G(F(StoB_REQ10=1 <-> BtoS_ACK10=1));	#G1+G2
assign sys_fair10 = i_StoB_REQ10 ^~ controllable_BtoS_ACK10;

// G(F(StoB_REQ11=1 <-> BtoS_ACK11=1));	#G1+G2
assign sys_fair11 = i_StoB_REQ11 ^~ controllable_BtoS_ACK11;

// G(F(StoB_REQ12=1 <-> BtoS_ACK12=1));	#G1+G2
assign sys_fair12 = i_StoB_REQ12 ^~ controllable_BtoS_ACK12;

// G(F(StoB_REQ13=1 <-> BtoS_ACK13=1));	#G1+G2
assign sys_fair13 = i_StoB_REQ13 ^~ controllable_BtoS_ACK13;

// G(F(StoB_REQ14=1 <-> BtoS_ACK14=1));	#G1+G2
assign sys_fair14 = i_StoB_REQ14 ^~ controllable_BtoS_ACK14;

// G(F(StoB_REQ15=1 <-> BtoS_ACK15=1));	#G1+G2
assign sys_fair15 = i_StoB_REQ15 ^~ controllable_BtoS_ACK15;

// G(F(stateG12=0));	#G12
assign sys_fair16 = ~reg_stateG12;

assign fair_err = (fair_cnt >= 5'b10100);

// computing the error output bit:
assign o_err = ~env_safe_err & ~env_safe_err_happened & (sys_safe_err | fair_err);
initial
 begin
  reg_i_StoB_REQ0 = 0;
  reg_controllable_BtoS_ACK0 = 0;
  reg_i_StoB_REQ1 = 0;
  reg_controllable_BtoS_ACK1 = 0;
  reg_i_StoB_REQ2 = 0;
  reg_controllable_BtoS_ACK2 = 0;
  reg_i_StoB_REQ3 = 0;
  reg_controllable_BtoS_ACK3 = 0;
  reg_i_StoB_REQ4 = 0;
  reg_controllable_BtoS_ACK4 = 0;
  reg_i_StoB_REQ5 = 0;
  reg_controllable_BtoS_ACK5 = 0;
  reg_i_StoB_REQ6 = 0;
  reg_controllable_BtoS_ACK6 = 0;
  reg_i_StoB_REQ7 = 0;
  reg_controllable_BtoS_ACK7 = 0;
  reg_i_StoB_REQ8 = 0;
  reg_controllable_BtoS_ACK8 = 0;
  reg_i_StoB_REQ9 = 0;
  reg_controllable_BtoS_ACK9 = 0;
  reg_i_StoB_REQ10 = 0;
  reg_controllable_BtoS_ACK10 = 0;
  reg_i_StoB_REQ11 = 0;
  reg_controllable_BtoS_ACK11 = 0;
  reg_i_StoB_REQ12 = 0;
  reg_controllable_BtoS_ACK12 = 0;
  reg_i_StoB_REQ13 = 0;
  reg_controllable_BtoS_ACK13 = 0;
  reg_i_StoB_REQ14 = 0;
  reg_controllable_BtoS_ACK14 = 0;
  reg_i_StoB_REQ15 = 0;
  reg_controllable_BtoS_ACK15 = 0;
  reg_i_RtoB_ACK0 = 0;
  reg_controllable_BtoR_REQ0 = 0;
  reg_i_RtoB_ACK1 = 0;
  reg_controllable_BtoR_REQ1 = 0;
  reg_i_FULL = 0;
  reg_i_nEMPTY = 0;
  reg_controllable_ENQ = 0;
  reg_controllable_DEQ = 0;
  reg_controllable_SLC0 = 0;
  reg_controllable_SLC1 = 0;
  reg_controllable_SLC2 = 0;
  reg_controllable_SLC3 = 0;
  reg_stateG7_0 = 0;
  reg_nstateG7_1 = 0;
  reg_stateG12 = 0;
  env_safe_err_happened = 0;
  next_env_fair = 0;
  fair_cnt = 0;
  next_sys_fair = 0;
 end


always @(posedge i_clk)
 begin
   // We remember if an environment error occurred:
   env_safe_err_happened = env_safe_err_happened | env_safe_err;

   // Updating the fairness counters: 
   if((next_sys_fair == 0) & sys_fair0)
    begin
      next_sys_fair = 1;
      next_env_fair = 0;
      fair_cnt = 0;
    end
   else if((next_sys_fair == 1) & sys_fair1)
    begin
      next_sys_fair = 2;
      next_env_fair = 0;
      fair_cnt = 0;
    end
   else if((next_sys_fair == 2) & sys_fair2)
    begin
      next_sys_fair = 3;
      next_env_fair = 0;
      fair_cnt = 0;
    end
   else if((next_sys_fair == 3) & sys_fair3)
    begin
      next_sys_fair = 4;
      next_env_fair = 0;
      fair_cnt = 0;
    end
   else if((next_sys_fair == 4) & sys_fair4)
    begin
      next_sys_fair = 5;
      next_env_fair = 0;
      fair_cnt = 0;
    end
   else if((next_sys_fair == 5) & sys_fair5)
    begin
      next_sys_fair = 6;
      next_env_fair = 0;
      fair_cnt = 0;
    end
   else if((next_sys_fair == 6) & sys_fair6)
    begin
      next_sys_fair = 7;
      next_env_fair = 0;
      fair_cnt = 0;
    end
   else if((next_sys_fair == 7) & sys_fair7)
    begin
      next_sys_fair = 8;
      next_env_fair = 0;
      fair_cnt = 0;
    end
   else if((next_sys_fair == 8) & sys_fair8)
    begin
      next_sys_fair = 9;
      next_env_fair = 0;
      fair_cnt = 0;
    end
   else if((next_sys_fair == 9) & sys_fair9)
    begin
      next_sys_fair = 10;
      next_env_fair = 0;
      fair_cnt = 0;
    end
   else if((next_sys_fair == 10) & sys_fair10)
    begin
      next_sys_fair = 11;
      next_env_fair = 0;
      fair_cnt = 0;
    end
   else if((next_sys_fair == 11) & sys_fair11)
    begin
      next_sys_fair = 12;
      next_env_fair = 0;
      fair_cnt = 0;
    end
   else if((next_sys_fair == 12) & sys_fair12)
    begin
      next_sys_fair = 13;
      next_env_fair = 0;
      fair_cnt = 0;
    end
   else if((next_sys_fair == 13) & sys_fair13)
    begin
      next_sys_fair = 14;
      next_env_fair = 0;
      fair_cnt = 0;
    end
   else if((next_sys_fair == 14) & sys_fair14)
    begin
      next_sys_fair = 15;
      next_env_fair = 0;
      fair_cnt = 0;
    end
   else if((next_sys_fair == 15) & sys_fair15)
    begin
      next_sys_fair = 16;
      next_env_fair = 0;
      fair_cnt = 0;
    end
   else if((next_sys_fair == 16) & sys_fair16)
    begin
      next_sys_fair = 0;
      next_env_fair = 0;
      fair_cnt = 0;
    end
   else if(~next_env_fair & env_fair0)
    begin
      next_env_fair = 1;
    end
   else if(next_env_fair & env_fair1)
    begin
      next_env_fair = 0;
      fair_cnt = fair_cnt + 1;
    end

   // Updating the automata: 
   // Automaton G7: 
   if(reg_nstateG7_1 & ~reg_controllable_BtoR_REQ0 & reg_controllable_BtoR_REQ1)
    begin
      reg_nstateG7_1 = 1'b0;
      reg_stateG7_0 = 1'b0;
    end
   else if(~reg_nstateG7_1 & reg_controllable_BtoR_REQ0 & ~reg_controllable_BtoR_REQ1)
    begin
      reg_nstateG7_1 = 1'b1;
      reg_stateG7_0 = 1'b0;
    end
   else if(reg_nstateG7_1 & ~reg_controllable_BtoR_REQ0 & ~reg_controllable_BtoR_REQ1)
    begin
      reg_nstateG7_1 = 1'b1;
      reg_stateG7_0 = 1'b1;
    end
   else if(~reg_nstateG7_1 & ~reg_controllable_BtoR_REQ0 & ~reg_controllable_BtoR_REQ1)
    begin
      reg_nstateG7_1 = 1'b0;
      reg_stateG7_0 = 1'b1;
    end

   // Automaton G12: 
   if(~reg_stateG12 & reg_i_nEMPTY & ~reg_controllable_DEQ)
      reg_stateG12 = 1'b1;
   else if(reg_stateG12 & reg_controllable_DEQ)
      reg_stateG12 = 1'b0;

   // Latching the previous input:
   reg_i_StoB_REQ0 =  i_StoB_REQ0;
   reg_controllable_BtoS_ACK0 =  controllable_BtoS_ACK0;
   reg_i_StoB_REQ1 =  i_StoB_REQ1;
   reg_controllable_BtoS_ACK1 =  controllable_BtoS_ACK1;
   reg_i_StoB_REQ2 =  i_StoB_REQ2;
   reg_controllable_BtoS_ACK2 =  controllable_BtoS_ACK2;
   reg_i_StoB_REQ3 =  i_StoB_REQ3;
   reg_controllable_BtoS_ACK3 =  controllable_BtoS_ACK3;
   reg_i_StoB_REQ4 =  i_StoB_REQ4;
   reg_controllable_BtoS_ACK4 =  controllable_BtoS_ACK4;
   reg_i_StoB_REQ5 =  i_StoB_REQ5;
   reg_controllable_BtoS_ACK5 =  controllable_BtoS_ACK5;
   reg_i_StoB_REQ6 =  i_StoB_REQ6;
   reg_controllable_BtoS_ACK6 =  controllable_BtoS_ACK6;
   reg_i_StoB_REQ7 =  i_StoB_REQ7;
   reg_controllable_BtoS_ACK7 =  controllable_BtoS_ACK7;
   reg_i_StoB_REQ8 =  i_StoB_REQ8;
   reg_controllable_BtoS_ACK8 =  controllable_BtoS_ACK8;
   reg_i_StoB_REQ9 =  i_StoB_REQ9;
   reg_controllable_BtoS_ACK9 =  controllable_BtoS_ACK9;
   reg_i_StoB_REQ10 =  i_StoB_REQ10;
   reg_controllable_BtoS_ACK10 =  controllable_BtoS_ACK10;
   reg_i_StoB_REQ11 =  i_StoB_REQ11;
   reg_controllable_BtoS_ACK11 =  controllable_BtoS_ACK11;
   reg_i_StoB_REQ12 =  i_StoB_REQ12;
   reg_controllable_BtoS_ACK12 =  controllable_BtoS_ACK12;
   reg_i_StoB_REQ13 =  i_StoB_REQ13;
   reg_controllable_BtoS_ACK13 =  controllable_BtoS_ACK13;
   reg_i_StoB_REQ14 =  i_StoB_REQ14;
   reg_controllable_BtoS_ACK14 =  controllable_BtoS_ACK14;
   reg_i_StoB_REQ15 =  i_StoB_REQ15;
   reg_controllable_BtoS_ACK15 =  controllable_BtoS_ACK15;
   reg_i_RtoB_ACK0 =  i_RtoB_ACK0;
   reg_controllable_BtoR_REQ0 =  controllable_BtoR_REQ0;
   reg_i_RtoB_ACK1 =  i_RtoB_ACK1;
   reg_controllable_BtoR_REQ1 =  controllable_BtoR_REQ1;
   reg_i_FULL =  i_FULL;
   reg_i_nEMPTY =  i_nEMPTY;
   reg_controllable_ENQ =  controllable_ENQ;
   reg_controllable_DEQ =  controllable_DEQ;
   reg_controllable_SLC0 =  controllable_SLC0;
   reg_controllable_SLC1 =  controllable_SLC1;
   reg_controllable_SLC2 =  controllable_SLC2;
   reg_controllable_SLC3 =  controllable_SLC3;

 end
endmodule

-------------------------------
#!SYNTCOMP
STATUS : realizable
SOLVED_BY : 3/3 [2015-pre-classification]
SOLVED_IN : 1.24048 [2015-pre-classification]
#.
